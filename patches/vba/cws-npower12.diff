From 94c9c62a19580ce3f02785c9f07430093aa83cf6 Mon Sep 17 00:00:00 2001
From: Jan Holesovsky <kendy@suse.cz>
Date: Fri, 14 May 2010 16:59:49 +0200
Subject: [PATCH 389/878] cws-npower12.diff

---
 basic/inc/basic/basmgr.hxx                         |    2 +
 basic/inc/basic/sbstar.hxx                         |    9 +
 basic/source/basmgr/basmgr.cxx                     |   10 +
 basic/source/classes/sb.cxx                        |   42 +
 basic/source/classes/sbxmod.cxx                    |   73 ++
 basic/source/runtime/step2.cxx                     |   53 +-
 comphelper/inc/comphelper/servicedecl.hxx          |   60 +-
 oovbaapi/genconstidl/makefile.mk                   |    6 +-
 oovbaapi/ooo/vba/ControlProvider.idl               |   53 +
 oovbaapi/ooo/vba/Globals.idl                       |   45 -
 oovbaapi/ooo/vba/XApplicationBase.idl              |   66 ++
 oovbaapi/ooo/vba/XCommandBar.idl                   |    3 +
 oovbaapi/ooo/vba/XCommandBarButton.idl             |   52 +
 oovbaapi/ooo/vba/XCommandBarControl.idl            |    2 +
 oovbaapi/ooo/vba/XCommandBarPopup.idl              |   52 +
 oovbaapi/ooo/vba/XControlProvider.idl              |   63 +
 oovbaapi/ooo/vba/XDialogBase.idl                   |   57 +
 oovbaapi/ooo/vba/XDialogsBase.idl                  |   59 +
 oovbaapi/ooo/vba/XDocumentBase.idl                 |   67 ++
 oovbaapi/ooo/vba/XDocumentProperties.idl           |   70 ++
 oovbaapi/ooo/vba/XDocumentProperty.idl             |  105 ++
 oovbaapi/ooo/vba/XDocumentsBase.idl                |   55 +
 oovbaapi/ooo/vba/XFontBase.idl                     |   69 ++
 oovbaapi/ooo/vba/XGlobals.idl                      |   64 -
 oovbaapi/ooo/vba/XGlobalsBase.idl                  |   51 +
 oovbaapi/ooo/vba/XPageSetupBase.idl                |   65 ++
 oovbaapi/ooo/vba/XWindowBase.idl                   |   62 +
 oovbaapi/ooo/vba/excel/Globals.idl                 |   48 +
 oovbaapi/ooo/vba/excel/TextFrame.idl               |   53 +
 oovbaapi/ooo/vba/excel/XApplication.idl            |   14 +-
 oovbaapi/ooo/vba/excel/XDialog.idl                 |    7 +-
 oovbaapi/ooo/vba/excel/XDialogs.idl                |   11 +-
 oovbaapi/ooo/vba/excel/XFont.idl                   |   13 -
 oovbaapi/ooo/vba/excel/XGlobals.idl                |   84 ++
 oovbaapi/ooo/vba/excel/XPageSetup.idl              |    9 +-
 oovbaapi/ooo/vba/excel/XTextFrame.idl              |   14 +-
 oovbaapi/ooo/vba/excel/XVPageBreak.idl             |   52 +
 oovbaapi/ooo/vba/excel/XVPageBreaks.idl            |   69 ++
 oovbaapi/ooo/vba/excel/XWindow.idl                 |    9 +-
 oovbaapi/ooo/vba/excel/XWorkbook.idl               |   17 +-
 oovbaapi/ooo/vba/excel/XWorkbooks.idl              |    3 +-
 oovbaapi/ooo/vba/excel/XWorksheet.idl              |    3 +
 oovbaapi/ooo/vba/excel/makefile.mk                 |    7 +-
 oovbaapi/ooo/vba/makefile.mk                       |   17 +-
 oovbaapi/ooo/vba/msforms/XControl.idl              |    1 +
 oovbaapi/ooo/vba/msforms/XShape.idl                |   17 +-
 oovbaapi/ooo/vba/msforms/XShapeRange.idl           |   16 +
 oovbaapi/ooo/vba/msforms/XShapes.idl               |    1 +
 oovbaapi/ooo/vba/msforms/XTextFrame.idl            |   50 +
 oovbaapi/ooo/vba/msforms/makefile.mk               |    1 +
 oovbaapi/ooo/vba/word/XAddin.idl                   |   59 +
 oovbaapi/ooo/vba/word/XAddins.idl                  |   55 +
 oovbaapi/ooo/vba/word/XApplication.idl             |   68 ++
 oovbaapi/ooo/vba/word/XAutoTextEntries.idl         |   55 +
 oovbaapi/ooo/vba/word/XAutoTextEntry.idl           |   57 +
 oovbaapi/ooo/vba/word/XBookmark.idl                |   59 +
 oovbaapi/ooo/vba/word/XBookmarks.idl               |   61 +
 oovbaapi/ooo/vba/word/XBorder.idl                  |   57 +
 oovbaapi/ooo/vba/word/XBorders.idl                 |   57 +
 oovbaapi/ooo/vba/word/XDialog.idl                  |   54 +
 oovbaapi/ooo/vba/word/XDialogs.idl                 |   53 +
 oovbaapi/ooo/vba/word/XDocument.idl                |   73 ++
 oovbaapi/ooo/vba/word/XDocuments.idl               |   58 +
 oovbaapi/ooo/vba/word/XField.idl                   |   51 +
 oovbaapi/ooo/vba/word/XFields.idl                  |   61 +
 oovbaapi/ooo/vba/word/XFind.idl                    |   85 ++
 oovbaapi/ooo/vba/word/XFont.idl                    |   56 +
 oovbaapi/ooo/vba/word/XGlobals.idl                 |   60 +
 oovbaapi/ooo/vba/word/XHeaderFooter.idl            |   57 +
 oovbaapi/ooo/vba/word/XOptions.idl                 |   66 ++
 oovbaapi/ooo/vba/word/XPageSetup.idl               |   61 +
 oovbaapi/ooo/vba/word/XPane.idl                    |   53 +
 oovbaapi/ooo/vba/word/XPanes.idl                   |   55 +
 oovbaapi/ooo/vba/word/XParagraph.idl               |   53 +
 oovbaapi/ooo/vba/word/XParagraphFormat.idl         |   68 ++
 oovbaapi/ooo/vba/word/XParagraphs.idl              |   55 +
 oovbaapi/ooo/vba/word/XRange.idl                   |   76 ++
 oovbaapi/ooo/vba/word/XReplacement.idl             |   52 +
 oovbaapi/ooo/vba/word/XSection.idl                 |   56 +
 oovbaapi/ooo/vba/word/XSections.idl                |   57 +
 oovbaapi/ooo/vba/word/XSelection.idl               |   87 ++
 oovbaapi/ooo/vba/word/XStyle.idl                   |   56 +
 oovbaapi/ooo/vba/word/XStyles.idl                  |   55 +
 oovbaapi/ooo/vba/word/XSystem.idl                  |   54 +
 oovbaapi/ooo/vba/word/XTable.idl                   |   85 ++
 oovbaapi/ooo/vba/word/XTables.idl                  |   78 ++
 oovbaapi/ooo/vba/word/XTemplate.idl                |   54 +
 oovbaapi/ooo/vba/word/XVariable.idl                |   58 +
 oovbaapi/ooo/vba/word/XVariables.idl               |   57 +
 oovbaapi/ooo/vba/word/XView.idl                    |   55 +
 oovbaapi/ooo/vba/word/XWindow.idl                  |   60 +
 oovbaapi/ooo/vba/word/XWrapFormat.idl              |   48 +
 oovbaapi/ooo/vba/word/makefile.mk                  |   89 ++
 oovbaapi/prj/build.lst                             |    3 +-
 oovbaapi/util/makefile.mk                          |    1 +
 sc/inc/cellsuno.hxx                                |    4 +-
 sc/prj/build.lst                                   |    2 +-
 sc/source/filter/excel/excimp8.cxx                 |   16 +-
 sc/source/ui/docshell/docsh.cxx                    |   23 +-
 sc/source/ui/docshell/docsh2.cxx                   |   24 +-
 sc/source/ui/inc/tabview.hxx                       |    2 +-
 sc/source/ui/inc/viewdata.hxx                      |    3 +
 sc/source/ui/vba/excelvbahelper.cxx                |  222 ++++
 sc/source/ui/vba/excelvbahelper.hxx                |   62 +
 sc/source/ui/vba/helperdecl.hxx                    |  108 +--
 sc/source/ui/vba/makefile.mk                       |   33 +-
 sc/source/ui/vba/service.cxx                       |   22 +-
 .../logs/excel/AutoFilter.log                      |   20 +
 .../logs/excel/MiscRangeTests.log                  |   45 +
 .../logs/excel/Ranges-2.log                        |   68 ++
 .../logs/excel/Ranges-3.log                        |    8 +
 .../TestDocuments-ooo-build/logs/excel/Ranges.log  |  280 +++++
 .../logs/excel/TestAddress.log                     |   62 +
 .../logs/excel/TestCalc_Rangetest.log              |   60 +
 .../logs/excel/TestCalc_Rangetest2.log             |   64 +
 .../TestDocuments-ooo-build/logs/format.log        |   36 +
 .../logs/unix/AutoFilter.log                       |   20 +
 .../TestDocuments-ooo-build/logs/unix/CalcFont.log |   17 +
 .../TestDocuments-ooo-build/logs/unix/CalcZoom.log |   18 +
 .../logs/unix/FinancialFuncTests.log               |   31 +
 .../logs/unix/MiscOperatorTests.log                |   30 +
 .../logs/unix/MiscRangeTests.log                   |   45 +
 .../logs/unix/PageBreaks.log                       |   10 +
 .../TestDocuments-ooo-build/logs/unix/Ranges-2.log |   68 ++
 .../TestDocuments-ooo-build/logs/unix/Ranges-3.log |    8 +
 .../TestDocuments-ooo-build/logs/unix/Ranges.log   |  280 +++++
 .../TestDocuments-ooo-build/logs/unix/Shapes.log   |   77 ++
 .../logs/unix/StrConv-test.log                     |    9 +
 .../TestDocuments-ooo-build/logs/unix/Template.log |   14 +
 .../logs/unix/TestAddress.log                      |   67 ++
 .../logs/unix/TestCalc_Rangetest.log               |   60 +
 .../logs/unix/TestCalc_Rangetest2.log              |   65 ++
 .../logs/unix/TestIntersection.log                 |   26 +
 .../logs/unix/TestUnion.log                        |   17 +
 .../logs/unix/VariantTest.log                      |   47 +
 .../TestDocuments-ooo-build/logs/unix/Window.log   |   46 +
 .../logs/unix/bytearraystring.log                  |    8 +
 .../logs/unix/dateserial.log                       |    9 +
 .../logs/unix/datevalue.log                        |    8 +
 .../TestDocuments-ooo-build/logs/unix/format.log   |   36 +
 .../logs/unix/pagesetup.log                        |   77 ++
 .../logs/unix/partition.log                        |   11 +
 .../TestDocuments-ooo-build/logs/unix/range-4.log  |   16 +
 .../TestDocuments-ooo-build/logs/unix/replace.log  |   14 +
 .../logs/unix/stringplusdouble.log                 |   62 +
 .../TestDocuments-ooo-build/logs/unix/window2.log  |   41 +
 .../logs/win/AutoFilter.log                        |   20 +
 .../TestDocuments-ooo-build/logs/win/CalcFont.log  |   17 +
 .../logs/win/MiscOperatorTests.log                 |   29 +
 .../logs/win/MiscRangeTests.log                    |   45 +
 .../logs/win/PageBreaks.log                        |   10 +
 .../TestDocuments-ooo-build/logs/win/Ranges-2.log  |   68 ++
 .../TestDocuments-ooo-build/logs/win/Ranges-3.log  |    8 +
 .../TestDocuments-ooo-build/logs/win/Ranges.log    |  280 +++++
 .../TestDocuments-ooo-build/logs/win/Shapes.log    |   77 ++
 .../logs/win/StrConv-test.log                      |    9 +
 .../TestDocuments-ooo-build/logs/win/Template.log  |   14 +
 .../logs/win/TestAddress.log                       |   67 ++
 .../logs/win/TestCalc_Rangetest.log                |   60 +
 .../logs/win/TestCalc_Rangetest2.log               |   65 ++
 .../logs/win/TestIntersection.log                  |   26 +
 .../TestDocuments-ooo-build/logs/win/TestUnion.log |   17 +
 .../logs/win/VariantTest.log                       |   47 +
 .../TestDocuments-ooo-build/logs/win/Window.log    |   46 +
 .../logs/win/bytearraystring.log                   |    8 +
 .../logs/win/dateserial.log                        |    9 +
 .../TestDocuments-ooo-build/logs/win/datevalue.log |    8 +
 .../TestDocuments-ooo-build/logs/win/format.log    |   36 +
 .../TestDocuments-ooo-build/logs/win/pagesetup.log |   87 ++
 .../TestDocuments-ooo-build/logs/win/partition.log |   11 +
 .../TestDocuments-ooo-build/logs/win/range-4.log   |   16 +
 .../TestDocuments-ooo-build/logs/win/replace.log   |   14 +
 .../logs/win/stringplusdouble.log                  |   62 +
 .../TestDocuments-ooo-build/logs/win/window2.log   |   41 +
 .../testvba/TestDocuments/logs/unix/CalcFont.log   |   17 +
 .../vba/testvba/TestDocuments/logs/unix/Ranges.log |   20 +-
 .../TestDocuments/logs/unix/TestAddress.log        |   11 +-
 .../TestDocuments/logs/unix/TestIntersection.log   |   26 +
 .../testvba/TestDocuments/logs/unix/TestUnion.log  |   17 +
 .../vba/testvba/TestDocuments/logs/unix/format.log |    4 +-
 .../testvba/TestDocuments/logs/unix/replace.log    |    4 +-
 .../testvba/TestDocuments/logs/unix/window2.log    |   24 +-
 sc/source/ui/vba/testvba/runTests.pl               |    2 +-
 sc/source/ui/vba/vbaapplication.cxx                |  286 ++----
 sc/source/ui/vba/vbaapplication.hxx                |   21 +-
 sc/source/ui/vba/vbaassistant.hxx                  |    4 +-
 sc/source/ui/vba/vbaaxes.hxx                       |    2 +-
 sc/source/ui/vba/vbaaxis.hxx                       |    4 +-
 sc/source/ui/vba/vbaborders.hxx                    |    2 +-
 sc/source/ui/vba/vbabutton.cxx                     |   71 --
 sc/source/ui/vba/vbabutton.hxx                     |   48 -
 sc/source/ui/vba/vbacharacters.hxx                 |    2 +-
 sc/source/ui/vba/vbachart.hxx                      |    2 +-
 sc/source/ui/vba/vbachartobject.cxx                |    7 +-
 sc/source/ui/vba/vbachartobject.hxx                |    2 +-
 sc/source/ui/vba/vbachartobjects.hxx               |    4 +-
 sc/source/ui/vba/vbacharts.cxx                     |    6 +-
 sc/source/ui/vba/vbacharts.hxx                     |    6 +-
 sc/source/ui/vba/vbacheckbox.cxx                   |  102 --
 sc/source/ui/vba/vbacheckbox.hxx                   |   52 -
 sc/source/ui/vba/vbacollectionimpl.cxx             |  133 ---
 sc/source/ui/vba/vbacollectionimpl.hxx             |  256 -----
 sc/source/ui/vba/vbacolorformat.cxx                |  187 ---
 sc/source/ui/vba/vbacolorformat.hxx                |  125 --
 sc/source/ui/vba/vbacombobox.cxx                   |  172 ---
 sc/source/ui/vba/vbacombobox.hxx                   |   77 --
 sc/source/ui/vba/vbacommandbar.cxx                 |  321 ------
 sc/source/ui/vba/vbacommandbar.hxx                 |   93 --
 sc/source/ui/vba/vbacommandbarcontrol.cxx          |  395 -------
 sc/source/ui/vba/vbacommandbarcontrol.hxx          |   82 --
 sc/source/ui/vba/vbacommandbarcontrols.cxx         |  238 ----
 sc/source/ui/vba/vbacommandbarcontrols.hxx         |   82 --
 sc/source/ui/vba/vbacommandbars.cxx                |  239 ----
 sc/source/ui/vba/vbacommandbars.hxx                |   71 --
 sc/source/ui/vba/vbacomment.hxx                    |    2 +-
 sc/source/ui/vba/vbacomments.hxx                   |    4 +-
 sc/source/ui/vba/vbacondition.hxx                  |    2 +-
 sc/source/ui/vba/vbacontrol.cxx                    |  465 --------
 sc/source/ui/vba/vbacontrol.hxx                    |  108 --
 sc/source/ui/vba/vbacontrols.cxx                   |  224 ----
 sc/source/ui/vba/vbacontrols.hxx                   |   59 -
 sc/source/ui/vba/vbadialog.cxx                     |   32 +-
 sc/source/ui/vba/vbadialog.hxx                     |   17 +-
 sc/source/ui/vba/vbadialogs.cxx                    |   25 +-
 sc/source/ui/vba/vbadialogs.hxx                    |   13 +-
 sc/source/ui/vba/vbafillformat.cxx                 |  199 ----
 sc/source/ui/vba/vbafillformat.hxx                 |   71 --
 sc/source/ui/vba/vbafont.cxx                       |  140 +--
 sc/source/ui/vba/vbafont.hxx                       |   15 +-
 sc/source/ui/vba/vbaformat.cxx                     |    5 +-
 sc/source/ui/vba/vbaformat.hxx                     |    2 +-
 sc/source/ui/vba/vbaformatconditions.cxx           |    3 +-
 sc/source/ui/vba/vbaformatconditions.hxx           |    2 +-
 sc/source/ui/vba/vbaframe.cxx                      |   85 --
 sc/source/ui/vba/vbaframe.hxx                      |   50 -
 sc/source/ui/vba/vbaglobals.cxx                    |  204 +++-
 sc/source/ui/vba/vbaglobals.hxx                    |   52 +-
 sc/source/ui/vba/vbahelper.cxx                     |  825 --------------
 sc/source/ui/vba/vbahelper.hxx                     |  349 ------
 sc/source/ui/vba/vbahelperinterface.hxx            |  113 --
 sc/source/ui/vba/vbahyperlink.cxx                  |    2 +-
 sc/source/ui/vba/vbahyperlink.hxx                  |    2 +-
 sc/source/ui/vba/vbaimage.cxx                      |   56 -
 sc/source/ui/vba/vbaimage.hxx                      |   45 -
 sc/source/ui/vba/vbainterior.cxx                   |   28 +-
 sc/source/ui/vba/vbainterior.hxx                   |    3 +-
 sc/source/ui/vba/vbalabel.cxx                      |   85 --
 sc/source/ui/vba/vbalabel.hxx                      |   53 -
 sc/source/ui/vba/vbalineformat.cxx                 |  455 --------
 sc/source/ui/vba/vbalineformat.hxx                 |   82 --
 sc/source/ui/vba/vbalistbox.cxx                    |  286 -----
 sc/source/ui/vba/vbalistbox.hxx                    |   87 --
 sc/source/ui/vba/vbalistcontrolhelper.cxx          |  145 ---
 sc/source/ui/vba/vbalistcontrolhelper.hxx          |   20 -
 sc/source/ui/vba/vbamultipage.cxx                  |  124 --
 sc/source/ui/vba/vbamultipage.hxx                  |   57 -
 sc/source/ui/vba/vbaname.cxx                       |    7 +-
 sc/source/ui/vba/vbaname.hxx                       |    4 +-
 sc/source/ui/vba/vbanames.cxx                      |    4 +-
 sc/source/ui/vba/vbanames.hxx                      |    5 +-
 sc/source/ui/vba/vbaoleobject.cxx                  |   56 +-
 sc/source/ui/vba/vbaoleobject.hxx                  |    6 +-
 sc/source/ui/vba/vbaoleobjects.hxx                 |    4 +-
 sc/source/ui/vba/vbaoutline.hxx                    |    2 +-
 sc/source/ui/vba/vbapagebreak.cxx                  |   33 +
 sc/source/ui/vba/vbapagebreak.hxx                  |   21 +-
 sc/source/ui/vba/vbapagebreaks.cxx                 |   72 ++-
 sc/source/ui/vba/vbapagebreaks.hxx                 |   33 +-
 sc/source/ui/vba/vbapages.cxx                      |   73 --
 sc/source/ui/vba/vbapages.hxx                      |   56 -
 sc/source/ui/vba/vbapagesetup.cxx                  |  285 +-----
 sc/source/ui/vba/vbapagesetup.hxx                  |   25 +-
 sc/source/ui/vba/vbapalette.cxx                    |    2 +-
 sc/source/ui/vba/vbapalette.hxx                    |    4 +-
 sc/source/ui/vba/vbapane.hxx                       |    2 +-
 sc/source/ui/vba/vbapictureformat.cxx              |  144 ---
 sc/source/ui/vba/vbapictureformat.hxx              |   61 -
 sc/source/ui/vba/vbapivotcache.hxx                 |    2 +-
 sc/source/ui/vba/vbapivottable.hxx                 |    4 +-
 sc/source/ui/vba/vbapivottables.hxx                |    6 +-
 sc/source/ui/vba/vbaprogressbar.cxx                |   70 --
 sc/source/ui/vba/vbaprogressbar.hxx                |   51 -
 sc/source/ui/vba/vbapropvalue.hxx                  |    2 +-
 sc/source/ui/vba/vbaradiobutton.cxx                |  104 --
 sc/source/ui/vba/vbaradiobutton.hxx                |   52 -
 sc/source/ui/vba/vbarange.cxx                      |  108 ++-
 sc/source/ui/vba/vbarange.hxx                      |    5 +-
 sc/source/ui/vba/vbascrollbar.cxx                  |  131 ---
 sc/source/ui/vba/vbascrollbar.hxx                  |   58 -
 sc/source/ui/vba/vbaseriescollection.hxx           |    6 +-
 sc/source/ui/vba/vbashape.cxx                      |  477 --------
 sc/source/ui/vba/vbashape.hxx                      |  105 --
 sc/source/ui/vba/vbashaperange.cxx                 |  167 ---
 sc/source/ui/vba/vbashaperange.hxx                 |   63 -
 sc/source/ui/vba/vbashapes.cxx                     |  391 -------
 sc/source/ui/vba/vbashapes.hxx                     |   77 --
 sc/source/ui/vba/vbaspinbutton.cxx                 |  101 --
 sc/source/ui/vba/vbaspinbutton.hxx                 |   53 -
 sc/source/ui/vba/vbastyle.cxx                      |    4 +-
 sc/source/ui/vba/vbastyles.cxx                     |    1 +
 sc/source/ui/vba/vbastyles.hxx                     |    2 +-
 sc/source/ui/vba/vbatextbox.cxx                    |  134 ---
 sc/source/ui/vba/vbatextbox.hxx                    |   54 -
 sc/source/ui/vba/vbatextboxshape.cxx               |    4 +-
 sc/source/ui/vba/vbatextboxshape.hxx               |    4 +-
 sc/source/ui/vba/vbatextframe.cxx                  |  118 +--
 sc/source/ui/vba/vbatextframe.hxx                  |   40 +-
 sc/source/ui/vba/vbatitle.hxx                      |    5 +-
 sc/source/ui/vba/vbatogglebutton.cxx               |  100 --
 sc/source/ui/vba/vbatogglebutton.hxx               |   55 -
 sc/source/ui/vba/vbauserform.cxx                   |  220 ----
 sc/source/ui/vba/vbauserform.hxx                   |   70 --
 sc/source/ui/vba/vbavalidation.hxx                 |    2 +-
 sc/source/ui/vba/vbawindow.cxx                     |  195 +---
 sc/source/ui/vba/vbawindow.hxx                     |   17 +-
 sc/source/ui/vba/vbawindows.cxx                    |   29 +-
 sc/source/ui/vba/vbawindows.hxx                    |    7 +-
 sc/source/ui/vba/vbaworkbook.cxx                   |  175 +---
 sc/source/ui/vba/vbaworkbook.hxx                   |   20 +-
 sc/source/ui/vba/vbaworkbooks.cxx                  |  230 +----
 sc/source/ui/vba/vbaworkbooks.hxx                  |   11 +-
 sc/source/ui/vba/vbaworksheet.cxx                  |  124 ++-
 sc/source/ui/vba/vbaworksheet.hxx                  |    7 +-
 sc/source/ui/vba/vbaworksheets.cxx                 |   31 +-
 sc/source/ui/vba/vbaworksheets.hxx                 |    3 +-
 sc/source/ui/view/viewdata.cxx                     |   97 ++-
 sc/util/makefile.mk                                |    3 +
 scp2/source/ooo/file_library_ooo.scp               |   35 +
 sfx2/inc/sfx2/objsh.hxx                            |    2 +
 sfx2/source/doc/objcont.cxx                        |   44 +-
 sfx2/source/doc/objserv.cxx                        |   16 +
 solenv/inc/libs.mk                                 |    2 +
 svx/inc/svx/msvbahelper.hxx                        |   58 +
 svx/prj/d.lst                                      |    1 +
 svx/source/msfilter/makefile.mk                    |    6 +-
 svx/source/msfilter/msvbahelper.cxx                |  384 +++++++
 sw/inc/unocoll.hxx                                 |    3 +-
 sw/inc/unomap.hxx                                  |    2 +
 sw/inc/unoprnms.hxx                                |    4 +-
 sw/inc/unotbl.hxx                                  |    4 +-
 sw/prj/build.lst                                   |    5 +-
 sw/prj/d.lst                                       |    1 +
 sw/source/ui/vba/makefile.mk                       |  110 ++
 sw/source/ui/vba/service.cxx                       |   87 ++
 sw/source/ui/vba/vbaaddin.cxx                      |  106 ++
 sw/source/ui/vba/vbaaddin.hxx                      |   62 +
 sw/source/ui/vba/vbaaddins.cxx                     |  110 ++
 sw/source/ui/vba/vbaaddins.hxx                     |   55 +
 sw/source/ui/vba/vbaapplication.cxx                |  206 ++++
 sw/source/ui/vba/vbaapplication.hxx                |   77 ++
 sw/source/ui/vba/vbaautotextentry.cxx              |  129 +++
 sw/source/ui/vba/vbaautotextentry.hxx              |   83 ++
 sw/source/ui/vba/vbabookmark.cxx                   |  111 ++
 sw/source/ui/vba/vbabookmark.hxx                   |   68 ++
 sw/source/ui/vba/vbabookmarks.cxx                  |  240 ++++
 sw/source/ui/vba/vbabookmarks.hxx                  |   78 ++
 sw/source/ui/vba/vbaborders.cxx                    |  381 +++++++
 sw/source/ui/vba/vbaborders.hxx                    |   65 ++
 sw/source/ui/vba/vbadialog.cxx                     |   81 ++
 sw/source/ui/vba/vbadialog.hxx                     |   53 +
 sw/source/ui/vba/vbadialogs.cxx                    |   63 +
 sw/source/ui/vba/vbadialogs.hxx                    |   56 +
 sw/source/ui/vba/vbadocument.cxx                   |  383 +++++++
 sw/source/ui/vba/vbadocument.hxx                   |   83 ++
 sw/source/ui/vba/vbadocumentproperties.cxx         |  767 +++++++++++++
 sw/source/ui/vba/vbadocumentproperties.hxx         |   70 ++
 sw/source/ui/vba/vbadocuments.cxx                  |  200 ++++
 sw/source/ui/vba/vbadocuments.hxx                  |   69 ++
 sw/source/ui/vba/vbafield.cxx                      |  480 ++++++++
 sw/source/ui/vba/vbafield.hxx                      |   80 ++
 sw/source/ui/vba/vbafind.cxx                       |  430 +++++++
 sw/source/ui/vba/vbafind.hxx                       |  104 ++
 sw/source/ui/vba/vbafont.cxx                       |  214 ++++
 sw/source/ui/vba/vbafont.hxx                       |   31 +
 sw/source/ui/vba/vbaglobals.cxx                    |  195 ++++
 sw/source/ui/vba/vbaglobals.hxx                    |   83 ++
 sw/source/ui/vba/vbaheaderfooter.cxx               |  113 ++
 sw/source/ui/vba/vbaheaderfooter.hxx               |   63 +
 sw/source/ui/vba/vbaheaderfooterhelper.cxx         |  178 +++
 sw/source/ui/vba/vbaheaderfooterhelper.hxx         |   52 +
 sw/source/ui/vba/vbainformationhelper.cxx          |   71 ++
 sw/source/ui/vba/vbainformationhelper.hxx          |   46 +
 sw/source/ui/vba/vbaoptions.cxx                    |  287 +++++
 sw/source/ui/vba/vbaoptions.hxx                    |   90 ++
 sw/source/ui/vba/vbapagesetup.cxx                  |  275 +++++
 sw/source/ui/vba/vbapagesetup.hxx                  |   70 ++
 sw/source/ui/vba/vbapalette.cxx                    |   74 ++
 sw/source/ui/vba/vbapalette.hxx                    |   15 +
 sw/source/ui/vba/vbapane.cxx                       |   78 ++
 sw/source/ui/vba/vbapane.hxx                       |   57 +
 sw/source/ui/vba/vbapanes.cxx                      |  127 ++
 sw/source/ui/vba/vbapanes.hxx                      |   60 +
 sw/source/ui/vba/vbaparagraph.cxx                  |  177 +++
 sw/source/ui/vba/vbaparagraph.hxx                  |   84 ++
 sw/source/ui/vba/vbaparagraphformat.cxx            |  575 ++++++++++
 sw/source/ui/vba/vbaparagraphformat.hxx            |   98 ++
 sw/source/ui/vba/vbarange.cxx                      |  347 ++++++
 sw/source/ui/vba/vbarange.hxx                      |   93 ++
 sw/source/ui/vba/vbarangehelper.cxx                |  174 +++
 sw/source/ui/vba/vbarangehelper.hxx                |   46 +
 sw/source/ui/vba/vbareplacement.cxx                |   73 ++
 sw/source/ui/vba/vbareplacement.hxx                |   57 +
 sw/source/ui/vba/vbasection.cxx                    |   89 ++
 sw/source/ui/vba/vbasection.hxx                    |   62 +
 sw/source/ui/vba/vbasections.cxx                   |  190 +++
 sw/source/ui/vba/vbasections.hxx                   |   62 +
 sw/source/ui/vba/vbaselection.cxx                  |  681 +++++++++++
 sw/source/ui/vba/vbaselection.hxx                  |  108 ++
 sw/source/ui/vba/vbastyle.cxx                      |  152 +++
 sw/source/ui/vba/vbastyle.hxx                      |   70 ++
 sw/source/ui/vba/vbastyles.cxx                     |  380 +++++++
 sw/source/ui/vba/vbastyles.hxx                     |   54 +
 sw/source/ui/vba/vbasystem.cxx                     |  195 ++++
 sw/source/ui/vba/vbasystem.hxx                     |   75 ++
 sw/source/ui/vba/vbatable.cxx                      |   96 ++
 sw/source/ui/vba/vbatable.hxx                      |   28 +
 sw/source/ui/vba/vbatables.cxx                     |  130 +++
 sw/source/ui/vba/vbatables.hxx                     |   28 +
 sw/source/ui/vba/vbatemplate.cxx                   |  105 ++
 sw/source/ui/vba/vbatemplate.hxx                   |   55 +
 sw/source/ui/vba/vbavariable.cxx                   |  107 ++
 sw/source/ui/vba/vbavariable.hxx                   |   62 +
 sw/source/ui/vba/vbavariables.cxx                  |  105 ++
 sw/source/ui/vba/vbavariables.hxx                  |   64 +
 sw/source/ui/vba/vbaview.cxx                       |  424 +++++++
 sw/source/ui/vba/vbaview.hxx                       |   71 ++
 sw/source/ui/vba/vbawindow.cxx                     |  116 ++
 sw/source/ui/vba/vbawindow.hxx                     |   61 +
 sw/source/ui/vba/vbawrapformat.cxx                 |  258 +++++
 sw/source/ui/vba/vbawrapformat.hxx                 |   73 ++
 sw/source/ui/vba/wordvbahelper.cxx                 |   95 ++
 sw/source/ui/vba/wordvbahelper.hxx                 |   57 +
 sw/util/makefile.mk                                |   35 +
 sw/util/vbaswobj.map                               |    9 +
 vbahelper/inc/vbahelper/helperdecl.hxx             |   58 +
 vbahelper/inc/vbahelper/vbaapplicationbase.hxx     |   64 +
 vbahelper/inc/vbahelper/vbacollectionimpl.hxx      |  257 +++++
 vbahelper/inc/vbahelper/vbadialogbase.hxx          |   54 +
 vbahelper/inc/vbahelper/vbadialogsbase.hxx         |   54 +
 vbahelper/inc/vbahelper/vbadllapi.h                |   43 +
 vbahelper/inc/vbahelper/vbadocumentbase.hxx        |   73 ++
 vbahelper/inc/vbahelper/vbadocumentsbase.hxx       |   69 ++
 vbahelper/inc/vbahelper/vbafontbase.hxx            |   98 ++
 vbahelper/inc/vbahelper/vbaglobalbase.hxx          |   53 +
 vbahelper/inc/vbahelper/vbahelper.hxx              |  231 ++++
 vbahelper/inc/vbahelper/vbahelperinterface.hxx     |  121 ++
 vbahelper/inc/vbahelper/vbapagesetupbase.hxx       |   70 ++
 vbahelper/inc/vbahelper/vbapropvalue.hxx           |   60 +
 vbahelper/inc/vbahelper/vbashape.hxx               |  118 ++
 vbahelper/inc/vbahelper/vbashaperange.hxx          |   89 ++
 vbahelper/inc/vbahelper/vbashapes.hxx              |   84 ++
 vbahelper/inc/vbahelper/vbatextframe.hxx           |   70 ++
 vbahelper/inc/vbahelper/vbawindowbase.hxx          |   66 ++
 vbahelper/prj/build.lst                            |    6 +
 vbahelper/prj/d.lst                                |   27 +
 vbahelper/source/msforms/makefile.mk               |   78 ++
 vbahelper/source/msforms/service.cxx               |   83 ++
 vbahelper/source/msforms/vbabutton.cxx             |   74 ++
 vbahelper/source/msforms/vbabutton.hxx             |   51 +
 vbahelper/source/msforms/vbacheckbox.cxx           |  111 ++
 vbahelper/source/msforms/vbacheckbox.hxx           |   61 +
 vbahelper/source/msforms/vbacombobox.cxx           |  183 +++
 vbahelper/source/msforms/vbacombobox.hxx           |   80 ++
 vbahelper/source/msforms/vbacontrol.cxx            |  537 +++++++++
 vbahelper/source/msforms/vbacontrol.hxx            |  114 ++
 vbahelper/source/msforms/vbacontrols.cxx           |  232 ++++
 vbahelper/source/msforms/vbacontrols.hxx           |   61 +
 vbahelper/source/msforms/vbaframe.cxx              |   93 ++
 vbahelper/source/msforms/vbaframe.hxx              |   58 +
 vbahelper/source/msforms/vbaimage.cxx              |   59 +
 vbahelper/source/msforms/vbaimage.hxx              |   48 +
 vbahelper/source/msforms/vbalabel.cxx              |   88 ++
 vbahelper/source/msforms/vbalabel.hxx              |   56 +
 vbahelper/source/msforms/vbalistbox.cxx            |  290 +++++
 vbahelper/source/msforms/vbalistbox.hxx            |   90 ++
 vbahelper/source/msforms/vbalistcontrolhelper.cxx  |  146 +++
 vbahelper/source/msforms/vbalistcontrolhelper.hxx  |   20 +
 vbahelper/source/msforms/vbamultipage.cxx          |  132 +++
 vbahelper/source/msforms/vbamultipage.hxx          |   65 ++
 vbahelper/source/msforms/vbapages.cxx              |   80 ++
 vbahelper/source/msforms/vbapages.hxx              |   64 +
 vbahelper/source/msforms/vbaprogressbar.cxx        |   78 ++
 vbahelper/source/msforms/vbaprogressbar.hxx        |   59 +
 vbahelper/source/msforms/vbaradiobutton.cxx        |  107 ++
 vbahelper/source/msforms/vbaradiobutton.hxx        |   55 +
 vbahelper/source/msforms/vbascrollbar.cxx          |  139 +++
 vbahelper/source/msforms/vbascrollbar.hxx          |   66 ++
 vbahelper/source/msforms/vbaspinbutton.cxx         |  109 ++
 vbahelper/source/msforms/vbaspinbutton.hxx         |   61 +
 vbahelper/source/msforms/vbatextbox.cxx            |  137 +++
 vbahelper/source/msforms/vbatextbox.hxx            |   59 +
 vbahelper/source/msforms/vbatogglebutton.cxx       |  107 ++
 vbahelper/source/msforms/vbatogglebutton.hxx       |   63 +
 vbahelper/source/msforms/vbauserform.cxx           |  226 ++++
 vbahelper/source/msforms/vbauserform.hxx           |   77 ++
 vbahelper/source/vbahelper/makefile.mk             |   79 ++
 vbahelper/source/vbahelper/vbaapplicationbase.cxx  |  218 ++++
 vbahelper/source/vbahelper/vbacolorformat.cxx      |  189 +++
 vbahelper/source/vbahelper/vbacolorformat.hxx      |  128 +++
 vbahelper/source/vbahelper/vbacommandbar.cxx       |  212 ++++
 vbahelper/source/vbahelper/vbacommandbar.hxx       |   83 ++
 .../source/vbahelper/vbacommandbarcontrol.cxx      |  259 +++++
 .../source/vbahelper/vbacommandbarcontrol.hxx      |  122 ++
 .../source/vbahelper/vbacommandbarcontrols.cxx     |  255 +++++
 .../source/vbahelper/vbacommandbarcontrols.hxx     |   75 ++
 vbahelper/source/vbahelper/vbacommandbarhelper.cxx |  282 +++++
 vbahelper/source/vbahelper/vbacommandbarhelper.hxx |  110 ++
 vbahelper/source/vbahelper/vbacommandbars.cxx      |  237 ++++
 vbahelper/source/vbahelper/vbacommandbars.hxx      |   71 ++
 vbahelper/source/vbahelper/vbadialogbase.cxx       |   50 +
 vbahelper/source/vbahelper/vbadialogsbase.cxx      |   46 +
 vbahelper/source/vbahelper/vbadocumentbase.cxx     |  227 ++++
 vbahelper/source/vbahelper/vbadocumentsbase.cxx    |  304 +++++
 vbahelper/source/vbahelper/vbafillformat.cxx       |  201 ++++
 vbahelper/source/vbahelper/vbafillformat.hxx       |   74 ++
 vbahelper/source/vbahelper/vbafontbase.cxx         |  307 +++++
 vbahelper/source/vbahelper/vbaglobalbase.cxx       |  124 ++
 vbahelper/source/vbahelper/vbahelper.cxx           | 1199 ++++++++++++++++++++
 vbahelper/source/vbahelper/vbahelper.cxx.rej       |   45 +
 vbahelper/source/vbahelper/vbalineformat.cxx       |  456 ++++++++
 vbahelper/source/vbahelper/vbalineformat.hxx       |   85 ++
 vbahelper/source/vbahelper/vbapagesetupbase.cxx    |  324 ++++++
 vbahelper/source/vbahelper/vbapictureformat.cxx    |  147 +++
 vbahelper/source/vbahelper/vbapictureformat.hxx    |   64 +
 vbahelper/source/vbahelper/vbapropvalue.cxx        |   48 +
 vbahelper/source/vbahelper/vbashape.cxx            |  676 +++++++++++
 vbahelper/source/vbahelper/vbashaperange.cxx       |  382 +++++++
 vbahelper/source/vbahelper/vbashapes.cxx           |  491 ++++++++
 vbahelper/source/vbahelper/vbatextframe.cxx        |  168 +++
 vbahelper/source/vbahelper/vbawindowbase.cxx       |  180 +++
 vbahelper/util/makefile.mk                         |  104 ++
 vbahelper/util/msforms.map                         |    9 +
 532 files changed, 36282 insertions(+), 11829 deletions(-)
 create mode 100644 oovbaapi/ooo/vba/ControlProvider.idl
 create mode 100644 oovbaapi/ooo/vba/XApplicationBase.idl
 create mode 100644 oovbaapi/ooo/vba/XCommandBarButton.idl
 create mode 100644 oovbaapi/ooo/vba/XCommandBarPopup.idl
 create mode 100644 oovbaapi/ooo/vba/XControlProvider.idl
 create mode 100644 oovbaapi/ooo/vba/XDialogBase.idl
 create mode 100644 oovbaapi/ooo/vba/XDialogsBase.idl
 create mode 100644 oovbaapi/ooo/vba/XDocumentBase.idl
 create mode 100644 oovbaapi/ooo/vba/XDocumentProperties.idl
 create mode 100644 oovbaapi/ooo/vba/XDocumentProperty.idl
 create mode 100644 oovbaapi/ooo/vba/XDocumentsBase.idl
 create mode 100644 oovbaapi/ooo/vba/XFontBase.idl
 create mode 100644 oovbaapi/ooo/vba/XGlobalsBase.idl
 create mode 100644 oovbaapi/ooo/vba/XPageSetupBase.idl
 create mode 100644 oovbaapi/ooo/vba/XWindowBase.idl
 create mode 100644 oovbaapi/ooo/vba/excel/Globals.idl
 create mode 100644 oovbaapi/ooo/vba/excel/TextFrame.idl
 create mode 100644 oovbaapi/ooo/vba/excel/XGlobals.idl
 create mode 100644 oovbaapi/ooo/vba/excel/XVPageBreak.idl
 create mode 100644 oovbaapi/ooo/vba/excel/XVPageBreaks.idl
 create mode 100644 oovbaapi/ooo/vba/msforms/XTextFrame.idl
 create mode 100644 oovbaapi/ooo/vba/word/XAddin.idl
 create mode 100644 oovbaapi/ooo/vba/word/XAddins.idl
 create mode 100644 oovbaapi/ooo/vba/word/XApplication.idl
 create mode 100644 oovbaapi/ooo/vba/word/XAutoTextEntries.idl
 create mode 100644 oovbaapi/ooo/vba/word/XAutoTextEntry.idl
 create mode 100644 oovbaapi/ooo/vba/word/XBookmark.idl
 create mode 100644 oovbaapi/ooo/vba/word/XBookmarks.idl
 create mode 100644 oovbaapi/ooo/vba/word/XBorder.idl
 create mode 100644 oovbaapi/ooo/vba/word/XBorders.idl
 create mode 100644 oovbaapi/ooo/vba/word/XDialog.idl
 create mode 100644 oovbaapi/ooo/vba/word/XDialogs.idl
 create mode 100644 oovbaapi/ooo/vba/word/XDocument.idl
 create mode 100644 oovbaapi/ooo/vba/word/XDocuments.idl
 create mode 100644 oovbaapi/ooo/vba/word/XField.idl
 create mode 100644 oovbaapi/ooo/vba/word/XFields.idl
 create mode 100644 oovbaapi/ooo/vba/word/XFind.idl
 create mode 100644 oovbaapi/ooo/vba/word/XFont.idl
 create mode 100644 oovbaapi/ooo/vba/word/XGlobals.idl
 create mode 100644 oovbaapi/ooo/vba/word/XHeaderFooter.idl
 create mode 100644 oovbaapi/ooo/vba/word/XOptions.idl
 create mode 100644 oovbaapi/ooo/vba/word/XPageSetup.idl
 create mode 100644 oovbaapi/ooo/vba/word/XPane.idl
 create mode 100644 oovbaapi/ooo/vba/word/XPanes.idl
 create mode 100644 oovbaapi/ooo/vba/word/XParagraph.idl
 create mode 100644 oovbaapi/ooo/vba/word/XParagraphFormat.idl
 create mode 100644 oovbaapi/ooo/vba/word/XParagraphs.idl
 create mode 100644 oovbaapi/ooo/vba/word/XRange.idl
 create mode 100644 oovbaapi/ooo/vba/word/XReplacement.idl
 create mode 100644 oovbaapi/ooo/vba/word/XSection.idl
 create mode 100644 oovbaapi/ooo/vba/word/XSections.idl
 create mode 100644 oovbaapi/ooo/vba/word/XSelection.idl
 create mode 100644 oovbaapi/ooo/vba/word/XStyle.idl
 create mode 100644 oovbaapi/ooo/vba/word/XStyles.idl
 create mode 100644 oovbaapi/ooo/vba/word/XSystem.idl
 create mode 100644 oovbaapi/ooo/vba/word/XTable.idl
 create mode 100644 oovbaapi/ooo/vba/word/XTables.idl
 create mode 100644 oovbaapi/ooo/vba/word/XTemplate.idl
 create mode 100644 oovbaapi/ooo/vba/word/XVariable.idl
 create mode 100644 oovbaapi/ooo/vba/word/XVariables.idl
 create mode 100644 oovbaapi/ooo/vba/word/XView.idl
 create mode 100644 oovbaapi/ooo/vba/word/XWindow.idl
 create mode 100644 oovbaapi/ooo/vba/word/XWrapFormat.idl
 create mode 100644 oovbaapi/ooo/vba/word/makefile.mk
 create mode 100644 sc/source/ui/vba/excelvbahelper.cxx
 create mode 100644 sc/source/ui/vba/excelvbahelper.hxx
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/AutoFilter.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/MiscRangeTests.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-3.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestAddress.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/format.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/AutoFilter.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcFont.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcZoom.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/FinancialFuncTests.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscOperatorTests.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscRangeTests.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/PageBreaks.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-3.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Shapes.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/StrConv-test.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Template.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestAddress.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestIntersection.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestUnion.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/VariantTest.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Window.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/bytearraystring.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/dateserial.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/datevalue.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/format.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/pagesetup.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/partition.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/range-4.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/replace.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/stringplusdouble.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/window2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/AutoFilter.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/CalcFont.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscOperatorTests.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscRangeTests.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/PageBreaks.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-3.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Shapes.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/StrConv-test.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Template.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestAddress.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestIntersection.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestUnion.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/VariantTest.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Window.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/bytearraystring.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/dateserial.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/datevalue.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/format.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/pagesetup.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/partition.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/range-4.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/replace.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/stringplusdouble.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/window2.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments/logs/unix/CalcFont.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestIntersection.log
 create mode 100644 sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestUnion.log
 create mode 100644 svx/inc/svx/msvbahelper.hxx
 create mode 100644 svx/source/msfilter/msvbahelper.cxx
 create mode 100644 sw/source/ui/vba/makefile.mk
 create mode 100644 sw/source/ui/vba/service.cxx
 create mode 100644 sw/source/ui/vba/vbaaddin.cxx
 create mode 100644 sw/source/ui/vba/vbaaddin.hxx
 create mode 100644 sw/source/ui/vba/vbaaddins.cxx
 create mode 100644 sw/source/ui/vba/vbaaddins.hxx
 create mode 100644 sw/source/ui/vba/vbaapplication.cxx
 create mode 100644 sw/source/ui/vba/vbaapplication.hxx
 create mode 100644 sw/source/ui/vba/vbaautotextentry.cxx
 create mode 100644 sw/source/ui/vba/vbaautotextentry.hxx
 create mode 100644 sw/source/ui/vba/vbabookmark.cxx
 create mode 100644 sw/source/ui/vba/vbabookmark.hxx
 create mode 100644 sw/source/ui/vba/vbabookmarks.cxx
 create mode 100644 sw/source/ui/vba/vbabookmarks.hxx
 create mode 100644 sw/source/ui/vba/vbaborders.cxx
 create mode 100644 sw/source/ui/vba/vbaborders.hxx
 create mode 100644 sw/source/ui/vba/vbadialog.cxx
 create mode 100644 sw/source/ui/vba/vbadialog.hxx
 create mode 100644 sw/source/ui/vba/vbadialogs.cxx
 create mode 100644 sw/source/ui/vba/vbadialogs.hxx
 create mode 100644 sw/source/ui/vba/vbadocument.cxx
 create mode 100644 sw/source/ui/vba/vbadocument.hxx
 create mode 100644 sw/source/ui/vba/vbadocumentproperties.cxx
 create mode 100644 sw/source/ui/vba/vbadocumentproperties.hxx
 create mode 100644 sw/source/ui/vba/vbadocuments.cxx
 create mode 100644 sw/source/ui/vba/vbadocuments.hxx
 create mode 100644 sw/source/ui/vba/vbafield.cxx
 create mode 100644 sw/source/ui/vba/vbafield.hxx
 create mode 100644 sw/source/ui/vba/vbafind.cxx
 create mode 100644 sw/source/ui/vba/vbafind.hxx
 create mode 100644 sw/source/ui/vba/vbafont.cxx
 create mode 100644 sw/source/ui/vba/vbafont.hxx
 create mode 100644 sw/source/ui/vba/vbaglobals.cxx
 create mode 100644 sw/source/ui/vba/vbaglobals.hxx
 create mode 100644 sw/source/ui/vba/vbaheaderfooter.cxx
 create mode 100644 sw/source/ui/vba/vbaheaderfooter.hxx
 create mode 100644 sw/source/ui/vba/vbaheaderfooterhelper.cxx
 create mode 100644 sw/source/ui/vba/vbaheaderfooterhelper.hxx
 create mode 100644 sw/source/ui/vba/vbainformationhelper.cxx
 create mode 100644 sw/source/ui/vba/vbainformationhelper.hxx
 create mode 100644 sw/source/ui/vba/vbaoptions.cxx
 create mode 100644 sw/source/ui/vba/vbaoptions.hxx
 create mode 100644 sw/source/ui/vba/vbapagesetup.cxx
 create mode 100644 sw/source/ui/vba/vbapagesetup.hxx
 create mode 100644 sw/source/ui/vba/vbapalette.cxx
 create mode 100644 sw/source/ui/vba/vbapalette.hxx
 create mode 100644 sw/source/ui/vba/vbapane.cxx
 create mode 100644 sw/source/ui/vba/vbapane.hxx
 create mode 100644 sw/source/ui/vba/vbapanes.cxx
 create mode 100644 sw/source/ui/vba/vbapanes.hxx
 create mode 100644 sw/source/ui/vba/vbaparagraph.cxx
 create mode 100644 sw/source/ui/vba/vbaparagraph.hxx
 create mode 100644 sw/source/ui/vba/vbaparagraphformat.cxx
 create mode 100644 sw/source/ui/vba/vbaparagraphformat.hxx
 create mode 100644 sw/source/ui/vba/vbarange.cxx
 create mode 100644 sw/source/ui/vba/vbarange.hxx
 create mode 100644 sw/source/ui/vba/vbarangehelper.cxx
 create mode 100644 sw/source/ui/vba/vbarangehelper.hxx
 create mode 100644 sw/source/ui/vba/vbareplacement.cxx
 create mode 100644 sw/source/ui/vba/vbareplacement.hxx
 create mode 100644 sw/source/ui/vba/vbasection.cxx
 create mode 100644 sw/source/ui/vba/vbasection.hxx
 create mode 100644 sw/source/ui/vba/vbasections.cxx
 create mode 100644 sw/source/ui/vba/vbasections.hxx
 create mode 100644 sw/source/ui/vba/vbaselection.cxx
 create mode 100644 sw/source/ui/vba/vbaselection.hxx
 create mode 100644 sw/source/ui/vba/vbastyle.cxx
 create mode 100644 sw/source/ui/vba/vbastyle.hxx
 create mode 100644 sw/source/ui/vba/vbastyles.cxx
 create mode 100644 sw/source/ui/vba/vbastyles.hxx
 create mode 100644 sw/source/ui/vba/vbasystem.cxx
 create mode 100644 sw/source/ui/vba/vbasystem.hxx
 create mode 100644 sw/source/ui/vba/vbatable.cxx
 create mode 100644 sw/source/ui/vba/vbatable.hxx
 create mode 100644 sw/source/ui/vba/vbatables.cxx
 create mode 100644 sw/source/ui/vba/vbatables.hxx
 create mode 100644 sw/source/ui/vba/vbatemplate.cxx
 create mode 100644 sw/source/ui/vba/vbatemplate.hxx
 create mode 100644 sw/source/ui/vba/vbavariable.cxx
 create mode 100644 sw/source/ui/vba/vbavariable.hxx
 create mode 100644 sw/source/ui/vba/vbavariables.cxx
 create mode 100644 sw/source/ui/vba/vbavariables.hxx
 create mode 100644 sw/source/ui/vba/vbaview.cxx
 create mode 100644 sw/source/ui/vba/vbaview.hxx
 create mode 100644 sw/source/ui/vba/vbawindow.cxx
 create mode 100644 sw/source/ui/vba/vbawindow.hxx
 create mode 100644 sw/source/ui/vba/vbawrapformat.cxx
 create mode 100644 sw/source/ui/vba/vbawrapformat.hxx
 create mode 100644 sw/source/ui/vba/wordvbahelper.cxx
 create mode 100644 sw/source/ui/vba/wordvbahelper.hxx
 create mode 100644 sw/util/vbaswobj.map
 create mode 100644 vbahelper/inc/vbahelper/helperdecl.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbaapplicationbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbacollectionimpl.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbadialogbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbadialogsbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbadllapi.h
 create mode 100644 vbahelper/inc/vbahelper/vbadocumentbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbadocumentsbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbafontbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbaglobalbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbahelper.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbahelperinterface.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbapagesetupbase.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbapropvalue.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbashape.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbashaperange.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbashapes.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbatextframe.hxx
 create mode 100644 vbahelper/inc/vbahelper/vbawindowbase.hxx
 create mode 100644 vbahelper/prj/build.lst
 create mode 100644 vbahelper/prj/d.lst
 create mode 100644 vbahelper/source/msforms/makefile.mk
 create mode 100644 vbahelper/source/msforms/service.cxx
 create mode 100644 vbahelper/source/msforms/vbabutton.cxx
 create mode 100644 vbahelper/source/msforms/vbabutton.hxx
 create mode 100644 vbahelper/source/msforms/vbacheckbox.cxx
 create mode 100644 vbahelper/source/msforms/vbacheckbox.hxx
 create mode 100644 vbahelper/source/msforms/vbacombobox.cxx
 create mode 100644 vbahelper/source/msforms/vbacombobox.hxx
 create mode 100644 vbahelper/source/msforms/vbacontrol.cxx
 create mode 100644 vbahelper/source/msforms/vbacontrol.hxx
 create mode 100644 vbahelper/source/msforms/vbacontrols.cxx
 create mode 100644 vbahelper/source/msforms/vbacontrols.hxx
 create mode 100644 vbahelper/source/msforms/vbaframe.cxx
 create mode 100644 vbahelper/source/msforms/vbaframe.hxx
 create mode 100644 vbahelper/source/msforms/vbaimage.cxx
 create mode 100644 vbahelper/source/msforms/vbaimage.hxx
 create mode 100644 vbahelper/source/msforms/vbalabel.cxx
 create mode 100644 vbahelper/source/msforms/vbalabel.hxx
 create mode 100644 vbahelper/source/msforms/vbalistbox.cxx
 create mode 100644 vbahelper/source/msforms/vbalistbox.hxx
 create mode 100644 vbahelper/source/msforms/vbalistcontrolhelper.cxx
 create mode 100644 vbahelper/source/msforms/vbalistcontrolhelper.hxx
 create mode 100644 vbahelper/source/msforms/vbamultipage.cxx
 create mode 100644 vbahelper/source/msforms/vbamultipage.hxx
 create mode 100644 vbahelper/source/msforms/vbapages.cxx
 create mode 100644 vbahelper/source/msforms/vbapages.hxx
 create mode 100644 vbahelper/source/msforms/vbaprogressbar.cxx
 create mode 100644 vbahelper/source/msforms/vbaprogressbar.hxx
 create mode 100644 vbahelper/source/msforms/vbaradiobutton.cxx
 create mode 100644 vbahelper/source/msforms/vbaradiobutton.hxx
 create mode 100644 vbahelper/source/msforms/vbascrollbar.cxx
 create mode 100644 vbahelper/source/msforms/vbascrollbar.hxx
 create mode 100644 vbahelper/source/msforms/vbaspinbutton.cxx
 create mode 100644 vbahelper/source/msforms/vbaspinbutton.hxx
 create mode 100644 vbahelper/source/msforms/vbatextbox.cxx
 create mode 100644 vbahelper/source/msforms/vbatextbox.hxx
 create mode 100644 vbahelper/source/msforms/vbatogglebutton.cxx
 create mode 100644 vbahelper/source/msforms/vbatogglebutton.hxx
 create mode 100644 vbahelper/source/msforms/vbauserform.cxx
 create mode 100644 vbahelper/source/msforms/vbauserform.hxx
 create mode 100644 vbahelper/source/vbahelper/makefile.mk
 create mode 100644 vbahelper/source/vbahelper/vbaapplicationbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacolorformat.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacolorformat.hxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbar.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbar.hxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbarcontrol.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbarcontrol.hxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbarcontrols.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbarcontrols.hxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbarhelper.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbarhelper.hxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbars.cxx
 create mode 100644 vbahelper/source/vbahelper/vbacommandbars.hxx
 create mode 100644 vbahelper/source/vbahelper/vbadialogbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbadialogsbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbadocumentbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbadocumentsbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbafillformat.cxx
 create mode 100644 vbahelper/source/vbahelper/vbafillformat.hxx
 create mode 100644 vbahelper/source/vbahelper/vbafontbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbaglobalbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbahelper.cxx
 create mode 100644 vbahelper/source/vbahelper/vbahelper.cxx.rej
 create mode 100644 vbahelper/source/vbahelper/vbalineformat.cxx
 create mode 100644 vbahelper/source/vbahelper/vbalineformat.hxx
 create mode 100644 vbahelper/source/vbahelper/vbapagesetupbase.cxx
 create mode 100644 vbahelper/source/vbahelper/vbapictureformat.cxx
 create mode 100644 vbahelper/source/vbahelper/vbapictureformat.hxx
 create mode 100644 vbahelper/source/vbahelper/vbapropvalue.cxx
 create mode 100644 vbahelper/source/vbahelper/vbashape.cxx
 create mode 100644 vbahelper/source/vbahelper/vbashaperange.cxx
 create mode 100644 vbahelper/source/vbahelper/vbashapes.cxx
 create mode 100644 vbahelper/source/vbahelper/vbatextframe.cxx
 create mode 100644 vbahelper/source/vbahelper/vbawindowbase.cxx
 create mode 100644 vbahelper/util/makefile.mk
 create mode 100644 vbahelper/util/msforms.map

diff --git a/basic/inc/basic/basmgr.hxx b/basic/inc/basic/basmgr.hxx
index cd5dca2..0db502f 100644
--- a/basic/inc/basic/basmgr.hxx
+++ b/basic/inc/basic/basmgr.hxx
@@ -228,6 +228,8 @@ public:
     ::com::sun::star::uno::Any
                     SetGlobalUNOConstant( const sal_Char* _pAsciiName, const ::com::sun::star::uno::Any& _rValue );
 
+    /** retrieves a global constant in the basic library, referring to some UNO object, returns true if a value is found ( value is in aOut ) false otherwise. */
+                    bool GetGlobalUNOConstant( const sal_Char* _pAsciiName, ::com::sun::star::uno::Any& aOut );
     /** determines whether there are password-protected modules whose size exceedes the
         legacy module size
         @param _out_rModuleNames
diff --git a/basic/inc/basic/sbstar.hxx b/basic/inc/basic/sbstar.hxx
index a4613e7..e3adebb 100644
--- a/basic/inc/basic/sbstar.hxx
+++ b/basic/inc/basic/sbstar.hxx
@@ -71,6 +71,11 @@ class StarBASIC : public SbxObject
     BOOL			bDocBasic;
     BasicLibInfo*	pLibInfo;			// Info block for basic manager
     SbLanguageMode	eLanguageMode;		// LanguageMode of the basic object
+    BOOL			bQuit;
+
+    SbxObjectRef pVBAGlobals;
+    SbxObject* getVBAGlobals( );
+
 protected:
     BOOL 			CError( SbError, const String&, xub_StrLen, xub_StrLen, xub_StrLen );
 private:
@@ -193,6 +198,10 @@ public:
 
     SbxObjectRef getRTL( void ) { return pRtl; }
     BOOL IsDocBasic() { return bDocBasic; }
+    SbxVariable* VBAFind( const String& rName, SbxClassType t );
+    bool GetUNOConstant( const sal_Char* _pAsciiName, ::com::sun::star::uno::Any& aOut );
+    void QuitAndExitApplication();
+    BOOL IsQuitApplication() { return bQuit; };
 };
 
 #ifndef __SB_SBSTARBASICREF_HXX
diff --git a/basic/source/basmgr/basmgr.cxx b/basic/source/basmgr/basmgr.cxx
index c39564e..9953511 100644
--- a/basic/source/basmgr/basmgr.cxx
+++ b/basic/source/basmgr/basmgr.cxx
@@ -44,6 +44,7 @@
 
 #include <basic/sbuno.hxx>
 #include <basic/basmgr.hxx>
+#include <sbunoobj.hxx>
 #include "basrid.hxx"
 #include "sbintern.hxx"
 #include <sb.hrc>
@@ -1764,6 +1765,15 @@ BasicError* BasicManager::GetNextError()
     DBG_CHKTHIS( BasicManager, 0 );
     return pErrorMgr->GetNextError();
 }
+bool BasicManager::GetGlobalUNOConstant( const sal_Char* _pAsciiName, ::com::sun::star::uno::Any& aOut )
+{
+    bool bRes = false;
+    StarBASIC* pStandardLib = GetStdLib();
+    OSL_PRECOND( pStandardLib, "BasicManager::SetGlobalUNOConstant: no lib to insert into!" );
+    if ( pStandardLib )
+        bRes = pStandardLib->GetUNOConstant( _pAsciiName, aOut );
+    return bRes;
+}
 
 Any BasicManager::SetGlobalUNOConstant( const sal_Char* _pAsciiName, const Any& _rValue )
 {
diff --git a/basic/source/classes/sb.cxx b/basic/source/classes/sb.cxx
index 3aebf7e..0d634d7 100644
--- a/basic/source/classes/sb.cxx
+++ b/basic/source/classes/sb.cxx
@@ -62,7 +62,29 @@ SV_IMPL_VARARR(SbTextPortions,SbTextPortion)
 TYPEINIT1(StarBASIC,SbxObject)
 
 #define RTLNAME "@SBRTL"
+//  i#i68894#
 
+const static String aThisComponent( RTL_CONSTASCII_USTRINGPARAM("ThisComponent") );
+const static String aVBAHook( RTL_CONSTASCII_USTRINGPARAM( "VBAGlobals" ) );
+
+SbxObject* StarBASIC::getVBAGlobals( )
+{
+    if ( !pVBAGlobals )
+        pVBAGlobals = (SbUnoObject*)Find( aVBAHook , SbxCLASS_DONTCARE );
+    return pVBAGlobals;
+}
+
+//  i#i68894#
+SbxVariable* StarBASIC::VBAFind( const String& rName, SbxClassType t )
+{
+    if( rName == aThisComponent )
+        return NULL;
+    // rename to init globals
+    if ( getVBAGlobals( ) )
+        return pVBAGlobals->Find( rName, t );
+    return NULL;
+
+}
 // Create array for conversion SFX <-> VB error code
 struct SFX_VB_ErrorItem
 {
@@ -678,6 +700,8 @@ StarBASIC::StarBASIC( StarBASIC* p, BOOL bIsDocBasic  )
     pRtl = new SbiStdObject( String( RTL_CONSTASCII_USTRINGPARAM(RTLNAME) ), this );
     // Search via StarBasic is always global
     SetFlag( SBX_GBLSEARCH );
+    pVBAGlobals = NULL;
+    bQuit = FALSE;
 }
 
 // #51727 Override SetModified so that the modified state
@@ -992,6 +1016,12 @@ SbxVariable* StarBASIC::FindVarInCurrentScopy
     return pVar;
 }
 
+void StarBASIC::QuitAndExitApplication()
+{
+    Stop();
+    bQuit = TRUE;
+}
+
 void StarBASIC::Stop()
 {
     SbiInstance* p = pINST;
@@ -1530,6 +1560,18 @@ BOOL StarBASIC::LoadOldModules( SvStream& )
     return FALSE;
 }
 
+bool StarBASIC::GetUNOConstant( const sal_Char* _pAsciiName, ::com::sun::star::uno::Any& aOut )
+{
+    bool bRes = false;
+    ::rtl::OUString sVarName( ::rtl::OUString::createFromAscii( _pAsciiName ) );
+    SbUnoObject* pGlobs = dynamic_cast<SbUnoObject*>( Find( sVarName, SbxCLASS_DONTCARE ) );
+    if ( pGlobs )
+    {
+        aOut = pGlobs->getUnoAny();
+        bRes = true;
+    }
+    return bRes;
+}
 
 //========================================================================
 // #118116 Implementation Collection object
diff --git a/basic/source/classes/sbxmod.cxx b/basic/source/classes/sbxmod.cxx
index 03c83c7..03234bc 100644
--- a/basic/source/classes/sbxmod.cxx
+++ b/basic/source/classes/sbxmod.cxx
@@ -66,6 +66,11 @@
 #endif
 
 #include <stdio.h>
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#include <comphelper/processfactory.hxx>
+#include <vcl/svapp.hxx>
+ using namespace ::com::sun::star;
 
 
 TYPEINIT1(SbModule,SbxObject)
@@ -81,7 +86,63 @@ SV_IMPL_VARARR(SbiBreakpoints,USHORT)
 
 SV_IMPL_VARARR(HighlightPortions, HighlightPortion)
 
+class AsyncQuitHandler
+{
+    AsyncQuitHandler() {}
+    AsyncQuitHandler( const AsyncQuitHandler&);
+public:
+    static AsyncQuitHandler& instance()
+    {
+        static AsyncQuitHandler dInst;
+        return dInst;
+    }
 
+    void QuitApplication()
+    {
+        uno::Reference< lang::XMultiServiceFactory > xFactory = comphelper::getProcessServiceFactory();
+        if ( xFactory.is() )
+    {
+            uno::Reference< frame::XDesktop > xDeskTop( xFactory->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.frame.Desktop") ) ), uno::UNO_QUERY );
+           if ( xDeskTop.is() )
+               xDeskTop->terminate();
+        }
+    }
+    DECL_LINK( OnAsyncQuit, void* );
+};
+
+IMPL_LINK( AsyncQuitHandler, OnAsyncQuit, void*, /*pNull*/ )
+{
+    QuitApplication();
+    return 0L;
+}
+
+#if 0
+bool UnlockControllerHack( StarBASIC* pBasic )
+{
+    bool bRes = false;
+    if ( pBasic && pBasic->IsDocBasic() )
+    {
+        uno::Any aUnoVar;
+        ::rtl::OUString sVarName( ::rtl::OUString::createFromAscii( "ThisComponent" ) );
+        SbUnoObject* pGlobs = dynamic_cast<SbUnoObject*>( pBasic->Find( sVarName, SbxCLASS_DONTCARE ) );
+        if ( pGlobs )
+            aUnoVar = pGlobs->getUnoAny();
+        uno::Reference< frame::XModel > xModel( aUnoVar, uno::UNO_QUERY);
+        if ( xModel.is() )
+        {
+            try
+            {
+                xModel->unlockControllers();
+                bRes = true;
+            }
+            catch( uno::Exception& )
+            {
+            }
+        }
+    }
+    return bRes;
+}
+#endif
 /////////////////////////////////////////////////////////////////////////////
 
 // Ein BASIC-Modul hat EXTSEARCH gesetzt, damit die im Modul enthaltenen
@@ -693,6 +754,13 @@ USHORT SbModule::Run( SbMethod* pMeth )
         pINST->nCallLvl--;			// Call-Level wieder runter
         StarBASIC::FatalError( SbERR_STACK_OVERFLOW );
     }
+
+    // VBA always ensure screenupdating is enabled after completing
+    StarBASIC* pBasic = PTR_CAST(StarBASIC,GetParent());
+#if 0
+    if ( pBasic && pBasic->IsDocBasic() && !pINST )
+        UnlockControllerHack( pBasic );
+#endif
     if( bDelInst )
     {
         // #57841 Uno-Objekte, die in RTL-Funktionen gehalten werden,
@@ -702,6 +770,11 @@ USHORT SbModule::Run( SbMethod* pMeth )
         delete pINST;
         pINST = NULL;
     }
+    if ( pBasic && pBasic->IsDocBasic() && pBasic->IsQuitApplication() && !pINST )
+    {
+        Application::PostUserEvent( LINK( &AsyncQuitHandler::instance(), AsyncQuitHandler, OnAsyncQuit ), NULL );
+    }
+
     return nRes;
 }
 
diff --git a/basic/source/runtime/step2.cxx b/basic/source/runtime/step2.cxx
index a6d1a2a..5ebf094 100644
--- a/basic/source/runtime/step2.cxx
+++ b/basic/source/runtime/step2.cxx
@@ -53,57 +53,6 @@ using com::sun::star::uno::Reference;
 
 SbxVariable* getVBAConstant( const String& rName );
 
-const static String aThisComponent( RTL_CONSTASCII_USTRINGPARAM("ThisComponent") );
-const static String aVBAHook( RTL_CONSTASCII_USTRINGPARAM( "VBAGlobals" ) );
-//  i#i68894#
-SbxArray* getVBAGlobals( )
-{
-    static SbxArrayRef pArray;
-    static bool isInitialised = false;
-    if ( isInitialised )
-        return pArray;
-    Reference < XComponentContext > xCtx;
-    Reference < XPropertySet > xProps(
-    ::comphelper::getProcessServiceFactory(), UNO_QUERY_THROW );
-    xCtx.set( xProps->getPropertyValue( rtl::OUString(
-        RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))),
-            UNO_QUERY_THROW );
-    SbUnoObject dGlobs( String( RTL_CONSTASCII_USTRINGPARAM("ExcelGlobals") ), xCtx->getValueByName( ::rtl::OUString::createFromAscii( "/singletons/ooo.vba.theGlobals") ) );
-
-    SbxVariable *vba = dGlobs.Find( String( RTL_CONSTASCII_USTRINGPARAM("getGlobals") ) , SbxCLASS_DONTCARE );
-
-    if ( vba )
-    {
-        pArray = static_cast<SbxArray *>(vba->GetObject());
-        isInitialised = true;
-        return pArray;
-    }
-    return NULL;
-}
-
-//  i#i68894#
-SbxVariable* VBAFind( const String& rName, SbxClassType t )
-{
-    if( rName == aThisComponent )
-        return NULL;
-
-    SbxArray *pVBAGlobals = getVBAGlobals( );
-    for (USHORT i = 0; pVBAGlobals && i < pVBAGlobals->Count(); i++)
-    {
-        SbxVariable *pElem = pVBAGlobals->Get( i );
-        if (!pElem || !pElem->IsObject())
-            continue;
-        SbxObject *pVba = static_cast<SbxObject *>(pElem->GetObject());
-        SbxVariable *pVbaVar = pVba ? pVba->Find( rName, t ) : NULL;
-        if( pVbaVar )
-        {
-            return pVbaVar;
-        }
-    }
-    return NULL;
-
-}
-
 // Suchen eines Elements
 // Die Bits im String-ID:
 // 0x8000 - Argv ist belegt
@@ -188,7 +137,7 @@ SbxVariable* SbiRuntime::FindElement
                 if ( bVBAEnabled )
                 {
                     // Try Find in VBA symbols space
-                    pElem = VBAFind( aName, SbxCLASS_DONTCARE );
+                    pElem = rBasic.VBAFind( aName, SbxCLASS_DONTCARE );
                     if ( pElem )
                         bSetName = false; // don't overwrite uno name
                     else
diff --git a/comphelper/inc/comphelper/servicedecl.hxx b/comphelper/inc/comphelper/servicedecl.hxx
index 8c8094d..4dfd9a7 100644
--- a/comphelper/inc/comphelper/servicedecl.hxx
+++ b/comphelper/inc/comphelper/servicedecl.hxx
@@ -166,21 +166,20 @@ template <bool> struct with_args;
 
 /// @internal
 namespace detail {
-
 template <typename ImplT>
-class ServiceImpl
-    : public ::cppu::ImplInheritanceHelper1<ImplT, css::lang::XServiceInfo>,
+class OwnServiceImpl
+    : public ImplT,
       private ::boost::noncopyable
 {
-    typedef ::cppu::ImplInheritanceHelper1<ImplT,css::lang::XServiceInfo> BaseT;
+    typedef ImplT BaseT;
     
 public:    
-    ServiceImpl(
+    OwnServiceImpl(
         ServiceDecl const& rServiceDecl,
         css::uno::Sequence<css::uno::Any> const& args,
         css::uno::Reference<css::uno::XComponentContext> const& xContext )
-        : BaseT(args, xContext), m_rServiceDecl(rServiceDecl) {}
-    ServiceImpl(
+        :BaseT(args, xContext), m_rServiceDecl(rServiceDecl) {}
+    OwnServiceImpl(
         ServiceDecl const& rServiceDecl,
         css::uno::Reference<css::uno::XComponentContext> const& xContext )
         : BaseT(xContext), m_rServiceDecl(rServiceDecl) {}
@@ -203,6 +202,22 @@ private:
     ServiceDecl const& m_rServiceDecl;
 };
 
+template <typename ImplT>
+class ServiceImpl : public OwnServiceImpl< ::cppu::ImplInheritanceHelper1<ImplT,css::lang::XServiceInfo> >
+{
+typedef OwnServiceImpl< ::cppu::ImplInheritanceHelper1<ImplT,css::lang::XServiceInfo> > ServiceImpl_BASE;
+public:
+    ServiceImpl(
+        ServiceDecl const& rServiceDecl,
+        css::uno::Sequence<css::uno::Any> const& args,
+        css::uno::Reference<css::uno::XComponentContext> const& xContext )
+        : ServiceImpl_BASE(rServiceDecl, args, xContext) {}
+    ServiceImpl(
+        ServiceDecl const& rServiceDecl,
+        css::uno::Reference<css::uno::XComponentContext> const& xContext )
+        : ServiceImpl_BASE(rServiceDecl, xContext) {}
+};
+
 template <typename ServiceImplT>
 struct PostProcessDefault {
     css::uno::Reference<css::uno::XInterface>
@@ -227,7 +242,7 @@ struct CreateFunc<ImplT, PostProcessFuncT, with_args<false> > {
                 const& xContext ) const
     {
         return m_postProcessFunc(
-            new ServiceImpl<ImplT>( rServiceDecl, xContext ) );
+            new ImplT( rServiceDecl, xContext ) );
     }
 };
 
@@ -244,7 +259,7 @@ struct CreateFunc<ImplT, PostProcessFuncT, with_args<true> > {
                 const& xContext ) const
     {
         return m_postProcessFunc(
-            new ServiceImpl<ImplT>( rServiceDecl, args, xContext ) );
+            new ImplT( rServiceDecl, args, xContext ) );
     }
 };
 
@@ -258,18 +273,17 @@ struct CreateFunc<ImplT, PostProcessFuncT, with_args<true> > {
                or just (uno::Reference<uno::XComponentContext>)
 */
 template <typename ImplT_, typename WithArgsT = with_args<false> >
-struct class_ {
+struct serviceimpl_base {
     typedef ImplT_ ImplT;
-    typedef detail::ServiceImpl<ImplT_> ServiceImplT;
     
     detail::CreateFuncF const m_createFunc;
     
-    typedef detail::PostProcessDefault<ServiceImplT> PostProcessDefaultT;
+    typedef detail::PostProcessDefault<ImplT> PostProcessDefaultT;
 
     /** Default ctor.  Implementation class without args, expecting
         component context as single argument.
     */
-    class_() : m_createFunc(
+    serviceimpl_base() : m_createFunc(
         detail::CreateFunc<ImplT, PostProcessDefaultT, WithArgsT>(
             PostProcessDefaultT() ) ) {}
 
@@ -281,11 +295,29 @@ struct class_ {
                                uno::Reference<uno::XInterface>
     */
     template <typename PostProcessFuncT>
-    explicit class_( PostProcessFuncT const& postProcessFunc )
+    explicit serviceimpl_base( PostProcessFuncT const& postProcessFunc )
         : m_createFunc( detail::CreateFunc<ImplT, PostProcessFuncT, WithArgsT>(
                             postProcessFunc ) ) {}
 };
 
+template <typename ImplT_, typename WithArgsT = with_args<false> >
+struct class_ : public serviceimpl_base< detail::ServiceImpl<ImplT_>, WithArgsT >
+{
+    typedef serviceimpl_base< detail::ServiceImpl<ImplT_>, WithArgsT > baseT;
+    /** Default ctor.  Implementation class without args, expecting
+        component context as single argument.
+    */
+    class_() : baseT() {}
+    template <typename PostProcessFuncT>
+    /** Ctor to pass a post processing function/functor.
+
+        @tpl PostProcessDefaultT let your compiler deduce this
+        @param postProcessFunc function/functor that gets the yet unacquired
+                               ImplT_ pointer returning a
+                               uno::Reference<uno::XInterface>
+    */
+    explicit class_( PostProcessFuncT const& postProcessFunc ) : baseT( postProcessFunc ) {}
+};
 
 //
 // component_... helpers with arbitrary service declarations:
diff --git a/oovbaapi/genconstidl/makefile.mk b/oovbaapi/genconstidl/makefile.mk
index c310a36..1fc5744 100644
--- a/oovbaapi/genconstidl/makefile.mk
+++ b/oovbaapi/genconstidl/makefile.mk
@@ -52,18 +52,16 @@ MYDONEFILES += $(foreach,i,$(MYSYMFILES) $(MISC)$/$(i:b).done)
 
 ALLTAR: GENIDL
 
-GENIDL : $(MY_GEN_IDL_PATH) $(MYDONEFILES)
+GENIDL : $(MYDONEFILES)
 
 GENRDB : GENIDL $(MYURDFILES)
 
 $(MISC)$/%.done : %.api
+    @@-$(MKDIR) $(MY_GEN_IDL_PATH)
     @echo Processing $?
     $(PERL) api-to-idl.pl $? $(MY_GEN_IDL_PATH)
     @$(TOUCH) $@
 
-$(MY_GEN_IDL_PATH) : 
-    @@-$(MKDIR) $@
-
 CLEAN :
     @$(RM) $(MY_GEN_IDL_PATH)$/*.idl
     @$(RM) $(foreach,i,$(MYSYMFILES) $(MISC)$/$(i:b).done)
diff --git a/oovbaapi/ooo/vba/ControlProvider.idl b/oovbaapi/ooo/vba/ControlProvider.idl
new file mode 100644
index 0000000..0a818c2
--- /dev/null
+++ b/oovbaapi/ooo/vba/ControlProvider.idl
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGlobals.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_ControlProvider_idl__
+#define __ooo_vba_ControlProvider_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __com_sun_star_frame_XModel_idl__
+#include <com/sun/star/frame/XModel.idl>
+#endif
+
+
+module ooo {  module vba {
+
+interface XControlProvider;
+
+service ControlProvider
+{
+    interface ::ooo::vba::XControlProvider;
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/Globals.idl b/oovbaapi/ooo/vba/Globals.idl
index a392800..e69de29 100644
--- a/oovbaapi/ooo/vba/Globals.idl
+++ b/oovbaapi/ooo/vba/Globals.idl
@@ -1,45 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-
-#ifndef __ooo_vba_Globals_idl__
-#define __ooo_vba_Globals_idl__
-
-#ifndef __ooo_vba_XGlobals_idl__
-#include <ooo/vba/XGlobals.idl>
-#endif
-
-#include <com/sun/star/uno/XComponentContext.idl>
-#include <com/sun/star/table/XCellRange.idl>
-
-module ooo {  module vba {
-service Globals : XGlobals
-{
-};
-
-}; };
-
-#endif
diff --git a/oovbaapi/ooo/vba/XApplicationBase.idl b/oovbaapi/ooo/vba/XApplicationBase.idl
new file mode 100644
index 0000000..229759c
--- /dev/null
+++ b/oovbaapi/ooo/vba/XApplicationBase.idl
@@ -0,0 +1,66 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XApplicationBase_idl__
+#define __ooo_vba_XApplicationBase_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {
+//=============================================================================
+
+interface XApplicationBase
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    [attribute] boolean ScreenUpdating;
+    [attribute] boolean DisplayStatusBar;
+    [attribute, readonly] string Version;
+
+    void Quit();
+
+    any CommandBars( [in] any aIndex );
+    void Run([in] string MacroName, [in] /*Optional*/ any varg1, [in] /*Optional*/ any varg2, [in] /*Optional*/ any varg3, [in] /*Optional*/ any varg4, [in] /*Optional*/ any varg5, [in] /*Optional*/ any varg6, [in] /*Optional*/ any varg7, [in] /*Optional*/ any varg8, [in] /*Optional*/ any varg9, [in] /*Optional*/ any varg10, [in] /*Optional*/ any varg11, [in] /*Optional*/ any varg12, [in] /*Optional*/ any varg13, [in] /*Optional*/ any varg14, [in] /*Optional*/ any varg15, [in] /*Optional*/ any varg16, [in] /*Optional*/ any varg17, [in] /*Optional*/ any varg18, [in] /*Optional*/ any varg19, [in] /*Optional*/ any varg20, [in] /*Optional*/ any varg21, [in] /*Optional*/ any varg22, [in] /*Optional*/ any varg23, [in] /*Optional*/ any varg24, [in] /*Optional*/ any varg25, [in] /*Optional*/ any varg26, [in] /*Optional*/ any varg27, [in] /*Optional*/ any varg28, [in] /*Optional*/ any varg29, [in] /*Optional*/ any varg30);
+    float CentimetersToPoints([in] float Centimeters );
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XCommandBar.idl b/oovbaapi/ooo/vba/XCommandBar.idl
index 33df7a4..adcb7ef 100644
--- a/oovbaapi/ooo/vba/XCommandBar.idl
+++ b/oovbaapi/ooo/vba/XCommandBar.idl
@@ -46,9 +46,12 @@ interface XCommandBar
 
     [attribute] string Name;
     [attribute] boolean Visible;
+    [attribute] boolean Enabled;
     
     void Delete() raises ( com::sun::star::script::BasicErrorException );
     any Controls( [in] any Index ) raises ( com::sun::star::script::BasicErrorException );
+    long Type() raises ( com::sun::star::script::BasicErrorException );
+    any FindControl( [in] any Type, [in] any Id, [in] any Tag, [in] any Visible, [in] any Recursive ) raises ( com::sun::star::script::BasicErrorException );
 };
 
 }; };
diff --git a/oovbaapi/ooo/vba/XCommandBarButton.idl b/oovbaapi/ooo/vba/XCommandBarButton.idl
new file mode 100644
index 0000000..56fc5d5
--- /dev/null
+++ b/oovbaapi/ooo/vba/XCommandBarButton.idl
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XCommandBarButton_idl__
+#define __ooo_vba_XCommandBarButton_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+//=============================================================================
+
+module ooo {  module vba {
+//=============================================================================
+
+interface XCommandBarButton: com::sun::star::uno::XInterface
+{
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XCommandBarControl.idl b/oovbaapi/ooo/vba/XCommandBarControl.idl
index 33222a2..d3af18a 100644
--- a/oovbaapi/ooo/vba/XCommandBarControl.idl
+++ b/oovbaapi/ooo/vba/XCommandBarControl.idl
@@ -46,6 +46,8 @@ interface XCommandBarControl
     [attribute] string Caption;
     [attribute] string OnAction;
     [attribute] boolean Visible;
+    [attribute, readonly] long Type;
+    [attribute] boolean Enabled;
     
     void Delete() raises ( com::sun::star::script::BasicErrorException );
     any Controls( [in] any Index ) raises ( com::sun::star::script::BasicErrorException );
diff --git a/oovbaapi/ooo/vba/XCommandBarPopup.idl b/oovbaapi/ooo/vba/XCommandBarPopup.idl
new file mode 100644
index 0000000..b91bc0e
--- /dev/null
+++ b/oovbaapi/ooo/vba/XCommandBarPopup.idl
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XCommandBarPopup_idl__
+#define __ooo_vba_XCommandBarPopup_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+//=============================================================================
+
+module ooo {  module vba {
+//=============================================================================
+
+interface XCommandBarPopup: com::sun::star::uno::XInterface
+{
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XControlProvider.idl b/oovbaapi/ooo/vba/XControlProvider.idl
new file mode 100644
index 0000000..7c8abe9
--- /dev/null
+++ b/oovbaapi/ooo/vba/XControlProvider.idl
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGlobals.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XControlProvider_idl__
+#define __ooo_vba_XControlProvider_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __com_sun_star_frame_XModel_idl__
+#include <com/sun/star/frame/XModel.idl>
+#endif
+
+#ifndef __com_sun_star_awt_XControl_idl__
+#include <com/sun/star/awt/XControl.idl>
+#endif
+
+#ifndef __com_sun_star_drawing_XControlShape_idl__
+#include <com/sun/star/drawing/XControlShape.idl>
+#endif
+#ifndef __ooo_vba_msforms_XControl_idl__
+#include <ooo/vba/msforms/XControl.idl>
+#endif
+
+module ooo {  module vba {
+
+interface XControlProvider
+{
+   ::ooo::vba::msforms::XControl createControl( [in] ::com::sun::star::drawing::XControlShape xControl, [in] ::com::sun::star::frame::XModel xDocOwner );
+   ::ooo::vba::msforms::XControl createUserformControl( [in] ::com::sun::star::awt::XControl xControl, [in] ::com::sun::star::awt::XControl xDialog, [in] ::com::sun::star::frame::XModel xDocOwner );
+
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XDialogBase.idl b/oovbaapi/ooo/vba/XDialogBase.idl
new file mode 100644
index 0000000..5076134
--- /dev/null
+++ b/oovbaapi/ooo/vba/XDialogBase.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDialog.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XDialog_idl__
+#define __ooo_vba_XDialog_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {
+
+//=============================================================================
+
+interface XDialogBase
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    void Show();
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XDialogsBase.idl b/oovbaapi/ooo/vba/XDialogsBase.idl
new file mode 100644
index 0000000..29466ef
--- /dev/null
+++ b/oovbaapi/ooo/vba/XDialogsBase.idl
@@ -0,0 +1,59 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDialogs.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XDialogs_idl__
+#define __ooo_vba_XDialogs_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {
+
+//interface XDialogs : ::ooo::vba::XCollection
+interface XDialogsBase
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    [attribute, readonly] long Count;
+    any Item( [in] any Index );
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XDocumentBase.idl b/oovbaapi/ooo/vba/XDocumentBase.idl
new file mode 100644
index 0000000..efd4761
--- /dev/null
+++ b/oovbaapi/ooo/vba/XDocumentBase.idl
@@ -0,0 +1,67 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XDocumentBase_idl__
+#define __ooo_vba_XDocumentBase_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {
+//=============================================================================
+
+interface XDocumentBase
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    [attribute, readonly] string  Name;
+    [attribute, readonly] string  Path;
+    [attribute, readonly] string  FullName;
+    [attribute] boolean Saved;
+
+    void Close([in] any SaveChanges, [in] any FileName, [in] any RouteWorkBook);
+    void Save();
+    void Activate();
+    void Protect( [in] any Password );
+    void Unprotect( [in] any Password );
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XDocumentProperties.idl b/oovbaapi/ooo/vba/XDocumentProperties.idl
new file mode 100644
index 0000000..8e3547c
--- /dev/null
+++ b/oovbaapi/ooo/vba/XDocumentProperties.idl
@@ -0,0 +1,70 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDocument.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_XDocumentProperties_idl__
+#define __ooo_vba_XDocumentProperties_idl__
+
+#ifndef __com_sun_star_script_BasicErrorException_idl__
+#include <com/sun/star/script/BasicErrorException.idl>
+#endif
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+module ooo { module vba {
+interface XDocumentProperty;
+interface XDocumentProperties
+{
+    interface XCollection;
+    /** Creates a new custom document property.
+     * You can only add a new document property to the custom DocumentProperties collection. Depending on value of
+     * boolean LinkSource, either (False) Value or (True) LinkSource must be provided.
+     * @param Name (Required String. The name of the property.
+     * @param LinkToContent Specifies whether the property is linked to the contents of the container document. If this argument is True, the LinkSource argument is required; if it's False, the value argument is required.
+     * @param Type The data type of the property. Can be one of the following MsoDocProperties constants:
+     * msoPropertyTypeBoolean, msoPropertyTypeDate, msoPropertyTypeFloat, msoPropertyTypeNumber, or msoPropertyTypeString.
+     * @param Value The value of the property, if it's not linked to the contents of the container document.
+     * The value is converted to match the data type specified by the type argument, if it can't be converted, an error occurs.
+     * If LinkToContent is True, the Value argument is ignored and the new document property is assigned a default value
+     * until the linked property values are updated by the container application (usually when the document is saved).
+     * @param LinkSource Ignored if LinkToContent is False. The source of the linked property. The container application determines
+     * what types of source linking you can use.
+     */
+    XDocumentProperty Add([in] string Name, [in] boolean LinkToContent, [in] /* MsoDocProperties */ byte Type, [in] any Value,
+        [in] /*optional*/ any LinkSource)
+        raises (com::sun::star::script::BasicErrorException);
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XDocumentProperty.idl b/oovbaapi/ooo/vba/XDocumentProperty.idl
new file mode 100644
index 0000000..b87f087
--- /dev/null
+++ b/oovbaapi/ooo/vba/XDocumentProperty.idl
@@ -0,0 +1,105 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDocument.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_XDocumentProperty_idl__
+#define __ooo_vba_XDocumentProperty_idl__
+
+#ifndef __com_sun_star_script_BasicErrorException_idl__
+#include <com/sun/star/script/BasicErrorException.idl>
+#endif
+#ifndef __com_sun_star_script_XDefaultProperty_idl__
+#include <com/sun/star/script/XDefaultProperty.idl>
+#endif
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo { module vba {
+
+/**
+ * Specific built-in document property. Use CustomDocumentProperties(index),
+ * where index is the name or index number of the custom document property,
+ * to return a DocumentProperty object that represents a specific custom document property.
+ */
+interface XDocumentProperty
+{
+
+    interface com::sun::star::script::XDefaultProperty;
+    interface ooo::vba::XHelperInterface;
+
+    void Delete()
+        raises (com::sun::star::script::BasicErrorException);
+
+    /** Required String. The name of the property.
+     */
+    string getName()
+        raises (com::sun::star::script::BasicErrorException);
+
+    void setName([in] string Name)
+        raises (com::sun::star::script::BasicErrorException);
+
+    /** The data type of the property.
+     * Can be one of the following MsoDocProperties constants:
+     * msoPropertyTypeBoolean, msoPropertyTypeDate, msoPropertyTypeFloat,
+     * msoPropertyTypeNumber, or msoPropertyTypeString.
+     */
+    byte getType()
+        raises (com::sun::star::script::BasicErrorException);
+
+    void setType([in] byte Type)
+        raises (com::sun::star::script::BasicErrorException);
+
+    /** If true, then LinkSource has a valid value. */
+    boolean getLinkToContent()
+        raises (com::sun::star::script::BasicErrorException);
+
+    void setLinkToContent([in] boolean LinkToContent)
+        raises (com::sun::star::script::BasicErrorException);
+
+    /** If LinkToContent is false, then this contains the value of the property
+     * The data type of the value will match the Type property.
+     */
+    any getValue()
+        raises (com::sun::star::script::BasicErrorException);
+
+    void setValue([in] any Value)
+        raises (com::sun::star::script::BasicErrorException);
+
+    /** If LinkToContent is false, then this contains the value of the property */
+    string getLinkSource()
+        raises (com::sun::star::script::BasicErrorException);
+
+    void setLinkSource([in] string LinkSource)
+        raises (com::sun::star::script::BasicErrorException);
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XDocumentsBase.idl b/oovbaapi/ooo/vba/XDocumentsBase.idl
new file mode 100644
index 0000000..866e9b7
--- /dev/null
+++ b/oovbaapi/ooo/vba/XDocumentsBase.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDocumentsBase.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XDocumentsBase_idl__
+#define __ooo_vba_XDocumentsBase_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {
+
+//=============================================================================
+
+interface XDocumentsBase
+{
+    interface ::ooo::vba::XCollection;
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XFontBase.idl b/oovbaapi/ooo/vba/XFontBase.idl
new file mode 100644
index 0000000..c48bfd8
--- /dev/null
+++ b/oovbaapi/ooo/vba/XFontBase.idl
@@ -0,0 +1,69 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XFont.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XFont_idl__
+#define __ooo_vba_XFont_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+#ifndef __com_sun_star_lang_IndexOutOfBoundsException_idl__
+#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {
+
+interface XFontBase
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    [attribute] any   Size;
+    [attribute] any    ColorIndex;
+    [attribute] any    Color;
+    [attribute] any Bold;
+    [attribute] any Underline;
+    [attribute] any Strikethrough;
+    [attribute] any Shadow;
+    [attribute] any Italic;
+    [attribute] any Subscript;
+    [attribute] any Superscript;
+    [attribute] any  Name;
+};
+
+//=============================================================================
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XGlobals.idl b/oovbaapi/ooo/vba/XGlobals.idl
index ff20861..e69de29 100644
--- a/oovbaapi/ooo/vba/XGlobals.idl
+++ b/oovbaapi/ooo/vba/XGlobals.idl
@@ -1,64 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef __ooo_vba_XGlobals_idl__
-#define __ooo_vba_XGlobals_idl__
-
-#ifndef __com_sun_star_uno_XInterface_idl__
-#include <com/sun/star/uno/XInterface.idl>
-#endif
-#ifndef __ooo_vba_excel_XApplication_idl__
-#include <ooo/vba/excel/XApplication.idl>
-#endif
-#ifndef __ooo_vba_excel_XWorkbook_idl__
-#include <ooo/vba/excel/XWorkbook.idl>
-#endif
-#ifndef __ooo_vba_excel_XWorksheet_idl__
-#include <ooo/vba/excel/XWorksheet.idl>
-#endif
-
-module ooo {  module vba { 
-
-interface XGlobals: com::sun::star::uno::XInterface
-{
-        // FIXME, need better way to expose globals
-    sequence< any > getGlobals();
-
-    [attribute, readonly] ooo::vba::excel::XApplication Application;
-    [attribute, readonly] ooo::vba::excel::XWorkbook ActiveWorkbook;
-    [attribute, readonly] ooo::vba::excel::XWorksheet ActiveSheet;
-    any WorkSheets( [in] any aIndex );
-    any WorkBooks( [in] any aIndex );
-    any Sheets( [in] any aIndex );
-    any Range( [in] any Cell1, [in] any Cell2 );
-    any Names( [in] any Index );
-};
-
-}; };
-
-#endif
-
-
diff --git a/oovbaapi/ooo/vba/XGlobalsBase.idl b/oovbaapi/ooo/vba/XGlobalsBase.idl
new file mode 100644
index 0000000..302720b
--- /dev/null
+++ b/oovbaapi/ooo/vba/XGlobalsBase.idl
@@ -0,0 +1,51 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGlobals.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XGlobalsBase_idl__
+#define __ooo_vba_XGlobalsBase_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+#ifndef __com_sun_star_lang_XMultiServiceFactory
+#include <com/sun/star/lang/XMultiServiceFactory.idl>
+#endif
+module ooo {  module vba {
+interface XGlobalsBase
+{
+    interface ::ooo::vba::XHelperInterface;
+    interface ::com::sun::star::lang::XMultiServiceFactory;
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XPageSetupBase.idl b/oovbaapi/ooo/vba/XPageSetupBase.idl
new file mode 100644
index 0000000..bb280a9
--- /dev/null
+++ b/oovbaapi/ooo/vba/XPageSetupBase.idl
@@ -0,0 +1,65 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XPageSetupBase_idl__
+#define __ooo_vba_XPageSetupBase_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {
+
+//=============================================================================
+
+
+interface XPageSetupBase
+{
+
+    interface ::ooo::vba::XHelperInterface;
+
+    //Attributes
+    [attribute] double TopMargin;
+    [attribute] double BottomMargin;
+    [attribute] double RightMargin;
+    [attribute] double LeftMargin;
+    [attribute] long Orientation;
+};
+
+//=============================================================================
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/XWindowBase.idl b/oovbaapi/ooo/vba/XWindowBase.idl
new file mode 100644
index 0000000..b17b9cf
--- /dev/null
+++ b/oovbaapi/ooo/vba/XWindowBase.idl
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_XHelperWindow_idl__
+#define __ooo_vba_XHelperWindow_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {
+//=============================================================================
+
+interface XWindowBase
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    [attribute] long Height;
+    [attribute] long Left;
+    [attribute] long Top;
+    [attribute] boolean Visible;
+    [attribute] long Width;
+};
+
+}; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/excel/Globals.idl b/oovbaapi/ooo/vba/excel/Globals.idl
new file mode 100644
index 0000000..49315f1
--- /dev/null
+++ b/oovbaapi/ooo/vba/excel/Globals.idl
@@ -0,0 +1,48 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: Globals.idl,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_excel_Globals_idl__
+#define __ooo_vba_excel_Globals_idl__
+
+#ifndef __ooo_vba_excel_XGlobals_idl__
+#include <ooo/vba/excel/XGlobals.idl>
+#endif
+
+#include <com/sun/star/uno/XComponentContext.idl>
+#include <com/sun/star/table/XCellRange.idl>
+
+module ooo {  module vba { module excel {
+service Globals : XGlobals
+{
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/excel/TextFrame.idl b/oovbaapi/ooo/vba/excel/TextFrame.idl
new file mode 100644
index 0000000..0679eef
--- /dev/null
+++ b/oovbaapi/ooo/vba/excel/TextFrame.idl
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_excel_TextFrame_idl__
+#define __ooo_vba_excel_TextFrame_idl__
+
+#ifndef __ooo_vba_excel_XTextFrame_idl__
+#include <ooo/vba/excel/XTextFrame.idl>
+#endif
+
+#include <com/sun/star/uno/XComponentContext.idl>
+
+module ooo {  module vba { module excel {
+service TextFrame : XTextFrame
+{
+	//createTextFrame(  [in] ::ooo::vba::XHelperInterface Parent, [in] ::com::sun::star::frame::XModel xModel );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/excel/XApplication.idl b/oovbaapi/ooo/vba/excel/XApplication.idl
index f39b5df..87ed7e8 100644
--- a/oovbaapi/ooo/vba/excel/XApplication.idl
+++ b/oovbaapi/ooo/vba/excel/XApplication.idl
@@ -39,10 +39,6 @@
 #include <ooo/vba/XAssistant.idl>
 #endif
 
-#ifndef __ooo_vba_XCommandBars_idl__
-#include <ooo/vba/XCommandBars.idl>
-#endif
-
 module ooo {  module vba {  module excel { 
 
 interface XRange;
@@ -53,10 +49,10 @@ interface XWorksheetFunction;
 interface XWindow;
 interface XWorksheet;
 
-interface XApplication
+interface XApplication : com::sun::star::uno::XInterface
 {
 
-    interface ::ooo::vba::XHelperInterface;
+//	interface ::ooo::vba::XHelperInterface;
 
     [attribute, readonly] any Selection;
     [attribute, readonly] XWorkbook ActiveWorkbook;
@@ -71,14 +67,11 @@ interface XApplication
     // to determine this
     [attribute, readonly] XWorkbook ThisWorkbook;
     [attribute, readonly] string Name;
-    [attribute] boolean ScreenUpdating;
-    [attribute] boolean DisplayStatusBar;
     [attribute] boolean DisplayAlerts;
     [attribute] boolean DisplayFormulaBar;
     [attribute] any CutCopyMode;
     [attribute] any StatusBar;
     [attribute] long Cursor; 
-    [attribute, readonly] string Version;
 
     void setDefaultFilePath([in] string DefaultFilePath) raises(com::sun::star::script::BasicErrorException);
 
@@ -87,7 +80,7 @@ interface XApplication
     string LibraryPath() raises(com::sun::star::script::BasicErrorException);
     string TemplatesPath() raises(com::sun::star::script::BasicErrorException);
     string PathSeparator() raises(com::sun::star::script::BasicErrorException);
-    any CommandBars( [in] any aIndex );
+    //any CommandBars( [in] any aIndex );
     any Workbooks( [in] any aIndex );
     any Worksheets( [in] any aIndex );
     any Windows( [in] any aIndex );
@@ -107,6 +100,7 @@ interface XApplication
         raises(com::sun::star::script::BasicErrorException);
     void Volatile([in] any Volatile);
     void DoEvents();
+    any Caller( [in] any aIndex );
 };
 
 }; }; };
diff --git a/oovbaapi/ooo/vba/excel/XDialog.idl b/oovbaapi/ooo/vba/excel/XDialog.idl
index 3fef0da..551ad14 100644
--- a/oovbaapi/ooo/vba/excel/XDialog.idl
+++ b/oovbaapi/ooo/vba/excel/XDialog.idl
@@ -42,13 +42,8 @@ module ooo {  module vba {  module excel {
                                                                                                                              
 //=============================================================================
 
-interface XApplication;
-                                                                                                                             
-interface XDialog 
+interface XDialog : com::sun::star::uno::XInterface
 {
-    interface ::ooo::vba::XHelperInterface;
-
-    void Show();
 };
                                                                                                                              
 }; }; };
diff --git a/oovbaapi/ooo/vba/excel/XDialogs.idl b/oovbaapi/ooo/vba/excel/XDialogs.idl
index 47c66ba..533666b 100644
--- a/oovbaapi/ooo/vba/excel/XDialogs.idl
+++ b/oovbaapi/ooo/vba/excel/XDialogs.idl
@@ -30,9 +30,6 @@
 #ifndef __com_sun_star_uno_XInterface_idl__
 #include <com/sun/star/uno/XInterface.idl>
 #endif
-#ifndef __ooo_vba_XCollection_idl__
-#include <ooo/vba/XCollection.idl>
-#endif
 
 #ifndef __ooo_vba_XHelperInterface_idl__
 #include <ooo/vba/XHelperInterface.idl>
@@ -41,15 +38,9 @@
 //=============================================================================
                                                                                                                              
 module ooo {  module vba {  module excel {
-interface XApplication;                                                                                                                             
-//=============================================================================
                                                                                                                              
-//interface XDialogs : ::ooo::vba::XCollection
-interface XDialogs 
+interface XDialogs : com::sun::star::uno::XInterface
 {
-    interface ::ooo::vba::XHelperInterface;
-
-        [attribute, readonly] long Count;
 
     any Item( [in] any Index );
 };
diff --git a/oovbaapi/ooo/vba/excel/XFont.idl b/oovbaapi/ooo/vba/excel/XFont.idl
index 7057bba..7f4be72 100644
--- a/oovbaapi/ooo/vba/excel/XFont.idl
+++ b/oovbaapi/ooo/vba/excel/XFont.idl
@@ -44,22 +44,9 @@ module ooo {  module vba {  module excel {
 
 interface XFont
 {
-    interface ::ooo::vba::XHelperInterface;
-
-    [attribute] any   Size;
     [attribute] any StandardFontSize;
     [attribute] any  StandardFont;
     [attribute] any  FontStyle;
-    [attribute] any    ColorIndex;
-    [attribute] any    Color;
-    [attribute] any Bold;
-    [attribute] any Underline;
-    [attribute] any Strikethrough;
-    [attribute] any Shadow;
-    [attribute] any Italic;
-    [attribute] any Subscript;
-    [attribute] any Superscript;
-    [attribute] any  Name;
     [attribute] any  OutlineFont;
 };
 
diff --git a/oovbaapi/ooo/vba/excel/XGlobals.idl b/oovbaapi/ooo/vba/excel/XGlobals.idl
new file mode 100644
index 0000000..397ab21
--- /dev/null
+++ b/oovbaapi/ooo/vba/excel/XGlobals.idl
@@ -0,0 +1,84 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGlobals.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_excel_XGlobals_idl__
+#define __ooo_vba_excel_XGlobals_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+#ifndef __com_sun_star_script_BasicErrorException_idl__
+#include <com/sun/star/script/BasicErrorException.idl>
+#endif
+#ifndef __ooo_vba_excel_XWorkbook_idl__
+#include <ooo/vba/excel/XWorkbook.idl>
+#endif
+#ifndef __ooo_vba_excel_XWorksheet_idl__
+#include <ooo/vba/excel/XWorksheet.idl>
+#endif
+#ifndef __ooo_vba_XAssistant_idl__
+#include <ooo/vba/XAssistant.idl>
+#endif
+
+module ooo {  module vba {  module excel {
+interface XRange;
+interface XWindow;
+interface XGlobals: com::sun::star::uno::XInterface
+{
+    [attribute, readonly] ooo::vba::excel::XWorkbook ActiveWorkbook;
+    [attribute, readonly] ooo::vba::excel::XWorksheet ActiveSheet;
+    [attribute, readonly] ooo::vba::excel::XWindow ActiveWindow;
+    [attribute, readonly] ooo::vba::excel::XRange ActiveCell;
+    [attribute, readonly] ooo::vba::XAssistant Assistant;
+    [attribute, readonly] any Selection;
+    [attribute, readonly] XWorkbook ThisWorkbook;
+
+    void Calculate() raises(com::sun::star::script::BasicErrorException);
+    XRange Cells([in] any RowIndex, [in] any ColumnIndex);
+    XRange Columns([in] any aIndex);
+    any CommandBars( [in] any aIndex );
+    any Evaluate( [in] string Name );
+XRange Intersect([in] XRange Arg1, [in] XRange Arg2, [in] /*Optional*/ any Arg3, [in] /*Optional*/ any Arg4, [in] /*Optional*/ any Arg5, [in] /*Optional*/ any Arg6, [in] /*Optional*/ any Arg7, [in] /*Optional*/ any Arg8, [in] /*Optional*/ any Arg9, [in] /*Optional*/ any Arg10, [in] /*Optional*/ any Arg11, [in] /*Optional*/ any Arg12, [in] /*Optional*/ any Arg13, [in] /*Optional*/ any Arg14, [in] /*Optional*/ any Arg15, [in] /*Optional*/ any Arg16, [in] /*Optional*/ any Arg17, [in] /*Optional*/ any Arg18, [in] /*Optional*/ any Arg19, [in] /*Optional*/ any Arg20, [in] /*Optional*/ any Arg21, [in] /*Optional*/ any Arg22, [in] /*Optional*/ any Arg23, [in] /*Optional*/ any Arg24, [in] /*Optional*/ any Arg25, [in] /*Optional*/ any Arg26, [in] /*Optional*/ any Arg27, [in] /*Optional*/ any Arg28, [in] /*Optional*/ any Arg29, [in] /*Optional*/ any Arg30)
+        raises(com::sun::star::script::BasicErrorException);
+    any WorkSheets( [in] any aIndex );
+    any WorkBooks( [in] any aIndex );
+    any WorksheetFunction();
+    any Windows( [in] any aIndex );
+    any Sheets( [in] any aIndex );
+    any Range( [in] any Cell1, [in] any Cell2 );
+    XRange Rows([in] any aIndex);
+    any Names( [in] any Index );
+    XRange Union([in] XRange Arg1, [in] XRange Arg2, [in] /*Optional*/ any Arg3, [in] /*Optional*/ any Arg4, [in] /*Optional*/ any Arg5, [in] /*Optional*/ any Arg6, [in] /*Optional*/ any Arg7, [in] /*Optional*/ any Arg8, [in] /*Optional*/ any Arg9, [in] /*Optional*/ any Arg10, [in] /*Optional*/ any Arg11, [in] /*Optional*/ any Arg12, [in] /*Optional*/ any Arg13, [in] /*Optional*/ any Arg14, [in] /*Optional*/ any Arg15, [in] /*Optional*/ any Arg16, [in] /*Optional*/ any Arg17, [in] /*Optional*/ any Arg18, [in] /*Optional*/ any Arg19, [in] /*Optional*/ any Arg20, [in] /*Optional*/ any Arg21, [in] /*Optional*/ any Arg22, [in] /*Optional*/ any Arg23, [in] /*Optional*/ any Arg24, [in] /*Optional*/ any Arg25, [in] /*Optional*/ any Arg26, [in] /*Optional*/ any Arg27, [in] /*Optional*/ any Arg28, [in] /*Optional*/ any Arg29, [in] /*Optional*/ any Arg30)
+        raises(com::sun::star::script::BasicErrorException);
+
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/excel/XPageSetup.idl b/oovbaapi/ooo/vba/excel/XPageSetup.idl
index 5e81791..ff9c1a3 100644
--- a/oovbaapi/ooo/vba/excel/XPageSetup.idl
+++ b/oovbaapi/ooo/vba/excel/XPageSetup.idl
@@ -42,20 +42,15 @@ module ooo {  module vba {  module excel {
 //=============================================================================
 
 
-interface XPageSetup
+interface XPageSetup : com::sun::star::uno::XInterface
 {
 
-    interface ::ooo::vba::XHelperInterface;
+//	interface ::ooo::vba::XHelperInterface;
 
     //Attributes
     [attribute] string PrintArea;
-    [attribute] double TopMargin;
-    [attribute] double BottomMargin;
-    [attribute] double RightMargin;
-    [attribute] double LeftMargin;
     [attribute] double HeaderMargin;
     [attribute] double FooterMargin;
-    [attribute] long Orientation;
     [attribute] any FitToPagesTall;
     [attribute] any FitToPagesWide;
     [attribute] any Zoom;
diff --git a/oovbaapi/ooo/vba/excel/XTextFrame.idl b/oovbaapi/ooo/vba/excel/XTextFrame.idl
index 3721d08..603145d 100644
--- a/oovbaapi/ooo/vba/excel/XTextFrame.idl
+++ b/oovbaapi/ooo/vba/excel/XTextFrame.idl
@@ -31,21 +31,9 @@
 #include <ooo/vba/XHelperInterface.idl>
 #endif
 
-#ifndef __ooo_vba_excel_XCharacters_idl__
-#include <ooo/vba/excel/XCharacters.idl>
-#endif
-
 module ooo {  module vba {  module excel {
-interface XTextFrame : ooo::vba::XHelperInterface
+interface XTextFrame : com::sun::star::uno::XInterface
 {
-    [attribute] boolean AutoSize;
-    [attribute] float MarginBottom;
-    [attribute] float MarginTop;
-    [attribute] float MarginLeft;
-    [attribute] float MarginRight;
-    XCharacters Characters();
-    /*I don't find it in msdn
-    Range TextRange();*/
 };
 }; }; };
 #endif
diff --git a/oovbaapi/ooo/vba/excel/XVPageBreak.idl b/oovbaapi/ooo/vba/excel/XVPageBreak.idl
new file mode 100644
index 0000000..627814d
--- /dev/null
+++ b/oovbaapi/ooo/vba/excel/XVPageBreak.idl
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XVPageBreak.idl,v $
+ * $Revision: 1.0 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_excel_XVPageBreak_idl__
+#define __ooo_vba_excel_XVPageBreak_idl__
+
+#ifndef __ooo_vba_excel_XPageBreak_idl__
+#include <ooo/vba/excel/XPageBreak.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {  module excel {
+
+//=============================================================================
+
+interface XVPageBreak
+{
+    interface ::ooo::vba::excel::XPageBreak;
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/excel/XVPageBreaks.idl b/oovbaapi/ooo/vba/excel/XVPageBreaks.idl
new file mode 100644
index 0000000..18ebc43
--- /dev/null
+++ b/oovbaapi/ooo/vba/excel/XVPageBreaks.idl
@@ -0,0 +1,69 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XVPageBreaks.idl,v $
+ * $Revision: 1.0 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_excel_XVPageBreaks_idl__
+#define __ooo_vba_excel_XVPageBreaks_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __com_sun_star_helper_script_BasicErrorException_idl__
+#include <com/sun/star/script/BasicErrorException.idl>
+#endif
+
+#ifndef  __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {  module excel {
+
+//=============================================================================
+
+//interface XVPageBreak;
+
+interface XVPageBreaks
+{
+    interface ooo::vba::XCollection;
+
+    //Methods
+    any Add( [in] any Before ) raises( com::sun::star::script::BasicErrorException );
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/excel/XWindow.idl b/oovbaapi/ooo/vba/excel/XWindow.idl
index e095fa8..4d97a32 100644
--- a/oovbaapi/ooo/vba/excel/XWindow.idl
+++ b/oovbaapi/ooo/vba/excel/XWindow.idl
@@ -43,10 +43,8 @@ module ooo {  module vba {  module excel {
 interface XRange;
 interface XWorksheet;
 interface XPane;
-interface XWindow
+interface XWindow : com::sun::star::uno::XInterface
 {
-    interface ::ooo::vba::XHelperInterface;
-
     [attribute] any Caption;
     [attribute] boolean DisplayGridlines; 
     [attribute] boolean DisplayHeadings; 
@@ -55,8 +53,6 @@ interface XWindow
     [attribute] boolean DisplayVerticalScrollBar; 
     [attribute] boolean DisplayWorkbookTabs; 
     [attribute] boolean FreezePanes; 
-    [attribute] long Height; 
-    [attribute] long Left; 
     [attribute] boolean Split; 
     [attribute] long SplitColumn;
     [attribute] double SplitHorizontal;
@@ -64,10 +60,7 @@ interface XWindow
     [attribute] double SplitVertical;
     [attribute] any ScrollColumn;
     [attribute] any ScrollRow;
-    [attribute] long Top; 
     [attribute] any View;
-    [attribute] boolean Visible;
-    [attribute] long Width; 
     [attribute] any WindowState;
     [attribute] any Zoom;
     any SelectedSheets( [in] any aIndex );
diff --git a/oovbaapi/ooo/vba/excel/XWorkbook.idl b/oovbaapi/ooo/vba/excel/XWorkbook.idl
index 73a7b96..dcc5e20 100644
--- a/oovbaapi/ooo/vba/excel/XWorkbook.idl
+++ b/oovbaapi/ooo/vba/excel/XWorkbook.idl
@@ -45,31 +45,20 @@ interface XWorksheet;
 interface XWorksheets;
 interface XStyles;
 
-interface XWorkbook
+interface XWorkbook : com::sun::star::uno::XInterface
 {
-    interface ::ooo::vba::XHelperInterface;
-
-    [attribute, readonly] string  Name;
-    [attribute, readonly] string  Path;
-    [attribute, readonly] string  FullName;
     [attribute, readonly] boolean ProtectStructure; 
     [attribute, readonly] XWorksheet ActiveSheet;
-    [attribute] boolean Saved;
     [attribute, readonly] string  CodeName;
+    [attribute] boolean  PrecisionAsDisplayed;
 
     any  Worksheets([in] any sheet);
     any  Styles([in] any Index );
     any  Sheets([in] any sheet);
     any  Windows([in] any index );
-    void Close([in] any SaveChanges, [in] any FileName, [in] any RouteWorkBook);
-    void Protect( [in] any Password );
-    void Unprotect( [in] any Password );
-    void Save();
-    void Activate();
     void ResetColors() raises (com::sun::star::script::BasicErrorException);
-
+    void Activate();
     any Names( [in] any Index );
-
     any Colors([in] any Index) raises (com::sun::star::script::BasicErrorException);
     long FileFormat() raises (com::sun::star::script::BasicErrorException);
     void SaveCopyAs( [in] string Filename );
diff --git a/oovbaapi/ooo/vba/excel/XWorkbooks.idl b/oovbaapi/ooo/vba/excel/XWorkbooks.idl
index ced2739..d56e18d 100644
--- a/oovbaapi/ooo/vba/excel/XWorkbooks.idl
+++ b/oovbaapi/ooo/vba/excel/XWorkbooks.idl
@@ -42,9 +42,8 @@ module ooo {  module vba {  module excel {
 
 //=============================================================================
 
-interface XWorkbooks 
+interface XWorkbooks : com::sun::star::uno::XInterface
 {
-    interface ::ooo::vba::XCollection;
     any Add();
     any Open([in] string Filename, [in] any UpdateLinks, [in] any ReadOnly, [in] any Format, [in] any Password, [in] any WriteResPassword, [in] any IgnoreReadOnlyRecommended, [in] any Origin, [in] any Delimiter, [in] any Editable, [in] any Notify, [in] any Converter, [in] any AddToMru);
 
diff --git a/oovbaapi/ooo/vba/excel/XWorksheet.idl b/oovbaapi/ooo/vba/excel/XWorksheet.idl
index 4cec94a..7612e0f 100644
--- a/oovbaapi/ooo/vba/excel/XWorksheet.idl
+++ b/oovbaapi/ooo/vba/excel/XWorksheet.idl
@@ -50,6 +50,7 @@ interface XRange;
 interface XOutline;
 interface XPageSetup;
 interface XHPageBreaks;
+interface XVPageBreaks;
 interface XWorksheet
 {
     interface ::ooo::vba::XHelperInterface;
@@ -67,6 +68,7 @@ interface XWorksheet
     [attribute, readonly] XWorksheet Previous;
     [attribute, readonly] string CodeName;
      [attribute, readonly] short Index;
+	[attribute] long EnableSelection;
     
     void Activate();
     void Calculate( );
@@ -85,6 +87,7 @@ interface XWorksheet
     XOutline Outline();
     XPageSetup PageSetup();
     any HPageBreaks([in] any Index);
+    any VPageBreaks([in] any Index);
     any OLEObjects([in] any Index);
     void ShowDataForm();
     any Shapes([in] any Index);
diff --git a/oovbaapi/ooo/vba/excel/makefile.mk b/oovbaapi/ooo/vba/excel/makefile.mk
index 5e9f84b..23a0f07 100644
--- a/oovbaapi/ooo/vba/excel/makefile.mk
+++ b/oovbaapi/ooo/vba/excel/makefile.mk
@@ -42,7 +42,9 @@ dummy:
 # ------------------------------------------------------------------------
 
 
-IDLFILES= XApplication.idl\
+IDLFILES= XGlobals.idl\
+    Globals.idl\
+    XApplication.idl\
     XComment.idl\
     XComments.idl\
     XRange.idl\
@@ -99,6 +101,9 @@ IDLFILES= XApplication.idl\
      XPageBreak.idl \
      XHPageBreak.idl \
      XHPageBreaks.idl \
+	XVPageBreak.idl \
+	XVPageBreaks.idl \
+	TextFrame.idl \
 
 
 # ------------------------------------------------------------------
diff --git a/oovbaapi/ooo/vba/makefile.mk b/oovbaapi/ooo/vba/makefile.mk
index 9c5df80..2a378e2 100644
--- a/oovbaapi/ooo/vba/makefile.mk
+++ b/oovbaapi/ooo/vba/makefile.mk
@@ -43,7 +43,6 @@ dummy:
 .IF "$(L10N_framework)"=""
 IDLFILES=\
     XErrObject.idl \
-    XGlobals.idl \
     XCollection.idl\
     XVBAToOOEventDescGen.idl\
     XPropValue.idl\
@@ -53,7 +52,21 @@ IDLFILES=\
     XCommandBarControls.idl\
     XCommandBar.idl\
     XCommandBars.idl\
-    Globals.idl\
+    XCommandBarPopup.idl\
+    XCommandBarButton.idl\
+    XControlProvider.idl\
+    ControlProvider.idl\
+    XApplicationBase.idl\
+    XWindowBase.idl\
+    XDocumentBase.idl\
+    XDocumentsBase.idl\
+    XGlobalsBase.idl\
+    XDocumentProperty.idl\
+    XDocumentProperties.idl\
+    XFontBase.idl\
+    XDialogsBase.idl\
+    XDialogBase.idl\
+    XPageSetupBase.idl  \
 
 # ------------------------------------------------------------------
 .ENDIF
diff --git a/oovbaapi/ooo/vba/msforms/XControl.idl b/oovbaapi/ooo/vba/msforms/XControl.idl
index e93054f..38fc4ad 100644
--- a/oovbaapi/ooo/vba/msforms/XControl.idl
+++ b/oovbaapi/ooo/vba/msforms/XControl.idl
@@ -58,6 +58,7 @@ interface XControl
     [attribute] double  Left;
     [attribute] double  Top;
     [attribute] string Name;
+    [attribute] string ControlTipText;
 };
 
 //=============================================================================
diff --git a/oovbaapi/ooo/vba/msforms/XShape.idl b/oovbaapi/ooo/vba/msforms/XShape.idl
index c4588c3..3dc7c4a 100644
--- a/oovbaapi/ooo/vba/msforms/XShape.idl
+++ b/oovbaapi/ooo/vba/msforms/XShape.idl
@@ -31,10 +31,6 @@
 #include <ooo/vba/XHelperInterface.idl>
 #endif
 
-#ifndef __ooo_vba_excel_XTextFrame_idl__
-#include <ooo/vba/excel/XTextFrame.idl>
-#endif
-
 #ifndef __ooo_vba_msforms_XLineFormat_idl__
 #include <ooo/vba/msforms/XLineFormat.idl>
 #endif
@@ -63,14 +59,13 @@ interface XShape : ooo::vba::XHelperInterface
     [attribute, readonly] XLineFormat Line;
     [attribute, readonly] XFillFormat Fill;
     [attribute, readonly] XPictureFormat PictureFormat;
+    [attribute] boolean LockAspectRatio;
+    [attribute] boolean LockAnchor;
+    [attribute] long RelativeHorizontalPosition;
+    [attribute] long RelativeVerticalPosition;
 
-    /*
-    using in word
-    [attribute] RelativeHorizontalPosition
-    [attribute] RelativeVerticalPosition
-    [attribute] XWrapFormat WrapFormat;
-    */
-    ooo::vba::excel::XTextFrame TextFrame();
+    any TextFrame();
+    any WrapFormat();
     void Delete();
     void ZOrder( [in] long ZOrderCmd );
     void IncrementRotation( [in] double Increment );
diff --git a/oovbaapi/ooo/vba/msforms/XShapeRange.idl b/oovbaapi/ooo/vba/msforms/XShapeRange.idl
index 86bdbfc..7347ad4 100644
--- a/oovbaapi/ooo/vba/msforms/XShapeRange.idl
+++ b/oovbaapi/ooo/vba/msforms/XShapeRange.idl
@@ -41,9 +41,25 @@
 
 module ooo {  module vba { module msforms {
 
+interface XLineFormat;
+interface XFillFormat;
 interface XShapeRange 
 {
     interface ooo::vba::XCollection;
+
+    [attribute] double Height;
+    [attribute] double Width;
+    [attribute] double Left;
+    [attribute] double Top;
+    [attribute, readonly] XLineFormat Line;
+    [attribute, readonly] XFillFormat Fill;
+    [attribute] boolean LockAspectRatio;
+    [attribute] boolean LockAnchor;
+    [attribute] long RelativeHorizontalPosition;
+    [attribute] long RelativeVerticalPosition;
+
+    any TextFrame();
+    any WrapFormat();
     void Select();
     XShape Group();
     void IncrementRotation( [in] double Increment );
diff --git a/oovbaapi/ooo/vba/msforms/XShapes.idl b/oovbaapi/ooo/vba/msforms/XShapes.idl
index c5db83f..998d438 100644
--- a/oovbaapi/ooo/vba/msforms/XShapes.idl
+++ b/oovbaapi/ooo/vba/msforms/XShapes.idl
@@ -48,6 +48,7 @@ interface XShapes
     */
     any AddLine( [in] long StartX, [in] long StartY, [in] long endX, [in] long endY );
     any AddShape([in] long ShapeType, [in] long StartX, [in] long StartY, [in] long endX, [in] long endY );
+    any AddTextbox([in] long Orientation, [in] long Left, [in] long Top, [in] long Width, [in] long Height );
 };
 }; }; };
 
diff --git a/oovbaapi/ooo/vba/msforms/XTextFrame.idl b/oovbaapi/ooo/vba/msforms/XTextFrame.idl
new file mode 100644
index 0000000..0015e0c
--- /dev/null
+++ b/oovbaapi/ooo/vba/msforms/XTextFrame.idl
@@ -0,0 +1,50 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XTextFrame.idl,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_msforms_XTextFrame_idl__
+#define __ooo_vba_msforms_XTextFrame_idl__
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module msforms {
+interface XTextFrame : ooo::vba::XHelperInterface
+{
+    [attribute] boolean AutoSize;
+    [attribute] float MarginBottom;
+    [attribute] float MarginTop;
+    [attribute] float MarginLeft;
+    [attribute] float MarginRight;
+    any Characters();
+    /*I don't find it in msdn
+    Range TextRange();*/
+};
+}; }; };
+#endif
diff --git a/oovbaapi/ooo/vba/msforms/makefile.mk b/oovbaapi/ooo/vba/msforms/makefile.mk
index 6060a64..d14b816 100644
--- a/oovbaapi/ooo/vba/msforms/makefile.mk
+++ b/oovbaapi/ooo/vba/msforms/makefile.mk
@@ -67,6 +67,7 @@ IDLFILES=\
     XSpinButton.idl \
     XImage.idl \
     XControls.idl \
+    XTextFrame.idl \
 
 # ------------------------------------------------------------------
 
diff --git a/oovbaapi/ooo/vba/word/XAddin.idl b/oovbaapi/ooo/vba/word/XAddin.idl
new file mode 100644
index 0000000..2c3c17b
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XAddin.idl
@@ -0,0 +1,59 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XAddin_idl__
+#define __ooo_vba_word_XAddin_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __com_sun_star_container_XNamed_idl__
+#include <com/sun/star/container/XNamed.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XAddin
+{
+    interface ooo::vba::XHelperInterface;
+    interface ::com::sun::star::container::XNamed;
+
+    [attribute, readonly] string Path;
+    [attribute, readonly] boolean Autoload;
+    [attribute] boolean Installed;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XAddins.idl b/oovbaapi/ooo/vba/word/XAddins.idl
new file mode 100644
index 0000000..405fecb
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XAddins.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XAddins_idl__
+#define __ooo_vba_word_XAddins_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XAddins
+{
+    interface ::ooo::vba::XCollection;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XApplication.idl b/oovbaapi/ooo/vba/word/XApplication.idl
new file mode 100644
index 0000000..cf0bf8c
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XApplication.idl
@@ -0,0 +1,68 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XApplication.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XApplication_idl__
+#define __ooo_vba_word_XApplication_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XDocument;
+interface XWindow;
+interface XSystem;
+interface XOptions;
+interface XSelection;
+interface XApplication : com::sun::star::uno::XInterface
+{
+    [attribute, readonly] XDocument ActiveDocument;
+    [attribute, readonly] XWindow ActiveWindow;
+    [attribute, readonly] string Name;
+    [attribute, readonly] ooo::vba::word::XSystem System;
+    [attribute, readonly] ooo::vba::word::XOptions Options;
+    [attribute, readonly] ooo::vba::word::XSelection Selection;
+    [attribute] boolean DisplayAutoCompleteTips;
+    [attribute] long EnableCancelKey;
+
+    any CommandBars( [in] any aIndex );
+    any Documents( [in] any aIndex );
+    any Addins( [in] any aIndex );
+    any Dialogs( [in] any aIndex );
+    float CentimetersToPoints([in] float Centimeters );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XAutoTextEntries.idl b/oovbaapi/ooo/vba/word/XAutoTextEntries.idl
new file mode 100644
index 0000000..9491def
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XAutoTextEntries.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XAutoTextEntries_idl__
+#define __ooo_vba_word_XAutoTextEntries_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XAutoTextEntries
+{
+    interface ::ooo::vba::XCollection;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XAutoTextEntry.idl b/oovbaapi/ooo/vba/word/XAutoTextEntry.idl
new file mode 100644
index 0000000..c654f43
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XAutoTextEntry.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XAutoTextEntry_idl__
+#define __ooo_vba_word_XAutoTextEntry_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __com_sun_star_container_XNamed_idl__
+#include <com/sun/star/container/XNamed.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XRange;
+interface XAutoTextEntry
+{
+    interface ooo::vba::XHelperInterface;
+
+    XRange Insert([in] XRange Where, [in] /*Optional*/ any RichText);
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XBookmark.idl b/oovbaapi/ooo/vba/word/XBookmark.idl
new file mode 100644
index 0000000..47c5ff9
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XBookmark.idl
@@ -0,0 +1,59 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XBookmark_idl__
+#define __ooo_vba_word_XBookmark_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __com_sun_star_container_XNamed_idl__
+#include <com/sun/star/container/XNamed.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XBookmark
+{
+    interface ooo::vba::XHelperInterface;
+    interface ::com::sun::star::container::XNamed;
+
+    void Delete();
+    void Select();
+    any Range();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XBookmarks.idl b/oovbaapi/ooo/vba/word/XBookmarks.idl
new file mode 100644
index 0000000..3ab1f5e
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XBookmarks.idl
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XBookmarks_idl__
+#define __ooo_vba_word_XBookmarks_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XBookmarks
+{
+    interface ::ooo::vba::XCollection;
+
+    [attribute] long DefaultSorting;
+    [attribute] boolean ShowHidden;
+
+    any Add( [in] string Name, [in] any Range );
+    boolean Exists( [in] string Name );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XBorder.idl b/oovbaapi/ooo/vba/word/XBorder.idl
new file mode 100644
index 0000000..273a141
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XBorder.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XBorder.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XBorder_idl__
+#define __ooo_vba_word_XBorder_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+
+//=============================================================================
+interface XBorder
+{
+    interface ::ooo::vba::XHelperInterface;
+
+    [attribute] any LineStyle;
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XBorders.idl b/oovbaapi/ooo/vba/word/XBorders.idl
new file mode 100644
index 0000000..3dc922d
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XBorders.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XBorders.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XBorders_idl__
+#define __ooo_vba_word_XBorders_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+#ifndef  __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+interface XBorders
+{
+    interface ooo::vba::XCollection;
+
+    [attribute] boolean Shadow;
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XDialog.idl b/oovbaapi/ooo/vba/word/XDialog.idl
new file mode 100644
index 0000000..a8efba9
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XDialog.idl
@@ -0,0 +1,54 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDialog.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XDialog_idl__
+#define __ooo_vba_word_XDialog_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XDialog : com::sun::star::uno::XInterface
+{
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XDialogs.idl b/oovbaapi/ooo/vba/word/XDialogs.idl
new file mode 100644
index 0000000..43f5273
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XDialogs.idl
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDialogs.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XDialogs_idl__
+#define __ooo_vba_word_XDialogs_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+interface XDialogs : com::sun::star::uno::XInterface
+{
+
+    any Item( [in] any Index );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XDocument.idl b/oovbaapi/ooo/vba/word/XDocument.idl
new file mode 100644
index 0000000..6164e09
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XDocument.idl
@@ -0,0 +1,73 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XDocument.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XDocument_idl__
+#define __ooo_vba_word_XDocument_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __ooo_vba_word_XRange_idl__
+#include <ooo/vba/word/XRange.idl>
+#endif
+
+#ifndef __com_sun_star_script_XInvocation_idl__
+#include <com/sun/star/script/XInvocation.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XDocument : com::sun::star::script::XInvocation
+{
+    [attribute, readonly] XRange Content;
+    [attribute] any AttachedTemplate;
+
+    XRange Range( [in] any Start, [in] any End );
+    any BuiltInDocumentProperties( [in] any index );
+    any CustomDocumentProperties( [in] any index );
+    any Bookmarks( [in] any aIndex );
+    any Variables( [in] any aIndex );
+    any Paragraphs( [in] any aIndex );
+    any Styles( [in] any aIndex );
+    any Tables( [in] any aIndex );
+    any Fields( [in] any aIndex );
+    any Shapes([in] any Index);
+    any Sections([in] any Index);
+    void Activate();
+    any PageSetup();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XDocuments.idl b/oovbaapi/ooo/vba/word/XDocuments.idl
new file mode 100644
index 0000000..476209c
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XDocuments.idl
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XDocuments_idl__
+#define __ooo_vba_word_XDocuments_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XDocuments : com::sun::star::uno::XInterface
+{
+    any Add([in] any Template, [in] any NewTemplate, [in] any DocumentType, [in] any Visible);
+    any Open([in] string Filename, [in] any ConfirmConversions, [in] any ReadOnly, [in] any AddToRecentFiles, [in] any PasswordDocument, [in] any PasswordTemplate, [in] any Revert, [in] any WritePasswordDocument, [in] any WritePasswordTemplate, [in] any Format, [in] any Encoding, [in] any Visible, [in] any OpenAndRepair, [in] any DocumentDirection, [in] any NoEncodingDialog, [in] any XMLTransform);
+
+    void Close([in] any SaveChanges,[in] any OriginalFormat,[in] any RouteDocument);
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XField.idl b/oovbaapi/ooo/vba/word/XField.idl
new file mode 100644
index 0000000..71aad4d
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XField.idl
@@ -0,0 +1,51 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: XField.idl,v $
+ *
+ *  $Revision: 1.1 $
+ *
+ *  last change: $Author: jsc $ $Date: 2007/02/09 08:35:01 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_word_XField_idl__
+#define __ooo_vba_word_XField_idl__
+
+#ifndef  __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+module ooo { module vba { module word {
+
+interface XField
+{
+    interface ::ooo::vba::XHelperInterface;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XFields.idl b/oovbaapi/ooo/vba/word/XFields.idl
new file mode 100644
index 0000000..5ccfd47
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XFields.idl
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: XFields.idl,v $
+ *
+ *  $Revision: 1.1 $
+ *
+ *  last change: $Author: jsc $ $Date: 2007/02/09 08:45:13 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_word__XFields_idl__
+#define __ooo_vba_word__XFields_idl__
+
+#ifndef  __ooo_vba_HelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+module ooo { module vba { module word {
+
+interface XRange;
+interface XField;
+interface XFields
+{
+    interface ooo::vba::XCollection;
+
+    XField Add([in] XRange Range, [in] any Type, [in] any Text,[in] any PreserveFormatting);
+    long Update();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XFind.idl b/oovbaapi/ooo/vba/word/XFind.idl
new file mode 100644
index 0000000..e847cfb
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XFind.idl
@@ -0,0 +1,85 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XFind_idl__
+#define __ooo_vba_word_XFind_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XFind
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] string Text;
+    [attribute] any Replacement;
+    [attribute] boolean Forward;
+    [attribute] long Wrap;
+    [attribute] boolean Format;
+    [attribute] boolean MatchCase;
+    [attribute] boolean MatchWholeWord;
+    [attribute] boolean MatchWildcards;
+    [attribute] boolean MatchSoundsLike;
+    [attribute] boolean MatchAllWordForms;
+    [attribute] any Style;
+
+    boolean Execute([in] /* string */ any FindText,
+        [in] /* boolean */ any MatchCase,
+        [in] /* boolean */ any MatchWholeWord,
+        [in] /* boolean */ any MatchWildcards,
+        [in] /* boolean */ any MatchSoundsLike,
+        [in] /* boolean */ any MatchAllWordForms,
+        [in] /* boolean */ any Forward,
+        [in] /* long */ any Wrap,
+        [in] /* boolean */ any Format,
+        [in] /* string */ any ReplaceWith,
+        [in] /* boolean */ any Replace,
+        [in] /* boolean */ any MatchKashida,
+        [in] /* boolean */ any MatchDiacritics,
+        [in] /* boolean */ any MatchAlefHamza,
+        [in] /* boolean */ any MatchControl,
+        [in] /* boolean */ any MatchPrefix,
+        [in] /* boolean */ any MatchSuffix,
+        [in] /* boolean */ any MatchPhrase,
+        [in] /* boolean */ any IgnoreSpace,
+        [in] /* boolean */ any IgnorePunct );
+    void ClearFormatting();
+
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XFont.idl b/oovbaapi/ooo/vba/word/XFont.idl
new file mode 100644
index 0000000..b359d4d
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XFont.idl
@@ -0,0 +1,56 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XFont.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XFont_idl__
+#define __ooo_vba_word_XFont_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+#ifndef __com_sun_star_lang_IndexOutOfBoundsException_idl__
+#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+interface XFont : com::sun::star::uno::XInterface
+{
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XGlobals.idl b/oovbaapi/ooo/vba/word/XGlobals.idl
new file mode 100644
index 0000000..4b6540f
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XGlobals.idl
@@ -0,0 +1,60 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XGlobals.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XGlobals_idl__
+#define __ooo_vba_word_XGlobals_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+interface XDocument;
+interface XWindow;
+interface XSystem;
+interface XOptions;
+interface XSelection;
+interface XGlobals : com::sun::star::uno::XInterface
+{
+    [attribute, readonly] XDocument ActiveDocument;
+    [attribute, readonly] XWindow ActiveWindow;
+    [attribute, readonly] string Name;
+    [attribute, readonly] ooo::vba::word::XSystem System;
+    [attribute, readonly] ooo::vba::word::XOptions Options;
+    [attribute, readonly] ooo::vba::word::XSelection Selection;
+    any CommandBars( [in] any aIndex );
+    any Documents( [in] any aIndex );
+    any Addins( [in] any aIndex );
+    any Dialogs( [in] any aIndex );
+    float CentimetersToPoints([in] float Centimeters );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XHeaderFooter.idl b/oovbaapi/ooo/vba/word/XHeaderFooter.idl
new file mode 100644
index 0000000..e58b953
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XHeaderFooter.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XHeaderFooter_idl__
+#define __ooo_vba_word_XHeaderFooter_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XRange;
+interface XHeaderFooter
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute, readonly] boolean IsHeader;
+    [attribute] boolean LinkToPrevious;
+    [attribute, readonly] XRange Range;
+    //[attribute, readonly] XShapers Shapes ;
+    any Shapes([in] any Index);
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XOptions.idl b/oovbaapi/ooo/vba/word/XOptions.idl
new file mode 100644
index 0000000..93cd5a0
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XOptions.idl
@@ -0,0 +1,66 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XOptions_idl__
+#define __ooo_vba_word_XOptions_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XOptions
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] long DefaultBorderLineStyle;
+    [attribute] long DefaultBorderLineWidth;
+    [attribute] long DefaultBorderColorIndex;
+    [attribute] boolean ReplaceSelection;
+    [attribute] boolean MapPaperSize;
+    [attribute] boolean AutoFormatAsYouTypeApplyHeadings;
+    [attribute] boolean AutoFormatAsYouTypeApplyBulletedLists;
+    [attribute] boolean AutoFormatAsYouTypeApplyNumberedLists;
+    [attribute] boolean AutoFormatAsYouTypeFormatListItemBeginning;
+    [attribute] boolean AutoFormatAsYouTypeDefineStyles;
+    [attribute] boolean AutoFormatApplyHeadings;
+    [attribute] boolean AutoFormatApplyLists;
+    [attribute] boolean AutoFormatApplyBulletedLists;
+
+    any DefaultFilePath( [in] long Path );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XPageSetup.idl b/oovbaapi/ooo/vba/word/XPageSetup.idl
new file mode 100644
index 0000000..35a614f
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XPageSetup.idl
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XPageSetup_idl__
+#define __ooo_vba_word_XPageSetup_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+
+interface XPageSetup : com::sun::star::uno::XInterface
+{
+    [attribute] double Gutter;
+    [attribute] double HeaderDistance;
+    [attribute] double FooterDistance;
+    [attribute] boolean DifferentFirstPageHeaderFooter;
+    [attribute] long SectionStart;
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XPane.idl b/oovbaapi/ooo/vba/word/XPane.idl
new file mode 100644
index 0000000..4fd030f
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XPane.idl
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XPane_idl__
+#define __ooo_vba_word_XPane_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XPane
+{
+    interface ooo::vba::XHelperInterface;
+
+    any View();
+    void Close();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XPanes.idl b/oovbaapi/ooo/vba/word/XPanes.idl
new file mode 100644
index 0000000..0e638f6
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XPanes.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XPanes_idl__
+#define __ooo_vba_word_XPanes_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XPanes
+{
+    interface ::ooo::vba::XCollection;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XParagraph.idl b/oovbaapi/ooo/vba/word/XParagraph.idl
new file mode 100644
index 0000000..35511e3
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XParagraph.idl
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XParagraph_idl__
+#define __ooo_vba_word_XParagraph_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XRange;
+interface XParagraph
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute, readonly] XRange Range;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XParagraphFormat.idl b/oovbaapi/ooo/vba/word/XParagraphFormat.idl
new file mode 100644
index 0000000..4f1418a
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XParagraphFormat.idl
@@ -0,0 +1,68 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XParagraphFormat_idl__
+#define __ooo_vba_word_XParagraphFormat_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+
+module ooo {  module vba {  module word {
+
+interface XParagraphFormat
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] long Alignment;
+    [attribute] float FirstLineIndent;
+    [attribute] any KeepTogether;
+    [attribute] any KeepWithNext;
+    [attribute] any Hyphenation;
+    [attribute] float LineSpacing;
+    [attribute] long LineSpacingRule;
+    [attribute] any NoLineNumber;
+    [attribute] long OutlineLevel;
+    [attribute] any PageBreakBefore;
+    [attribute] float SpaceBefore;
+    [attribute] float SpaceAfter;
+    [attribute] float LeftIndent;
+    [attribute] float RightIndent;
+    [attribute] any TabStops;
+    [attribute] any WidowControl;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XParagraphs.idl b/oovbaapi/ooo/vba/word/XParagraphs.idl
new file mode 100644
index 0000000..6ccbc02
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XParagraphs.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XParagraphs_idl__
+#define __ooo_vba_word_XParagraphs_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XParagraphs
+{
+    interface ::ooo::vba::XCollection;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XRange.idl b/oovbaapi/ooo/vba/word/XRange.idl
new file mode 100644
index 0000000..df442e0
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XRange.idl
@@ -0,0 +1,76 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XRange_idl__
+#define __ooo_vba_word_XRange_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __com_sun_star_text_XTextRange_idl__
+#include <com/sun/star/text/XTextRange.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+
+module ooo {  module vba {  module word {
+
+interface XParagraphFormat;
+interface XStyle;
+interface XFont;
+interface XRange
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] string Text;
+    [attribute] XParagraphFormat ParagraphFormat;
+    [attribute] XStyle Style;
+    [attribute,readonly] ::com::sun::star::text::XTextRange XTextRange;
+    // Of course Font is NOT readonly, #FIXME #TODO
+    // readonly though will force an error attempting to write
+    [attribute, readonly] XFont Font;
+    [attribute] long LanguageID;
+    [attribute] long Start;
+    [attribute] long End;
+
+    void InsertBreak( [in] any Type );
+    void Select();
+    void InsertParagraph();
+    void InsertParagraphBefore();
+    void InsertParagraphAfter();
+    any PageSetup();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XReplacement.idl b/oovbaapi/ooo/vba/word/XReplacement.idl
new file mode 100644
index 0000000..dd83416
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XReplacement.idl
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XReplacement_idl__
+#define __ooo_vba_word_XReplacement_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XReplacement
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] string Text;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XSection.idl b/oovbaapi/ooo/vba/word/XSection.idl
new file mode 100644
index 0000000..a2024a1
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XSection.idl
@@ -0,0 +1,56 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XSection_idl__
+#define __ooo_vba_word_XSection_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XSection
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] boolean ProtectedForForms;
+
+    any Headers();
+    any Footers();
+    any PageSetup();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XSections.idl b/oovbaapi/ooo/vba/word/XSections.idl
new file mode 100644
index 0000000..c2c83ad
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XSections.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XSections_idl__
+#define __ooo_vba_word_XSections_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XSections
+{
+    interface ::ooo::vba::XCollection;
+
+    any PageSetup();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XSelection.idl b/oovbaapi/ooo/vba/word/XSelection.idl
new file mode 100644
index 0000000..2f48f4d
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XSelection.idl
@@ -0,0 +1,87 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XSelection_idl__
+#define __ooo_vba_word_XSelection_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+
+module ooo {  module vba {  module word {
+
+interface XRange;
+interface XParagraphFormat;
+interface XFind;
+interface XFont;
+interface XStyle;
+interface XHeaderFooter;
+interface XSelection
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] string Text;
+    [attribute, readonly] XRange Range;
+    [attribute] XParagraphFormat ParagraphFormat;
+    [attribute, readonly] XFind Find;
+    [attribute] XStyle Style;
+    [attribute, readonly] XFont Font;
+    [attribute, readonly] XHeaderFooter HeaderFooter;
+    [attribute] long LanguageID;
+    [attribute] long Start;
+    [attribute] long End;
+
+    any Tables( [in] any aIndex );
+    any Fields( [in] any aIndex );
+    void TypeText( [in] string Text );
+    void HomeKey( [in] any Unit, [in] any Extend );
+    void EndKey( [in] any Unit, [in] any Extend );
+    void Delete( [in] any Unit, [in] any Count );
+    void MoveRight( [in] any Unit, [in] any Count, [in] any Extend );
+    void MoveLeft( [in] any Unit, [in] any Count, [in] any Extend );
+    void MoveDown( [in] any Unit, [in] any Count, [in] any Extend );
+    void TypeParagraph();
+    void InsertParagraph();
+    void InsertParagraphBefore();
+    void InsertParagraphAfter();
+    void TypeBackspace();
+    XRange GoTo( [in] any What, [in] any Which, [in] any Count, [in] any Name );
+    any Information( [in] long Type );
+    void InsertBreak( [in] any Type );
+    any ShapeRange();
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XStyle.idl b/oovbaapi/ooo/vba/word/XStyle.idl
new file mode 100644
index 0000000..5963d95
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XStyle.idl
@@ -0,0 +1,56 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XStyle_idl__
+#define __ooo_vba_word_XStyle_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XFont;
+interface XStyle
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] string Name;
+    [attribute] long LanguageID;
+    [attribute, readonly] long Type;
+    [attribute, readonly] XFont Font;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XStyles.idl b/oovbaapi/ooo/vba/word/XStyles.idl
new file mode 100644
index 0000000..70a74aa
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XStyles.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XStyles_idl__
+#define __ooo_vba_word_XStyles_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XStyles
+{
+    interface ::ooo::vba::XCollection;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XSystem.idl b/oovbaapi/ooo/vba/word/XSystem.idl
new file mode 100644
index 0000000..c038de4
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XSystem.idl
@@ -0,0 +1,54 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XSystem_idl__
+#define __ooo_vba_word_XSystem_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+
+module ooo {  module vba {  module word {
+
+interface XSystem
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] long Cursor;
+    any PrivateProfileString( [in] string Filename, [in] string Section, [in] string Key );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XTable.idl b/oovbaapi/ooo/vba/word/XTable.idl
new file mode 100644
index 0000000..a4769c9
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XTable.idl
@@ -0,0 +1,85 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: XTable.idl,v $
+ *
+ *  $Revision: 1.1 $
+ *
+ *  last change: $Author: jsc $ $Date: 2007/02/09 08:35:01 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_word_XTable_idl__
+#define __ooo_vba_word_XTable_idl__
+
+#ifndef  __com_sun_star_script_BasicErrorException_idl__
+#include <com/sun/star/script/BasicErrorException.idl>
+#endif
+
+#ifndef  __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+module ooo { module vba { module word {
+
+interface XRange;
+
+interface XTable
+{
+    interface ::ooo::vba::XHelperInterface;
+    [attribute, readonly ] string Name; // for debug only
+
+    XRange Range() raises (com::sun::star::script::BasicErrorException);
+
+    /**
+     select the table
+     */
+    void Select()
+        raises (com::sun::star::script::BasicErrorException);
+
+    /**
+     delete the table
+     */
+    void Delete()
+        raises (com::sun::star::script::BasicErrorException);
+
+    /**
+     convert the table to text
+     @param Separator the separator used for the text where cell separation was
+     @return XRange a range containing the text
+     @throw BasicErrorException when the conversion cannot be done
+     */
+/*
+    XRange ConvertToText([in] any Separator, [in] any NestedTables)
+        raises(com::sun::star::script::BasicErrorException);
+*/
+    any Borders( [in] any aIndex );
+
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XTables.idl b/oovbaapi/ooo/vba/word/XTables.idl
new file mode 100644
index 0000000..70bbdfb
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XTables.idl
@@ -0,0 +1,78 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: XTables.idl,v $
+ *
+ *  $Revision: 1.1 $
+ *
+ *  last change: $Author: jsc $ $Date: 2007/02/09 08:45:13 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef __ooo_vba_word__XTables_idl__
+#define __ooo_vba_word__XTables_idl__
+
+#ifndef  __ooo_vba_HelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+#ifndef __ooo_vba_word_XTable_idl__
+#include <ooo/vba/word/XTable.idl>
+#endif
+
+#ifndef __com_sun_star_script_BasicErrorException_idl__
+#include <com/sun/star/script/BasicErrorException.idl>
+#endif
+
+module ooo { module vba { module word {
+
+interface XRange;
+
+interface XTables
+{
+    interface ooo::vba::XCollection;
+    /** Creates a new Table, optionally with a name.
+     <p>Creates a new table at the current cursor position. </p>
+     @param range
+     @returns
+     reference to the new table.
+     */
+    XTable Add([in] XRange Range, [in] any NumRows, [in] any NumColumns,
+    /*optional*/ [in] any DefaultTableBehavior,
+    /*optional*/ [in] any AutoFitBehavior)
+        raises(com::sun::star::script::BasicErrorException);
+
+
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XTemplate.idl b/oovbaapi/ooo/vba/word/XTemplate.idl
new file mode 100644
index 0000000..52ad4dd
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XTemplate.idl
@@ -0,0 +1,54 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XTemplate_idl__
+#define __ooo_vba_word_XTemplate_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XTemplate
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute, readonly] string Name;
+
+    any AutoTextEntries( [in] any aIndex );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XVariable.idl b/oovbaapi/ooo/vba/word/XVariable.idl
new file mode 100644
index 0000000..a1a320b
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XVariable.idl
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XVariable_idl__
+#define __ooo_vba_word_XVariable_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+#ifndef __com_sun_star_container_XNamed_idl__
+#include <com/sun/star/container/XNamed.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XVariable
+{
+    interface ooo::vba::XHelperInterface;
+    interface ::com::sun::star::container::XNamed;
+
+    [attribute] any Value;
+    [attribute, readonly] long Index;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XVariables.idl b/oovbaapi/ooo/vba/word/XVariables.idl
new file mode 100644
index 0000000..7d2587d
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XVariables.idl
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XVariables_idl__
+#define __ooo_vba_word_XVariables_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XCollection_idl__
+#include <ooo/vba/XCollection.idl>
+#endif
+
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+
+interface XVariables
+{
+    interface ::ooo::vba::XCollection;
+
+    any Add( [in] string Name, [in] any Value );
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XView.idl b/oovbaapi/ooo/vba/word/XView.idl
new file mode 100644
index 0000000..f25598d
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XView.idl
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XView_idl__
+#define __ooo_vba_word_XView_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+
+interface XView
+{
+    interface ooo::vba::XHelperInterface;
+
+    [attribute] long SeekView;
+    [attribute] long SplitSpecial;
+    [attribute] boolean TableGridLines;
+    [attribute] long Type;
+};
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XWindow.idl b/oovbaapi/ooo/vba/word/XWindow.idl
new file mode 100644
index 0000000..7f19da8
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XWindow.idl
@@ -0,0 +1,60 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XWindow.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XWindow_idl__
+#define __ooo_vba_word_XWindow_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+//=============================================================================
+
+module ooo {  module vba {  module word {
+
+//=============================================================================
+//interface XPane;
+interface XWindow : com::sun::star::uno::XInterface
+{
+    [attribute] any View;
+    void Activate();
+    void Close([in] any SaveChanges, [in] any RouteDocument);
+    any Panes( [in] any aIndex ); // this is a fake api for it seems not support in Write
+    any ActivePane(); // this is a fake api for it seems not support in Write
+};
+
+//=============================================================================
+
+}; }; };
+
+#endif
diff --git a/oovbaapi/ooo/vba/word/XWrapFormat.idl b/oovbaapi/ooo/vba/word/XWrapFormat.idl
new file mode 100644
index 0000000..a3de520
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/XWrapFormat.idl
@@ -0,0 +1,48 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XWrapFormat.idl,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __ooo_vba_word_XWrapFormat_idl__
+#define __ooo_vba_word_XWrapFormat_idl__
+
+#ifndef __ooo_vba_XHelperInterface_idl__
+#include <ooo/vba/XHelperInterface.idl>
+#endif
+
+module ooo {  module vba {  module word {
+interface XWrapFormat : ooo::vba::XHelperInterface
+{
+    [attribute] long Type;
+    [attribute] long Side;
+    [attribute] float DistanceTop;
+    [attribute] float DistanceBottom;
+    [attribute] float DistanceLeft;
+    [attribute] float DistanceRight;
+};
+}; }; };
+#endif
diff --git a/oovbaapi/ooo/vba/word/makefile.mk b/oovbaapi/ooo/vba/word/makefile.mk
new file mode 100644
index 0000000..891a676
--- /dev/null
+++ b/oovbaapi/ooo/vba/word/makefile.mk
@@ -0,0 +1,89 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: makefile.mk,v $
+#
+# $Revision: 1.4 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+PRJ=..$/..$/..
+
+PRJNAME=oovapi
+
+TARGET=word
+PACKAGE=ooo$/vba$/Word
+
+# --- Settings -----------------------------------------------------
+.INCLUDE :  $(PRJ)$/util$/makefile.pmk
+
+# ------------------------------------------------------------------------
+
+
+IDLFILES= XGlobals.idl\
+    XApplication.idl \
+    XDocument.idl \
+    XWindow.idl \
+    XSystem.idl \
+    XRange.idl \
+    XBookmark.idl \
+    XBookmarks.idl \
+    XVariable.idl \
+    XVariables.idl \
+    XView.idl \
+    XPane.idl \
+    XPanes.idl \
+    XOptions.idl \
+    XSelection.idl \
+	XTemplate.idl \
+    XParagraphFormat.idl \
+    XAutoTextEntries.idl \
+    XAutoTextEntry.idl \
+    XParagraphs.idl \
+    XParagraph.idl \
+    XFind.idl \
+    XReplacement.idl \
+    XStyle.idl \
+    XStyles.idl \
+    XFont.idl \
+    XTable.idl \
+    XTables.idl \
+    XField.idl \
+    XFields.idl \
+    XBorder.idl \
+    XBorders.idl \
+    XDocuments.idl \
+    XHeaderFooter.idl \
+    XAddins.idl \
+    XAddin.idl \
+    XDialogs.idl \
+    XDialog.idl \
+    XWrapFormat.idl \
+    XPageSetup.idl \
+    XSection.idl \
+    XSections.idl \
+
+# ------------------------------------------------------------------
+
+.INCLUDE :  target.mk
diff --git a/oovbaapi/prj/build.lst b/oovbaapi/prj/build.lst
index bc34a4f..e6d23a3 100644
--- a/oovbaapi/prj/build.lst
+++ b/oovbaapi/prj/build.lst
@@ -4,5 +4,6 @@ ovba	oovbaapi\genconstidl                nmake	-	all	ovba_genconstidl NULL
 ovba	oovbaapi\ooo\vba\constants          nmake	-	all	ovba_constants  ovba_genconstidl NULL
 ovba	oovbaapi\ooo\vba                    nmake	-	all	ovba_vba NULL
 ovba	oovbaapi\ooo\vba\excel              nmake	-	all	ovba_excel NULL
+ovba	oovbaapi\ooo\vba\word               nmake	-	all	ovba_word NULL
 ovba	oovbaapi\ooo\vba\msforms            nmake	-	all	ovba_msforms NULL
-ovba    oovbaapi\util                       nmake       -       all     ovba_util ovba_vba ovba_excel ovba_msforms ovba_constants ovba_genconstidl NULL
+ovba   oovbaapi\util                             nmake   -   all ovba_util ovba_vba ovba_excel ovba_word ovba_msforms ovba_constants ovba_genconstidl NULL
diff --git a/oovbaapi/util/makefile.mk b/oovbaapi/util/makefile.mk
index 4706b15..c31e019 100644
--- a/oovbaapi/util/makefile.mk
+++ b/oovbaapi/util/makefile.mk
@@ -46,6 +46,7 @@ dummy:
 UNOIDLDBFILES= \
     $(UCR)$/vba.db \
     $(UCR)$/excel.db \
+    $(UCR)$/word.db \
     $(UCR)$/msforms.db \
     $(UCR)$/constants.db
 
diff --git a/sc/inc/cellsuno.hxx b/sc/inc/cellsuno.hxx
index ff9a0da..4884b29 100644
--- a/sc/inc/cellsuno.hxx
+++ b/sc/inc/cellsuno.hxx
@@ -149,8 +149,10 @@ public:
 namespace ooo
 {
     namespace vba {
+        namespace excel {
     class ScVbaCellRangeAccess;  // Vba Helper class
     }
+    }
 }
 
 class SC_DLLPUBLIC ScCellRangesBase : public com::sun::star::beans::XPropertySet,
@@ -172,7 +174,7 @@ class SC_DLLPUBLIC ScCellRangesBase : public com::sun::star::beans::XPropertySet
 {
     friend class ScTabViewObj;		// fuer select()
     friend class ScTableSheetObj;	// fuer createCursorByRange()
-     friend class ooo::vba::ScVbaCellRangeAccess;
+	friend class ooo::vba::excel::ScVbaCellRangeAccess;
 
 private:
     const SfxItemPropertySet* pPropSet;
diff --git a/sc/prj/build.lst b/sc/prj/build.lst
index c893349..8426ba0 100644
--- a/sc/prj/build.lst
+++ b/sc/prj/build.lst
@@ -1,4 +1,4 @@
-sc	sc	:	l10n oovbaapi svx stoc uui BOOST:boost formula oox NULL
+sc     sc      :       l10n vbahelper oovbaapi svx stoc uui BOOST:boost formula oox NULL
 sc	sc							usr1	-	all	sc_mkout NULL
 sc	sc\inc							nmake	-	all	sc_inc NULL
 sc	sc\prj							get	-	all	sc_prj NULL
diff --git a/sc/source/filter/excel/excimp8.cxx b/sc/source/filter/excel/excimp8.cxx
index 9a3c43f..62d3af5 100644
--- a/sc/source/filter/excel/excimp8.cxx
+++ b/sc/source/filter/excel/excimp8.cxx
@@ -99,6 +99,10 @@
 
 #include <com/sun/star/document/XDocumentProperties.hpp>
 #include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+#include <basic/basmgr.hxx>
+#include <cppuhelper/component_context.hxx>
+#include <com/sun/star/container/XNameContainer.hpp>
+#include <sfx2/app.hxx>
 
 
 using namespace com::sun::star;
@@ -245,16 +249,6 @@ void ImportExcel8::SheetProtection( void )
     GetSheetProtectBuffer().ReadOptions( aIn, GetCurrScTab() );
 }
 
-bool lcl_hasVBAEnabled()
-{
-    uno::Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY);
-        // test if vba service is present
-    uno::Reference< uno::XComponentContext > xCtx( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY );
-    uno::Reference< uno::XInterface > xGlobals( xCtx->getValueByName( ::rtl::OUString::createFromAscii( "/singletons/ooo.vba.theGlobals") ), uno::UNO_QUERY );
-
-    return xGlobals.is();
-}
-
 void ImportExcel8::ReadBasic( void )
 {
     bHasBasic = TRUE;
@@ -270,7 +264,7 @@ void ImportExcel8::ReadBasic( void )
         if( bLoadCode || bLoadStrg )
         {
             SvxImportMSVBasic aBasicImport( *pShell, *xRootStrg, bLoadCode, bLoadStrg );
-            bool bAsComment = !bLoadExecutable || !lcl_hasVBAEnabled();
+        bool bAsComment = !bLoadExecutable;
             aBasicImport.Import( EXC_STORAGE_VBA_PROJECT, EXC_STORAGE_VBA, bAsComment );
         }
     }
diff --git a/sc/source/ui/docshell/docsh.cxx b/sc/source/ui/docshell/docsh.cxx
index 6b388a0..d135d29 100644
--- a/sc/source/ui/docshell/docsh.cxx
+++ b/sc/source/ui/docshell/docsh.cxx
@@ -125,7 +125,8 @@
 #include <rtl/logfile.hxx>
 
 #include <comphelper/processfactory.hxx>
-
+#include <basic/sbstar.hxx>
+#include <basic/basmgr.hxx>
 using namespace com::sun::star;
 using ::rtl::OUString;
 using ::rtl::OUStringBuffer;
@@ -357,6 +358,26 @@ void ScDocShell::AfterXMLLoading(sal_Bool bRet)
     }
     else
         aDocument.SetInsertingFromOtherDoc( FALSE );
+    // add vba globals ( if they are availabl )
+    uno::Any aGlobs;
+        uno::Sequence< uno::Any > aArgs(1);
+        aArgs[ 0 ] <<= GetModel();
+    aGlobs <<= ::comphelper::getProcessServiceFactory()->createInstanceWithArguments( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.excel.Globals" ) ), aArgs );
+    GetBasicManager()->SetGlobalUNOConstant( "VBAGlobals", aGlobs );
+        // Fake ThisComponent being setup by Activate ( which is a view
+        // related thing ),
+        //  a) if another document is opened then in theory  ThisComponent
+        //     will be reset as before,
+        //  b) when this document is  'really' Activated then ThisComponent
+        //     again will be set as before
+        // The only wrinkle seems if this document is loaded 'InVisible'
+        // but.. I don't see that this is possible from the vba API
+        // I could be wrong though
+        // There may be implications setting the current component
+        // too early :-/ so I will just manually set the Basic Variables
+        BasicManager* pAppMgr = SFX_APP()->GetBasicManager();
+        if ( pAppMgr )
+            pAppMgr->SetGlobalUNOConstant( "ThisExcelDoc", aArgs[ 0 ] );
 
     aDocument.SetImportingXML( FALSE );
     aDocument.EnableExecuteLink( true );
diff --git a/sc/source/ui/docshell/docsh2.cxx b/sc/source/ui/docshell/docsh2.cxx
index 3b4afe3..91a9204 100644
--- a/sc/source/ui/docshell/docsh2.cxx
+++ b/sc/source/ui/docshell/docsh2.cxx
@@ -50,7 +50,10 @@
 #include <svx/unolingu.hxx>
 #include <rtl/logfile.hxx>
 
-
+#include <comphelper/processfactory.hxx>
+#include <basic/sbstar.hxx>
+#include <basic/basmgr.hxx>
+#include <sfx2/app.hxx>
 
 // INCLUDE ---------------------------------------------------------------
 /*
@@ -99,6 +102,25 @@ BOOL __EXPORT ScDocShell::InitNew( const uno::Reference < embed::XStorage >& xSt
 
     InitItems();
     CalcOutputFactor();
+    uno::Any aGlobs;
+        uno::Sequence< uno::Any > aArgs(1);
+        aArgs[ 0 ] <<= GetModel();
+    aGlobs <<= ::comphelper::getProcessServiceFactory()->createInstanceWithArguments( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.excel.Globals" ) ), aArgs );
+    GetBasicManager()->SetGlobalUNOConstant( "VBAGlobals", aGlobs );
+        // Fake ThisComponent being setup by Activate ( which is a view
+        // related thing ),
+        //  a) if another document is opened then in theory  ThisComponent
+        //     will be reset as before,
+        //  b) when this document is  'really' Activated then ThisComponent
+        //     again will be set as before
+        // The only wrinkle seems if this document is loaded 'InVisible'
+        // but.. I don't see that this is possible from the vba API
+        // I could be wrong though
+        // There may be implications setting the current component
+        // too early :-/ so I will just manually set the Basic Variables
+        BasicManager* pAppMgr = SFX_APP()->GetBasicManager();
+        if ( pAppMgr )
+            pAppMgr->SetGlobalUNOConstant( "ThisExcelDoc", aArgs[ 0 ] );
 
     return bRet;
 }
diff --git a/sc/source/ui/inc/tabview.hxx b/sc/source/ui/inc/tabview.hxx
index 04c9275..5aac129 100644
--- a/sc/source/ui/inc/tabview.hxx
+++ b/sc/source/ui/inc/tabview.hxx
@@ -292,7 +292,7 @@ public:
 
     void			TabChanged();
     void			SetZoom( const Fraction& rNewX, const Fraction& rNewY, BOOL bAll );
-    void            RefreshZoom();
+    SC_DLLPUBLIC void            RefreshZoom();
     void			SetPagebreakMode( BOOL bSet );
 
     void			UpdateLayerLocks();
diff --git a/sc/source/ui/inc/viewdata.hxx b/sc/source/ui/inc/viewdata.hxx
index 41524cf..4bf105a 100644
--- a/sc/source/ui/inc/viewdata.hxx
+++ b/sc/source/ui/inc/viewdata.hxx
@@ -236,6 +236,7 @@ private:
 
     SC_DLLPRIVATE void			CalcPPT();
     SC_DLLPRIVATE void          CreateTabData( SCTAB nNewTab );
+    SC_DLLPRIVATE void          CreateTabData( std::vector< SCTAB >& rvTabs );
     SC_DLLPRIVATE void          CreateSelectedTabData();
 
 public:
@@ -329,6 +330,8 @@ public:
     void            SetPasteMode ( ScPasteFlags nFlags )            { nPasteFlags = nFlags; }
 
     void            SetZoomType( SvxZoomType eNew, BOOL bAll );
+    void            SetZoomType( SvxZoomType eNew, std::vector< SCTAB >& tabs );
+    void            SetZoom( const Fraction& rNewX, const Fraction& rNewY, std::vector< SCTAB >& tabs );
     void            SetZoom( const Fraction& rNewX, const Fraction& rNewY, BOOL bAll );
     void            RefreshZoom();
 
diff --git a/sc/source/ui/vba/excelvbahelper.cxx b/sc/source/ui/vba/excelvbahelper.cxx
new file mode 100644
index 0000000..dd05507
--- /dev/null
+++ b/sc/source/ui/vba/excelvbahelper.cxx
@@ -0,0 +1,222 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.cxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <docuno.hxx>
+#include "excelvbahelper.hxx"
+#include "tabvwsh.hxx"
+#include "transobj.hxx"
+#include "scmod.hxx"
+#include "cellsuno.hxx"
+#include <comphelper/processfactory.hxx>
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+namespace ooo
+{
+namespace vba
+{
+namespace excel
+{
+void implSetZoom( const uno::Reference< frame::XModel >& xModel, sal_Int16 nZoom, std::vector< SCTAB >& nTabs )
+{
+    ScTabViewShell* pViewSh = excel::getBestViewShell( xModel );
+    Fraction aFract( nZoom, 100 );
+    pViewSh->GetViewData()->SetZoom( aFract, aFract, nTabs );
+    pViewSh->RefreshZoom();
+}
+bool isInPrintPreview( SfxViewFrame* pView )
+{
+    sal_uInt16 nViewNo = SID_VIEWSHELL1 - SID_VIEWSHELL0;
+    if ( pView->GetObjectShell()->GetFactory().GetViewFactoryCount() >
+nViewNo && !pView->GetObjectShell()->IsInPlaceActive() )
+    {
+        SfxViewFactory &rViewFactory =
+            pView->GetObjectShell()->GetFactory().GetViewFactory(nViewNo);
+        if (  pView->GetCurViewId() == rViewFactory.GetOrdinal() )
+            return true;
+    }
+    return false;
+}
+
+const ::rtl::OUString REPLACE_CELLS_WARNING(  RTL_CONSTASCII_USTRINGPARAM( "ReplaceCellsWarning"));
+
+class PasteCellsWarningReseter
+{
+private:
+    bool bInitialWarningState;
+    static uno::Reference< beans::XPropertySet > getGlobalSheetSettings() throw ( uno::RuntimeException )
+    {
+        static uno::Reference< beans::XPropertySet > xTmpProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+        static uno::Reference<uno::XComponentContext > xContext( xTmpProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY_THROW );
+        static uno::Reference<lang::XMultiComponentFactory > xServiceManager(
+                xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+        static uno::Reference< beans::XPropertySet > xProps( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.sheet.GlobalSheetSettings" ) ) ,xContext ), uno::UNO_QUERY_THROW );
+        return xProps;
+    }
+
+    bool getReplaceCellsWarning() throw ( uno::RuntimeException )
+    {
+        sal_Bool res = sal_False;
+        getGlobalSheetSettings()->getPropertyValue( REPLACE_CELLS_WARNING ) >>= res;
+        return ( res == sal_True );
+    }
+
+    void setReplaceCellsWarning( bool bState ) throw ( uno::RuntimeException )
+    {
+        getGlobalSheetSettings()->setPropertyValue( REPLACE_CELLS_WARNING, uno::makeAny( bState ) );
+    }
+public:
+    PasteCellsWarningReseter() throw ( uno::RuntimeException )
+    {
+        bInitialWarningState = getReplaceCellsWarning();
+        if ( bInitialWarningState )
+            setReplaceCellsWarning( false );
+    }
+    ~PasteCellsWarningReseter()
+    {
+        if ( bInitialWarningState )
+        {
+            // don't allow dtor to throw
+            try
+            {
+                setReplaceCellsWarning( true );
+            }
+            catch ( uno::Exception& /*e*/ ){}
+        }
+    }
+};
+
+void
+implnPaste( const uno::Reference< frame::XModel>& xModel )
+{
+    PasteCellsWarningReseter resetWarningBox;
+    ScTabViewShell* pViewShell = getBestViewShell( xModel );
+    if ( pViewShell )
+    {
+        pViewShell->PasteFromSystem();
+        pViewShell->CellContentChanged();
+    }
+}
+
+
+void
+implnCopy( const uno::Reference< frame::XModel>& xModel )
+{
+    ScTabViewShell* pViewShell = getBestViewShell( xModel );
+    if ( pViewShell )
+        pViewShell->CopyToClip(NULL,false,false,true);
+}
+
+void
+implnCut( const uno::Reference< frame::XModel>& xModel )
+{
+    ScTabViewShell* pViewShell =  getBestViewShell( xModel );
+    if ( pViewShell )
+        pViewShell->CutToClip( NULL, TRUE );
+}
+
+void implnPasteSpecial( const uno::Reference< frame::XModel>& xModel, USHORT nFlags,USHORT nFunction,sal_Bool bSkipEmpty, sal_Bool bTranspose)
+{
+    PasteCellsWarningReseter resetWarningBox;
+    sal_Bool bAsLink(sal_False), bOtherDoc(sal_False);
+    InsCellCmd eMoveMode = INS_NONE;
+
+    ScTabViewShell* pTabViewShell = getBestViewShell( xModel );
+    if ( pTabViewShell )
+    {
+        ScViewData* pView = pTabViewShell->GetViewData();
+        Window* pWin = ( pView != NULL ) ? pView->GetActiveWin() : NULL;
+        if ( pView && pWin )
+        {
+            if ( bAsLink && bOtherDoc )
+                pTabViewShell->PasteFromSystem(0);//SOT_FORMATSTR_ID_LINK
+            else
+            {
+                ScTransferObj* pOwnClip = ScTransferObj::GetOwnClipboard( pWin );
+                ScDocument* pDoc = NULL;
+                if ( pOwnClip )
+                    pDoc = pOwnClip->GetDocument();
+                pTabViewShell->PasteFromClip( nFlags, pDoc,
+                    nFunction, bSkipEmpty, bTranspose, bAsLink,
+                    eMoveMode, IDF_NONE, TRUE );
+                pTabViewShell->CellContentChanged();
+            }
+        }
+    }
+
+}
+
+ScDocShell*
+getDocShell( const css::uno::Reference< css::frame::XModel>& xModel )
+{
+    uno::Reference< uno::XInterface > xIf( xModel, uno::UNO_QUERY_THROW );
+    ScModelObj* pModel = dynamic_cast< ScModelObj* >( xIf.get() );
+    ScDocShell* pDocShell = NULL;
+    if ( pModel )
+        pDocShell = (ScDocShell*)pModel->GetEmbeddedObject();
+    return pDocShell;
+
+}
+
+ScTabViewShell*
+getBestViewShell( const css::uno::Reference< css::frame::XModel>& xModel )
+{
+    ScDocShell* pDocShell = getDocShell( xModel );
+    if ( pDocShell )
+        return pDocShell->GetBestViewShell();
+    return NULL;
+}
+
+ScTabViewShell*
+getCurrentBestViewShell(  const uno::Reference< uno::XComponentContext >& xContext )
+{
+    uno::Reference< frame::XModel > xModel = getCurrentExcelDoc( xContext );
+    return getBestViewShell( xModel );
+}
+
+SfxViewFrame*
+getViewFrame( const uno::Reference< frame::XModel >& xModel )
+{
+    ScTabViewShell* pViewShell = getBestViewShell( xModel );
+    if ( pViewShell )
+        return pViewShell->GetViewFrame();
+    return NULL;
+}
+
+SfxItemSet*
+ScVbaCellRangeAccess::GetDataSet( ScCellRangeObj* pRangeObj )
+{
+    SfxItemSet* pDataSet = pRangeObj ? pRangeObj->GetCurrentDataSet( true ) : NULL ;
+    return pDataSet;
+
+}
+} //excel
+} //vba
+} //ooo
diff --git a/sc/source/ui/vba/excelvbahelper.hxx b/sc/source/ui/vba/excelvbahelper.hxx
new file mode 100644
index 0000000..bb22268
--- /dev/null
+++ b/sc/source/ui/vba/excelvbahelper.hxx
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.hxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_EXCEL_VBA_HELPER_HXX
+#define SC_EXCEL_VBA_HELPER_HXX
+
+#include<vbahelper/vbahelper.hxx>
+#include <docsh.hxx>
+
+class ScCellRangeObj;
+
+namespace ooo
+{
+    namespace vba
+    {
+    namespace excel
+        {
+                // nTabs empty means apply zoom to all sheets
+                void implSetZoom( const css::uno::Reference< css::frame::XModel >& xModel, sal_Int16 nZoom, std::vector< SCTAB >& nTabs );
+        void implnCopy( const css::uno::Reference< css::frame::XModel>& xModel );
+        void implnPaste ( const css::uno::Reference< css::frame::XModel>& xModel );
+        void implnCut( const css::uno::Reference< css::frame::XModel>& xModel );
+        void implnPasteSpecial( const css::uno::Reference< css::frame::XModel>& xModel, sal_uInt16 nFlags,sal_uInt16 nFunction,sal_Bool bSkipEmpty, sal_Bool bTranspose);
+        ScTabViewShell* getBestViewShell( const css::uno::Reference< css::frame::XModel>& xModel ) ;
+        ScDocShell* getDocShell( const css::uno::Reference< css::frame::XModel>& xModel ) ;
+        ScTabViewShell* getCurrentBestViewShell( const css::uno::Reference< css::uno::XComponentContext >& xContext );
+        SfxViewFrame* getViewFrame( const css::uno::Reference< css::frame::XModel >& xModel );
+            class ScVbaCellRangeAccess
+            {
+            public:
+                static SfxItemSet* GetDataSet( ScCellRangeObj* pRangeObj );
+            };
+}
+}
+}
+#endif
diff --git a/sc/source/ui/vba/helperdecl.hxx b/sc/source/ui/vba/helperdecl.hxx
index ff984e3..a996917 100644
--- a/sc/source/ui/vba/helperdecl.hxx
+++ b/sc/source/ui/vba/helperdecl.hxx
@@ -29,107 +29,25 @@
 
 namespace comphelper {
 namespace service_decl {
-
-namespace detail {
-namespace css = ::com::sun::star;
-template <typename ImplT>
-class OwnServiceImpl
-    : public ImplT,
-      private ::boost::noncopyable
-{
-    typedef ImplT BaseT;
-    
-public:    
-    OwnServiceImpl(
-        ServiceDecl const& rServiceDecl,
-        css::uno::Sequence<css::uno::Any> const& args,
-        css::uno::Reference<css::uno::XComponentContext> const& xContext )
-        :BaseT(args, xContext), m_rServiceDecl(rServiceDecl) {}
-    OwnServiceImpl(
-        ServiceDecl const& rServiceDecl,
-        css::uno::Reference<css::uno::XComponentContext> const& xContext )
-        : BaseT(xContext), m_rServiceDecl(rServiceDecl) {}
-    
-    // XServiceInfo
-    virtual ::rtl::OUString SAL_CALL getImplementationName()
-        throw (css::uno::RuntimeException) {
-        return m_rServiceDecl.getImplementationName();
-    }
-    virtual sal_Bool SAL_CALL supportsService( ::rtl::OUString const& name )
-        throw (css::uno::RuntimeException) {
-        return m_rServiceDecl.supportsService(name);
-    }
-    virtual css::uno::Sequence< ::rtl::OUString>
-    SAL_CALL getSupportedServiceNames() throw (css::uno::RuntimeException) {
-        return m_rServiceDecl.getSupportedServiceNames();
-    }
-    
-private:
-    ServiceDecl const& m_rServiceDecl;
-};
-
-
-template <typename ImplT, typename WithArgsT>
-struct OwnCreateFunc;
-
-template <typename ImplT>
-struct OwnCreateFunc<ImplT, with_args<false> > {
-    explicit OwnCreateFunc(  )
-         {}
-    
-    css::uno::Reference<css::uno::XInterface>
-    operator()( ServiceDecl const& rServiceDecl,
-                css::uno::Sequence<css::uno::Any> const&,
-                css::uno::Reference<css::uno::XComponentContext>
-                const& xContext ) const
-    {
-        return css::uno::Reference< ooo::vba::XHelperInterface >(new OwnServiceImpl<ImplT>( rServiceDecl, xContext ));
-    }
-};
-
-template <typename ImplT>
-struct OwnCreateFunc<ImplT, with_args<true> > {
-    explicit OwnCreateFunc( )
-         {}
-    
-    css::uno::Reference<css::uno::XInterface>
-    operator()( ServiceDecl const& rServiceDecl,
-                css::uno::Sequence<css::uno::Any> const& args,
-                css::uno::Reference<css::uno::XComponentContext>
-                const& xContext ) const
-    {
-        css::uno::Reference< ooo::vba::XHelperInterface > xHelp(
-            new OwnServiceImpl<ImplT>( rServiceDecl, args, xContext ) );
-    css::uno::Reference< css::uno::XInterface > xIf( xHelp, css::uno::UNO_QUERY ) ;
-    return xIf;
-    }
-};
-
-} // namespace detail
-
-/** Defines a service implementation class.
-    
-    @tpl ImplT_ service implementation class
-    @WithArgsT whether the implementation class ctor expects arguments
-               (uno::Sequence<uno::Any>, uno::Reference<uno::XComponentContext>)
-               or just (uno::Reference<uno::XComponentContext>)
-*/
 template <typename ImplT_, typename WithArgsT = with_args<false> >
-struct vba_service_class_ {
-    typedef ImplT_ ImplT;
-    typedef detail::OwnServiceImpl<ImplT_ > ServiceImplT;
-    
-    detail::CreateFuncF const m_createFunc;
-    
+struct vba_service_class_ : public serviceimpl_base< detail::OwnServiceImpl<ImplT_>, WithArgsT >
+{
+    typedef serviceimpl_base< detail::OwnServiceImpl<ImplT_>, WithArgsT > baseT;
     /** Default ctor.  Implementation class without args, expecting
         component context as single argument.
     */
-    vba_service_class_() : m_createFunc(
-        detail::OwnCreateFunc<ImplT, WithArgsT>() ) {}
-
+    vba_service_class_() : baseT() {}
+    template <typename PostProcessFuncT>
+    /** Ctor to pass a post processing function/functor.
+
+        @tpl PostProcessDefaultT let your compiler deduce this
+        @param postProcessFunc function/functor that gets the yet unacquired
+                               ImplT_ pointer returning a
+                               uno::Reference<uno::XInterface>
+    */
+    explicit vba_service_class_( PostProcessFuncT const& postProcessFunc ) : baseT( postProcessFunc ) {}
 };
 
-
 } // namespace service_decl
 } // namespace comphelper
 
diff --git a/sc/source/ui/vba/makefile.mk b/sc/source/ui/vba/makefile.mk
index 9e8feb1..1f7cfa3 100644
--- a/sc/source/ui/vba/makefile.mk
+++ b/sc/source/ui/vba/makefile.mk
@@ -60,7 +60,7 @@ SLOFILES= \
         $(SLO)$/vbaworksheet.obj \
         $(SLO)$/vbaoutline.obj \
         $(SLO)$/vbafont.obj\
-        $(SLO)$/vbahelper.obj\
+        $(SLO)$/excelvbahelper.obj\
         $(SLO)$/vbainterior.obj\
         $(SLO)$/vbawsfunction.obj\
         $(SLO)$/vbawindow.obj\
@@ -77,28 +77,11 @@ SLOFILES= \
         $(SLO)$/vbapalette.obj \
         $(SLO)$/vbaborders.obj \
         $(SLO)$/vbacharacters.obj \
-        $(SLO)$/vbacombobox.obj \
         $(SLO)$/vbavalidation.obj \
-                $(SLO)$/vbacontrol.obj \
-                $(SLO)$/vbacontrols.obj \
                 $(SLO)$/vbaoleobject.obj \
                 $(SLO)$/vbaoleobjects.obj \
-                $(SLO)$/vbabutton.obj \
-                $(SLO)$/vbalabel.obj \
-                $(SLO)$/vbatextbox.obj \
                 $(SLO)$/vbatextboxshape.obj \
-                $(SLO)$/vbaradiobutton.obj \
-                $(SLO)$/vbalistbox.obj \
-        $(SLO)$/vbalistcontrolhelper.obj \
-                $(SLO)$/vbapropvalue.obj \
                 $(SLO)$/vbapane.obj \
-                $(SLO)$/vbashape.obj \
-                $(SLO)$/vbacolorformat.obj \
-                $(SLO)$/vbashapes.obj \
-                $(SLO)$/vbalineformat.obj \
-                $(SLO)$/vbafillformat.obj \
-                $(SLO)$/vbapictureformat.obj \
-                $(SLO)$/vbashaperange.obj \
                 $(SLO)$/vbatextframe.obj \
                 $(SLO)$/vbacharttitle.obj \
                 $(SLO)$/vbacharts.obj \
@@ -112,24 +95,10 @@ SLOFILES= \
                 $(SLO)$/vbastyle.obj \
                 $(SLO)$/vbastyles.obj \
                 $(SLO)$/vbaassistant.obj \
-                $(SLO)$/vbauserform.obj \
-                $(SLO)$/vbacheckbox.obj \
-                $(SLO)$/vbatogglebutton.obj \
-                $(SLO)$/vbaframe.obj \
-                $(SLO)$/vbascrollbar.obj \
-                $(SLO)$/vbaprogressbar.obj \
-                $(SLO)$/vbamultipage.obj \
-                $(SLO)$/vbapages.obj \
-                $(SLO)$/vbacommandbarcontrol.obj \
-                $(SLO)$/vbacommandbarcontrols.obj \
-                $(SLO)$/vbacommandbar.obj \
-                $(SLO)$/vbacommandbars.obj \
                 $(SLO)$/vbahyperlink.obj \
                 $(SLO)$/vbapagesetup.obj \
                 $(SLO)$/vbapagebreak.obj \
                 $(SLO)$/vbapagebreaks.obj \
-                $(SLO)$/vbaspinbutton.obj \
-                $(SLO)$/vbaimage.obj \
                 $(SLO)$/service.obj
 .ENDIF
 # --- Targets ------------------------------------------------------
diff --git a/sc/source/ui/vba/service.cxx b/sc/source/ui/vba/service.cxx
index c8fb0f2..b693ccd 100644
--- a/sc/source/ui/vba/service.cxx
+++ b/sc/source/ui/vba/service.cxx
@@ -58,11 +58,15 @@ namespace globals
 {
 extern sdecl::ServiceDecl const serviceDecl;
 }
-namespace  userform
+namespace hyperlink
 {
 extern sdecl::ServiceDecl const serviceDecl;
 }
-namespace hyperlink 
+namespace application
+{
+extern sdecl::ServiceDecl const serviceDecl;
+}
+namespace textframe
 {
 extern sdecl::ServiceDecl const serviceDecl;
 }
@@ -80,10 +84,10 @@ extern "C"
         lang::XMultiServiceFactory * pServiceManager, registry::XRegistryKey * pRegistryKey )
     {
         OSL_TRACE("In component_writeInfo");
-
+#if 0
     // Component registration
         if ( component_writeInfoHelper( pServiceManager, pRegistryKey, 
-        range::serviceDecl, workbook::serviceDecl, worksheet::serviceDecl, globals::serviceDecl, userform::serviceDecl, window::serviceDecl, hyperlink::serviceDecl ) )
+        range::serviceDecl, workbook::serviceDecl, worksheet::serviceDecl, globals::serviceDecl, window::serviceDecl, hyperlink::serviceDecl, application::serviceDecl ) )
         {
             // Singleton registration
             try
@@ -103,6 +107,12 @@ extern "C"
             }
         }
         return sal_False;
+#else
+    // Component registration
+        return component_writeInfoHelper( pServiceManager, pRegistryKey,
+        range::serviceDecl, workbook::serviceDecl, worksheet::serviceDecl, globals::serviceDecl, window::serviceDecl, hyperlink::serviceDecl, application::serviceDecl ) && component_writeInfoHelper( pServiceManager, pRegistryKey, textframe::serviceDecl );
+#endif
+
     }
 
     SAL_DLLPUBLIC_EXPORT void * SAL_CALL component_getFactory( 
@@ -111,7 +121,9 @@ extern "C"
     {
         OSL_TRACE("In component_getFactory for %s", pImplName );
     void* pRet =  component_getFactoryHelper(
-            pImplName, pServiceManager, pRegistryKey, range::serviceDecl, workbook::serviceDecl, worksheet::serviceDecl, globals::serviceDecl, userform::serviceDecl, window::serviceDecl, hyperlink::serviceDecl );
+            pImplName, pServiceManager, pRegistryKey, range::serviceDecl, workbook::serviceDecl, worksheet::serviceDecl, globals::serviceDecl, window::serviceDecl, hyperlink::serviceDecl, application::serviceDecl );
+     if( !pRet )
+        pRet = component_getFactoryHelper( pImplName, pServiceManager, pRegistryKey, textframe::serviceDecl );
     OSL_TRACE("Ret is 0x%x", pRet);
     return pRet;
     }
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/AutoFilter.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/AutoFilter.log
new file mode 100644
index 0000000..89098a8
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/AutoFilter.log
@@ -0,0 +1,20 @@
+Test run started : 17/07/2007 17:36:22
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1 'starts with' string criteria
+  ITEM Assertion OK : test2 'not equal to' string criteria
+  ITEM Assertion OK : test3 'ends with' string criteria
+  ITEM Assertion OK : test4 field 'all'
+  ITEM Assertion OK : test5 numeric '<15'
+  ITEM Assertion OK : test6 numeric '>=15'
+  ITEM Assertion OK : test7 numeric '<=12'
+Test Results
+============
+
+Tests passed: 7
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 17/07/2007 17:36:23
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/MiscRangeTests.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/MiscRangeTests.log
new file mode 100644
index 0000000..97275e1
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/MiscRangeTests.log
@@ -0,0 +1,45 @@
+Test run started : 17/07/2007 15:01:37
+----------------------------------------------------------------
+MiscRangeTests
+ TEST START : MiscRangeTests
+  ITEM Assertion OK : test 1
+  ITEM Assertion OK : test 2
+  ITEM Assertion OK : test 3
+  ITEM Assertion OK : test 4
+  ITEM Assertion OK : test 5
+  ITEM Assertion OK : test 6
+  ITEM Assertion OK : test 7
+  ITEM Assertion OK : test 8
+  ITEM Assertion OK : test 9
+  ITEM Assertion OK : test 10
+  ITEM Assertion OK : test 11
+  ITEM Assertion OK : test 12
+  ITEM Assertion OK : test 13
+  ITEM Assertion OK : test 14
+  ITEM Assertion OK : test 15
+  ITEM Assertion OK : test 16
+  ITEM Assertion OK : test 17
+  ITEM Assertion OK : test 18
+  ITEM Assertion OK : test 19
+  ITEM Assertion OK : test 20
+  ITEM Assertion OK : test 21
+  ITEM Assertion OK : test 22
+  ITEM Assertion OK : test 23
+  ITEM Assertion OK : test 24
+  ITEM Assertion OK : test 25
+  ITEM Assertion OK : test 26
+  ITEM Assertion OK : test 27
+  ITEM Assertion OK : test 28
+  ITEM Assertion OK : test 29
+  ITEM Assertion OK : test 30
+  ITEM Assertion OK : test 31
+No. tests: 31
+Summary
+=======
+Run:       31
+Passed:    31
+Failed:    0
+
+END 'MiscRangeTests
+ TEST OK : MiscRangeTests
+Test run finished : 17/07/2007 15:01:39
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-2.log
new file mode 100644
index 0000000..8076596
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-2.log
@@ -0,0 +1,68 @@
+Test run started : 18/06/2007 17:50:04
+----------------------------------------------------------------
+ClearFormtsIssue
+ TEST START : ClearFormtsIssue
+  ITEM Assertion OK : Range.Font.Bold is: True
+  ITEM Assertion OK : Range.Font.Bold is: False
+END 'ClearFormtsIssue' Symbol
+ TEST OK : ClearFormtsIssue
+----------------------------------------------------------------
+VerticalAlignment-Issue
+ TEST START : VerticalAlignment-Issue
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : Range.VeritcalAlignment is Null
+END 'VerticalAlignment-Issue' Symbol
+ TEST OK : VerticalAlignment-Issue
+----------------------------------------------------------------
+HorizontalAlignment-Issue
+ TEST START : HorizontalAlignment-Issue
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : Range.HorizontalAlignment is Null
+END 'HorizontalAlignment-Issue' Symbol
+ TEST OK : HorizontalAlignment-Issue
+----------------------------------------------------------------
+WrapText-Issue
+ TEST START : WrapText-Issue
+  ITEM Assertion OK : -  Range.WrapText (get)
+  ITEM Assertion OK : -  Range.WrapText (get)
+  ITEM Assertion OK : Range.WrapText is Null
+END 'WrapText-Issue' Symbol
+ TEST OK : WrapText-Issue
+----------------------------------------------------------------
+FontBorderIssues
+ TEST START : FontBorderIssues
+  ITEM Assertion OK : -  = Borders.Color (getColor)
+  ITEM Assertion OK : -  = Font.Color (getColor)
+END 'FontBorderIssues' Symbol
+ TEST OK : FontBorderIssues
+----------------------------------------------------------------
+RangeSizeIssues
+ TEST START : RangeSizeIssues
+  ITEM Assertion OK : Range.Left is: 114
+  ITEM Assertion OK : Range.Top is: 95.25
+  ITEM Assertion OK : Range.Width is: 216
+  ITEM Assertion OK : Range.Height is: 271.5
+END 'RangeSizeIssues' Symbol
+ TEST OK : RangeSizeIssues
+----------------------------------------------------------------
+ApplicationIssues
+ TEST START : ApplicationIssues
+  ITEM Assertion OK : Range.Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range.Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Application.ActiveSheet.Name: Sheet1
+END 'ApplicationIssues' Symbol
+ TEST OK : ApplicationIssues
+Test run finished : 18/06/2007 17:50:04
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-3.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-3.log
new file mode 100644
index 0000000..e44b641
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges-3.log
@@ -0,0 +1,8 @@
+Test run started : 19/06/2007 11:21:42
+----------------------------------------------------------------
+MyGoalseek-Issue
+ TEST START : MyGoalseek-Issue
+  ITEM Assertion OK : Variable Range value: 15
+END 'MyGoalseek-Issue' Symbol
+ TEST OK : MyGoalseek-Issue
+Test run finished : 19/06/2007 11:21:42
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges.log
new file mode 100644
index 0000000..62d5888
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/Ranges.log
@@ -0,0 +1,280 @@
+Test run started : 01/06/2007 11:28:58
+----------------------------------------------------------------
+ApplicationMethods
+ TEST START : ApplicationMethods
+  ITEM Assertion OK :  Name of Workbook is: Ranges.xls
+  ITEM Assertion OK :  Address of Application.Columns is: $A:$A
+  ITEM Assertion OK :  Address of Application.Rows is: $1:$1
+  ITEM Assertion OK :  Address of Application.Range is: $1:$1,$5:$7
+  ITEM Assertion OK :  Please check manually: DefaultFilePath is: C:\Documents and Settings\vituosity\My Documents
+  ITEM Assertion OK :  Please check manually: Library Path is: C:\Program Files\Microsoft Office\OFFICE11\LIBRARY
+  ITEM Assertion OK :  Please check manually: Template Path is: C:\Documents and Settings\vituosity\Application Data\Microsoft\Templates\
+  ITEM Assertion OK :  FileSeparator is \
+  ITEM Assertion OK :  Name of ActiveWorkbook is: Ranges.xls
+END 'ApplicationMethods' Symbol
+ TEST OK : ApplicationMethods
+----------------------------------------------------------------
+Insert-Issue
+ TEST START : Insert-Issue
+  ITEM Assertion OK : Insert with xlShiftToRight: 10
+END 'Insert-Issue' Symbol
+ TEST OK : Insert-Issue
+----------------------------------------------------------------
+MergeCells-Issue
+ TEST START : MergeCells-Issue
+  ITEM Assertion OK :  Range.MergeCells is True
+  ITEM Assertion OK : MergeCells is null: True
+  ITEM Assertion OK : RowCount after Merge: 6
+  ITEM Assertion OK :  Range.MergeCells is False
+  ITEM Assertion OK : MergeCells is null: False
+  ITEM Assertion OK : MergeCells of Second Area is null : True
+  ITEM Assertion OK : MergeCells of Ranges is Null: True
+  ITEM Assertion OK : RowCount after Merge: 7
+  ITEM Assertion OK :  Range.MergeCells is False
+  ITEM Assertion OK : MergeCells is null: False
+  ITEM Assertion OK : RowCount after Merge: 7
+END 'MergeCells-Issue' Symbol
+ TEST OK : MergeCells-Issue
+----------------------------------------------------------------
+Areas-Issue
+ TEST START : Areas-Issue
+  ITEM Assertion OK : Range Areas Count is2
+  ITEM Assertion OK : First Range Address is: $E$8:$G$13
+  ITEM Assertion OK : First Row is: 8
+  ITEM Assertion OK : First Column is: 5
+  ITEM Assertion OK : EntireRow Address is: $8:$13,$13:$19
+  ITEM Assertion OK : EntireColumn Address is: $E:$G,$G:$K
+  ITEM Assertion OK : Range Count:53
+END 'Areas-Issue' Symbol
+ TEST OK : Areas-Issue
+----------------------------------------------------------------
+Fill-Methods-Issue
+ TEST START : Fill-Methods-Issue
+  ITEM Assertion OK :  Range Value after FillDown: MyFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyRightFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyBottomFillValue
+END 'Fill-Methods-Issue' Symbol
+ TEST OK : Fill-Methods-Issue
+----------------------------------------------------------------
+Range/Item-Method-Issue
+ TEST START : Range/Item-Method-Issue
+  ITEM Assertion OK :  Range of multiple columns is: $A:$A,$C:$C
+  ITEM Assertion OK :  Range of multiple rows is: $1:$1,$5:$7
+  ITEM Assertion OK :  Range of several columns is: $C:$E,$D:$D
+  ITEM Assertion OK :  Range of several rows is: $5:$8,$6:$10
+  ITEM Assertion OK :  Range of several single cells is: $C$5,$E$8
+  ITEM Assertion OK :  Range of several named ranges is: $L$1:$M$6,$E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK :  Range of a single Item Cell is: $E$21
+  ITEM Assertion OK :  Range of a single Item Cell is: $F$21
+  ITEM Assertion OK :  Range of a single Item Cell is: $F$10
+END 'Range/Item-Method-Issue' Symbol
+ TEST OK : Range/Item-Method-Issue
+----------------------------------------------------------------
+R1C1-Formulas-Issue
+ TEST START : R1C1-Formulas-Issue
+  ITEM Assertion OK :  R1C1 Range.Formula is: =IF(OR(R[-2]C[1]=0,RC[2]="YES"),"")
+  ITEM Assertion OK :  Range.Formula is: =IF(OR(J8=0,K10="YES"),"")
+END 'R1C1-Formulas-Issue' Symbol
+ TEST OK : R1C1-Formulas-Issue
+----------------------------------------------------------------
+Verify_Delete
+ TEST START : Verify_Delete
+  ITEM Assertion OK : Ranges are intersecting: $G$13
+  ITEM Assertion OK : Delete with Default: $AJ$4
+  ITEM Assertion OK : Delete with ShifttoLeft: $AJ$4
+  ITEM Assertion OK : Delete with ShiftUp: $M$22
+END 'Verify_Delete' Symbol
+ TEST OK : Verify_Delete
+----------------------------------------------------------------
+Value-Issue
+ TEST START : Value-Issue
+  ITEM Assertion OK : Value of Range is: 12.3
+  ITEM Assertion OK : Text of Range is: 12.3
+  ITEM Assertion OK : Range has Formula: False
+  ITEM Assertion OK : Cell has Formula: False
+  ITEM Assertion OK : Text of Range is null: True
+  ITEM Assertion OK : Range has Formula: True
+  ITEM Assertion OK : Cell has Formula: True
+  ITEM Assertion OK : Value of Cell is: 12
+  ITEM Assertion OK : Application.Calculation is : -4135
+  ITEM Assertion OK : Calculation is automated: True
+  ITEM Assertion OK : Range has Formula: True
+  ITEM Assertion OK : Value of Cell is: 16
+  ITEM Assertion OK : Text of Cell is: 16
+  ITEM Assertion OK : Text of Cell is: 16
+  ITEM Assertion OK : Range has Formula after 'ClearContents: False
+  ITEM Assertion OK : Text of Cell is:
+  ITEM Assertion OK : Text of Cell is:
+END 'Value-Issue' Symbol
+ TEST OK : Value-Issue
+----------------------------------------------------------------
+AutoFit issue
+ TEST START : AutoFit issue
+  ITEM Assertion OK :  Columns.AutoFit: CurrentWidth is 673
+  ITEM Assertion OK :  Rows.AutoFit: CurrentHeight is 612
+END 'AutoFit issue' Symbol
+ TEST OK : AutoFit issue
+----------------------------------------------------------------
+Selections
+ TEST START : Selections
+  ITEM Assertion OK : ActiveCell is : $E$8
+  ITEM Assertion OK : Active Cell is : $E$8
+  ITEM Assertion OK : Number of Cells in Range: 53
+  ITEM Assertion OK : Number of Cells in Range: 53
+  ITEM Assertion OK : Number of Cells in Range: 53
+END 'Selections' Symbol
+ TEST OK : Selections
+----------------------------------------------------------------
+Offset-Resize
+ TEST START : Offset-Resize
+  ITEM Assertion OK : Offset is : $G$10:$I$15,$I$15:$M$21
+  ITEM Assertion OK : Offset is : $G$7:$I$12,$I$12:$M$18
+  ITEM Assertion OK :   Resized Range is : $A$20:$D$23
+END 'Offset-Resize' Symbol
+ TEST OK : Offset-Resize
+----------------------------------------------------------------
+Ranges-Address
+ TEST START : Ranges-Address
+  ITEM Assertion OK : Range Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range Address is: $E8:$G13,$G13:$K19
+  ITEM Assertion OK : Range Address is: E$8:G$13,G$13:K$19
+  ITEM Assertion OK : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion OK : Range Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion OK : Range Address is: R[6]C[3]:R[11]C[5],R[11]C[5]:R[17]C[9]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$8:$G$13,$G$13:$K$19
+END 'Ranges-Address' Symbol
+ TEST OK : Ranges-Address
+----------------------------------------------------------------
+Range-Address
+ TEST START : Range-Address
+  ITEM Assertion OK : Range Address is: $E$8:$G$13
+  ITEM Assertion OK : Range Address is: $E8:$G13
+  ITEM Assertion OK : Range Address is: E$8:G$13
+  ITEM Assertion OK : Range Address is: R8C5:R13C7
+  ITEM Assertion OK : Range Address is: $E$8:$G$13
+  ITEM Assertion OK : Range Address is: R8C5:R13C7
+  ITEM Assertion OK : Range Address is: R[6]C[3]:R[11]C[5]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$8:$G$13
+END 'Range-Address' Symbol
+ TEST OK : Range-Address
+----------------------------------------------------------------
+Column-Address
+ TEST START : Column-Address
+  ITEM Assertion OK : Range Address is: $F$8:$F$13
+  ITEM Assertion OK : Range Address is: $F8:$F13
+  ITEM Assertion OK : Range Address is: F$8:F$13
+  ITEM Assertion OK : Range Address is: R8C6:R13C6
+  ITEM Assertion OK : Range Address is: $F$8:$F$13
+  ITEM Assertion OK : Range Address is: R8C6:R13C6
+  ITEM Assertion OK : Range Address is: R[6]C[4]:R[11]C[4]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$F$8:$F$13
+END 'Column-Address' Symbol
+ TEST OK : Column-Address
+----------------------------------------------------------------
+Row-Address
+ TEST START : Row-Address
+  ITEM Assertion OK : Range Address is: $E$9:$G$9
+  ITEM Assertion OK : Range Address is: $E9:$G9
+  ITEM Assertion OK : Range Address is: E$9:G$9
+  ITEM Assertion OK : Range Address is: R9C5:R9C7
+  ITEM Assertion OK : Range Address is: $E$9:$G$9
+  ITEM Assertion OK : Range Address is: R9C5:R9C7
+  ITEM Assertion OK : Range Address is: R[7]C[3]:R[7]C[5]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$9:$G$9
+END 'Row-Address' Symbol
+ TEST OK : Row-Address
+----------------------------------------------------------------
+SingleCell-Address
+ TEST START : SingleCell-Address
+  ITEM Assertion OK : Range Address is: $F$9
+  ITEM Assertion OK : Range Address is: $F9
+  ITEM Assertion OK : Range Address is: F$9
+  ITEM Assertion OK : Range Address is: R9C6
+  ITEM Assertion OK : Range Address is: $F$9
+  ITEM Assertion OK : Range Address is: R9C6
+  ITEM Assertion OK : Range Address is: R[7]C[4]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$F$9
+END 'SingleCell-Address' Symbol
+ TEST OK : SingleCell-Address
+----------------------------------------------------------------
+Heights and Widths
+ TEST START : Heights and Widths
+  ITEM Assertion OK : Range RowHeight is 40
+  ITEM Assertion OK : Range ColumnWidth is 50
+  ITEM Assertion OK : Range Height is 238
+  ITEM Assertion OK : Range Width is 798.75
+  ITEM Assertion OK : Range RowHeight is 50
+  ITEM Assertion OK : Range ColumnWidth is 50
+  ITEM Assertion OK : Range Height is 297
+  ITEM Assertion OK : Range Width is 798.75
+  ITEM Assertion OK : RowHeight is null: True
+  ITEM Assertion OK : ColumnWidth is null: True
+END 'Heights and Widths' Symbol
+ TEST OK : Heights and Widths
+----------------------------------------------------------------
+RangeRowColumn-Issue
+ TEST START : RangeRowColumn-Issue
+  ITEM Assertion OK : Row is: 8
+  ITEM Assertion OK : Column is: 5
+  ITEM Assertion OK : EntireRow.Columns.Count = 256
+  ITEM Assertion OK : EntireColumn.Rows.Count = 65536
+END 'RangeRowColumn-Issue' Symbol
+ TEST OK : RangeRowColumn-Issue
+----------------------------------------------------------------
+Replace-Issue
+ TEST START : Replace-Issue
+  ITEM Assertion OK : Value after Replace: YourValue
+  ITEM Assertion OK : Value after Replace: YourValue
+  ITEM Assertion OK : Value after Replace: ReplaceValue
+  ITEM Assertion OK : Value after Replace: New ReplaceValue
+  ITEM Assertion OK : Value after Replace: New ReplaceValue
+  ITEM Assertion OK : Value after Replace: New Replace
+  ITEM Assertion OK : Value after Replace:
+END 'Replace-Issue' Symbol
+ TEST OK : Replace-Issue
+----------------------------------------------------------------
+Hidden-Issue
+ TEST START : Hidden-Issue
+  ITEM Assertion OK : -  Range.Rows.Hidden (set)
+  ITEM Assertion OK : -  Range.Rows.Hidden (get)
+  ITEM Assertion OK : -  Range.Rows.Item(1).Hidden (set)
+  ITEM Assertion OK : -  Range.Rows.Item(1).Hidden (get)
+  ITEM Assertion OK : -  Range.Columns.Hidden (set)
+  ITEM Assertion OK : -  Range.Columns.Hidden (get)
+  ITEM Assertion OK : -  Range.Columns.Item(1).Hidden (set)
+  ITEM Assertion OK : -  Range.Columns.Item(1).Hidden (get)
+END 'Hidden-Issue' Symbol
+ TEST OK : Hidden-Issue
+----------------------------------------------------------------
+End issue
+ TEST START : End issue
+  ITEM Assertion OK : -  = $E$48
+  ITEM Assertion OK : -  = $E$1
+  ITEM Assertion OK : -  = $E$3
+  ITEM Assertion OK : -  = $A$8
+  ITEM Assertion OK : -  = $B$8
+  ITEM Assertion OK : -  = $IV$8
+  ITEM Assertion OK : -  = $Z$8
+END 'End issue' Symbol
+ TEST OK : End issue
+----------------------------------------------------------------
+Outline issue
+ TEST START : Outline issue
+  ITEM Assertion OK : -  Range.clearOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+END 'Outline issue' Symbol
+ TEST OK : Outline issue
+----------------------------------------------------------------
+Validation
+ TEST START : Validation
+  ITEM Assertion OK : Validation Input Message is : Attention!
+  ITEM Assertion OK : Validation Input Message is : Enter an integer from five to ten
+  ITEM Assertion OK : Validation Error Title is : You must enter a number from five to ten
+  ITEM Assertion OK : Validation Error Message is : An Error occured
+  ITEM Assertion OK : Validation Error Title is : Microsoft Excel
+END 'Validation' Symbol
+ TEST OK : Validation
+Test run finished : 01/06/2007 11:29:00
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestAddress.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestAddress.log
new file mode 100644
index 0000000..c550b93
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestAddress.log
@@ -0,0 +1,62 @@
+Test run started : 17/07/2007 15:25:17
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1 Range('e3:f3') A1 style addressing
+  ITEM Assertion OK : test2 Range('e3:f3') R1C1 style addressing
+  ITEM Assertion OK : test3 Range ('e:f')  A1 style addressing
+  ITEM Assertion OK : test4 Range ('e:f')  R1C1 style addressing
+  ITEM Assertion OK : test5 Columns A1 style addressing
+  ITEM Assertion OK : test6 Columns R1C1 style addressing
+  ITEM Assertion OK : test7 Columns(3) A1 style addressing
+  ITEM Assertion OK : test8 Columns(3) R1C1 style addressing
+  ITEM Assertion OK : test9 Columns('e') A1 style addressing
+  ITEM Assertion OK : test10 Columns('e') R1C1 style addressing
+  ITEM Assertion OK : test11 Columns('b:d') A1 style addressing
+  ITEM Assertion OK : test12 Columns('b:d') R1C1 style addressing
+  ITEM Assertion OK : test13 Range('c1:g10').Columns A1 style addressing
+  ITEM Assertion OK : test14 Range('c1:g10').Columns R1C1 style addressing
+  ITEM Assertion OK : test15 Range('c1:g10').Columns(1) A1 style addressing
+  ITEM Assertion OK : test16 Range('c1:g10').Columns(1) R1C1 style addressing
+  ITEM Assertion OK : test17 Range('c1:g10').Columns('a') A1 style addressing
+  ITEM Assertion OK : test18 Range('c1:g10').Columns('a') R1C1 style addressing
+  ITEM Assertion OK : test19 Range('c1:g10').Columns('c') A1 style addressing
+  ITEM Assertion OK : test20 Range('c1:g10').Columns('c') R1C1 style addressing
+  ITEM Assertion OK : test21 Range('c1:g10').Columns('x:z') A1 style addressing
+  ITEM Assertion OK : test22 Range('c1:g10').Columns('x:z') R1C1 style addressing
+  ITEM Assertion OK : test23 Range('c1:g10').Columns(30) A1 style addressing
+  ITEM Assertion OK : test24 Range('c1:g10').Columns(30) R1C1 style addressing
+  ITEM Assertion OK : test25 Worksheets('Sheet2').Cells(1, 1) A1 style addressing
+  ITEM Assertion OK : test26 Worksheets('Sheet2').Cells(1, 1) A1 style addressing, RowAddressAbsolute is false
+  ITEM Assertion OK : test27 Worksheets('Sheet2').Cells(1, 1) A1 style addressing, ColAddressAbsolute is false
+  ITEM Assertion OK : test28 Worksheets('Sheet2').Cells(1, 1) R1C1 style addressing
+  ITEM Assertion OK : test29 Worksheets('Sheet2').Range('A1:E5').EntireColumn A1 style addressing
+  ITEM Assertion OK : test30 Worksheets('Sheet2').Range('A1').EntireColumn A1 style addressing
+  ITEM Assertion OK : test31 Worksheets('Sheet2').Range('A1:E5').EntireRow A1 style addressing
+  ITEM Assertion OK : test32 Worksheets('Sheet2').Range('A1') A1 style addressing
+  ITEM Assertion OK : test33 Worksheets('Sheet2').Range('IV65536').EntireRow A1 style addressing
+  ITEM Assertion OK : test34 Worksheets('Sheet2').Range('IU2:IV65536') A1 style addressing
+  ITEM Assertion OK : test35 Range('c1:g10').Columns('x:z') R1C1 style addressing
+  ITEM Assertion OK : test36 Worksheets('Sheet2').Range('A1') A1 style addressing
+  ITEM Assertion OK : test37 Worksheets('Sheet2').Range('A1:E5').EntireColumn A1 style addressing
+  ITEM Assertion OK : test38 Worksheets('Sheet2').Range('10:12') A1 style addressing
+  ITEM Assertion OK : test39 Worksheets('Sheet2').Range('10:12') R1C1 style addressing
+  ITEM Assertion OK : test40 Range('Sheet3!A1:B4') A1 style addressing
+  ITEM Assertion OK : test41 Range('Sheet3!A1,B1,D4:F20') A1 style addressing
+  ITEM Assertion OK : test42 Range('g20:h40').Columns('c:c')
+  ITEM Assertion OK : test43 Range('g20:h40').Columns('c:f')
+  ITEM Assertion OK : test44 Range('g20:h40').Columns(-1)
+  ITEM Assertion OK : test45 Range('c4:g10').Rows(-1)
+  ITEM Assertion OK : test46 Range('a2:b4').Rows('1:1')
+  ITEM Assertion OK : test47 Range('a2:b4').Rows('1:2')
+  ITEM Assertion OK : test48 Range('a2:b4').Rows('2:2')
+  ITEM Assertion OK : test49 Range('a2:b4').Rows('2:3')
+Test Results
+============
+
+Tests passed: 49
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 17/07/2007 15:25:19
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest.log
new file mode 100644
index 0000000..ea5071e
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest.log
@@ -0,0 +1,60 @@
+Test run started : 30/05/2007 11:33:13
+BEGIN TestCalc
+ TEST START : RangeTest2
+  ITEM Assertion OK : -  Range("D15").Row
+  ITEM Assertion OK : -  WorkSheet("D15").Range.Row
+  ITEM Assertion OK : -  Range("D15").Column
+  ITEM Assertion OK : -  Worksheet.Range("D15").Column
+  ITEM Assertion OK : -  Range("D1").EntireRow.Valuer
+  ITEM Assertion OK : -  Range("D1").EntireRow.Valuer
+  ITEM Assertion OK : -  Range("D1").EntireRow.Columns.Count
+  ITEM Assertion OK : -  Range("D1").EntireColumn.Rows.Count
+  ITEM Assertion OK : -  Range("D15").ClearContent
+  ITEM Assertion OK : -  Range("M1:N2").Rows.Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Rows.Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Rows(1).Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Rows(1).Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Columns.Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Columns.Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Columns(1).Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Columns(1).Hidden (get)
+  ITEM Assertion OK : -  Range("B38").Orientation (get)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlDownward)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlUpward)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlVertical)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlVertical)
+  ITEM Assertion OK : -  Range("B39").WrapText (get)
+  ITEM Assertion OK : -  Range("B39").WrapText (set)
+  ITEM Assertion OK : -  Range("B39").WrapText (set)
+  ITEM Assertion OK : -  Range("E39").MergeCells (get)
+  ITEM Assertion OK : -  Range("F39").MergeCells (get)
+  ITEM Assertion OK : -  Range("E39").MergeCells (set)
+  ITEM Assertion OK : -  Range("F39").MergeCells (set)
+  ITEM Assertion OK : -  Range("E39").MergeCells (set)
+  ITEM Assertion OK : -  Range("F39").MergeCells (set)
+  ITEM Assertion OK : -  Range("C41:C42").Replace  MatchCase:=True
+  ITEM Assertion OK : -  Range("C41:C42").Replace  MatchCase:=True
+  ITEM Assertion OK : -  Range("D41:D42").Replace  MatchCase:=False
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM OK (RangeTest2)
+ TEST succesfully completed : RangeTest2
+END   TestCalc
+Test run finished : 30/05/2007 11:33:14
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest2.log
new file mode 100644
index 0000000..a2e5599
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/excel/TestCalc_Rangetest2.log
@@ -0,0 +1,64 @@
+Test run started : 31/05/2007 11:02:10
+BEGIN TestCalc
+ TEST START : RangeTest3
+  ITEM Assertion OK : - setFormulaR1C1
+  ITEM Assertion OK : - getFormulaR1C1
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy(Range("I10"))
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteValues
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteFormulas
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteFormats
+  ITEM Assertion OK : PasteSpecial
+  ITEM Assertion OK : PasteSpecial SkipBlanks:=True
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationAdd
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationSubtract
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationMultiply
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationDivide
+  ITEM Assertion OK : PasteSpecial Transpose:=True
+  ITEM Assertion OK : ActiveWorkbook.Name
+  ITEM Assertion OK : ActiveWorkbook.FullName und ActiveWorkbook.Path
+  ITEM Assertion OK : -  = Range("K22").End (xlDown)
+  ITEM Assertion OK : -  = Range("K22").End (xlUo)
+  ITEM Assertion OK : -  = Range("K22").End (xlToLeft)
+  ITEM Assertion OK : -  = Range("K22").End (xlRight)
+  ITEM Assertion OK : -  ActiveSpreadsheet.Next
+  ITEM Assertion OK : -  ActiveSpreadsheet.Next
+  ITEM Assertion OK : -  ActiveSpreadsheet.Previous
+  ITEM Assertion OK : -  ActiveSpreadsheet.Previous
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="x"
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="<>"
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="="
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter
+  ITEM Assertion OK : -  ActiveSheet.Resize.Select
+  ITEM Assertion OK : -  Application.GoTo Reference:="R8C2"
+  ITEM Assertion OK : -  Application.GoTo Reference:="R[8]C[2]"
+  ITEM Assertion OK : -  Application.GoTo Reference:="R8C2"
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Ungroup- please check visually
+  ITEM Assertion OK : -  Range.Ungroup - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.clearOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  ActiveSheet.UsedRange.Select
+  ITEM Assertion FAIL : -  Range("A13").AddIndent
+  ITEM Assertion OK : -  Range("A13").IndentLevel set
+  ITEM Assertion OK : -  Range("A13").IndentLevel get
+  ITEM Assertion OK : -  Range("A13").IndentLevel get
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Calculate
+  ITEM Assertion OK : Worksheet.Calculate
+  ITEM Assertion OK : - Application.Calculate
+  ITEM Assertion OK : Global.Calculate
+  ITEM Assertion OK : Calculation set
+  ITEM Assertion OK : -  = ActiveWorkbook.Colors(3) set
+  ITEM Assertion OK : -  = ActiveWorkbook.ResetColors
+  ITEM Assertion OK : -  = ActiveWorkbook.Colors(3) get
+  ITEM FAIL (RangeTest3)
+ TEST Not succesfully completed : RangeTest3
+END   TestCalc
+Test run finished : 31/05/2007 11:02:12
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/format.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/format.log
new file mode 100644
index 0000000..fa827a0
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/format.log
@@ -0,0 +1,36 @@
+Test run started : 08/10/2008 13:08:40
+BEGIN Format
+ TEST START : Test Predefined_Number_Format_Sample function
+  ITEM Assertion OK : General Number: 562486.2356
+  ITEM Assertion OK : Fixed: 0.20
+  ITEM Assertion OK : Standard: 562,486.24
+  ITEM Assertion OK : Percent: 75.21%
+  ITEM Assertion OK : Scientific: 5.62E+05
+  ITEM Assertion OK : Scientific: -3.46E+03
+  ITEM Assertion OK : Yes/No: No
+  ITEM Assertion OK : Yes/No: Yes
+  ITEM Assertion OK : True/False: False
+  ITEM Assertion OK : True/False: True
+  ITEM Assertion OK : On/Off: Off
+  ITEM Assertion OK : On/Off: On
+ TEST OK : Test Predefined_Number_Format_Sample function
+ TEST START : Test Custom_Number_Format_Sample function
+  ITEM Assertion OK : 00.0000: 23.6750
+  ITEM Assertion OK : 00.00: 23.68
+  ITEM Assertion OK : 00000: 02658
+  ITEM Assertion OK : 00.00: 2658.00
+  ITEM Assertion OK : ##.####: 23.675
+  ITEM Assertion OK : ##.##: 23.68
+  ITEM Assertion OK : #,###.##: 12,345.25
+  ITEM Assertion OK : ##.00%: 25.00%
+  ITEM Assertion OK : #,###: 1,000,000
+  ITEM Assertion OK : ######E-###: 109838E-5
+  ITEM Assertion OK : $#,###.##: $2,345.25
+  ITEM Assertion OK : ##.###\%: .25%
+ TEST OK : Test Custom_Number_Format_Sample function
+ TEST START : Test Custom_Text_Format_Sample function
+  ITEM Assertion OK : <: vba
+  ITEM Assertion OK : >: VBA
+ TEST OK : Test Custom_Text_Format_Sample function
+END  Format
+Test run finished : 08/10/2008 13:08:40
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/AutoFilter.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/AutoFilter.log
new file mode 100644
index 0000000..bb50e75
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/AutoFilter.log
@@ -0,0 +1,20 @@
+Test run started : 18/07/2007 10:56:38
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1 'starts with' string criteria
+  ITEM Assertion OK : test2 'not equal to' string criteria
+  ITEM Assertion OK : test3 'ends with' string criteria
+  ITEM Assertion OK : test4 field 'all'
+  ITEM Assertion OK : test5 numeric '<15'
+  ITEM Assertion OK : test6 numeric '>=15'
+  ITEM Assertion OK : test7 numeric '<=12'
+Test Results
+============
+
+Tests passed: 7
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 18/07/2007 10:56:44
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcFont.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcFont.log
new file mode 100644
index 0000000..f3583e4
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcFont.log
@@ -0,0 +1,17 @@
+Test run started : 10/09/2008 02:40:17 PM
+CalcFont_Format
+ TEST START : Font_Format
+  ITEM Assertion OK : correctly set font to Bold
+  ITEM Assertion OK : correctly set font to Italic
+  ITEM Assertion OK : correctly read FontStyle
+  ITEM Assertion OK : correctly set font to Shadow
+  ITEM Assertion OK : correctly set font color
+  ITEM Assertion OK : correctly set font color index
+  ITEM Assertion OK : correctly set font name
+  ITEM Assertion OK : correctly set font outline
+  ITEM Assertion OK : correctly set font size
+  ITEM Assertion OK : correctly set font strikethrough
+  ITEM Assertion OK : correctly set font underline
+ TEST Success. : Font_Format
+CalcFont_Format
+Test run finished : 10/09/2008 02:40:17 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcZoom.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcZoom.log
new file mode 100644
index 0000000..f8c8353
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/CalcZoom.log
@@ -0,0 +1,18 @@
+Test run started : 15/06/2009 12:49:35
+CalcZoom
+ TEST START : CalcZoom
+  ITEM Assertion OK : test1 read window.zoom activesheet = sheet1
+  ITEM Assertion OK : test2 read window.zoom activesheet = sheet2
+  ITEM Assertion OK : test3 read window.zoom activesheet = sheet3
+  ITEM Assertion OK : test4 read window.zoom activesheet = sheet3
+  ITEM Assertion OK : test4 read window.zoom activesheet = sheet2
+  ITEM Assertion OK : test4 read window.zoom activesheet = sheet1
+ TEST Success. : CalcZoom
+CalcZoom
+Test Results
+============
+
+Tests passed: 6
+Tests failed: 0
+
+Test run finished : 15/06/2009 12:49:37
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/FinancialFuncTests.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/FinancialFuncTests.log
new file mode 100644
index 0000000..5633a81
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/FinancialFuncTests.log
@@ -0,0 +1,31 @@
+Test run started : 04/08/2009 12:42:26
+----------------------------------------------------------------
+FinancialFuncs
+ TEST START : FinancialFuncs
+  ITEM Assertion OK : DDB test
+  ITEM Assertion OK : FV test
+  ITEM Assertion OK : IPmt test
+  ITEM Assertion FAIL : IRR test
+  ITEM Assertion OK : MIRR test
+  ITEM Assertion FAIL : NPer test
+  ITEM Assertion FAIL : NPV test
+  ITEM Assertion FAIL : Pmt test
+  ITEM Assertion OK : PPmt test
+  ITEM Assertion OK : PV test
+  ITEM Assertion FAIL : Rate test
+  ITEM Assertion OK : SLN test
+  ITEM Assertion OK : SYD test
+Test Results
+============
+
+IRR test Failed: expected 35.8625323270733 got 35.8625323273411
+NPer test Failed: expected 21.5365977313406 got 21.5365977313408
+NPV test Failed: expected 3874.42183648785 got 3874.42183648784
+Pmt test Failed: expected 20276.3942884139 got 20276.3942884138
+Rate test Failed: expected 4.67819164224935E-02 got 4.67819164225E-02
+Tests passed: 8
+Tests failed: 5
+
+END 'FinancialFuncs
+ TEST OK : FinancialFuncs
+Test run finished : 04/08/2009 12:42:36
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscOperatorTests.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscOperatorTests.log
new file mode 100644
index 0000000..cc55752
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscOperatorTests.log
@@ -0,0 +1,30 @@
+Test run started : 12/05/2009 12:36:15
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1: res = Not ( A > B )
+  ITEM Assertion OK : test2: res = Not ( B > A )
+  ITEM Assertion OK : test3: res = Not ( D )
+  ITEM Assertion OK : test4: res = Not A
+  ITEM Assertion OK : test5: res = ( A > D )
+  ITEM Assertion OK : test6: res = ( D > A )
+  ITEM Assertion OK : test7: res = ( A < D )
+  ITEM Assertion OK : test8: res = ( D < A )
+  ITEM Assertion OK : test9: res = ( A >= D )
+  ITEM Assertion OK : test10: res = ( D >= A )
+  ITEM Assertion OK : test11: res = ( A <= D )
+  ITEM Assertion OK : test12: res = ( D <= A )
+  ITEM Assertion OK : test13: res = ( D = A )
+  ITEM Assertion OK : test14: res = ( A = D )
+  ITEM Assertion OK : test15: res = ( D <> A )
+  ITEM Assertion OK : test16: res = ( A <> D )
+  ITEM Assertion OK : test17: ( A = D ) = True
+Test Results
+============
+
+Tests passed: 17
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 12/05/2009 12:36:15
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscRangeTests.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscRangeTests.log
new file mode 100644
index 0000000..215842f
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/MiscRangeTests.log
@@ -0,0 +1,45 @@
+Test run started : 17/07/2007 20:54:56
+----------------------------------------------------------------
+MiscRangeTests
+ TEST START : MiscRangeTests
+  ITEM Assertion OK : test 1
+  ITEM Assertion OK : test 2
+  ITEM Assertion OK : test 3
+  ITEM Assertion OK : test 4
+  ITEM Assertion OK : test 5
+  ITEM Assertion OK : test 6
+  ITEM Assertion OK : test 7
+  ITEM Assertion OK : test 8
+  ITEM Assertion OK : test 9
+  ITEM Assertion OK : test 10
+  ITEM Assertion OK : test 11
+  ITEM Assertion OK : test 12
+  ITEM Assertion OK : test 13
+  ITEM Assertion OK : test 14
+  ITEM Assertion OK : test 15
+  ITEM Assertion OK : test 16
+  ITEM Assertion OK : test 17
+  ITEM Assertion OK : test 18
+  ITEM Assertion OK : test 19
+  ITEM Assertion OK : test 20
+  ITEM Assertion OK : test 21
+  ITEM Assertion OK : test 22
+  ITEM Assertion OK : test 23
+  ITEM Assertion OK : test 24
+  ITEM Assertion OK : test 25
+  ITEM Assertion OK : test 26
+  ITEM Assertion OK : test 27
+  ITEM Assertion OK : test 28
+  ITEM Assertion OK : test 29
+  ITEM Assertion OK : test 30
+  ITEM Assertion OK : test 31
+No. tests: 31
+Summary
+=======
+Run:       31
+Passed:    31
+Failed:    0
+
+END 'MiscRangeTests
+ TEST OK : MiscRangeTests
+Test run finished : 17/07/2007 20:55:03
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/PageBreaks.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/PageBreaks.log
new file mode 100644
index 0000000..0ff400d
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/PageBreaks.log
@@ -0,0 +1,10 @@
+Test run started : 07/24/2008 05:06:12 PM
+----------------------------------------------------------------
+ TEST START : PageBreaks-Issue
+  ITEM Assertion OK : HPageBreaks.Count is 3
+  ITEM Assertion OK : HPageBreak.Type is -4135
+  ITEM Assertion OK : HPageBreak.Location: Range.Row is 5
+  ITEM Assertion OK : HPageBreak.Delete: HPageBreaks.Count is 2
+END 'PageBreaks-Issue' Symbol
+ TEST OK : PageBreaks-Issue
+Test run finished : 07/24/2008 05:06:13 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-2.log
new file mode 100644
index 0000000..8b7076e
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-2.log
@@ -0,0 +1,68 @@
+Test run started : 19/06/2007 11:14:01
+----------------------------------------------------------------
+ClearFormtsIssue
+ TEST START : ClearFormtsIssue
+  ITEM Assertion OK : Range.Font.Bold is: True
+  ITEM Assertion OK : Range.Font.Bold is: False
+END 'ClearFormtsIssue' Symbol
+ TEST OK : ClearFormtsIssue
+----------------------------------------------------------------
+VerticalAlignment-Issue
+ TEST START : VerticalAlignment-Issue
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : Range.VeritcalAlignment is Null
+END 'VerticalAlignment-Issue' Symbol
+ TEST OK : VerticalAlignment-Issue
+----------------------------------------------------------------
+HorizontalAlignment-Issue
+ TEST START : HorizontalAlignment-Issue
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : Range.HorizontalAlignment is Null
+END 'HorizontalAlignment-Issue' Symbol
+ TEST OK : HorizontalAlignment-Issue
+----------------------------------------------------------------
+WrapText-Issue
+ TEST START : WrapText-Issue
+  ITEM Assertion OK : -  Range.WrapText (get)
+  ITEM Assertion OK : -  Range.WrapText (get)
+  ITEM Assertion OK : Range.WrapText is Null
+END 'WrapText-Issue' Symbol
+ TEST OK : WrapText-Issue
+----------------------------------------------------------------
+FontBorderIssues
+ TEST START : FontBorderIssues
+  ITEM Assertion OK : -  = Borders.Color (getColor)
+  ITEM Assertion OK : -  = Font.Color (getColor)
+END 'FontBorderIssues' Symbol
+ TEST OK : FontBorderIssues
+----------------------------------------------------------------
+RangeSizeIssues
+ TEST START : RangeSizeIssues
+  ITEM Assertion OK : Range.Left is: 118.8432
+  ITEM Assertion OK : Range.Top is: 92.16585
+  ITEM Assertion OK : Range.Width is: 226.2
+  ITEM Assertion OK : Range.Height is: 271.5
+END 'RangeSizeIssues' Symbol
+ TEST OK : RangeSizeIssues
+----------------------------------------------------------------
+ApplicationIssues
+ TEST START : ApplicationIssues
+  ITEM Assertion OK : Range.Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range.Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Application.ActiveSheet.Name: Sheet1
+END 'ApplicationIssues' Symbol
+ TEST OK : ApplicationIssues
+Test run finished : 19/06/2007 11:14:02
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-3.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-3.log
new file mode 100644
index 0000000..a130737
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges-3.log
@@ -0,0 +1,8 @@
+Test run started : 19/06/2007 11:26:09
+----------------------------------------------------------------
+MyGoalseek-Issue
+ TEST START : MyGoalseek-Issue
+  ITEM Assertion OK : Variable Range value: 15
+END 'MyGoalseek-Issue' Symbol
+ TEST OK : MyGoalseek-Issue
+Test run finished : 19/06/2007 11:26:10
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges.log
new file mode 100644
index 0000000..2771d10
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Ranges.log
@@ -0,0 +1,280 @@
+Test run started : 10/03/2008 15:15:11
+----------------------------------------------------------------
+ApplicationMethods
+ TEST START : ApplicationMethods
+  ITEM Assertion OK :  Name of Workbook is: Ranges.xls
+  ITEM Assertion OK :  Address of Application.Columns is: $A:$A
+  ITEM Assertion OK :  Address of Application.Rows is: $1:$1
+  ITEM Assertion OK :  Address of Application.Range is: $1:$1,$5:$7
+  ITEM Assertion OK :  Please check manually: DefaultFilePath is: /data4/home/npower/Documents
+  ITEM Assertion OK :  Please check manually: Library Path is: /data4/home/npower/.ooo-2.0/user/basic
+  ITEM Assertion OK :  Please check manually: Template Path is: /data4/home/npower/.ooo-2.0/user/template
+  ITEM Assertion OK :  FileSeparator is /
+  ITEM Assertion OK :  Name of ActiveWorkbook is: Ranges.xls
+END 'ApplicationMethods' Symbol
+ TEST OK : ApplicationMethods
+----------------------------------------------------------------
+Insert-Issue
+ TEST START : Insert-Issue
+  ITEM Assertion OK : Insert with xlShiftToRight: 10
+END 'Insert-Issue' Symbol
+ TEST OK : Insert-Issue
+----------------------------------------------------------------
+MergeCells-Issue
+ TEST START : MergeCells-Issue
+  ITEM Assertion OK :  Range.MergeCells is True
+  ITEM Assertion FAIL : MergeCells is null: False
+  ITEM Assertion OK : RowCount after Merge: 13
+  ITEM Assertion OK :  Range.MergeCells is False
+  ITEM Assertion OK : MergeCells is null: False
+  ITEM Assertion FAIL : MergeCells of Second Area is null : False
+  ITEM Assertion FAIL : MergeCells of Ranges is Null: False
+  ITEM Assertion OK : RowCount after Merge: 7
+  ITEM Assertion OK :  Range.MergeCells is False
+  ITEM Assertion OK : MergeCells is null: False
+  ITEM Assertion OK : RowCount after Merge: 7
+END 'MergeCells-Issue' Symbol
+ TEST OK : MergeCells-Issue
+----------------------------------------------------------------
+Areas-Issue
+ TEST START : Areas-Issue
+  ITEM Assertion OK : Range Areas Count is2
+  ITEM Assertion OK : First Range Address is: $E$8:$G$13
+  ITEM Assertion OK : First Row is: 8
+  ITEM Assertion OK : First Column is: 5
+  ITEM Assertion OK : EntireRow Address is: $8:$13,$13:$19
+  ITEM Assertion OK : EntireColumn Address is: $E:$G,$G:$K
+  ITEM Assertion OK : Range Count:53
+END 'Areas-Issue' Symbol
+ TEST OK : Areas-Issue
+----------------------------------------------------------------
+Fill-Methods-Issue
+ TEST START : Fill-Methods-Issue
+  ITEM Assertion OK :  Range Value after FillDown: MyFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyRightFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyBottomFillValue
+END 'Fill-Methods-Issue' Symbol
+ TEST OK : Fill-Methods-Issue
+----------------------------------------------------------------
+Range/Item-Method-Issue
+ TEST START : Range/Item-Method-Issue
+  ITEM Assertion OK :  Range of multiple columns is: $A:$A,$C:$C
+  ITEM Assertion OK :  Range of multiple rows is: $1:$1,$5:$7
+  ITEM Assertion OK :  Range of several columns is: $C:$E,$D:$D
+  ITEM Assertion OK :  Range of several rows is: $5:$8,$6:$10
+  ITEM Assertion OK :  Range of several single cells is: $C$5,$E$8
+  ITEM Assertion OK :  Range of several named ranges is: $L$1:$M$6,$E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK :  Range of a single Item Cell is: $E$21
+  ITEM Assertion OK :  Range of a single Item Cell is: $F$21
+  ITEM Assertion OK :  Range of a single Item Cell is: $F$10
+END 'Range/Item-Method-Issue' Symbol
+ TEST OK : Range/Item-Method-Issue
+----------------------------------------------------------------
+R1C1-Formulas-Issue
+ TEST START : R1C1-Formulas-Issue
+  ITEM Assertion OK :  R1C1 Range.Formula is: =IF(OR(R[-2]C[1]=0,RC[2]="YES"),"")
+  ITEM Assertion OK :  Range.Formula is: =IF(OR(J8=0,K10="YES"),"")
+END 'R1C1-Formulas-Issue' Symbol
+ TEST OK : R1C1-Formulas-Issue
+----------------------------------------------------------------
+Verify_Delete
+ TEST START : Verify_Delete
+  ITEM Assertion OK : Ranges are intersecting: $G$13
+  ITEM Assertion OK : Delete with Default: $AJ$4
+  ITEM Assertion OK : Delete with ShifttoLeft: $AJ$4
+  ITEM Assertion OK : Delete with ShiftUp: $M$22
+END 'Verify_Delete' Symbol
+ TEST OK : Verify_Delete
+----------------------------------------------------------------
+Value-Issue
+ TEST START : Value-Issue
+  ITEM Assertion OK : Value of Range is: 12.3
+  ITEM Assertion OK : Text of Range is: 12.3
+  ITEM Assertion OK : Range has Formula: False
+  ITEM Assertion OK : Cell has Formula: False
+  ITEM Assertion FAIL : Text of Range is null: False
+  ITEM Assertion OK : Range has Formula: True
+  ITEM Assertion OK : Cell has Formula: True
+  ITEM Assertion OK : Value of Cell is: 12
+  ITEM Assertion OK : Application.Calculation is : -4135
+  ITEM Assertion OK : Calculation is automated: True
+  ITEM Assertion OK : Range has Formula: True
+  ITEM Assertion OK : Value of Cell is: 16
+  ITEM Assertion OK : Text of Cell is: 16
+  ITEM Assertion OK : Text of Cell is: 16
+  ITEM Assertion OK : Range has Formula after 'ClearContents: False
+  ITEM Assertion OK : Text of Cell is:
+  ITEM Assertion OK : Text of Cell is:
+END 'Value-Issue' Symbol
+ TEST OK : Value-Issue
+----------------------------------------------------------------
+AutoFit issue
+ TEST START : AutoFit issue
+  ITEM Assertion OK :  Columns.AutoFit: CurrentWidth is 680
+  ITEM Assertion OK :  Rows.AutoFit: CurrentHeight is 554
+END 'AutoFit issue' Symbol
+ TEST OK : AutoFit issue
+----------------------------------------------------------------
+Selections
+ TEST START : Selections
+  ITEM Assertion OK : ActiveCell is : $E$8
+  ITEM Assertion OK : Active Cell is : $E$8
+  ITEM Assertion OK : Number of Cells in Range: 52
+  ITEM Assertion OK : Number of Cells in Range: 52
+  ITEM Assertion OK : Number of Cells in Range: 52
+END 'Selections' Symbol
+ TEST OK : Selections
+----------------------------------------------------------------
+Offset-Resize
+ TEST START : Offset-Resize
+  ITEM Assertion OK : Offset is : $G$10:$I$15,$I$15:$M$21
+  ITEM Assertion OK : Offset is : $G$7:$I$12,$I$12:$M$18
+  ITEM Assertion OK :   Resized Range is : $A$20:$D$23
+END 'Offset-Resize' Symbol
+ TEST OK : Offset-Resize
+----------------------------------------------------------------
+Ranges-Address
+ TEST START : Ranges-Address
+  ITEM Assertion OK : Range Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range Address is: $E8:$G13,$G13:$K19
+  ITEM Assertion OK : Range Address is: E$8:G$13,G$13:K$19
+  ITEM Assertion OK : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion FAIL : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion OK : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion OK : Range Address is: R[6]C[3]:R[11]C[5],R[11]C[5]:R[17]C[9]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$8:$G$13,$G$13:$K$19
+END 'Ranges-Address' Symbol
+ TEST OK : Ranges-Address
+----------------------------------------------------------------
+Range-Address
+ TEST START : Range-Address
+  ITEM Assertion OK : Range Address is: $E$8:$G$13
+  ITEM Assertion OK : Range Address is: $E8:$G13
+  ITEM Assertion OK : Range Address is: E$8:G$13
+  ITEM Assertion OK : Range Address is: R8C5:R13C7
+  ITEM Assertion FAIL : Range Address is: R8C5:R13C7
+  ITEM Assertion OK : Range Address is: R8C5:R13C7
+  ITEM Assertion OK : Range Address is: R[6]C[3]:R[11]C[5]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$8:$G$13
+END 'Range-Address' Symbol
+ TEST OK : Range-Address
+----------------------------------------------------------------
+Column-Address
+ TEST START : Column-Address
+  ITEM Assertion OK : Range Address is: $F$8:$F$13
+  ITEM Assertion OK : Range Address is: $F8:$F13
+  ITEM Assertion OK : Range Address is: F$8:F$13
+  ITEM Assertion OK : Range Address is: R8C6:R13C6
+  ITEM Assertion FAIL : Range Address is: R8C6:R13C6
+  ITEM Assertion OK : Range Address is: R8C6:R13C6
+  ITEM Assertion OK : Range Address is: R[6]C[4]:R[11]C[4]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$F$8:$F$13
+END 'Column-Address' Symbol
+ TEST OK : Column-Address
+----------------------------------------------------------------
+Row-Address
+ TEST START : Row-Address
+  ITEM Assertion OK : Range Address is: $E$9:$G$9
+  ITEM Assertion OK : Range Address is: $E9:$G9
+  ITEM Assertion OK : Range Address is: E$9:G$9
+  ITEM Assertion OK : Range Address is: R9C5:R9C7
+  ITEM Assertion FAIL : Range Address is: R9C5:R9C7
+  ITEM Assertion OK : Range Address is: R9C5:R9C7
+  ITEM Assertion OK : Range Address is: R[7]C[3]:R[7]C[5]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$9:$G$9
+END 'Row-Address' Symbol
+ TEST OK : Row-Address
+----------------------------------------------------------------
+SingleCell-Address
+ TEST START : SingleCell-Address
+  ITEM Assertion OK : Range Address is: $F$9
+  ITEM Assertion OK : Range Address is: $F9
+  ITEM Assertion OK : Range Address is: F$9
+  ITEM Assertion OK : Range Address is: R9C6
+  ITEM Assertion FAIL : Range Address is: R9C6
+  ITEM Assertion OK : Range Address is: R9C6
+  ITEM Assertion OK : Range Address is: R[7]C[4]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$F$9
+END 'SingleCell-Address' Symbol
+ TEST OK : SingleCell-Address
+----------------------------------------------------------------
+Heights and Widths
+ TEST START : Heights and Widths
+  ITEM Assertion OK : Range RowHeight is 40
+  ITEM Assertion OK : Range ColumnWidth is 50
+  ITEM Assertion OK : Range Height is 240
+  ITEM Assertion OK : Range Width is 795
+  ITEM Assertion OK : Range RowHeight is 50
+  ITEM Assertion OK : Range ColumnWidth is 50
+  ITEM Assertion OK : Range Height is 300
+  ITEM Assertion OK : Range Width is 795
+  ITEM Assertion OK : RowHeight is null: True
+  ITEM Assertion OK : ColumnWidth is null: True
+END 'Heights and Widths' Symbol
+ TEST OK : Heights and Widths
+----------------------------------------------------------------
+RangeRowColumn-Issue
+ TEST START : RangeRowColumn-Issue
+  ITEM Assertion OK : Row is: 8
+  ITEM Assertion OK : Column is: 5
+  ITEM Assertion OK : EntireRow.Columns.Count = 256
+  ITEM Assertion OK : EntireColumn.Rows.Count = 131072
+END 'RangeRowColumn-Issue' Symbol
+ TEST OK : RangeRowColumn-Issue
+----------------------------------------------------------------
+Replace-Issue
+ TEST START : Replace-Issue
+  ITEM Assertion OK : Value after Replace: YourValue
+  ITEM Assertion OK : Value after Replace: YourValue
+  ITEM Assertion OK : Value after Replace: ReplaceValue
+  ITEM Assertion OK : Value after Replace: New ReplaceValue
+  ITEM Assertion OK : Value after Replace: New ReplaceValue
+  ITEM Assertion OK : Value after Replace: New Replace
+  ITEM Assertion OK : Value after Replace:
+END 'Replace-Issue' Symbol
+ TEST OK : Replace-Issue
+----------------------------------------------------------------
+Hidden-Issue
+ TEST START : Hidden-Issue
+  ITEM Assertion OK : -  Range.Rows.Hidden (set)
+  ITEM Assertion OK : -  Range.Rows.Hidden (get)
+  ITEM Assertion OK : -  Range.Rows.Item(1).Hidden (set)
+  ITEM Assertion OK : -  Range.Rows.Item(1).Hidden (get)
+  ITEM Assertion OK : -  Range.Columns.Hidden (set)
+  ITEM Assertion OK : -  Range.Columns.Hidden (get)
+  ITEM Assertion OK : -  Range.Columns.Item(1).Hidden (set)
+  ITEM Assertion OK : -  Range.Columns.Item(1).Hidden (get)
+END 'Hidden-Issue' Symbol
+ TEST OK : Hidden-Issue
+----------------------------------------------------------------
+End issue
+ TEST START : End issue
+  ITEM Assertion OK : -  = $E$48
+  ITEM Assertion OK : -  = $E$1
+  ITEM Assertion OK : -  = $E$3
+  ITEM Assertion OK : -  = $A$8
+  ITEM Assertion OK : -  = $B$8
+  ITEM Assertion OK : -  = $IV$8
+  ITEM Assertion OK : -  = $Z$8
+END 'End issue' Symbol
+ TEST OK : End issue
+----------------------------------------------------------------
+Outline issue
+ TEST START : Outline issue
+  ITEM Assertion OK : -  Range.clearOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+END 'Outline issue' Symbol
+ TEST OK : Outline issue
+----------------------------------------------------------------
+Validation
+ TEST START : Validation
+  ITEM Assertion OK : Validation Input Message is : Attention!
+  ITEM Assertion OK : Validation Input Message is : Enter an integer from five to ten
+  ITEM Assertion OK : Validation Error Title is : You must enter a number from five to ten
+  ITEM Assertion OK : Validation Error Message is : An Error occured
+  ITEM Assertion OK : Validation Error Title is : Microsoft Excel
+END 'Validation' Symbol
+ TEST OK : Validation
+Test run finished : 10/03/2008 15:15:13
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Shapes.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Shapes.log
new file mode 100644
index 0000000..cec5aa8
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Shapes.log
@@ -0,0 +1,77 @@
+Test run started : 10/16/2007 05:25:21 PM
+BEGIN Shapes_Collection_Behaviour
+ TEST START : Shapes_Collection_Behaviour
+  ITEM Assertion OK : Name of indexed shape should be 'Sheet2Shape1'
+  ITEM Assertion OK : Name of indexed shape should be 'Sheet2Shape2'
+ TEST Success. : Shapes_Collection_Behaviour
+END Shapes_Collection_Behaviour
+BEGIN Shapes_Select_Item
+ TEST START : Shapes_Select_Item
+  ITEM Assertion OK : Correctly selected shape through Range
+  ITEM Assertion OK : Correctly selected shape through Item
+  ITEM Assertion OK : Needs to be visually checked. Is there a line on the document?
+  ITEM Assertion OK : Needs to be visually checked. Are All Shapes Selected?
+ TEST Success. : Shapes_Select_Item
+END Shapes_Select_Item
+BEGIN Shapes_Fill
+ TEST START : Shapes_Fill
+  ITEM Assertion OK : correctly set visibility of shape fill
+  ITEM Assertion OK : correctly set transparency of shape line
+  ITEM Assertion OK : correctly set forecolor of shape fill
+  ITEM Assertion FAIL : correctly set backcolor of shape fill
+  ITEM Assertion OK : the success of the TwoColorGradient method needs to be verified visually!
+  ITEM Assertion OK : correctly set forecolor of shape fill
+  ITEM Assertion FAIL : correctly set forecolor of shape fill
+ TEST Success. : Shapes_Fill
+END  Shapes_Fill
+BEGIN Shapes_Line
+ TEST START : Shapes_Line
+  ITEM Assertion FAIL : correctly set weight of shape line
+  ITEM Assertion OK : correctly set visibility of shape line
+  ITEM Assertion OK : correctly set transparency of shape line
+  ITEM Assertion OK : correctly set dash style of shape line
+  ITEM Assertion OK : correctly set dash style of shape line
+  ITEM Assertion OK : correctly set forecolor of shape line
+  ITEM Assertion FAIL : correctly set backcolor of shape line
+ TEST Success. : Shapes_Line
+END  Shapes_Line
+BEGIN Shapes_TextFrame
+ TEST START : Shapes_TextFrame
+  ITEM Assertion OK : correctly set Autosize of Shape TextFrame
+ TEST Success. : Shapes_TextFrame
+END  Shapes_TextFrame
+BEGIN Shapes_SimpleGeometry
+ TEST START : Shapes_SimpleGeometery
+  ITEM Assertion OK : shape height should be 47.0425168477155 and got 46.9984222363199
+  ITEM Assertion OK : shape width should be 101.467710269751 and got 101.423615658355
+  ITEM Assertion OK : shape left should be 68.5574761223637 and got 68.5417279658754
+  ITEM Assertion OK : shape top should be 42.0251943291216 and got 42.0094461726333
+  ITEM Assertion OK : shape rotation should be 0 and got 0
+  ITEM Assertion OK : shape rotation should be 25 and got 25
+  ITEM Assertion OK : shape incrementrotation should be 50 and got 50
+  ITEM Assertion OK : shape incrementleft should be 70.6834602404119 and got 70.6677120839236
+  ITEM Assertion OK : shape incrementtop should be 91.262986503119 and got 91.2472383466307
+ TEST Success. : Shapes_SimpleGeometery
+END Shapes_SimpleGeometry
+BEGIN Shapes_Range
+ TEST START : Shapes_Range
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(1) to contain 1 element, it contains 1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(1) to return Sheet2Shape1 got Sheet2Shape1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Sheet2Shape3) to contain 1 element, it contains 1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Sheet2Shape3) to return Sheet2Shape3 got Sheet2Shape3
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array(3, 1) to contain 2 elements, it contains 2
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array(3, 1) to return concated element/shape names Sheet2Shape3Sheet2Shape1 and got Sheet2Shape3Sheet2Shape1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array('Sheet2Shape3', 1, 'Sheet2Shape2')) to contain 3 elements, it contains 3
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array('Sheet2Shape3', 1, 'Sheet2Shape2')) to return concated element/shape names Sheet2Shape3Sheet2Shape1Sheet2Shape2 and got Sheet2Shape3Sheet2Shape1Sheet2Shape2
+ TEST Success. : Shapes_Range
+END Shapes_Range
+BEGIN Shapes_ShapeRange
+ TEST START : Shapes_ShapeRange
+  ITEM Assertion OK : ShapeRange.IncrementLeft shp1.left should be 90.6677120839236 and got 90.6519627935771
+  ITEM Assertion OK : ShapeRange.IncrementLeft shp2.left should be 240.02518299054 and got 240.009433700193
+  ITEM Assertion OK : ShapeRange.IncrementTop shp1.Top should be 111.247238346631 and got 111.231489056284
+  ITEM Assertion OK : ShapeRange.IncrementTop shp2.Top should be 65.0708633026228 and got 65.0551140122763
+  ITEM Assertion OK : ShapeRange.IncrementRotation shp1.Rotation should be 70 and got 70
+  ITEM Assertion OK : ShapeRange.IncrementRotation shp2.Rotation should be 20 and got 20
+END Shapes_ShapeRange
+Test run finished : 10/16/2007 05:25:22 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/StrConv-test.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/StrConv-test.log
new file mode 100644
index 0000000..c7a7d87
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/StrConv-test.log
@@ -0,0 +1,9 @@
+Test run started : 05/29/2008 02:51:03 PM
+BEGIN StrConv
+ TEST START : Test StrConv function
+  ITEM Assertion OK : Converts the string to uppercase characters:ABC EFG HIJ
+  ITEM Assertion OK : Converts the string to lowercase characters:abc efg hij
+  ITEM Assertion OK : Converts the first letter of every word in string to uppercase:Abc Efg Hij
+ TEST OK : Test StrConv function
+END  StrConv
+Test run finished : 05/29/2008 02:51:03 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Template.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Template.log
new file mode 100644
index 0000000..c6376c5
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Template.log
@@ -0,0 +1,14 @@
+Test run started : 2008／07／10 11:57:05
+----------------------------------------------------------------
+TestCaseName
+ TEST START : TestCaseName
+  ITEM Assertion OK : Something has been done.
+Test Results
+============
+
+Tests passed: 1
+Tests failed: 0
+
+END 'TestCaseName
+ TEST OK : TestCaseName
+Test run finished : 2008／07／10 11:57:05
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestAddress.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestAddress.log
new file mode 100644
index 0000000..83bef7f
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestAddress.log
@@ -0,0 +1,67 @@
+Test run started : 12/05/2009 11:23:35
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1 Range('e3:f3') A1 style addressing
+  ITEM Assertion OK : test2 Range('e3:f3') R1C1 style addressing
+  ITEM Assertion OK : test3 Range ('e:f')  A1 style addressing
+  ITEM Assertion OK : test4 Range ('e:f')  R1C1 style addressing
+  ITEM Assertion OK : test5 Columns A1 style addressing
+  ITEM Assertion OK : test6 Columns R1C1 style addressing
+  ITEM Assertion OK : test7 Columns(3) A1 style addressing
+  ITEM Assertion OK : test8 Columns(3) R1C1 style addressing
+  ITEM Assertion OK : test9 Columns('e') A1 style addressing
+  ITEM Assertion OK : test10 Columns('e') R1C1 style addressing
+  ITEM Assertion OK : test11 Columns('b:d') A1 style addressing
+  ITEM Assertion OK : test12 Columns('b:d') R1C1 style addressing
+  ITEM Assertion OK : test13 Range('c1:g10').Columns A1 style addressing
+  ITEM Assertion OK : test14 Range('c1:g10').Columns R1C1 style addressing
+  ITEM Assertion OK : test15 Range('c1:g10').Columns(1) A1 style addressing
+  ITEM Assertion OK : test16 Range('c1:g10').Columns(1) R1C1 style addressing
+  ITEM Assertion OK : test17 Range('c1:g10').Columns('a') A1 style addressing
+  ITEM Assertion OK : test18 Range('c1:g10').Columns('a') R1C1 style addressing
+  ITEM Assertion OK : test19 Range('c1:g10').Columns('c') A1 style addressing
+  ITEM Assertion OK : test20 Range('c1:g10').Columns('c') R1C1 style addressing
+  ITEM Assertion OK : test21 Range('c1:g10').Columns('x:z') A1 style addressing
+  ITEM Assertion OK : test22 Range('c1:g10').Columns('x:z') R1C1 style addressing
+  ITEM Assertion OK : test23 Range('c1:g10').Columns(30) A1 style addressing
+  ITEM Assertion OK : test24 Range('c1:g10').Columns(30) R1C1 style addressing
+  ITEM Assertion OK : test25 Worksheets('Sheet2').Cells(1, 1) A1 style addressing
+  ITEM Assertion OK : test26 Worksheets('Sheet2').Cells(1, 1) A1 style addressing, RowAddressAbsolute is false
+  ITEM Assertion OK : test27 Worksheets('Sheet2').Cells(1, 1) A1 style addressing, ColAddressAbsolute is false
+  ITEM Assertion OK : test28 Worksheets('Sheet2').Cells(1, 1) R1C1 style addressing
+  ITEM Assertion OK : test29 Worksheets('Sheet2').Range('A1:E5').EntireColumn A1 style addressing
+  ITEM Assertion OK : test30 Worksheets('Sheet2').Range('A1').EntireColumn A1 style addressing
+  ITEM Assertion OK : test31 Worksheets('Sheet2').Range('A1:E5').EntireRow A1 style addressing
+  ITEM Assertion OK : test32 Worksheets('Sheet2').Range('A1') A1 style addressing
+  ITEM Assertion OK : test33 Worksheets('Sheet2').Range('IV65536').EntireRow A1 style addressing
+  ITEM Assertion OK : test34 Worksheets('Sheet2').Range('IU2:IV65536') A1 style addressing
+  ITEM Assertion OK : test35 Range('c1:g10').Columns('x:z') R1C1 style addressing
+  ITEM Assertion OK : test36 Worksheets('Sheet2').Range('A1') A1 style addressing
+  ITEM Assertion OK : test37 Worksheets('Sheet2').Range('A1:E5').EntireColumn A1 style addressing
+  ITEM Assertion OK : test38 Worksheets('Sheet2').Range('10:12') A1 style addressing
+  ITEM Assertion OK : test39 Worksheets('Sheet2').Range('10:12') R1C1 style addressing
+  ITEM Assertion OK : test40 Range('Sheet3!A1:B4') A1 style addressing
+  ITEM Assertion OK : test41 Range('Sheet3!A1,B1,D4:F20') A1 style addressing
+  ITEM Assertion OK : test42 Range('g20:h40').Columns('c:c')
+  ITEM Assertion OK : test43 Range('g20:h40').Columns('c:f')
+  ITEM Assertion OK : test44 Range('g20:h40').Columns(-1)
+  ITEM Assertion OK : test45 Range('c4:g10').Rows(-1)
+  ITEM Assertion OK : test46 Range('a2:b4').Rows('1:1')
+  ITEM Assertion OK : test47 Range('a2:b4').Rows('1:2')
+  ITEM Assertion OK : test48 Range('a2:b4').Rows('2:2')
+  ITEM Assertion OK : test49 Range('a2:b4').Rows('2:3')
+  ITEM Assertion OK : test50 Range(' A2:B4 ')
+  ITEM Assertion OK : test51 Range('A 2:B 4')
+  ITEM Assertion OK : test52 Range('A2 : B4 ')
+  ITEM Assertion OK : test53 Range('Sheet1 !A2 : B4 ')
+  ITEM Assertion OK : test54 Range('Sheet1! A2 : B4 ')
+Test Results
+============
+
+Tests passed: 54
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 12/05/2009 11:23:35
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest.log
new file mode 100644
index 0000000..42cfd5b
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest.log
@@ -0,0 +1,60 @@
+Test run started : 30/05/2007 15:59:40
+BEGIN TestCalc
+ TEST START : RangeTest2
+  ITEM Assertion OK : -  Range("D15").Row
+  ITEM Assertion OK : -  WorkSheet("D15").Range.Row
+  ITEM Assertion OK : -  Range("D15").Column
+  ITEM Assertion OK : -  Worksheet.Range("D15").Column
+  ITEM Assertion OK : -  Range("D1").EntireRow.Valuer
+  ITEM Assertion OK : -  Range("D1").EntireRow.Valuer
+  ITEM Assertion OK : -  Range("D1").EntireRow.Columns.Count
+  ITEM Assertion OK : -  Range("D1").EntireColumn.Rows.Count
+  ITEM Assertion OK : -  Range("D15").ClearContent
+  ITEM Assertion OK : -  Range("M1:N2").Rows.Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Rows.Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Rows(1).Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Rows(1).Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Columns.Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Columns.Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Columns(1).Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Columns(1).Hidden (get)
+  ITEM Assertion OK : -  Range("B38").Orientation (get)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlDownward)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlUpward)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlVertical)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlVertical)
+  ITEM Assertion OK : -  Range("B39").WrapText (get)
+  ITEM Assertion OK : -  Range("B39").WrapText (set)
+  ITEM Assertion OK : -  Range("B39").WrapText (set)
+  ITEM Assertion OK : -  Range("E39").MergeCells (get)
+  ITEM Assertion OK : -  Range("F39").MergeCells (get)
+  ITEM Assertion OK : -  Range("E39").MergeCells (set)
+  ITEM Assertion FAIL : -  Range("F39").MergeCells (set)
+  ITEM Assertion OK : -  Range("E39").MergeCells (set)
+  ITEM Assertion OK : -  Range("F39").MergeCells (set)
+  ITEM Assertion OK : -  Range("C41:C42").Replace  MatchCase:=True
+  ITEM Assertion OK : -  Range("C41:C42").Replace  MatchCase:=True
+  ITEM Assertion OK : -  Range("D41:D42").Replace  MatchCase:=False
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM FAIL (RangeTest2)
+ TEST Not succesfully completed : RangeTest2
+END   TestCalc
+Test run finished : 30/05/2007 15:59:42
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest2.log
new file mode 100644
index 0000000..e2ba927
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestCalc_Rangetest2.log
@@ -0,0 +1,65 @@
+Test run started : 10/03/2008 15:15:19
+BEGIN TestCalc
+ TEST START : RangeTest3
+  ITEM Assertion OK : - setFormulaR1C1
+  ITEM Assertion OK : - getFormulaR1C1
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy(Range("I10"))
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteValues
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteFormulas
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteFormats
+  ITEM Assertion OK : PasteSpecial
+  ITEM Assertion OK : PasteSpecial SkipBlanks:=True
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationAdd
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationSubtract
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationMultiply
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationDivide
+  ITEM Assertion OK : PasteSpecial Transpose:=True
+  ITEM Assertion FAIL : ActiveWorkbook.FileFormat
+  ITEM Assertion OK : ActiveWorkbook.Name
+  ITEM Assertion OK : ActiveWorkbook.FullName und ActiveWorkbook.Path
+  ITEM Assertion FAIL : -  = ActiveWorkbook.Colors(3) set
+  ITEM Assertion OK : -  = ActiveWorkbook.ResetColors
+  ITEM Assertion OK : -  = ActiveWorkbook.Colors(3) get
+  ITEM Assertion OK : -  = Range("K22").End (xlDown)
+  ITEM Assertion OK : -  = Range("K22").End (xlUo)
+  ITEM Assertion OK : -  = Range("K22").End (xlToLeft)
+  ITEM Assertion OK : -  = Range("K22").End (xlRight)
+  ITEM Assertion OK : -  ActiveSpreadsheet.Next
+  ITEM Assertion OK : -  ActiveSpreadsheet.Next
+  ITEM Assertion OK : -  ActiveSpreadsheet.Previous
+  ITEM Assertion OK : -  ActiveSpreadsheet.Previous
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="x"
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="<>"
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="="
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter
+  ITEM Assertion OK : -  ActiveSheet.Resize.Select
+  ITEM Assertion OK : -  Application.GoTo Reference:="R8C2"
+  ITEM Assertion FAIL : -  Application.GoTo Reference:="R[8]C[2]"
+  ITEM Assertion OK : -  Application.GoTo Reference:="R8C2"
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Ungroup- please check visually
+  ITEM Assertion OK : -  Range.Ungroup - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.clearOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  ActiveSheet.UsedRange.Select
+  ITEM Assertion OK : -  Range("A13").AddIndent
+  ITEM Assertion OK : -  Range("A13").IndentLevel set
+  ITEM Assertion OK : -  Range("A13").IndentLevel get
+  ITEM Assertion OK : -  Range("A13").IndentLevel get
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Calculate
+  ITEM Assertion OK : Worksheet.Calculate
+  ITEM Assertion OK : - Application.Calculate
+  ITEM Assertion OK : Global.Calculate
+  ITEM Assertion OK : Calculation set
+  ITEM FAIL (RangeTest3)
+ TEST Not succesfully completed : RangeTest3
+END   TestCalc
+Test run finished : 10/03/2008 15:15:21
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestIntersection.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestIntersection.log
new file mode 100644
index 0000000..ea686a8
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestIntersection.log
@@ -0,0 +1,26 @@
+Test run started : 13/01/2009 14:31:43
+----------------------------------------------------------------
+TestIntersection
+ TEST START : TestIntersection
+  ITEM Assertion OK : test1 Application.Intersect( Range('A2:D10'), Range('C4:E6'))
+  ITEM Assertion OK : test2 Application.Intersect( Range('A2:D10'), Range('A4:G10'))
+  ITEM Assertion OK : test3 Application.Intersect( Range('A2:c8,d2:f8,g2:i8'), Range('A4:G10'))
+  ITEM Assertion OK : test4 Application.Intersect( Range('A4:G10'), Range('A2:c8,d2:f8,g2:i8'))
+  ITEM Assertion OK : test5 Application.Intersect( Range('A2:c8,d2:f8,g2:i8'), Range('g4:i10,A4:G10'))
+  ITEM Assertion OK : test6 Application.Intersect( Range('g4:i10,A4:G10'), Range('A2:c8,d2:f8,g2:i8'))
+  ITEM Assertion OK : test7 Application.Intersect( Range('a2:d10,b5:e10'), Range('a5:i10'))
+  ITEM Assertion OK : test8 Application.Intersect( Range('a2:c8,d2:f8'), Range('b6:e9,a6:f9'))
+  ITEM Assertion OK : test9 Application.Intersect( Range('a2:c8,e2:f8'), Range('b6:e9,a6:f9'))
+  ITEM Assertion OK : test10 Application.Intersect( Range('a1:a3,c1:c3'), Range('a2:c3'))
+  ITEM Assertion OK : test11 Application.Intersect( Range('a1:a3,b1:b3'), Range('a2:c3'))
+  ITEM Assertion OK : test12 Application.Intersect( Range('a2:d5,b3:f7,c1:g4'), Range('b2:e6'))
+  ITEM Assertion OK : test13 Range(" a2:d10,b5:e10,g13:j32 "), Range(" a5:i10,b6:e9 "), Range("b2:r5,f10:h19")
+Test Results
+============
+
+Tests passed: 13
+Tests failed: 0
+
+END 'TestIntersection
+ TEST OK : TestIntersection
+Test run finished : 13/01/2009 14:31:43
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestUnion.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestUnion.log
new file mode 100644
index 0000000..da3cb35
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/TestUnion.log
@@ -0,0 +1,17 @@
+Test run started : 13/01/2009 14:32:16
+----------------------------------------------------------------
+TestUnion
+ TEST START : TestUnion
+  ITEM Assertion OK : test1Application.Range('A2:D10'), Range('C4:E6')
+  ITEM Assertion OK : test2Application.Range('A2:D5,a3:d4'), Range('A4:G10')
+  ITEM Assertion OK : test3Application.Range('A4:G10,A1:B6'), Range('A2:D5,A3:D4')
+  ITEM Assertion OK : test4Application.Range('A5:D10'), Range('B5:E10')
+Test Results
+============
+
+Tests passed: 4
+Tests failed: 0
+
+END 'TestUnion
+ TEST OK : TestUnion
+Test run finished : 13/01/2009 14:32:16
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/VariantTest.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/VariantTest.log
new file mode 100644
index 0000000..a916ac4
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/VariantTest.log
@@ -0,0 +1,47 @@
+Test run started : 24/09/2008 10:58:18
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1: res = (aboo = '')
+  ITEM Assertion OK : test 2: res = (aboo = 'fiddlesticks')
+  ITEM Assertion OK : test 3: res = ('' = aboo)
+  ITEM Assertion OK : test 4: res = ('fiddlesticks' = aboo )
+  ITEM Assertion OK : test 5: res = (testString = '')
+  ITEM Assertion OK : test 6: res = (testString = 'fiddlesticks')
+  ITEM Assertion OK : test 7: res = ('' = testString)
+  ITEM Assertion OK : test 8: res = ('fiddlesticks' = testString )
+  ITEM Assertion OK : test 9: res = ( aboo < " )
+  ITEM Assertion OK : test 10: res = ( testString < " )
+  ITEM Assertion OK : test 11: res = ( aboo > " )
+  ITEM Assertion OK : test 12: res = ( testString > " )
+  ITEM Assertion OK : test 13: res = ( aboo <> '' )
+  ITEM Assertion OK : test 14: res = ( testString <> '' )
+  ITEM Assertion OK : test 15: res = (aboo = something/14)
+  ITEM Assertion OK : test 16: res = something + 'string'
+  ITEM Assertion OK : test 17: res = something & 'string'
+  ITEM Assertion OK : test 18: res =  something MOD 10 )
+  ITEM Assertion OK : test 19: res =  something AND 1 )
+  ITEM Assertion OK : test 20: res =  something AND 0 )
+  ITEM Assertion OK : test 21: res =  something OR 12)
+  ITEM Assertion OK : test 22: res =  something OR 0 )
+  ITEM Assertion OK : test 23: res =  something XOR 0 )
+  ITEM Assertion OK : test 24: res =  something XOR 1 )
+  ITEM Assertion OK : test 25: res =  something EQV 0 )
+  ITEM Assertion OK : test 26: res =  something EQV 1 )
+  ITEM Assertion OK : test 27: res =  something IMP 0 )
+  ITEM Assertion OK : test 28: res =  something IMP 1 )
+  ITEM Assertion OK : test 29: res =  something IMP 14 )
+  ITEM Assertion OK : test 30: res =  NOT something )
+  ITEM Assertion OK : test 31: res = something + 12 )
+  ITEM Assertion OK : test 32: res = something - 12 )
+  ITEM Assertion OK : test 33: res = -something )
+  ITEM Assertion OK : test 34: res = something * 12 )
+Test Results
+============
+
+Tests passed: 34
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 24/09/2008 10:58:20
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Window.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Window.log
new file mode 100644
index 0000000..ec9a665
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/Window.log
@@ -0,0 +1,46 @@
+Test run started : 05/29/2008 02:55:00 PM
+----------------------------------------------------------------
+ TEST START : Window-Issue
+  ITEM Assertion OK : Window.Left is: 0 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.Top is: 21 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.Width is: 1280 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.Height is: 752 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.ScrollColumn is: 100
+  ITEM Assertion OK : Window.ScrollColumn is: 1
+  ITEM Assertion OK : Window.ScrollRow is: 100
+  ITEM Assertion OK : Window.ScrollRow is: 1
+  ITEM Assertion OK : Window.LargeScroll(Down): ScrollRow is: 94 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Window.LargeScroll(Up): ScrollRow is: 1
+  ITEM Assertion OK : Window.LargeScroll(ToRight): ScrollColumn is: 58 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Window.LargeScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Window.SmallScroll(ToRight): ScrollColumn is: 4 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Window.SmallScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Window.DisplayWorkBookTabs is: False
+  ITEM Assertion OK : Window.DisplayWorkBookTabs is: True
+  ITEM Assertion OK : Window.DisplayVerticalScrollBar is: True
+  ITEM Assertion OK : Window.DisplayVerticalScrollBar is: False
+  ITEM Assertion OK : Window.DisplayHorizontalScrollBar is: False
+  ITEM Assertion OK : Window.DisplayHorizontalScrollBar is: True
+  ITEM Assertion OK : Window.DisplayHeadings is: False
+  ITEM Assertion OK : Window.DisplayHeadings is: True
+  ITEM Assertion OK : Window.DisplayOutline is: False
+  ITEM Assertion OK : Window.DisplayOutline is: True
+  ITEM Assertion OK : Window.Visible is: False
+  ITEM Assertion OK : Window.Visible is: True
+  ITEM Assertion OK : Window.Caption is: MyCaption
+  ITEM Assertion OK : Pane.ScrollColumn is: 100
+  ITEM Assertion OK : Pane.ScrollColumn is: 1
+  ITEM Assertion OK : Pane.ScrollRow is: 100
+  ITEM Assertion OK : Pane.ScrollRow is: 1
+  ITEM Assertion OK : Pane.LargeScroll(Down): ScrollRow is: 94 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Pane.LargeScroll(Up): ScrollRow is: 1
+  ITEM Assertion OK : Pane.LargeScroll(ToRight): ScrollColumn is: 58 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Pane.LargeScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Pane.SmallScroll(ToRight): ScrollColumn is: 4 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Pane.SmallScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Window Selection: $A$2:$D$5
+  ITEM Assertion OK : ActiveSheet name of Window: Sheet1
+  ITEM Assertion OK : Window ActiveCell: $A$1
+END 'Window-Issue' Symbol
+ TEST OK : Window-Issue
+Test run finished : 05/29/2008 02:55:01 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/bytearraystring.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/bytearraystring.log
new file mode 100644
index 0000000..bd24328
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/bytearraystring.log
@@ -0,0 +1,8 @@
+Test run started : 05/29/2008 02:25:58 PM
+BEGIN Bytearray To String
+ TEST START : Test the conversion between bytearray and string
+  ITEM Assertion OK :  The number of byte is:6
+  ITEM Assertion OK : the return string is: abc
+ TEST OK : Test the conversion between bytearray and string
+END  Bytearray To String
+Test run finished : 05/29/2008 02:25:58 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/dateserial.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/dateserial.log
new file mode 100644
index 0000000..4dd5f53
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/dateserial.log
@@ -0,0 +1,9 @@
+Test run started : 01/24/2008 01:24:50 PM
+BEGIN DateSerial
+ TEST START : Test DateSerial function
+  ITEM Assertion OK : the return date is: 06/15/1999
+  ITEM Assertion OK : the return date is: 06/15/1999
+  ITEM Assertion OK : the return date is: 06/15/1999
+ TEST OK : Test DateSerial function
+END  DateSerial
+Test run finished : 01/24/2008 01:24:50 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/datevalue.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/datevalue.log
new file mode 100644
index 0000000..830d5e7
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/datevalue.log
@@ -0,0 +1,8 @@
+Test run started : 01/24/2008 01:24:41 PM
+BEGIN DateValue
+ TEST START : Test DateValue function
+  ITEM Assertion OK : the return date is: 02/12/1969
+  ITEM Assertion OK : the return date is: 01/21/2008
+ TEST OK : Test DateValue function
+END  DateValue
+Test run finished : 01/24/2008 01:24:41 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/format.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/format.log
new file mode 100644
index 0000000..96725bf
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/format.log
@@ -0,0 +1,36 @@
+Test run started : 2008／09／18 11:35:34
+BEGIN Format
+ TEST START : Test Predefined_Number_Format_Sample function
+  ITEM Assertion OK : General Number: 562486.2356
+  ITEM Assertion OK : Fixed: 0.20
+  ITEM Assertion OK : Standard: 562,486.24
+  ITEM Assertion OK : Percent: 75.21%
+  ITEM Assertion OK : Scientific: 5.62E+05
+  ITEM Assertion OK : Scientific: -3.46E+03
+  ITEM Assertion OK : Yes/No: No
+  ITEM Assertion OK : Yes/No: Yes
+  ITEM Assertion OK : True/False: False
+  ITEM Assertion OK : True/False: True
+  ITEM Assertion OK : On/Off: Off
+  ITEM Assertion OK : On/Off: On
+ TEST OK : Test Predefined_Number_Format_Sample function
+ TEST START : Test Custom_Number_Format_Sample function
+  ITEM Assertion OK : 00.0000: 23.6750
+  ITEM Assertion OK : 00.00: 23.68
+  ITEM Assertion OK : 00000: 02658
+  ITEM Assertion OK : 00.00: 2658.00
+  ITEM Assertion OK : ##.####: 23.675
+  ITEM Assertion OK : ##.##: 23.68
+  ITEM Assertion OK : #,###.##: 12,345.25
+  ITEM Assertion OK : ##.00%: 25.00%
+  ITEM Assertion OK : #,###: 1,000,000
+  ITEM Assertion OK : ######E-###: 109838E-5
+  ITEM Assertion OK : $#,###.##: $2,345.25
+  ITEM Assertion OK : ##.###\%: .25%
+ TEST OK : Test Custom_Number_Format_Sample function
+ TEST START : Test Custom_Text_Format_Sample function
+  ITEM Assertion OK : <: vba
+  ITEM Assertion OK : >: VBA
+ TEST OK : Test Custom_Text_Format_Sample function
+END  Format
+Test run finished : 2008／09／18 11:35:34
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/pagesetup.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/pagesetup.log
new file mode 100644
index 0000000..a8f2eb8
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/pagesetup.log
@@ -0,0 +1,77 @@
+Test run started : 07/21/2008 02:00:06 PM
+BEGIN PageSetup
+ TEST START : Sheet_PrintArea
+  ITEM Assertion OK : PrintArea has changed as expected
+ TEST OK : Sheet_PrintArea
+ TEST START : Test margins (no headers)
+  ITEM Assertion OK : PageSetup.LeftMargin set/get
+  ITEM Assertion OK : PageSetup.RightMargin set/get
+  ITEM Assertion OK : PageSetup.TopMargin set/get
+  ITEM Assertion OK : PageSetup.BottomMargin set/get
+Verify that page margins on sheet 1 are all 0.5inch
+ TEST OK : Test margins (no headers)
+ TEST START : Test margins (headers)
+  ITEM Assertion OK : PageSetup.HeaderMargin set/get
+  ITEM Assertion OK : PageSetup.FooterMargin set/get
+  ITEM Assertion OK : PageSetup.LeftMargin set/get
+  ITEM Assertion OK : PageSetup.LeftMargin set/get
+Verify that top/bottom/header/footer page margins on sheet 2 are all 0.5inch
+ TEST OK : Test margins (headers)
+ TEST START : Test header/footer text
+  ITEM Assertion OK : PageSetup.LeftHeader set
+  ITEM Assertion OK : PageSetup.LeftHeader set/get
+  ITEM Assertion OK : PageSetup.CenterHeader set
+  ITEM Assertion OK : PageSetup.CenterHeader set/get
+  ITEM Assertion OK : PageSetup.RightHeader set
+  ITEM Assertion OK : PageSetup.RightHeader set/get
+  ITEM Assertion OK : PageSetup.LeftFooter set
+  ITEM Assertion OK : PageSetup.LeftFooter set/get
+  ITEM Assertion OK : PageSetup.CenterFooter set
+  ITEM Assertion OK : PageSetup.CenterFooter set/get
+  ITEM Assertion OK : PageSetup.RightFooter set
+  ITEM Assertion OK : PageSetup.RightFooter set/get
+Verify that headers on sheet 2 are Ready,to,go
+Verify that footers on sheet 2 are This,now,Works
+ TEST OK : Test header/footer text
+ TEST START : Test zoom
+  ITEM Assertion OK : PageSetup.Zoom set
+  ITEM Assertion OK : PageSetup.Zoom set/get
+Verify that sheet 1 zoom is 10%
+ TEST OK : Test zoom
+ TEST START : Test orientation
+  ITEM Assertion OK : PageSetup.Zoom set
+  ITEM Assertion OK : PageSetup.Orientation set/get
+Verify that sheet 1 orientation is now landscape
+ TEST OK : Test orientation
+ TEST START : Test order
+  ITEM Assertion OK : PageSetup.Order get
+  ITEM Assertion OK : PageSetup.Order set/get
+Verify that order on sheet 1 is now over, then down.
+ TEST OK : Test order
+ TEST START : Test first page number
+  ITEM Assertion OK : PageSetup.FirstPageNumber get
+  ITEM Assertion OK : PageSetup.FirstPageNumber set/get
+Verify that first page number on sheet 1 is now 2.
+ TEST OK : Test first page number
+ TEST START : Test center vertically
+  ITEM Assertion OK : PageSetup.CenterVertically get
+  ITEM Assertion OK : PageSetup.CenterVertically set/get
+Verify that CenterVertically on sheet 1 is now true.
+ TEST OK : Test center vertically
+ TEST START : Test center horizontally
+  ITEM Assertion OK : PageSetup.CenterHorizontally get
+  ITEM Assertion OK : PageSetup.CenterHorizontally set/get
+Verify that CenterHorizontally on sheet 1 is now true.
+ TEST OK : Test center horizontally
+ TEST START : Test FitToPagesTall
+  ITEM Assertion OK : PageSetup.FitToPagesTall set/get
+ TEST OK : Test FitToPagesTall
+ TEST START : Test FitToPagesWide
+  ITEM Assertion OK : PageSetup.FitToPagesWide set/get
+ TEST OK : Test FitToPagesWide
+ TEST START : Test PrintHeadings
+  ITEM Assertion OK : PageSetup.PrintHeadings set/get
+  ITEM Assertion OK : PageSetup.PrintHeadings set/get
+ TEST OK : Test PrintHeadings
+END  PageSetup
+Test run finished : 07/21/2008 02:00:07 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/partition.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/partition.log
new file mode 100644
index 0000000..f3e188e
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/partition.log
@@ -0,0 +1,11 @@
+Test run started : 12/10/2007 11:26:43 AM
+BEGIN Partition
+ TEST START : Test Partition function
+  ITEM Assertion OK : the number 20 occurs in the range:20:24
+  ITEM Assertion OK : the number 20 occurs in the range: 20: 20
+  ITEM Assertion OK : the number 120 occurs in the range:100:
+  ITEM Assertion OK : the number -5 occurs in the range:   : -1
+  ITEM Assertion OK : the number 2 occurs in the range: 2: 3
+ TEST OK : Test Partition function
+END  Partition
+Test run finished : 12/10/2007 11:26:43 AM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/range-4.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/range-4.log
new file mode 100644
index 0000000..fb37b6f
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/range-4.log
@@ -0,0 +1,16 @@
+Test run started : 2008／06／19 17:14:57
+----------------------------------------------------------------
+ShowDetail-Issue
+ TEST START : ShowDetail-Issue
+  ITEM Assertion OK :  Range.ShowDetail is True
+  ITEM Assertion OK :  Range.ShowDetail is False
+END 'ShowDetail-Issue' Symbol
+ TEST OK : ShowDetail-Issue
+----------------------------------------------------------------
+RangeMerged-Issue
+ TEST START : RangeMerged-Issue
+  ITEM Assertion OK :  Range.RangeMerged is $F$2:$H$5
+  ITEM Assertion OK :  The first address of Range.RangeMerged is $F$2
+END 'RangeMerged-Issue' Symbol
+ TEST OK : RangeMerged-Issue
+Test run finished : 2008／06／19 17:14:57
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/replace.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/replace.log
new file mode 100644
index 0000000..8f600fa
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/replace.log
@@ -0,0 +1,14 @@
+Test run started : 09/05/2008 10:21:46 AM
+BEGIN Replace
+ TEST START : Test Replace function
+  ITEM Assertion OK : common string:aefefdBc
+  ITEM Assertion OK : expression string:aefefdef
+  ITEM Assertion OK : binanary compare:aefefdBc
+  ITEM Assertion OK : text compare:aefefdef
+  ITEM Assertion OK : text compare:aefefdef
+  ITEM Assertion OK : start = 3:cefdBc
+  ITEM Assertion OK : count = 2: aefefdBc
+  ITEM Assertion OK : start = 1, count = 0, not support in Unix: abcbcdBc
+ TEST OK : Test Replace function
+END  Replace
+Test run finished : 09/05/2008 10:21:47 AM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/stringplusdouble.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/stringplusdouble.log
new file mode 100644
index 0000000..6e8b8d9
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/stringplusdouble.log
@@ -0,0 +1,62 @@
+Test run started : 05/29/2008 02:51:22 PM
+BEGIN String Plus Double
+ TEST START : double = string + double
+The next compute raises error: s = null, d = null, r = s + d
+  ITEM Assertion OK : s = null, d = null, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = null, r = s & d .The result is: 0
+The next compute raises error: s = null, d = 20, r = s + d
+  ITEM Assertion OK : s = null, d = 20, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = 20, r = s & d .The result is: 20
+  ITEM Assertion OK : s = '10', d = null, r = s + d .The result is: 10
+  ITEM Assertion OK : s = '10', d = null, r = s & d .The result is: 100
+  ITEM Assertion OK : s = '10', d = 20, r = s + d .The result is: 30
+  ITEM Assertion OK : s = '10', d = 20, r = s & d .The result is: 1020
+The next compute raises error: s = 'abc', d = null, r = s + d
+  ITEM Assertion OK : s = 'abc', d = null, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = null, r = s & d
+  ITEM Assertion OK : s = 'abc', d = null, r = s & d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s + d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s & d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s & d .The result is: -1
+ TEST OK : double = string + double
+ TEST START : string = string + double
+The next compute raises error: s = null, d = null, r = s + d
+  ITEM Assertion OK : s = null, d = null, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = null, r = s & d .The result is: 0
+The next compute raises error: s = null, d = 20, r = s + d
+  ITEM Assertion OK : s = null, d = 20, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = 20, r = s & d .The result is: 20
+  ITEM Assertion OK : s = '10', d = null, r = s + d .The result is: 10
+  ITEM Assertion OK : s = '10', d = null, r = s & d .The result is: 100
+  ITEM Assertion OK : s = '10', d = 20, r = s + d .The result is: 30
+  ITEM Assertion OK : s = '10', d = 20, r = s & d .The result is: 1020
+The next compute raises error: s = 'abc', d = null, r = s + d
+  ITEM Assertion OK : s = 'abc', d = null, r = s + d .The result is: -1
+  ITEM Assertion OK : s = 'abc', d = null, r = s & d .The result is: abc0
+The next compute raises error: s = 'abc', d = 20, r = s + d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s + d .The result is: -1
+  ITEM Assertion OK : s = 'abc', d = 20, r = s & d .The result is: abc20
+ TEST OK : string = string + double
+ TEST START : double = string + string
+The next compute raises error: s = null, d = null, r = s + d
+  ITEM Assertion OK : s = null, d = null, r = s + d .The result is: -1
+The next compute raises error: s = null, d = null, r = s & d
+  ITEM Assertion OK : s = null, d = null, r = s & d .The result is: -1
+  ITEM Assertion OK : s = null, d = 20, r = s + d .The result is: 20
+  ITEM Assertion OK : s = null, d = 20, r = s & d .The result is: 20
+  ITEM Assertion OK : s = '10', d = null, r = s + d .The result is: 10
+  ITEM Assertion OK : s = '10', d = null, r = s & d .The result is: 10
+  ITEM Assertion OK : s = '10', d = 20, r = s + d .The result is: 1020
+  ITEM Assertion OK : s = '10', d = 20, r = s & d .The result is: 1020
+The next compute raises error: s = 'abc', d = null, r = s + d
+  ITEM Assertion OK : s = 'abc', d = null, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = null, r = s & d
+  ITEM Assertion OK : s = 'abc', d = null, r = s & d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s + d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s & d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s & d .The result is: -1
+ TEST OK : double = string + string
+END  String Plus Double
+Test run finished : 05/29/2008 02:51:22 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/window2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/window2.log
new file mode 100644
index 0000000..8e26d05
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/unix/window2.log
@@ -0,0 +1,41 @@
+Test run started : 2008／09／22 11:18:57
+BEGIN Window2
+ TEST START : Test Window.SplitRow
+  ITEM Assertion OK : Test SplitColumn: 2 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitRow: 2 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitVertical: 242.465788476212
+  ITEM Assertion OK : Test SplitHorizontal: 242.465788476212
+  ITEM Assertion OK : Test SplitRow: 4 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitColumn: 3 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitColumn: 0
+  ITEM Assertion OK : Test SplitRow: 0
+ TEST OK : Test Window.SplitRow
+ TEST START : Test Window.DisplayGridlines
+  ITEM Assertion OK : Test gridlines are on
+  ITEM Assertion OK : Test gridlines are off
+ TEST OK : Test Window.DisplayGridlines
+ TEST START : Test Window.DisplayHeadings
+  ITEM Assertion OK : Test Headings are on
+  ITEM Assertion OK : Test Headings are off
+ TEST OK : Test Window.DisplayHeadings
+ TEST START : Test Window.Visibility
+  ITEM Assertion OK : Window is visible
+  ITEM Assertion OK : Window is not visible
+ TEST OK : Test Window.Visibility
+ TEST START : Test Window.FreezePanes
+  ITEM Assertion OK : Test no panes frozen
+  ITEM Assertion OK : Test panes frozen at center
+  ITEM Assertion OK : Test panes frozen at split
+ TEST OK : Test Window.FreezePanes
+ TEST START : Test Window.View
+ TEST OK : Test Window.View
+ TEST START : Test Window.Zoom
+  ITEM Assertion OK : Test zoom=100%
+  ITEM Assertion OK : Test zoom=150%
+ TEST OK : Test Window.Zoom
+ TEST START : Test Windows.Count
+  ITEM Assertion OK : Windows Count: 1
+  ITEM Assertion OK : Application.Windows Count: 1
+ TEST OK : Test Windows.Count
+END  Window2
+Test run finished : 2008／09／22 11:18:58
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/AutoFilter.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/AutoFilter.log
new file mode 100644
index 0000000..0fb3846
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/AutoFilter.log
@@ -0,0 +1,20 @@
+Test run started : 16/10/2007 17:42:01
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1 'starts with' string criteria
+  ITEM Assertion OK : test2 'not equal to' string criteria
+  ITEM Assertion OK : test3 'ends with' string criteria
+  ITEM Assertion OK : test4 field 'all'
+  ITEM Assertion OK : test5 numeric '<15'
+  ITEM Assertion OK : test6 numeric '>=15'
+  ITEM Assertion OK : test7 numeric '<=12'
+Test Results
+============
+
+Tests passed: 7
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 16/10/2007 17:42:02
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/CalcFont.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/CalcFont.log
new file mode 100644
index 0000000..6f5d370
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/CalcFont.log
@@ -0,0 +1,17 @@
+Test run started : 15/01/2009 17:00:35
+CalcFont_Format
+ TEST START : Font_Format
+  ITEM Assertion OK : correctly set font to Bold
+  ITEM Assertion OK : correctly set font to Italic
+  ITEM Assertion OK : correctly read FontStyle
+  ITEM Assertion OK : correctly set font to Shadow
+  ITEM Assertion OK : correctly set font color
+  ITEM Assertion OK : correctly set font color index
+  ITEM Assertion OK : correctly set font name
+  ITEM Assertion OK : correctly set font outline
+  ITEM Assertion OK : correctly set font size
+  ITEM Assertion OK : correctly set font strikethrough
+  ITEM Assertion OK : correctly set font underline
+ TEST Success. : Font_Format
+CalcFont_Format
+Test run finished : 15/01/2009 17:00:36
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscOperatorTests.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscOperatorTests.log
new file mode 100644
index 0000000..f84a5c4
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscOperatorTests.log
@@ -0,0 +1,29 @@
+Test run started : 15/01/2009 17:03:13
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1: res = Not ( A > B )
+  ITEM Assertion OK : test2: res = Not ( B > A )
+  ITEM Assertion OK : test3: res = Not ( D )
+  ITEM Assertion OK : test4: res = Not A
+  ITEM Assertion OK : test5: res = ( A > D )
+  ITEM Assertion OK : test6: res = ( D > A )
+  ITEM Assertion OK : test7: res = ( A < D )
+  ITEM Assertion OK : test8: res = ( D < A )
+  ITEM Assertion OK : test9: res = ( A >= D )
+  ITEM Assertion OK : test10: res = ( D >= A )
+  ITEM Assertion OK : test11: res = ( A <= D )
+  ITEM Assertion OK : test12: res = ( D <= A )
+  ITEM Assertion OK : test13: res = ( D = A )
+  ITEM Assertion OK : test14: res = ( A = D )
+  ITEM Assertion OK : test15: res = ( D <> A )
+  ITEM Assertion OK : test16: res = ( A <> D )
+Test Results
+============
+
+Tests passed: 16
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 15/01/2009 17:03:15
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscRangeTests.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscRangeTests.log
new file mode 100644
index 0000000..6bac7bd
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/MiscRangeTests.log
@@ -0,0 +1,45 @@
+Test run started : 17/07/2007 15:08:56
+----------------------------------------------------------------
+MiscRangeTests
+ TEST START : MiscRangeTests
+  ITEM Assertion OK : test 1
+  ITEM Assertion OK : test 2
+  ITEM Assertion OK : test 3
+  ITEM Assertion OK : test 4
+  ITEM Assertion OK : test 5
+  ITEM Assertion OK : test 6
+  ITEM Assertion OK : test 7
+  ITEM Assertion OK : test 8
+  ITEM Assertion OK : test 9
+  ITEM Assertion OK : test 10
+  ITEM Assertion OK : test 11
+  ITEM Assertion OK : test 12
+  ITEM Assertion OK : test 13
+  ITEM Assertion OK : test 14
+  ITEM Assertion OK : test 15
+  ITEM Assertion OK : test 16
+  ITEM Assertion OK : test 17
+  ITEM Assertion OK : test 18
+  ITEM Assertion OK : test 19
+  ITEM Assertion OK : test 20
+  ITEM Assertion OK : test 21
+  ITEM Assertion OK : test 22
+  ITEM Assertion OK : test 23
+  ITEM Assertion OK : test 24
+  ITEM Assertion OK : test 25
+  ITEM Assertion OK : test 26
+  ITEM Assertion OK : test 27
+  ITEM Assertion OK : test 28
+  ITEM Assertion OK : test 29
+  ITEM Assertion OK : test 30
+  ITEM Assertion OK : test 31
+No. tests: 31
+Summary
+=======
+Run:       31
+Passed:    31
+Failed:    0
+
+END 'MiscRangeTests
+ TEST OK : MiscRangeTests
+Test run finished : 17/07/2007 15:08:59
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/PageBreaks.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/PageBreaks.log
new file mode 100644
index 0000000..0994541
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/PageBreaks.log
@@ -0,0 +1,10 @@
+Test run started : 08/10/2008 12:02:12
+----------------------------------------------------------------
+ TEST START : PageBreaks-Issue
+  ITEM Assertion OK : HPageBreaks.Count is 3
+  ITEM Assertion OK : HPageBreak.Type is -4135
+  ITEM Assertion OK : HPageBreak.Location: Range.Row is 5
+  ITEM Assertion OK : HPageBreak.Delete: HPageBreaks.Count is 2
+END 'PageBreaks-Issue' Symbol
+ TEST OK : PageBreaks-Issue
+Test run finished : 08/10/2008 12:02:12
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-2.log
new file mode 100644
index 0000000..0e4d796
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-2.log
@@ -0,0 +1,68 @@
+Test run started : 10/07/2007 01:55:47
+----------------------------------------------------------------
+ClearFormtsIssue
+ TEST START : ClearFormtsIssue
+  ITEM Assertion OK : Range.Font.Bold is: True
+  ITEM Assertion OK : Range.Font.Bold is: False
+END 'ClearFormtsIssue' Symbol
+ TEST OK : ClearFormtsIssue
+----------------------------------------------------------------
+VerticalAlignment-Issue
+ TEST START : VerticalAlignment-Issue
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : -  Range.VerticalAlignment (get)
+  ITEM Assertion OK : -  Range.VerticalAlignment (set)
+  ITEM Assertion OK : Range.VeritcalAlignment is Null
+END 'VerticalAlignment-Issue' Symbol
+ TEST OK : VerticalAlignment-Issue
+----------------------------------------------------------------
+HorizontalAlignment-Issue
+ TEST START : HorizontalAlignment-Issue
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range.HorizontalAlignment (set)
+  ITEM Assertion OK : Range.HorizontalAlignment is Null
+END 'HorizontalAlignment-Issue' Symbol
+ TEST OK : HorizontalAlignment-Issue
+----------------------------------------------------------------
+WrapText-Issue
+ TEST START : WrapText-Issue
+  ITEM Assertion OK : -  Range.WrapText (get)
+  ITEM Assertion OK : -  Range.WrapText (get)
+  ITEM Assertion OK : Range.WrapText is Null
+END 'WrapText-Issue' Symbol
+ TEST OK : WrapText-Issue
+----------------------------------------------------------------
+FontBorderIssues
+ TEST START : FontBorderIssues
+  ITEM Assertion OK : -  = Borders.Color (getColor)
+  ITEM Assertion OK : -  = Font.Color (getColor)
+END 'FontBorderIssues' Symbol
+ TEST OK : FontBorderIssues
+----------------------------------------------------------------
+RangeSizeIssues
+ TEST START : RangeSizeIssues
+  ITEM Assertion OK : Range.Left is: 100.5291
+  ITEM Assertion OK : Range.Top is: 95.39775
+  ITEM Assertion OK : Range.Width is: 191.25
+  ITEM Assertion OK : Range.Height is: 271.5
+END 'RangeSizeIssues' Symbol
+ TEST OK : RangeSizeIssues
+----------------------------------------------------------------
+ApplicationIssues
+ TEST START : ApplicationIssues
+  ITEM Assertion OK : Range.Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range.Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Application.ActiveSheet.Name: Sheet1
+END 'ApplicationIssues' Symbol
+ TEST OK : ApplicationIssues
+Test run finished : 10/07/2007 01:55:48
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-3.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-3.log
new file mode 100644
index 0000000..20fb6ed
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges-3.log
@@ -0,0 +1,8 @@
+Test run started : 10/07/2007 01:55:51
+----------------------------------------------------------------
+MyGoalseek-Issue
+ TEST START : MyGoalseek-Issue
+  ITEM Assertion OK : Variable Range value: 15
+END 'MyGoalseek-Issue' Symbol
+ TEST OK : MyGoalseek-Issue
+Test run finished : 10/07/2007 01:55:51
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges.log
new file mode 100644
index 0000000..00f7105
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Ranges.log
@@ -0,0 +1,280 @@
+Test run started : 08/10/2008 11:30:21
+----------------------------------------------------------------
+ApplicationMethods
+ TEST START : ApplicationMethods
+  ITEM Assertion OK :  Name of Workbook is: Ranges.xls
+  ITEM Assertion OK :  Address of Application.Columns is: $A:$A
+  ITEM Assertion OK :  Address of Application.Rows is: $1:$1
+  ITEM Assertion OK :  Address of Application.Range is: $1:$1,$5:$7
+  ITEM Assertion OK :  Please check manually: DefaultFilePath is: C:\Documents and Settings\vituosity\My Documents
+  ITEM Assertion OK :  Please check manually: Library Path is: C:\Documents and Settings\vituosity\Application Data\OpenOffice.org\3\user\basic
+  ITEM Assertion OK :  Please check manually: Template Path is: C:\Documents and Settings\vituosity\Application Data\OpenOffice.org\3\user\template
+  ITEM Assertion OK :  FileSeparator is \
+  ITEM Assertion OK :  Name of ActiveWorkbook is: Ranges.xls
+END 'ApplicationMethods' Symbol
+ TEST OK : ApplicationMethods
+----------------------------------------------------------------
+Insert-Issue
+ TEST START : Insert-Issue
+  ITEM Assertion OK : Insert with xlShiftToRight: 10
+END 'Insert-Issue' Symbol
+ TEST OK : Insert-Issue
+----------------------------------------------------------------
+MergeCells-Issue
+ TEST START : MergeCells-Issue
+  ITEM Assertion OK :  Range.MergeCells is True
+  ITEM Assertion FAIL : MergeCells is null: False
+  ITEM Assertion OK : RowCount after Merge: 13
+  ITEM Assertion OK :  Range.MergeCells is False
+  ITEM Assertion OK : MergeCells is null: False
+  ITEM Assertion FAIL : MergeCells of Second Area is null : False
+  ITEM Assertion FAIL : MergeCells of Ranges is Null: False
+  ITEM Assertion OK : RowCount after Merge: 7
+  ITEM Assertion OK :  Range.MergeCells is False
+  ITEM Assertion OK : MergeCells is null: False
+  ITEM Assertion OK : RowCount after Merge: 7
+END 'MergeCells-Issue' Symbol
+ TEST OK : MergeCells-Issue
+----------------------------------------------------------------
+Areas-Issue
+ TEST START : Areas-Issue
+  ITEM Assertion OK : Range Areas Count is2
+  ITEM Assertion OK : First Range Address is: $E$8:$G$13
+  ITEM Assertion OK : First Row is: 8
+  ITEM Assertion OK : First Column is: 5
+  ITEM Assertion OK : EntireRow Address is: $8:$13,$13:$19
+  ITEM Assertion OK : EntireColumn Address is: $E:$G,$G:$K
+  ITEM Assertion OK : Range Count:53
+END 'Areas-Issue' Symbol
+ TEST OK : Areas-Issue
+----------------------------------------------------------------
+Fill-Methods-Issue
+ TEST START : Fill-Methods-Issue
+  ITEM Assertion OK :  Range Value after FillDown: MyFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyRightFillValue
+  ITEM Assertion OK :  Range Value after FillDown: MyBottomFillValue
+END 'Fill-Methods-Issue' Symbol
+ TEST OK : Fill-Methods-Issue
+----------------------------------------------------------------
+Range/Item-Method-Issue
+ TEST START : Range/Item-Method-Issue
+  ITEM Assertion OK :  Range of multiple columns is: $A:$A,$C:$C
+  ITEM Assertion OK :  Range of multiple rows is: $1:$1,$5:$7
+  ITEM Assertion OK :  Range of several columns is: $C:$E,$D:$D
+  ITEM Assertion OK :  Range of several rows is: $5:$8,$6:$10
+  ITEM Assertion OK :  Range of several single cells is: $C$5,$E$8
+  ITEM Assertion OK :  Range of several named ranges is: $L$1:$M$6,$E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK :  Range of a single Item Cell is: $E$21
+  ITEM Assertion OK :  Range of a single Item Cell is: $F$21
+  ITEM Assertion OK :  Range of a single Item Cell is: $F$10
+END 'Range/Item-Method-Issue' Symbol
+ TEST OK : Range/Item-Method-Issue
+----------------------------------------------------------------
+R1C1-Formulas-Issue
+ TEST START : R1C1-Formulas-Issue
+  ITEM Assertion OK :  R1C1 Range.Formula is: =IF(OR(R[-2]C[1]=0,RC[2]="YES"),"")
+  ITEM Assertion OK :  Range.Formula is: =IF(OR(J8=0,K10="YES"),"")
+END 'R1C1-Formulas-Issue' Symbol
+ TEST OK : R1C1-Formulas-Issue
+----------------------------------------------------------------
+Verify_Delete
+ TEST START : Verify_Delete
+  ITEM Assertion OK : Ranges are intersecting: $G$13
+  ITEM Assertion OK : Delete with Default: $AJ$4
+  ITEM Assertion OK : Delete with ShifttoLeft: $AJ$4
+  ITEM Assertion OK : Delete with ShiftUp: $M$22
+END 'Verify_Delete' Symbol
+ TEST OK : Verify_Delete
+----------------------------------------------------------------
+Value-Issue
+ TEST START : Value-Issue
+  ITEM Assertion OK : Value of Range is: 12.3
+  ITEM Assertion OK : Text of Range is: 12.3
+  ITEM Assertion OK : Range has Formula: False
+  ITEM Assertion OK : Cell has Formula: False
+  ITEM Assertion FAIL : Text of Range is null: False
+  ITEM Assertion OK : Range has Formula: True
+  ITEM Assertion OK : Cell has Formula: True
+  ITEM Assertion OK : Value of Cell is: 12
+  ITEM Assertion OK : Application.Calculation is : -4135
+  ITEM Assertion OK : Calculation is automated: True
+  ITEM Assertion OK : Range has Formula: True
+  ITEM Assertion OK : Value of Cell is: 16
+  ITEM Assertion OK : Text of Cell is: 16
+  ITEM Assertion OK : Text of Cell is: 16
+  ITEM Assertion OK : Range has Formula after 'ClearContents: False
+  ITEM Assertion OK : Text of Cell is:
+  ITEM Assertion OK : Text of Cell is:
+END 'Value-Issue' Symbol
+ TEST OK : Value-Issue
+----------------------------------------------------------------
+AutoFit issue
+ TEST START : AutoFit issue
+  ITEM Assertion OK :  Columns.AutoFit: CurrentWidth is 680
+  ITEM Assertion OK :  Rows.AutoFit: CurrentHeight is 582
+END 'AutoFit issue' Symbol
+ TEST OK : AutoFit issue
+----------------------------------------------------------------
+Selections
+ TEST START : Selections
+  ITEM Assertion OK : ActiveCell is : $E$8
+  ITEM Assertion OK : Active Cell is : $E$8
+  ITEM Assertion OK : Number of Cells in Range: 52
+  ITEM Assertion OK : Number of Cells in Range: 52
+  ITEM Assertion OK : Number of Cells in Range: 52
+END 'Selections' Symbol
+ TEST OK : Selections
+----------------------------------------------------------------
+Offset-Resize
+ TEST START : Offset-Resize
+  ITEM Assertion OK : Offset is : $G$10:$I$15,$I$15:$M$21
+  ITEM Assertion OK : Offset is : $G$7:$I$12,$I$12:$M$18
+  ITEM Assertion OK :   Resized Range is : $A$20:$D$23
+END 'Offset-Resize' Symbol
+ TEST OK : Offset-Resize
+----------------------------------------------------------------
+Ranges-Address
+ TEST START : Ranges-Address
+  ITEM Assertion OK : Range Address is: $E$8:$G$13,$G$13:$K$19
+  ITEM Assertion OK : Range Address is: $E8:$G13,$G13:$K19
+  ITEM Assertion OK : Range Address is: E$8:G$13,G$13:K$19
+  ITEM Assertion OK : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion FAIL : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion OK : Range Address is: R8C5:R13C7,R13C7:R19C11
+  ITEM Assertion OK : Range Address is: R[6]C[3]:R[11]C[5],R[11]C[5]:R[17]C[9]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$8:$G$13,$G$13:$K$19
+END 'Ranges-Address' Symbol
+ TEST OK : Ranges-Address
+----------------------------------------------------------------
+Range-Address
+ TEST START : Range-Address
+  ITEM Assertion OK : Range Address is: $E$8:$G$13
+  ITEM Assertion OK : Range Address is: $E8:$G13
+  ITEM Assertion OK : Range Address is: E$8:G$13
+  ITEM Assertion OK : Range Address is: R8C5:R13C7
+  ITEM Assertion FAIL : Range Address is: R8C5:R13C7
+  ITEM Assertion OK : Range Address is: R8C5:R13C7
+  ITEM Assertion OK : Range Address is: R[6]C[3]:R[11]C[5]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$8:$G$13
+END 'Range-Address' Symbol
+ TEST OK : Range-Address
+----------------------------------------------------------------
+Column-Address
+ TEST START : Column-Address
+  ITEM Assertion OK : Range Address is: $F$8:$F$13
+  ITEM Assertion OK : Range Address is: $F8:$F13
+  ITEM Assertion OK : Range Address is: F$8:F$13
+  ITEM Assertion OK : Range Address is: R8C6:R13C6
+  ITEM Assertion FAIL : Range Address is: R8C6:R13C6
+  ITEM Assertion OK : Range Address is: R8C6:R13C6
+  ITEM Assertion OK : Range Address is: R[6]C[4]:R[11]C[4]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$F$8:$F$13
+END 'Column-Address' Symbol
+ TEST OK : Column-Address
+----------------------------------------------------------------
+Row-Address
+ TEST START : Row-Address
+  ITEM Assertion OK : Range Address is: $E$9:$G$9
+  ITEM Assertion OK : Range Address is: $E9:$G9
+  ITEM Assertion OK : Range Address is: E$9:G$9
+  ITEM Assertion OK : Range Address is: R9C5:R9C7
+  ITEM Assertion FAIL : Range Address is: R9C5:R9C7
+  ITEM Assertion OK : Range Address is: R9C5:R9C7
+  ITEM Assertion OK : Range Address is: R[7]C[3]:R[7]C[5]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$E$9:$G$9
+END 'Row-Address' Symbol
+ TEST OK : Row-Address
+----------------------------------------------------------------
+SingleCell-Address
+ TEST START : SingleCell-Address
+  ITEM Assertion OK : Range Address is: $F$9
+  ITEM Assertion OK : Range Address is: $F9
+  ITEM Assertion OK : Range Address is: F$9
+  ITEM Assertion OK : Range Address is: R9C6
+  ITEM Assertion FAIL : Range Address is: R9C6
+  ITEM Assertion OK : Range Address is: R9C6
+  ITEM Assertion OK : Range Address is: R[7]C[4]
+  ITEM Assertion OK : RangeAddress is [Ranges.xls]Sheet1!$F$9
+END 'SingleCell-Address' Symbol
+ TEST OK : SingleCell-Address
+----------------------------------------------------------------
+Heights and Widths
+ TEST START : Heights and Widths
+  ITEM Assertion OK : Range RowHeight is 40
+  ITEM Assertion OK : Range ColumnWidth is 50
+  ITEM Assertion OK : Range Height is 240
+  ITEM Assertion FAIL : Range Width is 675
+  ITEM Assertion OK : Range RowHeight is 50
+  ITEM Assertion OK : Range ColumnWidth is 50
+  ITEM Assertion OK : Range Height is 300
+  ITEM Assertion FAIL : Range Width is 675
+  ITEM Assertion OK : RowHeight is null: True
+  ITEM Assertion OK : ColumnWidth is null: True
+END 'Heights and Widths' Symbol
+ TEST OK : Heights and Widths
+----------------------------------------------------------------
+RangeRowColumn-Issue
+ TEST START : RangeRowColumn-Issue
+  ITEM Assertion OK : Row is: 8
+  ITEM Assertion OK : Column is: 5
+  ITEM Assertion OK : EntireRow.Columns.Count = 1024
+  ITEM Assertion OK : EntireColumn.Rows.Count = 131072
+END 'RangeRowColumn-Issue' Symbol
+ TEST OK : RangeRowColumn-Issue
+----------------------------------------------------------------
+Replace-Issue
+ TEST START : Replace-Issue
+  ITEM Assertion OK : Value after Replace: YourValue
+  ITEM Assertion OK : Value after Replace: YourValue
+  ITEM Assertion OK : Value after Replace: ReplaceValue
+  ITEM Assertion OK : Value after Replace: New ReplaceValue
+  ITEM Assertion OK : Value after Replace: New ReplaceValue
+  ITEM Assertion OK : Value after Replace: New Replace
+  ITEM Assertion OK : Value after Replace:
+END 'Replace-Issue' Symbol
+ TEST OK : Replace-Issue
+----------------------------------------------------------------
+Hidden-Issue
+ TEST START : Hidden-Issue
+  ITEM Assertion OK : -  Range.Rows.Hidden (set)
+  ITEM Assertion OK : -  Range.Rows.Hidden (get)
+  ITEM Assertion OK : -  Range.Rows.Item(1).Hidden (set)
+  ITEM Assertion OK : -  Range.Rows.Item(1).Hidden (get)
+  ITEM Assertion OK : -  Range.Columns.Hidden (set)
+  ITEM Assertion OK : -  Range.Columns.Hidden (get)
+  ITEM Assertion OK : -  Range.Columns.Item(1).Hidden (set)
+  ITEM Assertion OK : -  Range.Columns.Item(1).Hidden (get)
+END 'Hidden-Issue' Symbol
+ TEST OK : Hidden-Issue
+----------------------------------------------------------------
+End issue
+ TEST START : End issue
+  ITEM Assertion OK : -  = $E$48
+  ITEM Assertion OK : -  = $E$1
+  ITEM Assertion OK : -  = $E$3
+  ITEM Assertion OK : -  = $A$8
+  ITEM Assertion OK : -  = $B$8
+  ITEM Assertion OK : -  = $AMJ$8
+  ITEM Assertion OK : -  = $Z$8
+END 'End issue' Symbol
+ TEST OK : End issue
+----------------------------------------------------------------
+Outline issue
+ TEST START : Outline issue
+  ITEM Assertion OK : -  Range.clearOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+END 'Outline issue' Symbol
+ TEST OK : Outline issue
+----------------------------------------------------------------
+Validation
+ TEST START : Validation
+  ITEM Assertion OK : Validation Input Message is : Attention!
+  ITEM Assertion OK : Validation Input Message is : Enter an integer from five to ten
+  ITEM Assertion OK : Validation Error Title is : You must enter a number from five to ten
+  ITEM Assertion OK : Validation Error Message is : An Error occured
+  ITEM Assertion OK : Validation Error Title is : Microsoft Excel
+END 'Validation' Symbol
+ TEST OK : Validation
+Test run finished : 08/10/2008 11:30:24
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Shapes.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Shapes.log
new file mode 100644
index 0000000..d74f90c
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Shapes.log
@@ -0,0 +1,77 @@
+Test run started : 16/10/2007 17:46:03
+BEGIN Shapes_Collection_Behaviour
+ TEST START : Shapes_Collection_Behaviour
+  ITEM Assertion OK : Name of indexed shape should be 'Sheet2Shape1'
+  ITEM Assertion OK : Name of indexed shape should be 'Sheet2Shape2'
+ TEST Success. : Shapes_Collection_Behaviour
+END Shapes_Collection_Behaviour
+BEGIN Shapes_Select_Item
+ TEST START : Shapes_Select_Item
+  ITEM Assertion OK : Correctly selected shape through Range
+  ITEM Assertion OK : Correctly selected shape through Item
+  ITEM Assertion OK : Needs to be visually checked. Is there a line on the document?
+  ITEM Assertion OK : Needs to be visually checked. Are All Shapes Selected?
+ TEST Success. : Shapes_Select_Item
+END Shapes_Select_Item
+BEGIN Shapes_Fill
+ TEST START : Shapes_Fill
+  ITEM Assertion OK : correctly set visibility of shape fill
+  ITEM Assertion OK : correctly set transparency of shape line
+  ITEM Assertion OK : correctly set forecolor of shape fill
+  ITEM Assertion FAIL : correctly set backcolor of shape fill
+  ITEM Assertion OK : the success of the TwoColorGradient method needs to be verified visually!
+  ITEM Assertion OK : correctly set forecolor of shape fill
+  ITEM Assertion FAIL : correctly set forecolor of shape fill
+ TEST Success. : Shapes_Fill
+END  Shapes_Fill
+BEGIN Shapes_Line
+ TEST START : Shapes_Line
+  ITEM Assertion FAIL : correctly set weight of shape line
+  ITEM Assertion OK : correctly set visibility of shape line
+  ITEM Assertion OK : correctly set transparency of shape line
+  ITEM Assertion OK : correctly set dash style of shape line
+  ITEM Assertion OK : correctly set dash style of shape line
+  ITEM Assertion OK : correctly set forecolor of shape line
+  ITEM Assertion FAIL : correctly set backcolor of shape line
+ TEST Success. : Shapes_Line
+END  Shapes_Line
+BEGIN Shapes_TextFrame
+ TEST START : Shapes_TextFrame
+  ITEM Assertion OK : correctly set Autosize of Shape TextFrame
+ TEST Success. : Shapes_TextFrame
+END  Shapes_TextFrame
+BEGIN Shapes_SimpleGeometry
+ TEST START : Shapes_SimpleGeometery
+  ITEM Assertion OK : shape height should be 49.4519655148368 and got 49.4078709034412
+  ITEM Assertion OK : shape width should be 101.467710269751 and got 101.423615658355
+  ITEM Assertion OK : shape left should be 68.5574761223637 and got 68.5417279658754
+  ITEM Assertion OK : shape top should be 44.1511784471699 and got 44.1354302906816
+  ITEM Assertion OK : shape rotation should be 0 and got 0
+  ITEM Assertion OK : shape rotation should be 25 and got 25
+  ITEM Assertion OK : shape incrementrotation should be 50 and got 50
+  ITEM Assertion OK : shape incrementleft should be 69.7480272284707 and got 69.7322790719824
+  ITEM Assertion OK : shape incrementtop should be 93.8141674447769 and got 93.7984192882885
+ TEST Success. : Shapes_SimpleGeometery
+END Shapes_SimpleGeometry
+BEGIN Shapes_Range
+ TEST START : Shapes_Range
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(1) to contain 1 element, it contains 1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(1) to return Sheet2Shape1 got Sheet2Shape1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Sheet2Shape3) to contain 1 element, it contains 1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Sheet2Shape3) to return Sheet2Shape3 got Sheet2Shape3
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array(3, 1) to contain 2 elements, it contains 2
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array(3, 1) to return concated element/shape names Sheet2Shape3Sheet2Shape1 and got Sheet2Shape3Sheet2Shape1
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array('Sheet2Shape3', 1, 'Sheet2Shape2')) to contain 3 elements, it contains 3
+  ITEM Assertion OK : expected Sheets(2).Shapes.Range(Array('Sheet2Shape3', 1, 'Sheet2Shape2')) to return concated element/shape names Sheet2Shape3Sheet2Shape1Sheet2Shape2 and got Sheet2Shape3Sheet2Shape1Sheet2Shape2
+ TEST Success. : Shapes_Range
+END Shapes_Range
+BEGIN Shapes_ShapeRange
+ TEST START : Shapes_ShapeRange
+  ITEM Assertion OK : ShapeRange.IncrementLeft shp1.left should be 89.7322790719824 and got 89.7165297816359
+  ITEM Assertion OK : ShapeRange.IncrementLeft shp2.left should be 240.02518299054 and got 240.009433700193
+  ITEM Assertion OK : ShapeRange.IncrementTop shp1.Top should be 113.798419288289 and got 113.782669997942
+  ITEM Assertion OK : ShapeRange.IncrementTop shp2.Top should be 67.4519655148368 and got 67.4362162244903
+  ITEM Assertion OK : ShapeRange.IncrementRotation shp1.Rotation should be 70 and got 70
+  ITEM Assertion OK : ShapeRange.IncrementRotation shp2.Rotation should be 20 and got 20
+END Shapes_ShapeRange
+Test run finished : 16/10/2007 17:46:04
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/StrConv-test.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/StrConv-test.log
new file mode 100644
index 0000000..749a989
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/StrConv-test.log
@@ -0,0 +1,9 @@
+Test run started : 08/10/2008 12:04:16
+BEGIN StrConv
+ TEST START : Test StrConv function
+  ITEM Assertion OK : Converts the string to uppercase characters:ABC EFG HIJ
+  ITEM Assertion OK : Converts the string to lowercase characters:abc efg hij
+  ITEM Assertion OK : Converts the first letter of every word in string to uppercase:Abc Efg Hij
+ TEST OK : Test StrConv function
+END  StrConv
+Test run finished : 08/10/2008 12:04:16
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Template.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Template.log
new file mode 100644
index 0000000..5d1206d
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Template.log
@@ -0,0 +1,14 @@
+Test run started : 08/10/2008 12:05:52
+----------------------------------------------------------------
+TestCaseName
+ TEST START : TestCaseName
+  ITEM Assertion OK : Something has been done.
+Test Results
+============
+
+Tests passed: 1
+Tests failed: 0
+
+END 'TestCaseName
+ TEST OK : TestCaseName
+Test run finished : 08/10/2008 12:05:52
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestAddress.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestAddress.log
new file mode 100644
index 0000000..b05b7ec
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestAddress.log
@@ -0,0 +1,67 @@
+Test run started : 08/10/2008 11:30:32
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1 Range('e3:f3') A1 style addressing
+  ITEM Assertion OK : test2 Range('e3:f3') R1C1 style addressing
+  ITEM Assertion OK : test3 Range ('e:f')  A1 style addressing
+  ITEM Assertion OK : test4 Range ('e:f')  R1C1 style addressing
+  ITEM Assertion OK : test5 Columns A1 style addressing
+  ITEM Assertion OK : test6 Columns R1C1 style addressing
+  ITEM Assertion OK : test7 Columns(3) A1 style addressing
+  ITEM Assertion OK : test8 Columns(3) R1C1 style addressing
+  ITEM Assertion OK : test9 Columns('e') A1 style addressing
+  ITEM Assertion OK : test10 Columns('e') R1C1 style addressing
+  ITEM Assertion OK : test11 Columns('b:d') A1 style addressing
+  ITEM Assertion OK : test12 Columns('b:d') R1C1 style addressing
+  ITEM Assertion OK : test13 Range('c1:g10').Columns A1 style addressing
+  ITEM Assertion OK : test14 Range('c1:g10').Columns R1C1 style addressing
+  ITEM Assertion OK : test15 Range('c1:g10').Columns(1) A1 style addressing
+  ITEM Assertion OK : test16 Range('c1:g10').Columns(1) R1C1 style addressing
+  ITEM Assertion OK : test17 Range('c1:g10').Columns('a') A1 style addressing
+  ITEM Assertion OK : test18 Range('c1:g10').Columns('a') R1C1 style addressing
+  ITEM Assertion OK : test19 Range('c1:g10').Columns('c') A1 style addressing
+  ITEM Assertion OK : test20 Range('c1:g10').Columns('c') R1C1 style addressing
+  ITEM Assertion OK : test21 Range('c1:g10').Columns('x:z') A1 style addressing
+  ITEM Assertion OK : test22 Range('c1:g10').Columns('x:z') R1C1 style addressing
+  ITEM Assertion OK : test23 Range('c1:g10').Columns(30) A1 style addressing
+  ITEM Assertion OK : test24 Range('c1:g10').Columns(30) R1C1 style addressing
+  ITEM Assertion OK : test25 Worksheets('Sheet2').Cells(1, 1) A1 style addressing
+  ITEM Assertion OK : test26 Worksheets('Sheet2').Cells(1, 1) A1 style addressing, RowAddressAbsolute is false
+  ITEM Assertion OK : test27 Worksheets('Sheet2').Cells(1, 1) A1 style addressing, ColAddressAbsolute is false
+  ITEM Assertion OK : test28 Worksheets('Sheet2').Cells(1, 1) R1C1 style addressing
+  ITEM Assertion OK : test29 Worksheets('Sheet2').Range('A1:E5').EntireColumn A1 style addressing
+  ITEM Assertion OK : test30 Worksheets('Sheet2').Range('A1').EntireColumn A1 style addressing
+  ITEM Assertion OK : test31 Worksheets('Sheet2').Range('A1:E5').EntireRow A1 style addressing
+  ITEM Assertion OK : test32 Worksheets('Sheet2').Range('A1') A1 style addressing
+  ITEM Assertion OK : test33 Worksheets('Sheet2').Range('IV65536').EntireRow A1 style addressing
+  ITEM Assertion OK : test34 Worksheets('Sheet2').Range('IU2:IV65536') A1 style addressing
+  ITEM Assertion OK : test35 Range('c1:g10').Columns('x:z') R1C1 style addressing
+  ITEM Assertion OK : test36 Worksheets('Sheet2').Range('A1') A1 style addressing
+  ITEM Assertion OK : test37 Worksheets('Sheet2').Range('A1:E5').EntireColumn A1 style addressing
+  ITEM Assertion OK : test38 Worksheets('Sheet2').Range('10:12') A1 style addressing
+  ITEM Assertion OK : test39 Worksheets('Sheet2').Range('10:12') R1C1 style addressing
+  ITEM Assertion OK : test40 Range('Sheet3!A1:B4') A1 style addressing
+  ITEM Assertion OK : test41 Range('Sheet3!A1,B1,D4:F20') A1 style addressing
+  ITEM Assertion OK : test42 Range('g20:h40').Columns('c:c')
+  ITEM Assertion OK : test43 Range('g20:h40').Columns('c:f')
+  ITEM Assertion OK : test44 Range('g20:h40').Columns(-1)
+  ITEM Assertion OK : test45 Range('c4:g10').Rows(-1)
+  ITEM Assertion OK : test46 Range('a2:b4').Rows('1:1')
+  ITEM Assertion OK : test47 Range('a2:b4').Rows('1:2')
+  ITEM Assertion OK : test48 Range('a2:b4').Rows('2:2')
+  ITEM Assertion OK : test49 Range('a2:b4').Rows('2:3')
+  ITEM Assertion OK : test50 Range(' A2:B4 ')
+  ITEM Assertion OK : test51 Range('A 2:B 4')
+  ITEM Assertion OK : test52 Range('A2 : B4 ')
+  ITEM Assertion OK : test53 Range('Sheet1 !A2 : B4 ')
+  ITEM Assertion OK : test54 Range('Sheet1! A2 : B4 ')
+Test Results
+============
+
+Tests passed: 54
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 08/10/2008 11:30:32
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest.log
new file mode 100644
index 0000000..8ba6971
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest.log
@@ -0,0 +1,60 @@
+Test run started : 10/07/2007 01:56:07
+BEGIN TestCalc
+ TEST START : RangeTest2
+  ITEM Assertion OK : -  Range("D15").Row
+  ITEM Assertion OK : -  WorkSheet("D15").Range.Row
+  ITEM Assertion OK : -  Range("D15").Column
+  ITEM Assertion OK : -  Worksheet.Range("D15").Column
+  ITEM Assertion OK : -  Range("D1").EntireRow.Valuer
+  ITEM Assertion OK : -  Range("D1").EntireRow.Valuer
+  ITEM Assertion OK : -  Range("D1").EntireRow.Columns.Count
+  ITEM Assertion OK : -  Range("D1").EntireColumn.Rows.Count
+  ITEM Assertion OK : -  Range("D15").ClearContent
+  ITEM Assertion OK : -  Range("M1:N2").Rows.Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Rows.Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Rows(1).Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Rows(1).Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Columns.Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Columns.Hidden (get)
+  ITEM Assertion OK : -  Range("M1:N2").Columns(1).Hidden (set)
+  ITEM Assertion OK : -  Range("M1:N2").Columns(1).Hidden (get)
+  ITEM Assertion OK : -  Range("B38").Orientation (get)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlDownward)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlUpward)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlVertical)
+  ITEM Assertion OK : -  Range("B38").Orientation (set)
+  ITEM Assertion OK : -  Range("B38").Orientation (set = xlVertical)
+  ITEM Assertion OK : -  Range("B39").WrapText (get)
+  ITEM Assertion OK : -  Range("B39").WrapText (set)
+  ITEM Assertion OK : -  Range("B39").WrapText (set)
+  ITEM Assertion OK : -  Range("E39").MergeCells (get)
+  ITEM Assertion OK : -  Range("F39").MergeCells (get)
+  ITEM Assertion OK : -  Range("E39").MergeCells (set)
+  ITEM Assertion FAIL : -  Range("F39").MergeCells (set)
+  ITEM Assertion OK : -  Range("E39").MergeCells (set)
+  ITEM Assertion OK : -  Range("F39").MergeCells (set)
+  ITEM Assertion OK : -  Range("C41:C42").Replace  MatchCase:=True
+  ITEM Assertion OK : -  Range("C41:C42").Replace  MatchCase:=True
+  ITEM Assertion OK : -  Range("D41:D42").Replace  MatchCase:=False
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").VerticalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (get)
+  ITEM Assertion OK : -  Range("B39").HorizontalAlignment (set)
+  ITEM FAIL (RangeTest2)
+ TEST Not succesfully completed : RangeTest2
+END   TestCalc
+Test run finished : 10/07/2007 01:56:12
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest2.log
new file mode 100644
index 0000000..37d8509
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestCalc_Rangetest2.log
@@ -0,0 +1,65 @@
+Test run started : 08/10/2008 11:30:38
+BEGIN TestCalc
+ TEST START : RangeTest3
+  ITEM Assertion OK : - setFormulaR1C1
+  ITEM Assertion OK : - getFormulaR1C1
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy(Range("I10"))
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteValues
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteFormulas
+  ITEM Assertion OK : PasteSpecial Paste:=xlPasteFormats
+  ITEM Assertion OK : PasteSpecial
+  ITEM Assertion OK : PasteSpecial SkipBlanks:=True
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationAdd
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationSubtract
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationMultiply
+  ITEM Assertion OK : PasteSpecial Operation:=xlPasteSpecialOperationDivide
+  ITEM Assertion OK : PasteSpecial Transpose:=True
+  ITEM Assertion FAIL : ActiveWorkbook.FileFormat
+  ITEM Assertion OK : ActiveWorkbook.Name
+  ITEM Assertion OK : ActiveWorkbook.FullName und ActiveWorkbook.Path
+  ITEM Assertion FAIL : -  = ActiveWorkbook.Colors(3) set
+  ITEM Assertion OK : -  = ActiveWorkbook.ResetColors
+  ITEM Assertion OK : -  = ActiveWorkbook.Colors(3) get
+  ITEM Assertion OK : -  = Range("K22").End (xlDown)
+  ITEM Assertion OK : -  = Range("K22").End (xlUo)
+  ITEM Assertion OK : -  = Range("K22").End (xlToLeft)
+  ITEM Assertion OK : -  = Range("K22").End (xlRight)
+  ITEM Assertion OK : -  ActiveSpreadsheet.Next
+  ITEM Assertion OK : -  ActiveSpreadsheet.Next
+  ITEM Assertion OK : -  ActiveSpreadsheet.Previous
+  ITEM Assertion OK : -  ActiveSpreadsheet.Previous
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="x"
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="<>"
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter field:=1, Criteria1:="="
+  ITEM Assertion OK : -  Range("J4:J11").AutoFilter
+  ITEM Assertion OK : -  ActiveSheet.Resize.Select
+  ITEM Assertion OK : -  Application.GoTo Reference:="R8C2"
+  ITEM Assertion FAIL : -  Application.GoTo Reference:="R[8]C[2]"
+  ITEM Assertion OK : -  Application.GoTo Reference:="R8C2"
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Ungroup- please check visually
+  ITEM Assertion OK : -  Range.Ungroup - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.Group - please check visually
+  ITEM Assertion OK : -  Range.clearOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  Range.AutoOutline - please check visually
+  ITEM Assertion OK : -  ActiveSheet.UsedRange.Select
+  ITEM Assertion OK : -  Range("A13").AddIndent
+  ITEM Assertion OK : -  Range("A13").IndentLevel set
+  ITEM Assertion OK : -  Range("A13").IndentLevel get
+  ITEM Assertion OK : -  Range("A13").IndentLevel get
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Copy() and Range.PasteSpecial()
+  ITEM Assertion OK : - Range.Calculate
+  ITEM Assertion OK : Worksheet.Calculate
+  ITEM Assertion OK : - Application.Calculate
+  ITEM Assertion OK : Global.Calculate
+  ITEM Assertion OK : Calculation set
+  ITEM FAIL (RangeTest3)
+ TEST Not succesfully completed : RangeTest3
+END   TestCalc
+Test run finished : 08/10/2008 11:30:41
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestIntersection.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestIntersection.log
new file mode 100644
index 0000000..8d2bb57
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestIntersection.log
@@ -0,0 +1,26 @@
+Test run started : 15/01/2009 17:05:08
+----------------------------------------------------------------
+TestIntersection
+ TEST START : TestIntersection
+  ITEM Assertion OK : test1 Application.Intersect( Range('A2:D10'), Range('C4:E6'))
+  ITEM Assertion OK : test2 Application.Intersect( Range('A2:D10'), Range('A4:G10'))
+  ITEM Assertion OK : test3 Application.Intersect( Range('A2:c8,d2:f8,g2:i8'), Range('A4:G10'))
+  ITEM Assertion OK : test4 Application.Intersect( Range('A4:G10'), Range('A2:c8,d2:f8,g2:i8'))
+  ITEM Assertion OK : test5 Application.Intersect( Range('A2:c8,d2:f8,g2:i8'), Range('g4:i10,A4:G10'))
+  ITEM Assertion OK : test6 Application.Intersect( Range('g4:i10,A4:G10'), Range('A2:c8,d2:f8,g2:i8'))
+  ITEM Assertion OK : test7 Application.Intersect( Range('a2:d10,b5:e10'), Range('a5:i10'))
+  ITEM Assertion OK : test8 Application.Intersect( Range('a2:c8,d2:f8'), Range('b6:e9,a6:f9'))
+  ITEM Assertion OK : test9 Application.Intersect( Range('a2:c8,e2:f8'), Range('b6:e9,a6:f9'))
+  ITEM Assertion OK : test10 Application.Intersect( Range('a1:a3,c1:c3'), Range('a2:c3'))
+  ITEM Assertion OK : test11 Application.Intersect( Range('a1:a3,b1:b3'), Range('a2:c3'))
+  ITEM Assertion OK : test12 Application.Intersect( Range('a2:d5,b3:f7,c1:g4'), Range('b2:e6'))
+  ITEM Assertion OK : test13 Range(" a2:d10,b5:e10,g13:j32 "), Range(" a5:i10,b6:e9 "), Range("b2:r5,f10:h19")
+Test Results
+============
+
+Tests passed: 13
+Tests failed: 0
+
+END 'TestIntersection
+ TEST OK : TestIntersection
+Test run finished : 15/01/2009 17:05:09
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestUnion.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestUnion.log
new file mode 100644
index 0000000..3d3ee52
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/TestUnion.log
@@ -0,0 +1,17 @@
+Test run started : 15/01/2009 17:06:07
+----------------------------------------------------------------
+TestUnion
+ TEST START : TestUnion
+  ITEM Assertion OK : test1Application.Range('A2:D10'), Range('C4:E6')
+  ITEM Assertion OK : test2Application.Range('A2:D5,a3:d4'), Range('A4:G10')
+  ITEM Assertion OK : test3Application.Range('A4:G10,A1:B6'), Range('A2:D5,A3:D4')
+  ITEM Assertion OK : test4Application.Range('A5:D10'), Range('B5:E10')
+Test Results
+============
+
+Tests passed: 4
+Tests failed: 0
+
+END 'TestUnion
+ TEST OK : TestUnion
+Test run finished : 15/01/2009 17:06:08
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/VariantTest.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/VariantTest.log
new file mode 100644
index 0000000..6789ea6
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/VariantTest.log
@@ -0,0 +1,47 @@
+Test run started : 08/10/2008 12:07:24
+----------------------------------------------------------------
+TestAddress
+ TEST START : TestAddress
+  ITEM Assertion OK : test1: res = (aboo = '')
+  ITEM Assertion OK : test 2: res = (aboo = 'fiddlesticks')
+  ITEM Assertion OK : test 3: res = ('' = aboo)
+  ITEM Assertion OK : test 4: res = ('fiddlesticks' = aboo )
+  ITEM Assertion OK : test 5: res = (testString = '')
+  ITEM Assertion OK : test 6: res = (testString = 'fiddlesticks')
+  ITEM Assertion OK : test 7: res = ('' = testString)
+  ITEM Assertion OK : test 8: res = ('fiddlesticks' = testString )
+  ITEM Assertion OK : test 9: res = ( aboo < " )
+  ITEM Assertion OK : test 10: res = ( testString < " )
+  ITEM Assertion OK : test 11: res = ( aboo > " )
+  ITEM Assertion OK : test 12: res = ( testString > " )
+  ITEM Assertion OK : test 13: res = ( aboo <> '' )
+  ITEM Assertion OK : test 14: res = ( testString <> '' )
+  ITEM Assertion OK : test 15: res = (aboo = something/14)
+  ITEM Assertion OK : test 16: res = something + 'string'
+  ITEM Assertion OK : test 17: res = something & 'string'
+  ITEM Assertion OK : test 18: res =  something MOD 10 )
+  ITEM Assertion OK : test 19: res =  something AND 1 )
+  ITEM Assertion OK : test 20: res =  something AND 0 )
+  ITEM Assertion OK : test 21: res =  something OR 12)
+  ITEM Assertion OK : test 22: res =  something OR 0 )
+  ITEM Assertion OK : test 23: res =  something XOR 0 )
+  ITEM Assertion OK : test 24: res =  something XOR 1 )
+  ITEM Assertion OK : test 25: res =  something EQV 0 )
+  ITEM Assertion OK : test 26: res =  something EQV 1 )
+  ITEM Assertion OK : test 27: res =  something IMP 0 )
+  ITEM Assertion OK : test 28: res =  something IMP 1 )
+  ITEM Assertion OK : test 29: res =  something IMP 14 )
+  ITEM Assertion OK : test 30: res =  NOT something )
+  ITEM Assertion OK : test 31: res = something + 12 )
+  ITEM Assertion OK : test 32: res = something - 12 )
+  ITEM Assertion OK : test 33: res = -something )
+  ITEM Assertion OK : test 34: res = something * 12 )
+Test Results
+============
+
+Tests passed: 34
+Tests failed: 0
+
+END 'TestAddress
+ TEST OK : TestAddress
+Test run finished : 08/10/2008 12:07:26
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Window.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Window.log
new file mode 100644
index 0000000..86c8a40
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/Window.log
@@ -0,0 +1,46 @@
+Test run started : 08/10/2008 12:09:50
+----------------------------------------------------------------
+ TEST START : Window-Issue
+  ITEM Assertion OK : Window.Left is: 0 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.Top is: 26 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.Width is: 1280 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.Height is: 968 (Test only applies to maximized Window)
+  ITEM Assertion OK : Window.ScrollColumn is: 100
+  ITEM Assertion OK : Window.ScrollColumn is: 1
+  ITEM Assertion OK : Window.ScrollRow is: 100
+  ITEM Assertion OK : Window.ScrollRow is: 1
+  ITEM Assertion OK : Window.LargeScroll(Down): ScrollRow is: 127 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Window.LargeScroll(Up): ScrollRow is: 1
+  ITEM Assertion OK : Window.LargeScroll(ToRight): ScrollColumn is: 58 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Window.LargeScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Window.SmallScroll(ToRight): ScrollColumn is: 4 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Window.SmallScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Window.DisplayWorkBookTabs is: False
+  ITEM Assertion OK : Window.DisplayWorkBookTabs is: True
+  ITEM Assertion OK : Window.DisplayVerticalScrollBar is: True
+  ITEM Assertion OK : Window.DisplayVerticalScrollBar is: False
+  ITEM Assertion OK : Window.DisplayHorizontalScrollBar is: False
+  ITEM Assertion OK : Window.DisplayHorizontalScrollBar is: True
+  ITEM Assertion OK : Window.DisplayHeadings is: False
+  ITEM Assertion OK : Window.DisplayHeadings is: True
+  ITEM Assertion OK : Window.DisplayOutline is: False
+  ITEM Assertion OK : Window.DisplayOutline is: True
+  ITEM Assertion OK : Window.Visible is: False
+  ITEM Assertion OK : Window.Visible is: True
+  ITEM Assertion OK : Window.Caption is: MyCaption
+  ITEM Assertion OK : Pane.ScrollColumn is: 100
+  ITEM Assertion OK : Pane.ScrollColumn is: 1
+  ITEM Assertion OK : Pane.ScrollRow is: 100
+  ITEM Assertion OK : Pane.ScrollRow is: 1
+  ITEM Assertion OK : Pane.LargeScroll(Down): ScrollRow is: 127 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Pane.LargeScroll(Up): ScrollRow is: 1
+  ITEM Assertion OK : Pane.LargeScroll(ToRight): ScrollColumn is: 58 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Pane.LargeScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Pane.SmallScroll(ToRight): ScrollColumn is: 4 (Test may only apply to maximized Window)
+  ITEM Assertion OK : Pane.SmallScroll(ToLeft): ScrollColumn is: 1
+  ITEM Assertion OK : Window Selection: $A$2:$D$5
+  ITEM Assertion OK : ActiveSheet name of Window: Sheet1
+  ITEM Assertion OK : Window ActiveCell: $A$1
+END 'Window-Issue' Symbol
+ TEST OK : Window-Issue
+Test run finished : 08/10/2008 12:09:50
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/bytearraystring.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/bytearraystring.log
new file mode 100644
index 0000000..6ec0ce7
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/bytearraystring.log
@@ -0,0 +1,8 @@
+Test run started : 08/10/2008 12:54:46
+BEGIN Bytearray To String
+ TEST START : Test the conversion between bytearray and string
+  ITEM Assertion OK :  The number of byte is:6
+  ITEM Assertion OK : the return string is: abc
+ TEST OK : Test the conversion between bytearray and string
+END  Bytearray To String
+Test run finished : 08/10/2008 12:54:46
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/dateserial.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/dateserial.log
new file mode 100644
index 0000000..405053f
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/dateserial.log
@@ -0,0 +1,9 @@
+Test run started : 08/10/2008 12:56:07
+BEGIN DateSerial
+ TEST START : Test DateSerial function
+  ITEM Assertion OK : the return date is: 15/06/1999
+  ITEM Assertion OK : the return date is: 15/06/1999
+  ITEM Assertion OK : the return date is: 15/06/1999
+ TEST OK : Test DateSerial function
+END  DateSerial
+Test run finished : 08/10/2008 12:56:07
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/datevalue.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/datevalue.log
new file mode 100644
index 0000000..c7a6815
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/datevalue.log
@@ -0,0 +1,8 @@
+Test run started : 08/10/2008 13:07:49
+BEGIN DateValue
+ TEST START : Test DateValue function
+  ITEM Assertion OK : the return date is: 12/02/1969
+  ITEM Assertion OK : the return date is: 21/01/2008
+ TEST OK : Test DateValue function
+END  DateValue
+Test run finished : 08/10/2008 13:07:49
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/format.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/format.log
new file mode 100644
index 0000000..0caac75
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/format.log
@@ -0,0 +1,36 @@
+Test run started : 15/01/2009 17:07:59
+BEGIN Format
+ TEST START : Test Predefined_Number_Format_Sample function
+  ITEM Assertion OK : General Number: 562486.2356
+  ITEM Assertion OK : Fixed: 0.20
+  ITEM Assertion OK : Standard: 562,486.24
+  ITEM Assertion OK : Percent: 75.21%
+  ITEM Assertion OK : Scientific: 5.62E+05
+  ITEM Assertion OK : Scientific: -3.46E+03
+  ITEM Assertion OK : Yes/No: No
+  ITEM Assertion OK : Yes/No: Yes
+  ITEM Assertion OK : True/False: False
+  ITEM Assertion OK : True/False: True
+  ITEM Assertion OK : On/Off: Off
+  ITEM Assertion OK : On/Off: On
+ TEST OK : Test Predefined_Number_Format_Sample function
+ TEST START : Test Custom_Number_Format_Sample function
+  ITEM Assertion OK : 00.0000: 23.6750
+  ITEM Assertion OK : 00.00: 23.68
+  ITEM Assertion OK : 00000: 02658
+  ITEM Assertion OK : 00.00: 2658.00
+  ITEM Assertion OK : ##.####: 23.675
+  ITEM Assertion OK : ##.##: 23.68
+  ITEM Assertion OK : #,###.##: 12,345.25
+  ITEM Assertion OK : ##.00%: 25.00%
+  ITEM Assertion OK : #,###: 1,000,000
+  ITEM Assertion OK : ######E-###: 109838E-5
+  ITEM Assertion OK : $#,###.##: $2,345.25
+  ITEM Assertion OK : ##.###\%: .25%
+ TEST OK : Test Custom_Number_Format_Sample function
+ TEST START : Test Custom_Text_Format_Sample function
+  ITEM Assertion OK : <: vba
+  ITEM Assertion OK : >: VBA
+ TEST OK : Test Custom_Text_Format_Sample function
+END  Format
+Test run finished : 15/01/2009 17:07:59
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/pagesetup.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/pagesetup.log
new file mode 100644
index 0000000..c716db0
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/pagesetup.log
@@ -0,0 +1,87 @@
+Test run started : 7/21/2008 10:37:24 AM
+BEGIN PageSetup
+ TEST START : Sheet_PrintArea
+  ITEM Assertion OK : PrintArea has changed as expected
+ TEST OK : Sheet_PrintArea
+ TEST START : Test margins (no headers)
+  ITEM Assertion OK : PageSetup.LeftMargin set/get
+  ITEM Assertion OK : PageSetup.RightMargin set/get
+  ITEM Assertion OK : PageSetup.TopMargin set/get
+  ITEM Assertion OK : PageSetup.BottomMargin set/get
+Verify that page margins on sheet 1 are all 0.5inch
+ TEST OK : Test margins (no headers)
+ TEST START : Test margins (headers)
+  ITEM Assertion OK : PageSetup.HeaderMargin set/get
+  ITEM Assertion OK : PageSetup.FooterMargin set/get
+  ITEM Assertion OK : PageSetup.LeftMargin set/get
+  ITEM Assertion OK : PageSetup.LeftMargin set/get
+Verify that top/bottom/header/footer page margins on sheet 2 are all 0.5inch
+ TEST OK : Test margins (headers)
+ TEST START : Test header/footer text
+  ITEM Assertion OK : PageSetup.LeftHeader set
+  ITEM Assertion OK : PageSetup.LeftHeader set/get
+  ITEM Assertion OK : PageSetup.CenterHeader set
+  ITEM Assertion OK : PageSetup.CenterHeader set/get
+  ITEM Assertion OK : PageSetup.RightHeader set
+  ITEM Assertion OK : PageSetup.RightHeader set/get
+  ITEM Assertion OK : PageSetup.LeftFooter set
+  ITEM Assertion OK : PageSetup.LeftFooter set/get
+  ITEM Assertion OK : PageSetup.CenterFooter set
+  ITEM Assertion OK : PageSetup.CenterFooter set/get
+  ITEM Assertion OK : PageSetup.RightFooter set
+  ITEM Assertion OK : PageSetup.RightFooter set/get
+Verify that headers on sheet 2 are Ready,to,go
+Verify that footers on sheet 2 are This,now,Works
+ TEST OK : Test header/footer text
+ TEST START : Test zoom
+  ITEM Assertion OK : PageSetup.Zoom set
+  ITEM Assertion OK : PageSetup.Zoom set/get
+Verify that sheet 1 zoom is 10%
+ TEST OK : Test zoom
+ TEST START : Test orientation
+  ITEM Assertion OK : PageSetup.Zoom set
+  ITEM Assertion OK : PageSetup.Orientation set/get
+Verify that sheet 1 orientation is now landscape
+ TEST OK : Test orientation
+ TEST START : Test paper size
+  ITEM Assertion OK : PageSetup.PaperSize get
+  ITEM Assertion OK : PageSetup.PaperSize set/get
+Verify that paper size on sheet 1 is now Letter
+ TEST OK : Test paper size
+ TEST START : Test order
+  ITEM Assertion OK : PageSetup.Order get
+  ITEM Assertion OK : PageSetup.Order set/get
+Verify that order on sheet 1 is now over, then down.
+ TEST OK : Test order
+ TEST START : Test first page number
+  ITEM Assertion OK : PageSetup.FirstPageNumber get
+  ITEM Assertion OK : PageSetup.FirstPageNumber set/get
+Verify that first page number on sheet 1 is now 2.
+ TEST OK : Test first page number
+ TEST START : Test center vertically
+  ITEM Assertion OK : PageSetup.CenterVertically get
+  ITEM Assertion OK : PageSetup.CenterVertically set/get
+Verify that CenterVertically on sheet 1 is now true.
+ TEST OK : Test center vertically
+ TEST START : Test center horizontally
+  ITEM Assertion OK : PageSetup.CenterHorizontally get
+  ITEM Assertion OK : PageSetup.CenterHorizontally set/get
+Verify that CenterHorizontally on sheet 1 is now true.
+ TEST OK : Test center horizontally
+ TEST START : Test FitToPagesTall
+  ITEM Assertion OK : PageSetup.FitToPagesTall set/get
+ TEST OK : Test FitToPagesTall
+ TEST START : Test FitToPagesWide
+  ITEM Assertion OK : PageSetup.FitToPagesWide set/get
+ TEST OK : Test FitToPagesWide
+ TEST START : Test PrintHeadings
+  ITEM Assertion OK : PageSetup.PrintHeadings set/get
+  ITEM Assertion OK : PageSetup.PrintHeadings set/get
+ TEST OK : Test PrintHeadings
+ TEST START : Test PrintTitleRows
+  ITEM Assertion OK : PageSetup.PrintTitleRows get
+  ITEM Assertion OK : PageSetup.PrintTitleRows set range/get
+  ITEM Assertion OK : PageSetup.PrintTitleRows set false/get
+ TEST OK : Test PrintTitleRows
+END  PageSetup
+Test run finished : 7/21/2008 10:37:32 AM
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/partition.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/partition.log
new file mode 100644
index 0000000..5fecf4a
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/partition.log
@@ -0,0 +1,11 @@
+Test run started : 08/10/2008 13:09:51
+BEGIN Partition
+ TEST START : Test Partition function
+  ITEM Assertion OK : the number 20 occurs in the range:20:24
+  ITEM Assertion OK : the number 20 occurs in the range: 20: 20
+  ITEM Assertion OK : the number 120 occurs in the range:100:
+  ITEM Assertion OK : the number -5 occurs in the range:   : -1
+  ITEM Assertion OK : the number 2 occurs in the range: 2: 3
+ TEST OK : Test Partition function
+END  Partition
+Test run finished : 08/10/2008 13:09:51
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/range-4.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/range-4.log
new file mode 100644
index 0000000..725bd10
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/range-4.log
@@ -0,0 +1,16 @@
+Test run started : 08/10/2008 11:30:16
+----------------------------------------------------------------
+ShowDetail-Issue
+ TEST START : ShowDetail-Issue
+  ITEM Assertion OK :  Range.ShowDetail is True
+  ITEM Assertion OK :  Range.ShowDetail is False
+END 'ShowDetail-Issue' Symbol
+ TEST OK : ShowDetail-Issue
+----------------------------------------------------------------
+RangeMerged-Issue
+ TEST START : RangeMerged-Issue
+  ITEM Assertion OK :  Range.RangeMerged is $F$2:$H$5
+  ITEM Assertion OK :  The first address of Range.RangeMerged is $F$2
+END 'RangeMerged-Issue' Symbol
+ TEST OK : RangeMerged-Issue
+Test run finished : 08/10/2008 11:30:16
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/replace.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/replace.log
new file mode 100644
index 0000000..c7a3cbd
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/replace.log
@@ -0,0 +1,14 @@
+Test run started : 2007-11-21 11:24:04
+BEGIN Replace
+ TEST START : Test Replace function
+  ITEM Assertion OK : common string:aefefdBc
+  ITEM Assertion OK : expression string:aefefdef
+  ITEM Assertion OK : binanary compare:aefefdBc
+  ITEM Assertion OK : text compare:aefefdef
+  ITEM Assertion OK : text compare:aefefdef
+  ITEM Assertion OK : start = 3:cefdBc
+  ITEM Assertion OK : count = 2: aefefdBc
+  ITEM Assertion OK : start = 1, count = 0, not support in Unix: abcbcdBc
+ TEST OK : Test Replace function
+END  Replace
+Test run finished : 2007-11-21 11:24:04
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/stringplusdouble.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/stringplusdouble.log
new file mode 100644
index 0000000..d91e4b1
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/stringplusdouble.log
@@ -0,0 +1,62 @@
+Test run started : 15/01/2009 17:09:03
+BEGIN String Plus Double
+ TEST START : double = string + double
+The next compute raises error: s = null, d = null, r = s + d
+  ITEM Assertion OK : s = null, d = null, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = null, r = s & d .The result is: 0
+The next compute raises error: s = null, d = 20, r = s + d
+  ITEM Assertion OK : s = null, d = 20, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = 20, r = s & d .The result is: 20
+  ITEM Assertion OK : s = '10', d = null, r = s + d .The result is: 10
+  ITEM Assertion OK : s = '10', d = null, r = s & d .The result is: 100
+  ITEM Assertion OK : s = '10', d = 20, r = s + d .The result is: 30
+  ITEM Assertion OK : s = '10', d = 20, r = s & d .The result is: 1020
+The next compute raises error: s = 'abc', d = null, r = s + d
+  ITEM Assertion OK : s = 'abc', d = null, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = null, r = s & d
+  ITEM Assertion OK : s = 'abc', d = null, r = s & d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s + d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s & d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s & d .The result is: -1
+ TEST OK : double = string + double
+ TEST START : string = string + double
+The next compute raises error: s = null, d = null, r = s + d
+  ITEM Assertion OK : s = null, d = null, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = null, r = s & d .The result is: 0
+The next compute raises error: s = null, d = 20, r = s + d
+  ITEM Assertion OK : s = null, d = 20, r = s + d .The result is: -1
+  ITEM Assertion OK : s = null, d = 20, r = s & d .The result is: 20
+  ITEM Assertion OK : s = '10', d = null, r = s + d .The result is: 10
+  ITEM Assertion OK : s = '10', d = null, r = s & d .The result is: 100
+  ITEM Assertion OK : s = '10', d = 20, r = s + d .The result is: 30
+  ITEM Assertion OK : s = '10', d = 20, r = s & d .The result is: 1020
+The next compute raises error: s = 'abc', d = null, r = s + d
+  ITEM Assertion OK : s = 'abc', d = null, r = s + d .The result is: -1
+  ITEM Assertion OK : s = 'abc', d = null, r = s & d .The result is: abc0
+The next compute raises error: s = 'abc', d = 20, r = s + d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s + d .The result is: -1
+  ITEM Assertion OK : s = 'abc', d = 20, r = s & d .The result is: abc20
+ TEST OK : string = string + double
+ TEST START : double = string + string
+The next compute raises error: s = null, d = null, r = s + d
+  ITEM Assertion OK : s = null, d = null, r = s + d .The result is: -1
+The next compute raises error: s = null, d = null, r = s & d
+  ITEM Assertion OK : s = null, d = null, r = s & d .The result is: -1
+  ITEM Assertion OK : s = null, d = 20, r = s + d .The result is: 20
+  ITEM Assertion OK : s = null, d = 20, r = s & d .The result is: 20
+  ITEM Assertion OK : s = '10', d = null, r = s + d .The result is: 10
+  ITEM Assertion OK : s = '10', d = null, r = s & d .The result is: 10
+  ITEM Assertion OK : s = '10', d = 20, r = s + d .The result is: 1020
+  ITEM Assertion OK : s = '10', d = 20, r = s & d .The result is: 1020
+The next compute raises error: s = 'abc', d = null, r = s + d
+  ITEM Assertion OK : s = 'abc', d = null, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = null, r = s & d
+  ITEM Assertion OK : s = 'abc', d = null, r = s & d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s + d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s + d .The result is: -1
+The next compute raises error: s = 'abc', d = 20, r = s & d
+  ITEM Assertion OK : s = 'abc', d = 20, r = s & d .The result is: -1
+ TEST OK : double = string + string
+END  String Plus Double
+Test run finished : 15/01/2009 17:09:03
diff --git a/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/window2.log b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/window2.log
new file mode 100644
index 0000000..2b9bf80
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments-ooo-build/logs/win/window2.log
@@ -0,0 +1,41 @@
+Test run started : 15/01/2009 17:10:02
+BEGIN Window2
+ TEST START : Test Window.SplitRow
+  ITEM Assertion OK : Test SplitColumn: 2 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion FAIL : Test SplitRow: 1 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitVertical: 242.283803521067
+  ITEM Assertion OK : Test SplitHorizontal: 242.283803521067
+  ITEM Assertion FAIL : Test SplitRow: 3 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitColumn: 3 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitColumn: 0
+  ITEM Assertion OK : Test SplitRow: 0
+ TEST OK : Test Window.SplitRow
+ TEST START : Test Window.DisplayGridlines
+  ITEM Assertion OK : Test gridlines are on
+  ITEM Assertion OK : Test gridlines are off
+ TEST OK : Test Window.DisplayGridlines
+ TEST START : Test Window.DisplayHeadings
+  ITEM Assertion OK : Test Headings are on
+  ITEM Assertion OK : Test Headings are off
+ TEST OK : Test Window.DisplayHeadings
+ TEST START : Test Window.Visibility
+  ITEM Assertion OK : Window is visible
+  ITEM Assertion OK : Window is not visible
+ TEST OK : Test Window.Visibility
+ TEST START : Test Window.FreezePanes
+  ITEM Assertion OK : Test no panes frozen
+  ITEM Assertion OK : Test panes frozen at center
+  ITEM Assertion OK : Test panes frozen at split
+ TEST OK : Test Window.FreezePanes
+ TEST START : Test Window.View
+ TEST OK : Test Window.View
+ TEST START : Test Window.Zoom
+  ITEM Assertion OK : Test zoom=100%
+  ITEM Assertion OK : Test zoom=150%
+ TEST OK : Test Window.Zoom
+ TEST START : Test Windows.Count
+  ITEM Assertion OK : Windows Count: 1
+  ITEM Assertion OK : Application.Windows Count: 1
+ TEST OK : Test Windows.Count
+END  Window2
+Test run finished : 15/01/2009 17:10:03
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/CalcFont.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/CalcFont.log
new file mode 100644
index 0000000..f3583e4
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/CalcFont.log
@@ -0,0 +1,17 @@
+Test run started : 10/09/2008 02:40:17 PM
+CalcFont_Format
+ TEST START : Font_Format
+  ITEM Assertion OK : correctly set font to Bold
+  ITEM Assertion OK : correctly set font to Italic
+  ITEM Assertion OK : correctly read FontStyle
+  ITEM Assertion OK : correctly set font to Shadow
+  ITEM Assertion OK : correctly set font color
+  ITEM Assertion OK : correctly set font color index
+  ITEM Assertion OK : correctly set font name
+  ITEM Assertion OK : correctly set font outline
+  ITEM Assertion OK : correctly set font size
+  ITEM Assertion OK : correctly set font strikethrough
+  ITEM Assertion OK : correctly set font underline
+ TEST Success. : Font_Format
+CalcFont_Format
+Test run finished : 10/09/2008 02:40:17 PM
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/Ranges.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/Ranges.log
index dd4fb49..cdd1868 100644
--- a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/Ranges.log
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/Ranges.log
@@ -1,4 +1,4 @@
-Test run started : 17/12/2008 14:18:34
+Test run started : 10/03/2008 15:15:11
 ----------------------------------------------------------------
 ApplicationMethods
  TEST START : ApplicationMethods
@@ -7,8 +7,8 @@ ApplicationMethods
   ITEM Assertion OK :  Address of Application.Rows is: $1:$1
   ITEM Assertion OK :  Address of Application.Range is: $1:$1,$5:$7
   ITEM Assertion OK :  Please check manually: DefaultFilePath is: /data4/home/npower/Documents
-  ITEM Assertion OK :  Please check manually: Library Path is: /media/disk/BUILD-related/CWS/my_working_copy/INSTALL_FOR_TEST/opt/UserInstallation/user/basic
-  ITEM Assertion OK :  Please check manually: Template Path is: /media/disk/BUILD-related/CWS/my_working_copy/INSTALL_FOR_TEST/opt/UserInstallation/user/template
+  ITEM Assertion OK :  Please check manually: Library Path is: /data4/home/npower/.ooo-2.0/user/basic
+  ITEM Assertion OK :  Please check manually: Template Path is: /data4/home/npower/.ooo-2.0/user/template
   ITEM Assertion OK :  FileSeparator is /
   ITEM Assertion OK :  Name of ActiveWorkbook is: Ranges.xls
 END 'ApplicationMethods' Symbol
@@ -111,8 +111,8 @@ END 'Value-Issue' Symbol
 ----------------------------------------------------------------
 AutoFit issue
  TEST START : AutoFit issue
-  ITEM Assertion OK :  Columns.AutoFit: CurrentWidth is 679
-  ITEM Assertion OK :  Rows.AutoFit: CurrentHeight is 546
+  ITEM Assertion OK :  Columns.AutoFit: CurrentWidth is 680
+  ITEM Assertion OK :  Rows.AutoFit: CurrentHeight is 554
 END 'AutoFit issue' Symbol
  TEST OK : AutoFit issue
 ----------------------------------------------------------------
@@ -204,11 +204,11 @@ Heights and Widths
   ITEM Assertion OK : Range RowHeight is 40
   ITEM Assertion OK : Range ColumnWidth is 50
   ITEM Assertion OK : Range Height is 240
-  ITEM Assertion OK : Range Width is 787.5
+  ITEM Assertion OK : Range Width is 795
   ITEM Assertion OK : Range RowHeight is 50
   ITEM Assertion OK : Range ColumnWidth is 50
   ITEM Assertion OK : Range Height is 300
-  ITEM Assertion OK : Range Width is 787.5
+  ITEM Assertion OK : Range Width is 795
   ITEM Assertion OK : RowHeight is null: True
   ITEM Assertion OK : ColumnWidth is null: True
 END 'Heights and Widths' Symbol
@@ -218,7 +218,7 @@ RangeRowColumn-Issue
  TEST START : RangeRowColumn-Issue
   ITEM Assertion OK : Row is: 8
   ITEM Assertion OK : Column is: 5
-  ITEM Assertion OK : EntireRow.Columns.Count = 1024
+  ITEM Assertion OK : EntireRow.Columns.Count = 256
   ITEM Assertion OK : EntireColumn.Rows.Count = 131072
 END 'RangeRowColumn-Issue' Symbol
  TEST OK : RangeRowColumn-Issue
@@ -255,7 +255,7 @@ End issue
   ITEM Assertion OK : -  = $E$3
   ITEM Assertion OK : -  = $A$8
   ITEM Assertion OK : -  = $B$8
-  ITEM Assertion FAIL : -  = $AMJ$8
+  ITEM Assertion OK : -  = $IV$8
   ITEM Assertion OK : -  = $Z$8
 END 'End issue' Symbol
  TEST OK : End issue
@@ -277,4 +277,4 @@ Validation
   ITEM Assertion OK : Validation Error Title is : Microsoft Excel
 END 'Validation' Symbol
  TEST OK : Validation
-Test run finished : 17/12/2008 14:18:40
+Test run finished : 10/03/2008 15:15:13
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestAddress.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestAddress.log
index 42360c3..4fa4bc8 100644
--- a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestAddress.log
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestAddress.log
@@ -1,4 +1,4 @@
-Test run started : 17/07/2007 20:56:04
+Test run started : 12/05/2009 11:23:35
 ----------------------------------------------------------------
 TestAddress
  TEST START : TestAddress
@@ -51,12 +51,17 @@ TestAddress
   ITEM Assertion OK : test47 Range('a2:b4').Rows('1:2')
   ITEM Assertion OK : test48 Range('a2:b4').Rows('2:2')
   ITEM Assertion OK : test49 Range('a2:b4').Rows('2:3')
+  ITEM Assertion OK : test50 Range(' A2:B4 ')
+  ITEM Assertion OK : test51 Range('A 2:B 4')
+  ITEM Assertion OK : test52 Range('A2 : B4 ')
+  ITEM Assertion OK : test53 Range('Sheet1 !A2 : B4 ')
+  ITEM Assertion OK : test54 Range('Sheet1! A2 : B4 ')
 Test Results
 ============
 
-Tests passed: 49
+Tests passed: 54
 Tests failed: 0
 
 END 'TestAddress
  TEST OK : TestAddress
-Test run finished : 17/07/2007 20:56:05
+Test run finished : 12/05/2009 11:23:35
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestIntersection.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestIntersection.log
new file mode 100644
index 0000000..ea686a8
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestIntersection.log
@@ -0,0 +1,26 @@
+Test run started : 13/01/2009 14:31:43
+----------------------------------------------------------------
+TestIntersection
+ TEST START : TestIntersection
+  ITEM Assertion OK : test1 Application.Intersect( Range('A2:D10'), Range('C4:E6'))
+  ITEM Assertion OK : test2 Application.Intersect( Range('A2:D10'), Range('A4:G10'))
+  ITEM Assertion OK : test3 Application.Intersect( Range('A2:c8,d2:f8,g2:i8'), Range('A4:G10'))
+  ITEM Assertion OK : test4 Application.Intersect( Range('A4:G10'), Range('A2:c8,d2:f8,g2:i8'))
+  ITEM Assertion OK : test5 Application.Intersect( Range('A2:c8,d2:f8,g2:i8'), Range('g4:i10,A4:G10'))
+  ITEM Assertion OK : test6 Application.Intersect( Range('g4:i10,A4:G10'), Range('A2:c8,d2:f8,g2:i8'))
+  ITEM Assertion OK : test7 Application.Intersect( Range('a2:d10,b5:e10'), Range('a5:i10'))
+  ITEM Assertion OK : test8 Application.Intersect( Range('a2:c8,d2:f8'), Range('b6:e9,a6:f9'))
+  ITEM Assertion OK : test9 Application.Intersect( Range('a2:c8,e2:f8'), Range('b6:e9,a6:f9'))
+  ITEM Assertion OK : test10 Application.Intersect( Range('a1:a3,c1:c3'), Range('a2:c3'))
+  ITEM Assertion OK : test11 Application.Intersect( Range('a1:a3,b1:b3'), Range('a2:c3'))
+  ITEM Assertion OK : test12 Application.Intersect( Range('a2:d5,b3:f7,c1:g4'), Range('b2:e6'))
+  ITEM Assertion OK : test13 Range(" a2:d10,b5:e10,g13:j32 "), Range(" a5:i10,b6:e9 "), Range("b2:r5,f10:h19")
+Test Results
+============
+
+Tests passed: 13
+Tests failed: 0
+
+END 'TestIntersection
+ TEST OK : TestIntersection
+Test run finished : 13/01/2009 14:31:43
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestUnion.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestUnion.log
new file mode 100644
index 0000000..da3cb35
--- /dev/null
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/TestUnion.log
@@ -0,0 +1,17 @@
+Test run started : 13/01/2009 14:32:16
+----------------------------------------------------------------
+TestUnion
+ TEST START : TestUnion
+  ITEM Assertion OK : test1Application.Range('A2:D10'), Range('C4:E6')
+  ITEM Assertion OK : test2Application.Range('A2:D5,a3:d4'), Range('A4:G10')
+  ITEM Assertion OK : test3Application.Range('A4:G10,A1:B6'), Range('A2:D5,A3:D4')
+  ITEM Assertion OK : test4Application.Range('A5:D10'), Range('B5:E10')
+Test Results
+============
+
+Tests passed: 4
+Tests failed: 0
+
+END 'TestUnion
+ TEST OK : TestUnion
+Test run finished : 13/01/2009 14:32:16
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/format.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/format.log
index 50fac17..96725bf 100644
--- a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/format.log
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/format.log
@@ -1,4 +1,4 @@
-Test run started : 17/12/2008 14:15:22
+Test run started : 2008／09／18 11:35:34
 BEGIN Format
  TEST START : Test Predefined_Number_Format_Sample function
   ITEM Assertion OK : General Number: 562486.2356
@@ -33,4 +33,4 @@ BEGIN Format
   ITEM Assertion OK : >: VBA
  TEST OK : Test Custom_Text_Format_Sample function
 END  Format
-Test run finished : 17/12/2008 14:15:22
+Test run finished : 2008／09／18 11:35:34
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/replace.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/replace.log
index 461955d..8f600fa 100644
--- a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/replace.log
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/replace.log
@@ -1,4 +1,4 @@
-Test run started : 17/12/2008 13:53:49
+Test run started : 09/05/2008 10:21:46 AM
 BEGIN Replace
  TEST START : Test Replace function
   ITEM Assertion OK : common string:aefefdBc
@@ -11,4 +11,4 @@ BEGIN Replace
   ITEM Assertion OK : start = 1, count = 0, not support in Unix: abcbcdBc
  TEST OK : Test Replace function
 END  Replace
-Test run finished : 17/12/2008 13:53:49
+Test run finished : 09/05/2008 10:21:47 AM
diff --git a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/window2.log b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/window2.log
index 5d297f8..8e26d05 100644
--- a/sc/source/ui/vba/testvba/TestDocuments/logs/unix/window2.log
+++ b/sc/source/ui/vba/testvba/TestDocuments/logs/unix/window2.log
@@ -1,20 +1,15 @@
-Test run started : 05/29/2008 02:55:48 PM
+Test run started : 2008／09／22 11:18:57
 BEGIN Window2
  TEST START : Test Window.SplitRow
-  ITEM Assertion OK : Test SplitColumn: 2
-  ITEM Assertion FAIL : Test SplitRow: 5
-  ITEM Assertion FAIL : Test SplitVertical: 64.5090003183026
-  ITEM Assertion OK : Test SplitHorizontal: 502.570118758869
-  ITEM Assertion OK : Test SplitVertical: 242.283803521067
-  ITEM Assertion OK : Test SplitRow: 19
-  ITEM Assertion OK : Test SplitHorizontal: 242.283803521067
-  ITEM Assertion OK : Test SplitColumn: 1
-  ITEM Assertion FAIL : Test SplitRow: 8
-  ITEM Assertion OK : Test SplitColumn: 10
+  ITEM Assertion OK : Test SplitColumn: 2 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitRow: 2 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitVertical: 242.465788476212
+  ITEM Assertion OK : Test SplitHorizontal: 242.465788476212
+  ITEM Assertion OK : Test SplitRow: 4 (Test only applies to maximized Window and at least has 800*600 solotion)
+  ITEM Assertion OK : Test SplitColumn: 3 (Test only applies to maximized Window and at least has 800*600 solotion)
   ITEM Assertion OK : Test SplitColumn: 0
   ITEM Assertion OK : Test SplitRow: 0
  TEST OK : Test Window.SplitRow
-TEST ERROR - no test begun: Test Window.SplitRow
  TEST START : Test Window.DisplayGridlines
   ITEM Assertion OK : Test gridlines are on
   ITEM Assertion OK : Test gridlines are off
@@ -25,7 +20,8 @@ TEST ERROR - no test begun: Test Window.SplitRow
  TEST OK : Test Window.DisplayHeadings
  TEST START : Test Window.Visibility
   ITEM Assertion OK : Window is visible
- TEST FAIL : Test Window.Visibility (hit error handler).
+  ITEM Assertion OK : Window is not visible
+ TEST OK : Test Window.Visibility
  TEST START : Test Window.FreezePanes
   ITEM Assertion OK : Test no panes frozen
   ITEM Assertion OK : Test panes frozen at center
@@ -42,4 +38,4 @@ TEST ERROR - no test begun: Test Window.SplitRow
   ITEM Assertion OK : Application.Windows Count: 1
  TEST OK : Test Windows.Count
 END  Window2
-Test run finished : 05/29/2008 02:55:48 PM
+Test run finished : 2008／09／22 11:18:58
diff --git a/sc/source/ui/vba/testvba/runTests.pl b/sc/source/ui/vba/testvba/runTests.pl
index 520c6e2..1f449e5 100644
--- a/sc/source/ui/vba/testvba/runTests.pl
+++ b/sc/source/ui/vba/testvba/runTests.pl
@@ -20,7 +20,7 @@ my $theResult;
 my $officepath = shift || die "please specify path to office installation program dir";
 my $DocName = shift || "";
 my $programpath = "$officepath"."3/program:$officepath/program:";
-my $basiclibrarypath = "$officepath/basis3.1/program";
+my $basiclibrarypath = "$officepath/basis3.2/program";
 my $urelibpath = "$officepath/ure/lib";
 my $binext = "";
 my $testDocDir = "$binDir/TestDocuments";
diff --git a/sc/source/ui/vba/vbaapplication.cxx b/sc/source/ui/vba/vbaapplication.cxx
index 837d97f..5fe0f00 100644
--- a/sc/source/ui/vba/vbaapplication.cxx
+++ b/sc/source/ui/vba/vbaapplication.cxx
@@ -54,10 +54,9 @@
 #include "tabvwsh.hxx"
 #include "gridwin.hxx"
 #include "vbanames.hxx"
-#include "vbashape.hxx"
+#include <vbahelper/vbashape.hxx>
 #include "vbatextboxshape.hxx"
 #include "vbaassistant.hxx"
-#include "vbacommandbars.hxx"
 #include "sc.hrc"
 
 #include <osl/file.hxx>
@@ -82,6 +81,9 @@
 #include "convuno.hxx"
 #include "cellsuno.hxx"
 #include "docsh.hxx"
+#include <vbahelper/helperdecl.hxx>
+#include "excelvbahelper.hxx"
+
 
 using namespace ::ooo::vba;
 using namespace ::com::sun::star;
@@ -99,20 +101,20 @@ using namespace ::com::sun::star;
 #define FILE_PATH_SEPERATOR "\\"
 #endif 
 
-#define EXCELVERSION "11.0"
+uno::Any sbxToUnoValue( SbxVariable* pVar );
 
 class ActiveWorkbook : public ScVbaWorkbook
 {
 protected:
     virtual uno::Reference< frame::XModel > getModel()
     { 	
-        return getCurrentDocument(); 
+        return getCurrentExcelDoc(mxContext);
     }
 public:
     ActiveWorkbook( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext) : ScVbaWorkbook(  xParent, xContext ){}
 };
 
-ScVbaApplication::ScVbaApplication( uno::Reference<uno::XComponentContext >& xContext ): ScVbaApplication_BASE( uno::Reference< XHelperInterface >(), xContext ), m_xCalculation( excel::XlCalculation::xlCalculationAutomatic )
+ScVbaApplication::ScVbaApplication( const uno::Reference<uno::XComponentContext >& xContext ): ScVbaApplication_BASE( xContext ), m_xCalculation( excel::XlCalculation::xlCalculationAutomatic )
 {
 }
 
@@ -120,7 +122,10 @@ ScVbaApplication::~ScVbaApplication()
 {
 }
     
-
+SfxObjectShell* ScVbaApplication::GetDocShell( const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException)
+{
+    return static_cast< SfxObjectShell* >( excel::getDocShell( xModel ) );
+}
 
 uno::Reference< excel::XWorkbook >
 ScVbaApplication::getActiveWorkbook() throw (uno::RuntimeException)
@@ -140,23 +145,15 @@ ScVbaApplication::getAssistant() throw (uno::RuntimeException)
 }
 
 uno::Any SAL_CALL
-ScVbaApplication::CommandBars( const uno::Any& aIndex ) throw (uno::RuntimeException)
-{
-    uno::Reference< XCommandBars > xCommandBars( new ScVbaCommandBars( this, mxContext, uno::Reference< container::XIndexAccess >() ) );
-    if( aIndex.hasValue() )
-        return uno::makeAny( xCommandBars->Item( aIndex, uno::Any() ) );
-    return uno::makeAny( xCommandBars );
-}
-
-uno::Any SAL_CALL
 ScVbaApplication::getSelection() throw (uno::RuntimeException)
 {
     OSL_TRACE("** ScVbaApplication::getSelection() ** ");
-    uno::Reference< lang::XServiceInfo > xServiceInfo( getCurrentDocument()->getCurrentSelection(), uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XModel > xModel( getCurrentDocument() );
+    uno::Reference< lang::XServiceInfo > xServiceInfo( xModel->getCurrentSelection(), uno::UNO_QUERY_THROW );
     rtl::OUString sImpementaionName = xServiceInfo->getImplementationName();
     if( sImpementaionName.equalsIgnoreAsciiCaseAscii("com.sun.star.drawing.SvxShapeCollection") )
     {
-        uno::Reference< drawing::XShapes > xShapes( getCurrentDocument()->getCurrentSelection(), uno::UNO_QUERY_THROW );
+        uno::Reference< drawing::XShapes > xShapes( xModel->getCurrentSelection(), uno::UNO_QUERY_THROW );
         uno::Reference< container::XIndexAccess > xIndexAccess( xShapes, uno::UNO_QUERY_THROW );
         uno::Reference< drawing::XShape > xShape( xIndexAccess->getByIndex(0), uno::UNO_QUERY_THROW );
     // if ScVbaShape::getType( xShape ) == office::MsoShapeType::msoAutoShape
@@ -167,10 +164,10 @@ ScVbaApplication::getSelection() throw (uno::RuntimeException)
         uno::Reference< lang::XServiceInfo > xShapeServiceInfo( xShape, uno::UNO_QUERY_THROW );
         if ( xShapeServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.drawing.Text" ) ) )  )
         {
-                return uno::makeAny( uno::Reference< msforms::XTextBoxShape >(new ScVbaTextBoxShape( mxContext, xShape, xShapes, getCurrentDocument() ) ) );
+                return uno::makeAny( uno::Reference< msforms::XTextBoxShape >(new ScVbaTextBoxShape( mxContext, xShape, xShapes, xModel ) ) );
         }
     }
-        return uno::makeAny( uno::Reference< msforms::XShape >(new ScVbaShape( this, mxContext, xShape, xShapes, ScVbaShape::getType( xShape ) ) ) );
+        return uno::makeAny( uno::Reference< msforms::XShape >(new ScVbaShape( this, mxContext, xShape, xShapes, xModel, ScVbaShape::getType( xShape ) ) ) );
     }
     else if( xServiceInfo->supportsService( rtl::OUString::createFromAscii("com.sun.star.sheet.SheetCellRange")) ||
              xServiceInfo->supportsService( rtl::OUString::createFromAscii("com.sun.star.sheet.SheetCellRanges")))
@@ -196,7 +193,7 @@ ScVbaApplication::getActiveCell() throw (uno::RuntimeException )
 {
     uno::Reference< sheet::XSpreadsheetView > xView( getCurrentDocument()->getCurrentController(), uno::UNO_QUERY_THROW );
     uno::Reference< table::XCellRange > xRange( xView->getActiveSheet(), ::uno::UNO_QUERY_THROW);
-    ScTabViewShell* pViewShell = getCurrentBestViewShell();
+    ScTabViewShell* pViewShell = excel::getCurrentBestViewShell(mxContext);
     if ( !pViewShell )
         throw uno::RuntimeException( rtl::OUString::createFromAscii("No ViewShell available"), uno::Reference< uno::XInterface >() );
     ScViewData* pTabView = pViewShell->GetViewData();
@@ -209,65 +206,6 @@ ScVbaApplication::getActiveCell() throw (uno::RuntimeException )
     return  new ScVbaRange( this, mxContext, xRange->getCellRangeByPosition( nCursorX, nCursorY, nCursorX, nCursorY ) );
 }
 
-sal_Bool
-ScVbaApplication::getScreenUpdating() throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    return !xModel->hasControllersLocked();
-}
-
-void
-ScVbaApplication::setScreenUpdating(sal_Bool bUpdate) throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    if (bUpdate)
-        xModel->unlockControllers();
-    else
-        xModel->lockControllers();
-}
-
-sal_Bool
-ScVbaApplication::getDisplayStatusBar() throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    uno::Reference< frame::XFrame > xFrame( xModel->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
-    uno::Reference< beans::XPropertySet > xProps( xFrame, uno::UNO_QUERY_THROW );
-
-    if( xProps.is() ){
-        uno::Reference< frame::XLayoutManager > xLayoutManager( xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("LayoutManager")) ), uno::UNO_QUERY_THROW );
-        rtl::OUString url(RTL_CONSTASCII_USTRINGPARAM( "private:resource/statusbar/statusbar" ));
-        if( xLayoutManager.is() && xLayoutManager->isElementVisible( url ) ){
-            return sal_True;
-        }
-    }
-    return sal_False;
-}
-
-void
-ScVbaApplication::setDisplayStatusBar(sal_Bool bDisplayStatusBar) throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    uno::Reference< frame::XFrame > xFrame( xModel->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
-    uno::Reference< beans::XPropertySet > xProps( xFrame, uno::UNO_QUERY_THROW );
-
-    if( xProps.is() ){
-        uno::Reference< frame::XLayoutManager > xLayoutManager( xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("LayoutManager")) ), uno::UNO_QUERY_THROW );
-        rtl::OUString url(RTL_CONSTASCII_USTRINGPARAM( "private:resource/statusbar/statusbar" ));
-        if( xLayoutManager.is() ){
-            if( bDisplayStatusBar && !xLayoutManager->isElementVisible( url ) ){
-                if( !xLayoutManager->showElement( url ) )
-                    xLayoutManager->createElement( url );
-                return;
-            }
-            else if( !bDisplayStatusBar && xLayoutManager->isElementVisible( url ) ){
-                xLayoutManager->hideElement( url ); 
-                return;
-            }
-        }
-    }
-    return;
-}
-
 uno::Any SAL_CALL
 ScVbaApplication::Workbooks( const uno::Any& aIndex ) throw (uno::RuntimeException)
 {
@@ -316,7 +254,7 @@ ScVbaApplication::Evaluate( const ::rtl::OUString& Name ) throw (uno::RuntimeExc
 uno::Any 
 ScVbaApplication::Dialogs( const uno::Any &aIndex ) throw (uno::RuntimeException)
 {
-    uno::Reference< excel::XDialogs > xDialogs( new ScVbaDialogs( uno::Reference< XHelperInterface >( ScVbaGlobals::getGlobalsImpl( mxContext )->getApplication(), uno::UNO_QUERY_THROW ), mxContext ) );
+    uno::Reference< excel::XDialogs > xDialogs( new ScVbaDialogs( uno::Reference< XHelperInterface >( this ), mxContext, getCurrentDocument() ) );
     if( !aIndex.hasValue() )
         return uno::Any( xDialogs );
     return uno::Any( xDialogs->Item( aIndex ) );
@@ -338,12 +276,6 @@ ScVbaApplication::getCutCopyMode() throw (uno::RuntimeException)
     return result;
 }
 
-::rtl::OUString
-ScVbaApplication::getVersion() throw (uno::RuntimeException)
-{
-    return rtl::OUString(RTL_CONSTASCII_USTRINGPARAM(EXCELVERSION));
-}
-
 void SAL_CALL 
 ScVbaApplication::setCutCopyMode( const uno::Any& /*_cutcopymode*/ ) throw (uno::RuntimeException)
 {
@@ -429,7 +361,7 @@ ScVbaApplication::setCalculation( ::sal_Int32 _calculation ) throw (uno::Runtime
 uno::Any SAL_CALL 
 ScVbaApplication::Windows( const uno::Any& aIndex  ) throw (uno::RuntimeException)
 {
-    uno::Reference< XCollection >  xWindows = ScVbaWindows::Windows( mxContext );
+    uno::Reference< excel::XWindows >  xWindows( new ScVbaWindows( this, mxContext ) );
     if ( aIndex.getValueTypeClass() == uno::TypeClass_VOID )
         return uno::Any( xWindows );
     return uno::Any( xWindows->Item( aIndex, uno::Any() ) );	
@@ -540,11 +472,11 @@ ScVbaApplication::GoTo( const uno::Any& Reference, const uno::Any& Scroll ) thro
                 xModel->getCurrentController(), uno::UNO_QUERY_THROW );
         uno::Reference< sheet::XSpreadsheet > xDoc = xSpreadsheet->getActiveSheet();
 
-        ScTabViewShell* pShell = getCurrentBestViewShell();
+        ScTabViewShell* pShell = excel::getCurrentBestViewShell( mxContext );
         ScGridWindow* gridWindow = (ScGridWindow*)pShell->GetWindow(); 
         try
         {
-            uno::Reference< excel::XRange > xVbaSheetRange = ScVbaRange::getRangeObjectForName( mxContext, sRangeName, getDocShell( xModel ), formula::FormulaGrammar::CONV_XL_R1C1 );
+            uno::Reference< excel::XRange > xVbaSheetRange = ScVbaRange::getRangeObjectForName( mxContext, sRangeName, excel::getDocShell( xModel ), formula::FormulaGrammar::CONV_XL_R1C1 );
 ;
             if( bScroll )
             {
@@ -582,7 +514,7 @@ ScVbaApplication::GoTo( const uno::Any& Reference, const uno::Any& Scroll ) thro
     if( Reference >>= xRange )
     {
         uno::Reference< excel::XRange > xVbaRange( Reference, uno::UNO_QUERY );
-        ScTabViewShell* pShell = getCurrentBestViewShell();
+        ScTabViewShell* pShell = excel::getCurrentBestViewShell( mxContext );
         ScGridWindow* gridWindow = (ScGridWindow*)pShell->GetWindow(); 
         if ( xVbaRange.is() )
         {
@@ -612,38 +544,10 @@ ScVbaApplication::GoTo( const uno::Any& Reference, const uno::Any& Scroll ) thro
             uno::Reference< uno::XInterface >() );
 }
 
-namespace
-{
-    static uno::Reference< frame::XController > lcl_getCurrentController()
-    {
-        const uno::Reference< frame::XModel > xWorkingDoc( SfxObjectShell::GetCurrentComponent(), uno::UNO_QUERY );
-        uno::Reference< frame::XController > xController;
-        if ( xWorkingDoc.is() )
-            xController.set( xWorkingDoc->getCurrentController(), uno::UNO_SET_THROW );
-        else
-            xController.set( SfxObjectShell::GetCurrentComponent(), uno::UNO_QUERY_THROW );
-        return xController;
-    }
-}
-
 sal_Int32 SAL_CALL
 ScVbaApplication::getCursor() throw (uno::RuntimeException)
 {
-    sal_Int32 nPointerStyle( POINTER_ARROW );
-    try
-    {
-        const uno::Reference< frame::XController > xController( lcl_getCurrentController(),     uno::UNO_SET_THROW );
-        const uno::Reference< frame::XFrame >      xFrame     ( xController->getFrame(),        uno::UNO_SET_THROW );
-        const uno::Reference< awt::XWindow >       xWindow    ( xFrame->getContainerWindow(),   uno::UNO_SET_THROW );
-        // why the heck isn't there an XWindowPeer::getPointer, but a setPointer only?
-        const Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
-        if ( pWindow )
-            nPointerStyle = pWindow->GetSystemWindow()->GetPointer().GetStyle();
-    }
-    catch( const uno::Exception& )
-    {
-        DBG_UNHANDLED_EXCEPTION();
-    }
+    sal_Int32 nPointerStyle =  getPointerStyle(getCurrentDocument());
 
     switch( nPointerStyle )
     {
@@ -665,81 +569,34 @@ ScVbaApplication::setCursor( sal_Int32 _cursor ) throw (uno::RuntimeException)
 {
     try
     {
-        ::std::vector< uno::Reference< frame::XController > > aControllers;
-
-        const uno::Reference< frame::XModel2 > xModel2( SfxObjectShell::GetCurrentComponent(), uno::UNO_QUERY );
-        if ( xModel2.is() )
-        {
-            const uno::Reference< container::XEnumeration > xEnumControllers( xModel2->getControllers(), uno::UNO_SET_THROW );
-            while ( xEnumControllers->hasMoreElements() )
-            {
-                const uno::Reference< frame::XController > xController( xEnumControllers->nextElement(), uno::UNO_QUERY_THROW );
-                aControllers.push_back( xController );
-            }
-        }
-        else
+    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
+        switch( _cursor )
         {
-            const uno::Reference< frame::XModel > xModel( SfxObjectShell::GetCurrentComponent(), uno::UNO_QUERY );
-            if ( xModel.is() )
+            case excel::XlMousePointer::xlNorthwestArrow:
             {
-                const uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_SET_THROW );
-                aControllers.push_back( xController );
+                const Pointer& rPointer( POINTER_ARROW );
+                setCursorHelper( xModel, rPointer, sal_False );
+                break;
             }
-            else
+            case excel::XlMousePointer::xlWait:
+            case excel::XlMousePointer::xlIBeam:
             {
-                const uno::Reference< frame::XController > xController( SfxObjectShell::GetCurrentComponent(), uno::UNO_QUERY_THROW );
-                aControllers.push_back( xController );
+                const Pointer& rPointer( static_cast< PointerStyle >( _cursor ) );
+                //It will set the edit window, toobar and statusbar's mouse pointer.
+                setCursorHelper( xModel, rPointer, sal_True );
+                break;
             }
-        }
-
-        for (   ::std::vector< uno::Reference< frame::XController > >::const_iterator controller = aControllers.begin();
-                controller != aControllers.end();
-                ++controller
-            )
-        {
-            const uno::Reference< frame::XFrame >      xFrame     ( (*controller)->getFrame(),       uno::UNO_SET_THROW   );
-            const uno::Reference< awt::XWindow >       xWindow    ( xFrame->getContainerWindow(),    uno::UNO_SET_THROW   );
-
-            Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
-            OSL_ENSURE( pWindow, "ScVbaApplication::setCursor: no window!" );
-            if ( !pWindow )
-                continue;
-
-            switch( _cursor )
+            case excel::XlMousePointer::xlDefault:
             {
-                case excel::XlMousePointer::xlNorthwestArrow:
-                {
-                    const Pointer& rPointer( POINTER_ARROW );
-                    pWindow->GetSystemWindow()->SetPointer( rPointer );
-                    pWindow->GetSystemWindow()->EnableChildPointerOverwrite( sal_False );
-                    break;
-                }
-                case excel::XlMousePointer::xlWait:
-                case excel::XlMousePointer::xlIBeam:
-                {
-                    const Pointer& rPointer( static_cast< PointerStyle >( _cursor ) );
-                    //It will set the edit window, toobar and statusbar's mouse pointer.
-                    pWindow->GetSystemWindow()->SetPointer( rPointer );
-                    pWindow->GetSystemWindow()->EnableChildPointerOverwrite( sal_True );
-                    //It only set the edit window's mouse pointer
-                    //pWindow->.SetPointer( rPointer );
-                    //pWindow->.EnableChildPointerOverwrite( sal_True );
-                    //printf("\nset Cursor...%d\n", pWindow->.GetType());
-                    break;
-                }
-                case excel::XlMousePointer::xlDefault:
-                {
-                    const Pointer& rPointer( POINTER_NULL );
-                    pWindow->GetSystemWindow()->SetPointer( rPointer );
-                    pWindow->GetSystemWindow()->EnableChildPointerOverwrite( sal_False );
-                    break;
-                }
-                default:
-                    throw uno::RuntimeException( rtl::OUString( 
-                            RTL_CONSTASCII_USTRINGPARAM("Unknown value for Cursor pointer")), uno::Reference< uno::XInterface >() );
-                    // TODO: isn't this a flaw in the API? It should be allowed to throw an
-                    // IllegalArgumentException, or so
+                const Pointer& rPointer( POINTER_NULL );
+                setCursorHelper( xModel, rPointer, sal_False );
+                break;
             }
+            default:
+                throw uno::RuntimeException( rtl::OUString(
+                        RTL_CONSTASCII_USTRINGPARAM("Unknown value for Cursor pointer")), uno::Reference< uno::XInterface >() );
+                // TODO: isn't this a flaw in the API? It should be allowed to throw an
+                // IllegalArgumentException, or so
         }
     }
     catch( const uno::Exception& )
@@ -1114,7 +971,7 @@ ScVbaApplication::Intersect( const uno::Reference< excel::XRange >& Arg1, const
     }
 
     uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    ScDocShell* pDocShell = getDocShell( xModel );
+    ScDocShell* pDocShell = excel::getDocShell( xModel );
     if ( aCellRanges.Count() == 1 )
     {
         xRefRange = new ScVbaRange( uno::Reference< XHelperInterface >(), mxContext, new ScCellRangeObj( pDocShell, *aCellRanges.First() ) );
@@ -1203,7 +1060,7 @@ ScVbaApplication::Union( const uno::Reference< excel::XRange >& Arg1, const uno:
         aCellRanges.Append( *it );
 
     uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    ScDocShell* pDocShell = getDocShell( xModel ); 
+    ScDocShell* pDocShell = excel::getDocShell( xModel );
     if ( aCellRanges.Count() == 1 ) 
     {
     // normal range
@@ -1225,29 +1082,17 @@ ScVbaApplication::Volatile( const uno::Any& aVolatile )  throw ( uno::RuntimeExc
     sal_Bool bVolatile = sal_True;
     aVolatile >>= bVolatile;
     return; 
-/*
-    if ( bVolatile )
-        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Volatile - not supported" ) ), uno::Reference< uno::XInterface >() );
-    // bVoloatile is false - currently this only would make sense if 
-    // the autocalculate mode is set to be true.
-
-    // so really this is crap, #TODO try and understand how ( or if ) 
-    // the calculation mode and volatile interoperate
-    if ( ! getCalculation() == excel::XlCalculation::xlCalculationAutomatic )
-        setCalculation(  excel::XlCalculation::xlCalculationAutomatic );
-*/
 }
 
 void SAL_CALL
 ScVbaApplication::DoEvents() throw ( uno::RuntimeException )
 {
 }
-
 ::sal_Bool SAL_CALL 
 ScVbaApplication::getDisplayFormulaBar() throw ( css::uno::RuntimeException )
 {
     sal_Bool bRes = sal_False;
-    ScTabViewShell* pViewShell = getCurrentBestViewShell();
+    ScTabViewShell* pViewShell = excel::getCurrentBestViewShell( mxContext );
     if ( pViewShell )
     {
         SfxBoolItem sfxFormBar( FID_TOGGLEINPUTLINE);
@@ -1265,7 +1110,7 @@ ScVbaApplication::getDisplayFormulaBar() throw ( css::uno::RuntimeException )
 void SAL_CALL 
 ScVbaApplication::setDisplayFormulaBar( ::sal_Bool _displayformulabar ) throw ( css::uno::RuntimeException )
 {
-    ScTabViewShell* pViewShell = getCurrentBestViewShell();
+    ScTabViewShell* pViewShell = excel::getCurrentBestViewShell( mxContext );
     if ( pViewShell && ( _displayformulabar !=  getDisplayFormulaBar() ) )
     {
         SfxBoolItem sfxFormBar( FID_TOGGLEINPUTLINE, _displayformulabar);
@@ -1275,6 +1120,31 @@ ScVbaApplication::setDisplayFormulaBar( ::sal_Bool _displayformulabar ) throw (
     }	
 }
 
+uno::Any SAL_CALL
+ScVbaApplication::Caller( const uno::Any& /*aIndex*/ ) throw ( uno::RuntimeException )
+{
+    StarBASIC* pBasic = SFX_APP()->GetBasic();
+    SFX_APP()->EnterBasicCall();
+    SbMethod* pMeth = (SbMethod*)pBasic->GetRtl()->Find( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FuncCaller") ), SbxCLASS_METHOD );
+    uno::Any aRet;
+    if ( pMeth )
+    {
+        SbxVariableRef refTemp = pMeth;
+        // forces a broadcast
+        SbxVariableRef pNew = new  SbxMethod( *((SbxMethod*)pMeth));
+                OSL_TRACE("pNew has type %d and string value %s", pNew->GetType(), rtl::OUStringToOString( pNew->GetString(), RTL_TEXTENCODING_UTF8 ).getStr() );
+        aRet = sbxToUnoValue( pNew );
+    }
+    SFX_APP()->LeaveBasicCall();
+    return aRet;
+}
+
+uno::Reference< frame::XModel >
+ScVbaApplication::getCurrentDocument() throw (css::uno::RuntimeException)
+{
+    return getCurrentExcelDoc(mxContext);
+}
+
 rtl::OUString& 
 ScVbaApplication::getServiceImplName()
 {
@@ -1293,3 +1163,13 @@ ScVbaApplication::getServiceNames()
     }
     return aServiceNames;
 }
+
+namespace application
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::vba_service_class_<ScVbaApplication, sdecl::with_args<false> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "ScVbaApplication",
+    "ooo.vba.excel.Application" );
+}
diff --git a/sc/source/ui/vba/vbaapplication.hxx b/sc/source/ui/vba/vbaapplication.hxx
index acdd751..397880f 100644
--- a/sc/source/ui/vba/vbaapplication.hxx
+++ b/sc/source/ui/vba/vbaapplication.hxx
@@ -32,21 +32,25 @@
 #include <ooo/vba/excel/XApplication.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbaapplicationbase.hxx>
+#include <cppuhelper/implbase1.hxx>
 
-typedef InheritedHelperInterfaceImpl1< ov::excel::XApplication > ScVbaApplication_BASE;
+//typedef InheritedHelperInterfaceImpl1< ov::excel::XApplication > ScVbaApplication_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaApplicationBase, ov::excel::XApplication > ScVbaApplication_BASE;
 
 class ScVbaApplication : public ScVbaApplication_BASE
 {
 private:
     sal_Int32 m_xCalculation;
     rtl::OUString getOfficePath( const rtl::OUString& sPath ) throw ( css::uno::RuntimeException );
+protected:
+        virtual css::uno::Reference< css::frame::XModel > getCurrentDocument() throw (css::uno::RuntimeException);
 public:
-    ScVbaApplication( css::uno::Reference< css::uno::XComponentContext >& m_xContext );
+    ScVbaApplication( const css::uno::Reference< css::uno::XComponentContext >& m_xContext );
     virtual ~ScVbaApplication();
 
-    // XHelperInterface ( parent is itself )
-    virtual css::uno::Reference< ov::XHelperInterface > SAL_CALL getParent(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException) { return this; }
+    virtual SfxObjectShell* GetDocShell( const css::uno::Reference< css::frame::XModel >& xModel ) throw (css::uno::RuntimeException);
 
     // XApplication
     virtual ::rtl::OUString SAL_CALL PathSeparator(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
@@ -65,15 +69,10 @@ public:
     virtual css::uno::Reference< ov::excel::XRange > SAL_CALL getActiveCell() throw ( css::uno::RuntimeException);
  virtual css::uno::Reference< ov::excel::XWindow > SAL_CALL getActiveWindow() throw (css::uno::RuntimeException);
  virtual css::uno::Reference< ov::excel::XWorksheet > SAL_CALL getActiveSheet() throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getScreenUpdating() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setScreenUpdating(sal_Bool bUpdate) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getDisplayStatusBar() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setDisplayStatusBar(sal_Bool bDisplayStatusBar) throw (css::uno::RuntimeException);
     virtual ::sal_Bool SAL_CALL getDisplayFormulaBar() throw ( css::uno::RuntimeException );
     virtual void SAL_CALL setDisplayFormulaBar( ::sal_Bool _displayformulabar ) throw ( css::uno::RuntimeException );
 
     virtual css::uno::Reference< ov::XAssistant > SAL_CALL getAssistant() throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL CommandBars( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Reference< ov::excel::XWorkbook > SAL_CALL getThisWorkbook() throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Workbooks( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Worksheets( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
@@ -82,7 +81,6 @@ public:
     virtual css::uno::Any SAL_CALL Dialogs( const css::uno::Any& DialogIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getCutCopyMode() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setCutCopyMode( const css::uno::Any& _cutcopymode ) throw (css::uno::RuntimeException);
-    virtual ::rtl::OUString SAL_CALL getVersion() throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getStatusBar() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setStatusBar( const css::uno::Any& _statusbar ) throw (css::uno::RuntimeException);
     virtual ::sal_Int32 SAL_CALL getCursor() throw (css::uno::RuntimeException);
@@ -100,6 +98,7 @@ public:
     virtual css::uno::Reference< ov::excel::XRange > SAL_CALL Union( const css::uno::Reference< ov::excel::XRange >& Arg1, const css::uno::Reference< ov::excel::XRange >& Arg2, const css::uno::Any& Arg3, const css::uno::Any& Arg4, const css::uno::Any& Arg5, const css::uno::Any& Arg6, const css::uno::Any& Arg7, const css::uno::Any& Arg8, const css::uno::Any& Arg9, const css::uno::Any& Arg10, const css::uno::Any& Arg11, const css::uno::Any& Arg12, const css::uno::Any& Arg13, const css::uno::Any& Arg14, const css::uno::Any& Arg15, const css::uno::Any& Arg16, const css::uno::Any& Arg17, const css::uno::Any& Arg18, const css::uno::Any& Arg19, const css::uno::Any& Arg20, const css::uno::Any& Arg21, const css::uno::Any& Arg22, const css::uno::Any& Arg23, const css::uno::Any& Arg24, const css::uno::Any& Arg25, const css::uno::Any& Arg26, const css::uno::Any& Arg27, const css::uno::Any& Arg28, const css::uno::Any& Arg29, const css::uno::Any& Arg30 ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
     virtual void SAL_CALL Volatile( const css::uno::Any& Volatile ) throw (css::uno::RuntimeException );
     virtual void SAL_CALL DoEvents() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Caller( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     // XHelperInterface
     virtual rtl::OUString& getServiceImplName();
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
diff --git a/sc/source/ui/vba/vbaassistant.hxx b/sc/source/ui/vba/vbaassistant.hxx
index ec7af7e..f994fe5 100644
--- a/sc/source/ui/vba/vbaassistant.hxx
+++ b/sc/source/ui/vba/vbaassistant.hxx
@@ -32,8 +32,8 @@
 
 #include <sfx2/sfxhelp.hxx>
 
-#include "vbahelper.hxx"
-#include "vbahelperinterface.hxx"
+#include "excelvbahelper.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef ::cppu::WeakImplHelper1< ov::XAssistant > Assistant;
 typedef InheritedHelperInterfaceImpl< Assistant > ScVbaAssistantImpl_BASE;
diff --git a/sc/source/ui/vba/vbaaxes.hxx b/sc/source/ui/vba/vbaaxes.hxx
index 4e224ed..49a75e7 100644
--- a/sc/source/ui/vba/vbaaxes.hxx
+++ b/sc/source/ui/vba/vbaaxes.hxx
@@ -29,7 +29,7 @@
 #include <ooo/vba/excel/XAxes.hpp>
 #include <ooo/vba/excel/XAxis.hpp>
 #include <ooo/vba/excel/XChart.hpp>
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 
 typedef CollTestImplHelper< ov::excel::XAxes > ScVbaAxes_BASE;
 class ScVbaAxes : public ScVbaAxes_BASE
diff --git a/sc/source/ui/vba/vbaaxis.hxx b/sc/source/ui/vba/vbaaxis.hxx
index 0623054..d968287 100644
--- a/sc/source/ui/vba/vbaaxis.hxx
+++ b/sc/source/ui/vba/vbaaxis.hxx
@@ -29,8 +29,8 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <ooo/vba/excel/XAxis.hpp>
 #include <ooo/vba/excel/XChart.hpp>
-#include "vbahelperinterface.hxx"
-
+#include <vbahelper/vbahelperinterface.hxx>
+#include <memory>
 typedef InheritedHelperInterfaceImpl1< ov::excel::XAxis >  ScVbaAxis_BASE;
 class ScVbaChart;
 class ScVbaAxis : public ScVbaAxis_BASE
diff --git a/sc/source/ui/vba/vbaborders.hxx b/sc/source/ui/vba/vbaborders.hxx
index 3a51897..9f3c398 100644
--- a/sc/source/ui/vba/vbaborders.hxx
+++ b/sc/source/ui/vba/vbaborders.hxx
@@ -35,7 +35,7 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 
  
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 
 typedef CollTestImplHelper< ov::excel::XBorders > ScVbaBorders_BASE;
 class ScVbaPalette;
diff --git a/sc/source/ui/vba/vbabutton.cxx b/sc/source/ui/vba/vbabutton.cxx
index 94fc161..e69de29 100644
--- a/sc/source/ui/vba/vbabutton.cxx
+++ b/sc/source/ui/vba/vbabutton.cxx
@@ -1,71 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbabutton.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-ScVbaButton::ScVbaButton( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaButton::getCaption() throw (css::uno::RuntimeException)
-{
-    rtl::OUString Label;
-    m_xProps->getPropertyValue( LABEL ) >>= Label;
-    return Label;
-}
-
-void SAL_CALL 
-ScVbaButton::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
-}
-
-rtl::OUString& 
-ScVbaButton::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaButton") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaButton::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Button" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbabutton.hxx b/sc/source/ui/vba/vbabutton.hxx
index ec7f2a2..e69de29 100644
--- a/sc/source/ui/vba/vbabutton.hxx
+++ b/sc/source/ui/vba/vbabutton.hxx
@@ -1,48 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_BUTTON_HXX
-#define SC_VBA_BUTTON_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XButton.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XButton > ButtonImpl_BASE;
-
-class ScVbaButton : public ButtonImpl_BASE
-{
-public:
-    ScVbaButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
-   // Attributes
-    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_BUTTON_HXX
diff --git a/sc/source/ui/vba/vbacharacters.hxx b/sc/source/ui/vba/vbacharacters.hxx
index 75b4ec8..3400ff1 100644
--- a/sc/source/ui/vba/vbacharacters.hxx
+++ b/sc/source/ui/vba/vbacharacters.hxx
@@ -33,7 +33,7 @@
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/text/XSimpleText.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 #include "vbapalette.hxx"
 typedef InheritedHelperInterfaceImpl1< ov::excel::XCharacters > ScVbaCharacters_BASE;
 
diff --git a/sc/source/ui/vba/vbachart.hxx b/sc/source/ui/vba/vbachart.hxx
index ef915f4..b1fe14b 100644
--- a/sc/source/ui/vba/vbachart.hxx
+++ b/sc/source/ui/vba/vbachart.hxx
@@ -38,7 +38,7 @@
 #include <ooo/vba/excel/XChart.hpp>
 #include <ooo/vba/excel/XDataLabels.hpp>
 #include <ooo/vba/excel/XSeries.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1<ov::excel::XChart > ChartImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbachartobject.cxx b/sc/source/ui/vba/vbachartobject.cxx
index e33990a..19efa78 100644
--- a/sc/source/ui/vba/vbachartobject.cxx
+++ b/sc/source/ui/vba/vbachartobject.cxx
@@ -117,10 +117,11 @@ ScVbaChartObject::Activate() throw ( script::BasicErrorException )
 {
     try
     {
-        // #TODO #FIXME should be ThisWorkbook or equivelant
-        // XModel
+        // #TODO #FIXME should be ThisWorkbook or equivelant, or in
+        // fact probably the chart object should be created with
+        // the XModel owner
         //uno::Reference< view::XSelectionSupplier > xSelectionSupplier( getXModel().getCurrentController());
-        uno::Reference< view::XSelectionSupplier > xSelectionSupplier( getCurrentDocument()->getCurrentController(), uno::UNO_QUERY_THROW );
+        uno::Reference< view::XSelectionSupplier > xSelectionSupplier( getCurrentExcelDoc(mxContext)->getCurrentController(), uno::UNO_QUERY_THROW );
         xSelectionSupplier->select(uno::makeAny(xShape));
     }
     catch (uno::Exception& )
diff --git a/sc/source/ui/vba/vbachartobject.hxx b/sc/source/ui/vba/vbachartobject.hxx
index 1d75df3..995c7be 100644
--- a/sc/source/ui/vba/vbachartobject.hxx
+++ b/sc/source/ui/vba/vbachartobject.hxx
@@ -33,7 +33,7 @@
 #include <com/sun/star/container/XNamed.hpp>
 #include <com/sun/star/document/XEmbeddedObjectSupplier.hpp>
 #include <ooo/vba/excel/XChartObject.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 #include <memory>
 
 typedef InheritedHelperInterfaceImpl1<ov::excel::XChartObject > ChartObjectImpl_BASE;
diff --git a/sc/source/ui/vba/vbachartobjects.hxx b/sc/source/ui/vba/vbachartobjects.hxx
index 3f5230d..aa65539 100644
--- a/sc/source/ui/vba/vbachartobjects.hxx
+++ b/sc/source/ui/vba/vbachartobjects.hxx
@@ -33,8 +33,8 @@
 #include <com/sun/star/table/XTableCharts.hpp>
 #include <com/sun/star/drawing/XDrawPageSupplier.hpp>
 #include <com/sun/star/container/XEnumerationAccess.hpp>
-#include"vbacollectionimpl.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
+#include "excelvbahelper.hxx"
 #include <hash_map>
 
 typedef CollTestImplHelper< ov::excel::XChartObjects > ChartObjects_BASE;
diff --git a/sc/source/ui/vba/vbacharts.cxx b/sc/source/ui/vba/vbacharts.cxx
index 58c8570..2460071 100644
--- a/sc/source/ui/vba/vbacharts.cxx
+++ b/sc/source/ui/vba/vbacharts.cxx
@@ -32,11 +32,9 @@ using namespace ::com::sun::star;
 using namespace ::ooo::vba;
 
 
-ScVbaCharts::ScVbaCharts( const css::uno::Reference< ov::XHelperInterface >& _xParent, const css::uno::Reference< css::uno::XComponentContext >& _xContext ) : Charts_BASE(_xParent, _xContext, uno::Reference< container::XIndexAccess >() )
+ScVbaCharts::ScVbaCharts( const css::uno::Reference< ov::XHelperInterface >& _xParent, const css::uno::Reference< css::uno::XComponentContext >& _xContext, const uno::Reference< frame::XModel >& xModel ) : Charts_BASE(_xParent, _xContext, uno::Reference< container::XIndexAccess >())
 {
-    // #TODO #FIXME surely this is wrong, you should never use the 
-    // currently documement ( it could be anything )
-    xComponent.set( getCurrentDocument(), uno::UNO_QUERY_THROW );
+    xComponent.set( xModel, uno::UNO_QUERY_THROW );
     xSpreadsheetDocument.set( xComponent, uno::UNO_QUERY_THROW );
 }
 
diff --git a/sc/source/ui/vba/vbacharts.hxx b/sc/source/ui/vba/vbacharts.hxx
index a78420e..5686d61 100644
--- a/sc/source/ui/vba/vbacharts.hxx
+++ b/sc/source/ui/vba/vbacharts.hxx
@@ -28,8 +28,8 @@
 #define SC_VBA_CHARTS_HXX
 #include <ooo/vba/excel/XCharts.hpp>
 #include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
-#include"vbacollectionimpl.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
+#include "excelvbahelper.hxx"
 #include <hash_map>
 
 typedef CollTestImplHelper< ov::excel::XCharts > Charts_BASE;
@@ -40,7 +40,7 @@ class ScVbaCharts : public Charts_BASE
     css::uno::Reference< css::sheet::XSpreadsheetDocument > xSpreadsheetDocument;
     css::uno::Reference< css::lang::XComponent > xComponent;
 public:
-    ScVbaCharts( const css::uno::Reference< ov::XHelperInterface >& _xParent, const css::uno::Reference< css::uno::XComponentContext >& _xContext );
+    ScVbaCharts( const css::uno::Reference< ov::XHelperInterface >& _xParent, const css::uno::Reference< css::uno::XComponentContext >& _xContext, const css::uno::Reference< css::frame::XModel >& xModel );
     // XCharts
     virtual css::uno::Any SAL_CALL Add() throw (css::script::BasicErrorException, css::uno::RuntimeException);
     virtual css::uno::Reference< ov::excel::XChart > SAL_CALL getActiveChart(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
diff --git a/sc/source/ui/vba/vbacheckbox.cxx b/sc/source/ui/vba/vbacheckbox.cxx
index 43e72d4..e69de29 100644
--- a/sc/source/ui/vba/vbacheckbox.cxx
+++ b/sc/source/ui/vba/vbacheckbox.cxx
@@ -1,102 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbacheckbox.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-const static rtl::OUString STATE( RTL_CONSTASCII_USTRINGPARAM("State") );
-ScVbaCheckbox::ScVbaCheckbox( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : CheckBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaCheckbox::getCaption() throw (css::uno::RuntimeException)
-{
-    rtl::OUString Label;
-    m_xProps->getPropertyValue( LABEL ) >>= Label;
-    return Label;
-}
-
-void SAL_CALL 
-ScVbaCheckbox::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
-}
-
-uno::Any SAL_CALL 
-ScVbaCheckbox::getValue() throw (css::uno::RuntimeException)
-{
-    sal_Int16 nValue = -1;
-    m_xProps->getPropertyValue( STATE ) >>= nValue;
-    if( nValue != 0 )
-        nValue = -1;
-//    return uno::makeAny( nValue ); 
-// I must be missing something MSO says value should be -1 if selected, 0 if not
-// selected
-    return uno::makeAny( ( nValue == -1 ) ? sal_True : sal_False ); 
-}
-
-void SAL_CALL 
-ScVbaCheckbox::setValue( const uno::Any& _value ) throw (css::uno::RuntimeException)
-{
-    sal_Int16 nValue = 0;
-    sal_Bool bValue = false;
-    if( _value >>= nValue )
-    {
-        if( nValue == -1)
-            nValue = 1;
-    }
-    else if ( _value >>= bValue )
-    {
-        if ( bValue )
-            nValue = 1;
-    }
-    m_xProps->setPropertyValue( STATE, uno::makeAny( nValue ) );
-}
-rtl::OUString& 
-ScVbaCheckbox::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCheckbox") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaCheckbox::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.CheckBox" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbacheckbox.hxx b/sc/source/ui/vba/vbacheckbox.hxx
index 2d2bccf..e69de29 100644
--- a/sc/source/ui/vba/vbacheckbox.hxx
+++ b/sc/source/ui/vba/vbacheckbox.hxx
@@ -1,52 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_CHECKBOX_HXX
-#define SC_VBA_CHECKBOX_HXX
-#include <cppuhelper/implbase2.hxx>
-#include <ooo/vba/msforms/XRadioButton.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XRadioButton, css::script::XDefaultProperty > CheckBoxImpl_BASE;
-
-class ScVbaCheckbox : public CheckBoxImpl_BASE
-{
-public:
-    ScVbaCheckbox(  const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
-   // Attributes
-    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_CHECKBOX_HXX
diff --git a/sc/source/ui/vba/vbacollectionimpl.cxx b/sc/source/ui/vba/vbacollectionimpl.cxx
index 70d30e0..e69de29 100644
--- a/sc/source/ui/vba/vbacollectionimpl.cxx
+++ b/sc/source/ui/vba/vbacollectionimpl.cxx
@@ -1,133 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <vbacollectionimpl.hxx>
-#include "vbaglobals.hxx"
-using namespace ::com::sun::star;
-using namespace ::ooo::vba;
-
-
-ScVbaCollectionBaseImpl::ScVbaCollectionBaseImpl( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xIndexAccess ) throw (uno::RuntimeException) : m_xContext( xContext ), m_xIndexAccess( xIndexAccess )
-{
-    m_xNameAccess.set( xIndexAccess, uno::UNO_QUERY );
-}
-
-uno::Any
-ScVbaCollectionBaseImpl::getItemByStringIndex( const rtl::OUString& sIndex ) throw (::uno::RuntimeException)
-{
-    if ( !m_xNameAccess.is() )
-        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ScVbaCollectionBaseImpl string index access not supported by this object") ), uno::Reference< uno::XInterface >() );
-
-    return createCollectionObject( m_xNameAccess->getByName( sIndex ) );	
-}
-
-uno::Any 
-ScVbaCollectionBaseImpl::getItemByIntIndex( const sal_Int32 nIndex ) throw (uno::RuntimeException)
-{
-    if ( !m_xIndexAccess.is() )
-        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ScVbaCollectionBaseImpl numeric index access not supported by this object") ), uno::Reference< uno::XInterface >() );
-    if ( nIndex <= 0 )
-    {
-        throw  lang::IndexOutOfBoundsException( 
-            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
-            "index is 0 or negative" ) ), 
-            uno::Reference< uno::XInterface >() );
-    }
-    // need to adjust for vba index ( for which first element is 1 )
-    return createCollectionObject( m_xIndexAccess->getByIndex( nIndex - 1 ) );	
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaCollectionBaseImpl::getCount() throw (uno::RuntimeException)
-{
-    return m_xIndexAccess->getCount();
-}
-
-uno::Any SAL_CALL 
-ScVbaCollectionBaseImpl::getParent() throw (uno::RuntimeException)
-{
-    // #TODO #FIXME investigate whether this makes sense
-    uno::Reference< excel::XApplication > xApplication =
-        ScVbaGlobals::getGlobalsImpl( m_xContext )->getApplication();
-    uno::Reference< excel::XWorkbook > xWorkbook;
-    if ( xApplication.is() )
-    {
-        xWorkbook = xApplication->getActiveWorkbook();
-    }
-    return uno::Any( xWorkbook );
-}
-
-::sal_Int32 SAL_CALL ScVbaCollectionBaseImpl::getCreator() throw (uno::RuntimeException)
-{
-    // #TODO #FIXE some sort of implementation
-    //SC_VBA_STUB();
-    return 0;
-}
-uno::Reference< excel::XApplication > SAL_CALL ScVbaCollectionBaseImpl::getApplication() throw (uno::RuntimeException)
-{
-    // #TODO #FIXME investigate whether this makes sense
-    uno::Reference< excel::XApplication > xApplication =
-        ScVbaGlobals::getGlobalsImpl( m_xContext )->getApplication();
-    return  xApplication;
-}
-
-uno::Any SAL_CALL ScVbaCollectionBaseImpl::Item( const uno::Any& aIndex ) throw (uno::RuntimeException)
-{
-    if ( aIndex.getValueTypeClass() != uno::TypeClass_STRING )
-    {
-        sal_Int32 nIndex = 0;
-
-        if ( ( aIndex >>= nIndex ) != sal_True )
-        {
-            rtl::OUString message;
-            message = rtl::OUString::createFromAscii(
-                "Couldn't convert index to Int32");
-            throw  lang::IndexOutOfBoundsException( message,
-                uno::Reference< uno::XInterface >() );
-        }
-        return 	getItemByIntIndex( nIndex );
-    }
-    rtl::OUString aStringSheet;
-
-    aIndex >>= aStringSheet;
-    return getItemByStringIndex( aStringSheet );	
-}
-
-::rtl::OUString SAL_CALL 
-ScVbaCollectionBaseImpl::getDefaultMethodName(  ) throw (css::uno::RuntimeException)
-{
-    const static rtl::OUString sName( RTL_CONSTASCII_USTRINGPARAM("Item") );
-    return sName;
-}
-
-    // XElementAccess
-
-::sal_Bool SAL_CALL ScVbaCollectionBaseImpl::hasElements() throw (uno::RuntimeException)
-{
-    return ( m_xIndexAccess->getCount() > 0 );
-}
-
-
diff --git a/sc/source/ui/vba/vbacollectionimpl.hxx b/sc/source/ui/vba/vbacollectionimpl.hxx
index 5747c80..e69de29 100644
--- a/sc/source/ui/vba/vbacollectionimpl.hxx
+++ b/sc/source/ui/vba/vbacollectionimpl.hxx
@@ -1,256 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_COLLECTION_IMPL_HXX
-#define SC_VBA_COLLECTION_IMPL_HXX
-
-#include <ooo/vba/XCollection.hpp>
-//#include <ooo/vba/XCollectionTest.hpp>
-#include <com/sun/star/container/XEnumerationAccess.hpp>
-#include <com/sun/star/uno/XComponentContext.hpp>
-#include <com/sun/star/script/XDefaultMethod.hpp>
-#include <com/sun/star/container/XIndexAccess.hpp>
-#include <com/sun/star/container/XNameAccess.hpp>
-#include <com/sun/star/container/XNamed.hpp>
-
-#include <cppuhelper/implbase3.hxx>
-#include <cppuhelper/implbase2.hxx>
-#include <cppuhelper/implbase1.hxx>
-
-#include "vbahelper.hxx"
-#include "vbahelperinterface.hxx"
-#include "vbaglobals.hxx"
-
-#include <vector>
-
-typedef ::cppu::WeakImplHelper1< css::container::XEnumeration > EnumerationHelper_BASE;
-
-class EnumerationHelperImpl : public EnumerationHelper_BASE
-{
-protected:
-    css::uno::Reference< css::uno::XComponentContext > m_xContext;
-    css::uno::Reference< css::container::XEnumeration > m_xEnumeration;
-public:
-
-    EnumerationHelperImpl( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XEnumeration >& xEnumeration ) throw ( css::uno::RuntimeException ) : m_xContext( xContext ),  m_xEnumeration( xEnumeration ) { }
-    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (css::uno::RuntimeException) { return m_xEnumeration->hasMoreElements(); }
-};
-
-// a wrapper class for a providing a XIndexAccess, XNameAccess, XEnumerationAccess impl based on providing a vector of interfaces 
-// only requirement is the object needs to implement XName
-
-
-
-typedef ::cppu::WeakImplHelper3< css::container::XNameAccess, css::container::XIndexAccess, css::container::XEnumerationAccess > XNamedCollectionHelper_BASE;
-
-template< typename Ifc1 >
-class XNamedObjectCollectionHelper : public XNamedCollectionHelper_BASE
-{
-public:
-typedef std::vector< css::uno::Reference< Ifc1 > >  XNamedVec;
-private:
-
-    class XNamedEnumerationHelper : public EnumerationHelper_BASE
-    {
-        XNamedVec mXNamedVec;
-        typename XNamedVec::iterator mIt;
-    public:
-            XNamedEnumerationHelper( const XNamedVec& sMap ) : mXNamedVec( sMap ), mIt( mXNamedVec.begin() ) {}
-    
-            virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (css::uno::RuntimeException)
-            {
-            return ( mIt != mXNamedVec.end() );
-            }
-    
-            virtual css::uno::Any SAL_CALL nextElement(  ) throw (css::container::NoSuchElementException, css::lang::WrappedTargetException, css::uno::RuntimeException)
-            {
-                    if ( hasMoreElements() )
-                return css::uno::makeAny( *mIt++ );
-                    throw css::container::NoSuchElementException();
-            }
-    };
-
-protected:
-    XNamedVec mXNamedVec;
-    typename XNamedVec::iterator cachePos;
-public:
-    XNamedObjectCollectionHelper( const XNamedVec& sMap ) : mXNamedVec( sMap ), cachePos(mXNamedVec.begin()) {}
-    // XElementAccess
-    virtual css::uno::Type SAL_CALL getElementType(  ) throw (css::uno::RuntimeException) { return  Ifc1::static_type(0); }
-    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (css::uno::RuntimeException) { return ( mXNamedVec.size() > 0 ); }
-    // XNameAcess 
-    virtual css::uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (css::container::NoSuchElementException, css::lang::WrappedTargetException, css::uno::RuntimeException)
-    {
-        if ( !hasByName(aName) )
-            throw css::container::NoSuchElementException();
-        return css::uno::makeAny( *cachePos );
-    }
-    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (css::uno::RuntimeException)
-    {
-        css::uno::Sequence< rtl::OUString > sNames( mXNamedVec.size() );
-        rtl::OUString* pString = sNames.getArray();
-        typename XNamedVec::iterator it = mXNamedVec.begin();
-        typename XNamedVec::iterator it_end = mXNamedVec.end();
-
-        for ( ; it != it_end; ++it, ++pString )
-        {
-            css::uno::Reference< css::container::XNamed > xName( *it, css::uno::UNO_QUERY_THROW );	
-            *pString = xName->getName();
-        }
-        return sNames;
-    }
-    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException)
-    {
-        cachePos = mXNamedVec.begin();
-        typename XNamedVec::iterator it_end = mXNamedVec.end();
-        for ( ; cachePos != it_end; ++cachePos )
-        {
-            css::uno::Reference< css::container::XNamed > xName( *cachePos, css::uno::UNO_QUERY_THROW );	
-            if ( aName.equals( xName->getName() ) )
-                break;
-        }
-        return ( cachePos != it_end );
-    }
-
-    // XElementAccess
-    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (css::uno::RuntimeException) { return mXNamedVec.size(); }	
-    virtual css::uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (css::lang::IndexOutOfBoundsException, css::lang::WrappedTargetException, css::uno::RuntimeException )
-    {
-        if ( Index < 0 || Index >= getCount() )
-            throw css::lang::IndexOutOfBoundsException();
-    
-        return css::uno::makeAny( mXNamedVec[ Index ] );
-
-    }
-    // XEnumerationAccess
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration(  ) throw (css::uno::RuntimeException)
-    {
-        return new XNamedEnumerationHelper( mXNamedVec );
-    }
-};
-
-// including a HelperInterface implementation
-template< typename Ifc1 >
-class ScVbaCollectionBase : public InheritedHelperInterfaceImpl< Ifc1 >
-{
-typedef InheritedHelperInterfaceImpl< Ifc1 > BaseColBase;
-protected:
-    css::uno::Reference< css::container::XIndexAccess > m_xIndexAccess;
-    css::uno::Reference< css::container::XNameAccess > m_xNameAccess;
-
-    virtual css::uno::Any getItemByStringIndex( const rtl::OUString& sIndex ) throw (css::uno::RuntimeException)
-    {
-        if ( !m_xNameAccess.is() )
-            throw css::uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ScVbaCollectionBase string index access not supported by this object") ), css::uno::Reference< css::uno::XInterface >() );
-    
-        return createCollectionObject( m_xNameAccess->getByName( sIndex ) );	
-    }		
-
-    virtual css::uno::Any getItemByIntIndex( const sal_Int32 nIndex ) throw (css::uno::RuntimeException)
-    {
-        if ( !m_xIndexAccess.is() )
-            throw css::uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ScVbaCollectionBase numeric index access not supported by this object") ), css::uno::Reference< css::uno::XInterface >() );
-        if ( nIndex <= 0 )
-        {
-            throw  css::lang::IndexOutOfBoundsException( 
-                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
-                "index is 0 or negative" ) ), 
-                css::uno::Reference< css::uno::XInterface >() );
-        }
-        // need to adjust for vba index ( for which first element is 1 )
-        return createCollectionObject( m_xIndexAccess->getByIndex( nIndex - 1 ) );		
-    }
-public:
-    ScVbaCollectionBase( const css::uno::Reference< ov::XHelperInterface >& xParent,   const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) : BaseColBase( xParent, xContext ), m_xIndexAccess( xIndexAccess ){ m_xNameAccess.set(m_xIndexAccess, css::uno::UNO_QUERY); }
-    //XCollection
-    virtual ::sal_Int32 SAL_CALL getCount() throw (css::uno::RuntimeException)
-    {
-        return m_xIndexAccess->getCount();
-    }
-
-    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index1, const css::uno::Any& /*not processed in this base class*/ ) throw (css::uno::RuntimeException)
-    {
-        if ( Index1.getValueTypeClass() != css::uno::TypeClass_STRING )
-        {
-            sal_Int32 nIndex = 0;
-    
-            if ( ( Index1 >>= nIndex ) != sal_True )
-            {
-                rtl::OUString message;
-                message = rtl::OUString::createFromAscii(
-                    "Couldn't convert index to Int32");
-                throw  css::lang::IndexOutOfBoundsException( message,
-                    css::uno::Reference< css::uno::XInterface >() );
-            }
-            return 	getItemByIntIndex( nIndex );
-        }
-        rtl::OUString aStringSheet;
-
-        Index1 >>= aStringSheet;
-        return getItemByStringIndex( aStringSheet );	
-    }
-    // XDefaultMethod
-    ::rtl::OUString SAL_CALL getDefaultMethodName(  ) throw (css::uno::RuntimeException)
-    {
-        const static rtl::OUString sName( RTL_CONSTASCII_USTRINGPARAM("Item") );
-        return sName;
-    }
-    // XEnumerationAccess
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException) = 0;	
-
-    // XElementAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException) = 0;
-    // XElementAccess
-    virtual ::sal_Bool SAL_CALL hasElements() throw (css::uno::RuntimeException)
-    {
-        return ( m_xIndexAccess->getCount() > 0 );
-    }
-    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource ) = 0;
-    
-};
-
-typedef ::cppu::WeakImplHelper1<ov::XCollection> XCollection_InterfacesBASE;
-
-typedef ScVbaCollectionBase< XCollection_InterfacesBASE > CollImplBase1;
-// compatible with the old collections ( pre XHelperInterface base class ) ( some internal objects still use this )
-class ScVbaCollectionBaseImpl : public CollImplBase1
-{
-public:
-    ScVbaCollectionBaseImpl( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) throw( css::uno::RuntimeException ) : CollImplBase1( xParent, xContext, xIndexAccess){}
-
-};
-
-template <typename Ifc> // where Ifc must implement XCollectionTest
-class CollTestImplHelper :  public ScVbaCollectionBase< ::cppu::WeakImplHelper1< Ifc > >
-{
-typedef ScVbaCollectionBase< ::cppu::WeakImplHelper1< Ifc >  > ImplBase1;
-
-public:
-    CollTestImplHelper( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,  const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) throw( css::uno::RuntimeException ) : ImplBase1( xParent, xContext, xIndexAccess ) {}
-};
-
-
-#endif //SC_VBA_COLLECTION_IMPL_HXX
diff --git a/sc/source/ui/vba/vbacolorformat.cxx b/sc/source/ui/vba/vbacolorformat.cxx
index 24b68ef..e69de29 100644
--- a/sc/source/ui/vba/vbacolorformat.cxx
+++ b/sc/source/ui/vba/vbacolorformat.cxx
@@ -1,187 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <ooo/vba/msforms/XLineFormat.hpp>
-#include "vbacolorformat.hxx"
-
-using namespace ooo::vba;
-using namespace com::sun::star;
-
-sal_Int32
-MsoColorIndizes::getColorIndex( sal_Int32 nIndex )
-{
-    const static sal_Int32 COLORINDIZES[56] =
-    {   HAPICOLOR_BLACK, HAPICOLOR_WITHE, HAPICOLOR_RED, HAPICOLOR_BRIGHTGREEN, HAPICOLOR_BLUE, HAPICOLOR_YELLOW, HAPICOLOR_PINK,
-        HAPICOLOR_TURQUOISE, HAPICOLOR_DARKRED, HAPICOLOR_GREEN, HAPICOLOR_DARKBLUE, HAPICOLOR_DARKYELLOW, HAPICOLOR_VIOLET,
-        HAPICOLOR_TEAL, HAPICOLOR_GRAY_25_PERCENT, HAPICOLOR_GRAY_50_PERCENT, HAPICOLOR_PERIWINCKLE, HAPICOLOR_PLUM,
-        HAPICOLOR_IVORY, HAPICOLOR_LIGHTTURQUOISE, HAPICOLOR_DARKPRUPLE, HAPICOLOR_CORAL, HAPICOLOR_OCEANBLUE, HAPICOLOR_ICEBLUE,
-        HAPICOLOR_GREEN, HAPICOLOR_PINK, HAPICOLOR_YELLOW, HAPICOLOR_TURQUOISE, HAPICOLOR_VIOLET, HAPICOLOR_DARKRED, HAPICOLOR_TEAL,
-        HAPICOLOR_BLUE, HAPICOLOR_SKYBLUE, HAPICOLOR_LIGHTTURQUOISE, HAPICOLOR_LIGHTGREEN, HAPICOLOR_LIGHTYELLOW, HAPICOLOR_PALEBLUE,
-        HAPICOLOR_ROSE, HAPICOLOR_LAVENDER, HAPICOLOR_TAN, HAPICOLOR_LIGHTBLUE, HAPICOLOR_AQUA, HAPICOLOR_LIME, HAPICOLOR_GOLD,
-        HAPICOLOR_LIGHTORANGE, HAPICOLOR_ORANGE, HAPICOLOR_BLUEGRAY, HAPICOLOR_GRAY_40_PERCENT, HAPICOLOR_DARKTEAL,
-        HAPICOLOR_SEAGREEN, HAPICOLOR_NONAME, HAPICOLOR_OLIVEGREEN, HAPICOLOR_BROWN, HAPICOLOR_PLUM, HAPICOLOR_INDIGO,
-        HAPICOLOR_GRAY_80_PERCENT
-    };
-    return COLORINDIZES[nIndex];
-}
-ScVbaColorFormat::ScVbaColorFormat( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< XHelperInterface > xInternalParent, const uno::Reference< drawing::XShape > xShape, const sal_Int16 nColorFormatType ) : ScVbaColorFormat_BASE( xParent, xContext ), m_xInternalParent( xInternalParent ), m_xShape( xShape ), m_nColorFormatType( nColorFormatType )
-{
-    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
-    m_nFillFormatBackColor = 0;
-    try
-    {
-        uno::Reference< ov::msforms::XFillFormat > xFillFormat( xInternalParent, uno::UNO_QUERY_THROW );
-        m_pFillFormat = ( ScVbaFillFormat* )( xFillFormat.get() );
-    }catch ( uno::RuntimeException  e )
-    {
-        m_pFillFormat = NULL;
-    }
-}
-
-void
-ScVbaColorFormat::setColorFormat( sal_Int16 _ntype )
-{
-    m_nColorFormatType = _ntype;
-}
-
-// Attribute
-sal_Int32 SAL_CALL 
-ScVbaColorFormat::getRGB() throw (uno::RuntimeException)
-{
-    sal_Int32 nRGB = 0;
-    switch( m_nColorFormatType )
-    {
-    case ColorFormatType::LINEFORMAT_FORECOLOR:
-        m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("LineColor") ) >>= nRGB;
-        break;
-    case ColorFormatType::LINEFORMAT_BACKCOLOR:
-        //TODO BackColor not supported
-        // m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("Color"), uno::makeAny( nRGB ) );
-        break;
-    case ColorFormatType::FILLFORMAT_FORECOLOR:
-        m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("FillColor") ) >>= nRGB;
-        break;
-    case ColorFormatType::FILLFORMAT_BACKCOLOR:
-        nRGB = m_nFillFormatBackColor;
-        break;
-    default:
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Second parameter of ColorFormat is wrong."), uno::Reference< uno::XInterface >() );
-    }
-    nRGB = OORGBToXLRGB( nRGB );
-    return nRGB;
-}
-
-void SAL_CALL 
-ScVbaColorFormat::setRGB( sal_Int32 _rgb ) throw (uno::RuntimeException)
-{
-    sal_Int32 nRGB = XLRGBToOORGB( _rgb );
-    switch( m_nColorFormatType )
-    {
-    case ColorFormatType::LINEFORMAT_FORECOLOR:
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineColor" ), uno::makeAny( nRGB ) );
-        break;
-    case ColorFormatType::LINEFORMAT_BACKCOLOR:
-        // TODO BackColor not supported
-        break;
-    case ColorFormatType::FILLFORMAT_FORECOLOR:
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillColor" ), uno::makeAny( nRGB ) );
-        if( m_pFillFormat )
-        {
-            m_pFillFormat->setForeColorAndInternalStyle(nRGB);
-        }
-        break;
-    case ColorFormatType::FILLFORMAT_BACKCOLOR:
-        m_nFillFormatBackColor = nRGB;
-        if( m_pFillFormat )
-        {
-            m_pFillFormat->setForeColorAndInternalStyle(nRGB);
-        }
-        break;
-    default:    
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Second parameter of ColorFormat is wrong."), uno::Reference< uno::XInterface >() );
-    }
-}
-
-sal_Int32 SAL_CALL 
-ScVbaColorFormat::getSchemeColor() throw (uno::RuntimeException)
-{
-    sal_Int32 nColor = getRGB();
-    // #TODO I guess the number of elements is determined by the correct scheme
-    // the implementation here seems to be a rehash of color index ( which seems to be a 
-    // different thing ) - I would guess we need to know/import etc. the correct color scheme
-    // or at least find out a little more
-    sal_Int32 i = 0;
-    for( ; i < 56; i++ )
-    {
-        if( nColor == MsoColorIndizes::getColorIndex(i) )
-       break;
-    }
-
-    if( i == 56 ) // this is most likely an error condition
-        --i;
-    return i; 
-    // #TODO figure out what craziness is this, 
-    // the 56 colors seems incorrect, as in default XL ( 2003 ) there are 80 colors
-/*
-    if( i == 56 )
-    {
-        i = -2;
-    }
-
-    return ( i + 2 );
-*/
-}
-
-void SAL_CALL 
-ScVbaColorFormat::setSchemeColor( sal_Int32 _schemecolor ) throw (uno::RuntimeException)
-{
-    // the table is 0 based
-    sal_Int32 nColor = MsoColorIndizes::getColorIndex( _schemecolor );
-    // nColor is already xl RGB
-    setRGB( nColor );
-}
-
-
-rtl::OUString&
-ScVbaColorFormat::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaColorFormat") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString >
-ScVbaColorFormat::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ColorFormat" ) );
-    }
-    return aServiceNames;
-}
-
diff --git a/sc/source/ui/vba/vbacolorformat.hxx b/sc/source/ui/vba/vbacolorformat.hxx
index 9810fd9..e69de29 100644
--- a/sc/source/ui/vba/vbacolorformat.hxx
+++ b/sc/source/ui/vba/vbacolorformat.hxx
@@ -1,125 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_XCOLORFORMAT_HXX
-#define SC_VBA_XCOLORFORMAT_HXX
-
-#include <com/sun/star/drawing/XShape.hpp>
-#include <ooo/vba/msforms/XColorFormat.hpp>
-#include <ooo/vba/msforms/XFillFormat.hpp>
-#include "vbahelperinterface.hxx"
-#include "vbafillformat.hxx"
-
-typedef InheritedHelperInterfaceImpl1< ov::msforms::XColorFormat > ScVbaColorFormat_BASE;
-
-class ColorFormatType
-{
-public:
-    const static sal_Int16 LINEFORMAT_FORECOLOR = 1;
-    const static sal_Int16 LINEFORMAT_BACKCOLOR = 2;
-    const static sal_Int16 FILLFORMAT_FORECOLOR = 3;
-    const static sal_Int16 FILLFORMAT_BACKCOLOR = 4;
-    const static sal_Int16 THREEDFORMAT_EXTRUSIONCOLOR = 5;
-};
-
-struct MsoColorIndizes
-{
-    const static sal_Int32 HAPICOLOR_BLACK = 0;
-    const static sal_Int32 HAPICOLOR_WITHE = 16777215;
-    const static sal_Int32 HAPICOLOR_RED = 16711680;
-    const static sal_Int32 HAPICOLOR_BRIGHTGREEN = 65280;
-    const static sal_Int32 HAPICOLOR_BLUE = 255;
-    const static sal_Int32 HAPICOLOR_YELLOW = 16776960;
-    const static sal_Int32 HAPICOLOR_PINK = 16711935;
-    const static sal_Int32 HAPICOLOR_TURQUOISE = 65535;
-    const static sal_Int32 HAPICOLOR_DARKRED = 8388608;
-    const static sal_Int32 HAPICOLOR_GREEN = 32768;
-    const static sal_Int32 HAPICOLOR_DARKBLUE = 128;
-    const static sal_Int32 HAPICOLOR_DARKYELLOW = 8421376;
-    const static sal_Int32 HAPICOLOR_VIOLET = 8388736;
-    const static sal_Int32 HAPICOLOR_TEAL = 32896;
-    const static sal_Int32 HAPICOLOR_GRAY_25_PERCENT = 12632256;
-    const static sal_Int32 HAPICOLOR_GRAY_50_PERCENT = 8421504;
-    const static sal_Int32 HAPICOLOR_PERIWINCKLE = 10066431;
-    const static sal_Int32 HAPICOLOR_PLUM = 10040166;
-    const static sal_Int32 HAPICOLOR_IVORY = 16777164;
-    const static sal_Int32 HAPICOLOR_LIGHTTURQUOISE = 13434879;
-    const static sal_Int32 HAPICOLOR_DARKPRUPLE = 6684774;
-    const static sal_Int32 HAPICOLOR_CORAL = 16744576;
-    const static sal_Int32 HAPICOLOR_OCEANBLUE = 26316;
-    const static sal_Int32 HAPICOLOR_ICEBLUE = 13421823;
-    const static sal_Int32 HAPICOLOR_SKYBLUE = 52479;
-    const static sal_Int32 HAPICOLOR_LIGHTGREEN = 13434828;
-    const static sal_Int32 HAPICOLOR_LIGHTYELLOW = 16777113;
-    const static sal_Int32 HAPICOLOR_PALEBLUE = 10079487;
-    const static sal_Int32 HAPICOLOR_ROSE = 16751052;
-    const static sal_Int32 HAPICOLOR_LAVENDER = 13408767;
-    const static sal_Int32 HAPICOLOR_TAN = 16764057;
-    const static sal_Int32 HAPICOLOR_LIGHTBLUE = 3368703;
-    const static sal_Int32 HAPICOLOR_AQUA = 3394764;
-    const static sal_Int32 HAPICOLOR_LIME = 10079232;
-    const static sal_Int32 HAPICOLOR_GOLD = 16763904;
-    const static sal_Int32 HAPICOLOR_LIGHTORANGE = 16750848;
-    const static sal_Int32 HAPICOLOR_ORANGE = 16737792;
-    const static sal_Int32 HAPICOLOR_BLUEGRAY = 6710937;
-    const static sal_Int32 HAPICOLOR_GRAY_40_PERCENT = 9868950;
-    const static sal_Int32 HAPICOLOR_DARKTEAL = 13158;
-    const static sal_Int32 HAPICOLOR_SEAGREEN = 3381606;
-    const static sal_Int32 HAPICOLOR_NONAME = 13056;
-    const static sal_Int32 HAPICOLOR_OLIVEGREEN = 3355392;
-    const static sal_Int32 HAPICOLOR_BROWN = 10040064;
-    const static sal_Int32 HAPICOLOR_INDIGO = 3355545;
-    const static sal_Int32 HAPICOLOR_GRAY_80_PERCENT = 3355443;
-
-    static sal_Int32 getColorIndex( sal_Int32 nIndex );
-    
-};
-
-class ScVbaColorFormat : public ScVbaColorFormat_BASE
-{
-private:
-    css::uno::Reference< ov::XHelperInterface > m_xInternalParent;
-    css::uno::Reference< css::drawing::XShape > m_xShape;
-    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
-    ScVbaFillFormat *m_pFillFormat;
-    sal_Int16 m_nColorFormatType;
-    sal_Int32 m_nFillFormatBackColor;
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    void setColorFormat( sal_Int16 nType );
-public:
-    ScVbaColorFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< ov::XHelperInterface > xInternalParent, const css::uno::Reference< css::drawing::XShape > xShape, const sal_Int16 nColorFormatType );
-
-    // Attributes
-    virtual sal_Int32 SAL_CALL getRGB() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setRGB( sal_Int32 _rgb ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getSchemeColor() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setSchemeColor( sal_Int32 _schemecolor ) throw (css::uno::RuntimeException);
-
-};
-
-#endif//SC_VBA_XCOLORFORMAT_HXX
diff --git a/sc/source/ui/vba/vbacombobox.cxx b/sc/source/ui/vba/vbacombobox.cxx
index 0a42e02..e69de29 100644
--- a/sc/source/ui/vba/vbacombobox.cxx
+++ b/sc/source/ui/vba/vbacombobox.cxx
@@ -1,172 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbacombobox.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-//SelectedItems list of integer indexes
-//StringItemList list of items
-
-const static rtl::OUString TEXT( RTL_CONSTASCII_USTRINGPARAM("Text") );
-const static rtl::OUString SELECTEDITEMS( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") );
-const static rtl::OUString ITEMS( RTL_CONSTASCII_USTRINGPARAM("StringItemList") );
-const static rtl::OUString CONTROLSOURCEPROP( RTL_CONSTASCII_USTRINGPARAM("DataFieldProperty") );
-
-ScVbaComboBox::ScVbaComboBox( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, bool bDialogType ) : ComboBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper ), mbDialogType( bDialogType )
-{
-        mpListHelper.reset( new ListControlHelper( m_xProps ) );
-    // grab the default value property name
-    m_xProps->getPropertyValue( CONTROLSOURCEPROP ) >>= sSourceName;
-}
-
-// Attributes
-
-
-// Value, [read] e.g. getValue returns the value of ooo Text propery e.g. the value in
-// the drop down
-uno::Any SAL_CALL 
-ScVbaComboBox::getValue() throw (uno::RuntimeException)
-{
-    return m_xProps->getPropertyValue( sSourceName );
-}
-
-void SAL_CALL 
-ScVbaComboBox::setListIndex( const uno::Any& _value ) throw (uno::RuntimeException)
-{
-    uno::Sequence< sal_Int16 > sSelection(1);
-    _value >>= sSelection[ 0 ];
-    m_xProps->setPropertyValue( SELECTEDITEMS, uno::makeAny( sSelection ) );
-}
-
-uno::Any SAL_CALL 
-ScVbaComboBox::getListIndex() throw (uno::RuntimeException)
-{
-    uno::Sequence< rtl::OUString > sItems;
-    m_xProps->getPropertyValue( ITEMS ) >>= sItems;
-    // should really return the item that has focus regardless of
-    // it been selected
-    if ( sItems.getLength() > 0 )
-    {
-        rtl::OUString sText = getText();
-        sal_Int32 nLen = sItems.getLength();
-        for ( sal_Int32 index = 0; sText.getLength() && index < nLen; ++index )
-        {
-            if ( sItems[ index ].equals( sText ) )
-            {
-                OSL_TRACE("getListIndex returning %d", index );
-                return uno::makeAny( index );
-            }
-                
-        } 
-     } 
-    OSL_TRACE("getListIndex returning %d", -1 );
-    return uno::makeAny( sal_Int32( -1 ) );
-}
-
-// Value, [write]e.g. setValue sets the value in the drop down, and if the value is one
-// of the values in the list then the selection is also set
-void SAL_CALL 
-ScVbaComboBox::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( sSourceName, _value );
-}
-
-// see Value
-
-::rtl::OUString SAL_CALL 
-ScVbaComboBox::getText() throw (uno::RuntimeException)
-{
-    rtl::OUString result;
-    getValue() >>= result;
-    return result;
-}
-
-void SAL_CALL 
-ScVbaComboBox::setText( const ::rtl::OUString& _text ) throw (uno::RuntimeException)
-{
-    setValue( uno::makeAny( _text ) ); // seems the same
-}
-
-// Methods
-void SAL_CALL 
-ScVbaComboBox::AddItem( const uno::Any& pvargItem, const uno::Any& pvargIndex ) throw (uno::RuntimeException)
-{
-    mpListHelper->AddItem( pvargItem, pvargIndex );
-}
-
-void SAL_CALL 
-ScVbaComboBox::removeItem( const uno::Any& index ) throw (uno::RuntimeException)
-    {
-    mpListHelper->removeItem( index );
-}
-
-void SAL_CALL 
-ScVbaComboBox::Clear(  ) throw (uno::RuntimeException)
-        {
-    mpListHelper->Clear();
-        }
-
-void SAL_CALL
-ScVbaComboBox::setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException)
-{
-    ScVbaControl::setRowSource( _rowsource );
-    mpListHelper->setRowSource( _rowsource );
-        }
-
-sal_Int32 SAL_CALL
-ScVbaComboBox::getListCount() throw (uno::RuntimeException)
-{
-    return mpListHelper->getListCount();
-}
-        
-uno::Any SAL_CALL 
-ScVbaComboBox::List( const ::uno::Any& pvargIndex, const uno::Any& pvarColumn ) throw (uno::RuntimeException)
-{
-    return mpListHelper->List( pvargIndex, pvarColumn );
-    }
-
-rtl::OUString& 
-ScVbaComboBox::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaComboBox") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaComboBox::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ComboBox" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbacombobox.hxx b/sc/source/ui/vba/vbacombobox.hxx
index d5e5197..e69de29 100644
--- a/sc/source/ui/vba/vbacombobox.hxx
+++ b/sc/source/ui/vba/vbacombobox.hxx
@@ -1,77 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_COMBOBOX_HXX
-#define SC_VBA_COMBOBOX_HXX
-#include <cppuhelper/implbase2.hxx>
-#include <com/sun/star/uno/XComponentContext.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <com/sun/star/script/XDefaultProperty.hpp>
-#include <ooo/vba/msforms/XComboBox.hpp>
-#include <comphelper/proparrhlp.hxx>
-#include <comphelper/propertycontainer.hxx>
-#include <com/sun/star/beans/PropertyAttribute.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbalistcontrolhelper.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper2<ScVbaControl, ov::msforms::XComboBox, css::script::XDefaultProperty > ComboBoxImpl_BASE;
-class ScVbaComboBox : public ComboBoxImpl_BASE
-{		
-    std::auto_ptr< ListControlHelper > mpListHelper;
-    rtl::OUString sSourceName; 
-    rtl::OUString msDftPropName;
-    bool mbDialogType;
-    
-public:
-    ScVbaComboBox( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper, bool bDialogType = false );
-
-    // Attributes
-    virtual css::uno::Any SAL_CALL getListIndex() throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getListCount() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setListIndex( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual ::rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual void SAL_CALL AddItem( const css::uno::Any& pvargItem, const css::uno::Any& pvargIndex ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL removeItem( const css::uno::Any& index ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Clear(  ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL List( const css::uno::Any& pvargIndex, const css::uno::Any& pvarColumn ) throw (css::uno::RuntimeException);
-    // XControl
-    virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
-
-    // XDefaultProperty
-        ::rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-
-#endif //
diff --git a/sc/source/ui/vba/vbacommandbar.cxx b/sc/source/ui/vba/vbacommandbar.cxx
index 3d40384..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbar.cxx
+++ b/sc/source/ui/vba/vbacommandbar.cxx
@@ -1,321 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/ui/XModuleUIConfigurationManagerSupplier.hpp>
-#include <com/sun/star/frame/XFrame.hpp>
-#include <com/sun/star/frame/XDesktop.hpp>
-#include <com/sun/star/frame/XLayoutManager.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-
-#include "vbacommandbar.hxx"
-#include "vbacommandbarcontrols.hxx"
-#include "vbahelper.hxx"
-
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-ScVbaCommandBar::ScVbaCommandBar( const uno::Reference< XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, sal_Int32 nModuleType ) throw (uno::RuntimeException) : CommandBar_BASE( xParent, xContext )
-{
-    // it's a menu bar
-    // only supporting factory menus ( no custom menus )
-    m_xParentHardRef.set( xParent, uno::UNO_QUERY_THROW );
-    initCommandBar();
-    switch( nModuleType )
-    {
-        case 0:
-            m_sMenuModuleName = rtl::OUString::createFromAscii( "com.sun.star.sheet.SpreadsheetDocument" );
-            break;
-        case 1:
-            m_sMenuModuleName = rtl::OUString::createFromAscii( "com.sun.star.text.TextDocument" );
-            break;
-        default:
-            m_sMenuModuleName = rtl::OUString::createFromAscii( "com.sun.star.text.TextDocument" );
-    }
-    getMenuSettings();
-    m_bIsMenu = sal_True;
-    m_bCustom = sal_False;
-}
-ScVbaCommandBar::ScVbaCommandBar( const uno::Reference< XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, rtl::OUString sToolBarName, sal_Bool bTemporary, sal_Bool bCreate ) throw (uno::RuntimeException) :  CommandBar_BASE( xParent, xContext )
-{
-    // it's a tool bar
-    m_xParentHardRef.set( xParent, uno::UNO_QUERY_THROW );
-    initCommandBar();
-    m_bTemporary = bTemporary;
-    m_bCreate = bCreate;
-    // get OOo ToolBarName
-    CommandBarNameMap::const_iterator iter = mCommandBarNameMap.find( sToolBarName.toAsciiLowerCase() );
-    if( iter != mCommandBarNameMap.end() )
-    {
-        m_sToolBarName = iter->second;
-    }
-    else
-    {
-        m_sToolBarName = sToolBarName;
-    }
-    m_sUIName = m_sToolBarName;
-    m_bIsMenu = sal_False;
-    getToolBarSettings( m_sToolBarName );
-}
-void
-ScVbaCommandBar::initCommandBar() throw (uno::RuntimeException)
-{
-    m_pScVbaCommandBars = dynamic_cast< ScVbaCommandBars* >( m_xParentHardRef.get() );
-    if ( !m_pScVbaCommandBars )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "Parent needs to be a ScVbaCommandBars"), uno::Reference< uno::XInterface >() );
-    m_bIsMenu = sal_False;
-    m_bCustom = sal_False;
-    m_bTemporary = sal_True;
-    m_sToolBarName = rtl::OUString::createFromAscii("");
-    m_sUIName = rtl::OUString::createFromAscii("");
-    m_sMenuModuleName = rtl::OUString::createFromAscii( "com.sun.star.sheet.SpreadsheetDocument" );
-}
-void
-ScVbaCommandBar::getToolBarSettings( rtl::OUString sToolBarName ) throw( uno::RuntimeException )
-{
-    rtl::OUString sFactoryToolBar = rtl::OUString::createFromAscii("private:resource/toolbar/") + sToolBarName.toAsciiLowerCase();
-    rtl::OUString sCustomToolBar = rtl::OUString::createFromAscii("private:resource/toolbar/custom_toolbar_") + sToolBarName;
-    uno::Reference< lang::XMultiServiceFactory > xMSF( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-    uno::Reference< ui::XModuleUIConfigurationManagerSupplier > xUICfgManagerSup( xMSF->createInstance(rtl::OUString::createFromAscii("com.sun.star.ui.ModuleUIConfigurationManagerSupplier") ), uno::UNO_QUERY_THROW );
-    m_xUICfgManager.set( xUICfgManagerSup->getUIConfigurationManager( m_pScVbaCommandBars->GetModuleName() ), uno::UNO_QUERY_THROW );
-    m_xUICfgPers.set( m_xUICfgManager, uno::UNO_QUERY_THROW );
-    if( m_xUICfgManager->hasSettings( sFactoryToolBar ) )
-    {
-        // exsiting standard ToolBar
-        m_xBarSettings.set( m_xUICfgManager->getSettings( sFactoryToolBar, sal_True ), uno::UNO_QUERY_THROW );
-        m_sToolBarName = sFactoryToolBar;
-    }
-    else if( m_xUICfgManager->hasSettings( sCustomToolBar ) )
-    {
-        // exisiting custom ToolBar
-        m_xBarSettings.set( m_xUICfgManager->getSettings( sCustomToolBar, sal_True ), uno::UNO_QUERY_THROW );
-        m_sToolBarName = sCustomToolBar;
-        m_bCustom = sal_True;
-    }
-    else if( m_bCreate )
-    {
-        // new custom ToolBar
-        m_xBarSettings.set( m_xUICfgManager->createSettings(), uno::UNO_QUERY_THROW );
-        m_sToolBarName = sCustomToolBar;
-        m_bCustom = sal_True;
-        addCustomBar();
-    }
-    else
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("ToolBar do not exist"), uno::Reference< uno::XInterface >() );
-    if( m_pScVbaCommandBars->GetWindows()->hasByName( m_sToolBarName ) )
-    {
-        uno::Any aToolBar = m_pScVbaCommandBars->GetWindows()->getByName( m_sToolBarName );
-        aToolBar >>= m_aToolBar; 
-    }
-}
-void
-ScVbaCommandBar::addCustomBar()
-{
-    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
-    xPropertySet->setPropertyValue(rtl::OUString::createFromAscii("UIName"), uno::makeAny( m_sUIName ));
-
-    if( m_xUICfgManager->hasSettings(m_sToolBarName) )
-    {
-        m_xUICfgManager->replaceSettings( m_sToolBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-    }
-    else
-    {
-        m_xUICfgManager->insertSettings( m_sToolBarName,  uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-    }
-    if( !m_bTemporary )
-    {
-        m_xUICfgPers->store();
-    }
-}
-void 
-ScVbaCommandBar::getMenuSettings()
-{
-    try
-    {
-        rtl::OUString sMenuBar = rtl::OUString::createFromAscii( "private:resource/menubar/menubar" );
-        uno::Reference< lang::XMultiServiceFactory > xMSF( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-        uno::Reference< ui::XModuleUIConfigurationManagerSupplier > xUICfgManagerSup( xMSF->createInstance(rtl::OUString::createFromAscii("com.sun.star.ui.ModuleUIConfigurationManagerSupplier") ), uno::UNO_QUERY_THROW );
-        m_xUICfgManager.set( xUICfgManagerSup->getUIConfigurationManager( m_sMenuModuleName ), uno::UNO_QUERY_THROW );
-        m_xUICfgPers.set( m_xUICfgManager, uno::UNO_QUERY_THROW );
-        m_xBarSettings.set( m_xUICfgManager->getSettings( sMenuBar, sal_True ), uno::UNO_QUERY_THROW );
-    } 
-    catch ( uno::Exception e)
-    {
-        OSL_TRACE( "getMenuSetting got a error\n" );
-    }
-}
-::rtl::OUString SAL_CALL
-ScVbaCommandBar::getName() throw ( uno::RuntimeException )
-{
-    // This will get a "NULL length string" when Name is not set. 
-    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
-    uno::Any aName = xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("UIName") );
-    rtl::OUString sName;
-    aName >>= sName;
-    if( sName.getLength() < 1 && !m_bIsMenu )
-    {
-        uno::Reference< container::XNameAccess > xNameAccess( m_pScVbaCommandBars->GetWindows(), uno::UNO_QUERY_THROW );
-        if( xNameAccess->hasByName( m_sToolBarName ) )
-        {
-            beans::PropertyValues aToolBar; 
-            xNameAccess->getByName( m_sToolBarName ) >>= aToolBar;
-            sal_Int32 nCount = aToolBar.getLength();
-            beans::PropertyValue aPropertyValue;
-            for( sal_Int32 i = 0; i < nCount; i++ )
-            {
-                aPropertyValue = aToolBar[i];
-                if( aPropertyValue.Name.equals( rtl::OUString::createFromAscii("UIName") ) )
-                {
-                    aPropertyValue.Value >>= sName;
-                    return sName;
-                }
-            }
-        }
-    }
-    return sName;
-}
-void SAL_CALL 
-ScVbaCommandBar::setName( const ::rtl::OUString& _name ) throw (uno::RuntimeException)
-{
-    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
-    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("UIName"), uno::makeAny( _name ) );
-    uno::Reference< container::XIndexAccess > xIndexAccess( m_xBarSettings, uno::UNO_QUERY_THROW );
-    
-    if( m_xUICfgManager->hasSettings( m_sToolBarName ) )
-    {
-        m_xUICfgManager->replaceSettings( m_sToolBarName, xIndexAccess );
-    }
-    else
-    {
-        // toolbar not found
-    }
-    if( !m_bTemporary )
-    {
-        m_xUICfgPers->store();
-    }
-}
-::sal_Bool SAL_CALL 
-ScVbaCommandBar::getVisible() throw (uno::RuntimeException)
-{
-    sal_Bool bVisible = sal_False;
-    try
-    {
-        sal_Int32 i = 0;
-        while( !m_aToolBar[i].Name.equals( rtl::OUString::createFromAscii( "Visible" ) ) )
-        {
-            i++;
-        }
-        m_aToolBar[i].Value >>= bVisible;
-    }
-    catch ( uno::Exception e )
-    {
-    }
-    return bVisible;
-}
-void SAL_CALL 
-ScVbaCommandBar::setVisible( ::sal_Bool _visible ) throw (uno::RuntimeException)
-{
-    try
-    {
-        uno::Reference< frame::XFrame > xFrame( getCurrentDocument()->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW ); 
-        uno::Reference< beans::XPropertySet > xPropertySet( xFrame, uno::UNO_QUERY_THROW );
-        uno::Reference< frame::XLayoutManager > xLayoutManager( xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("LayoutManager") ), uno::UNO_QUERY_THROW );
-        if( _visible )
-        {
-            xLayoutManager->createElement( m_sToolBarName );
-            xLayoutManager->showElement( m_sToolBarName );
-        }
-        else
-        {
-            xLayoutManager->hideElement( m_sToolBarName );
-            xLayoutManager->destroyElement( m_sToolBarName );
-        }
-    }
-    catch( uno::Exception e )
-    {
-        OSL_TRACE( "SetVisible get an exception\n" );
-    }
-}
-void SAL_CALL 
-ScVbaCommandBar::Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
-{
-    if( m_bCustom )
-    {
-        if( m_xUICfgManager->hasSettings( m_sToolBarName ) )
-        {
-            m_xUICfgManager->removeSettings(m_sToolBarName);
-            // make it permanent
-            if( !m_bTemporary )
-            {
-                m_xUICfgPers->store();
-            }
-        }
-        else
-        {
-            // toolbar not found
-            // TODO throw Error
-        }
-        uno::Reference< container::XNameContainer > xNameContainer( m_pScVbaCommandBars->GetWindows(), uno::UNO_QUERY_THROW );
-        if( xNameContainer->hasByName( m_sToolBarName ) )
-        {
-            xNameContainer->removeByName( m_sToolBarName );
-        }
-    }
-}
-uno::Any SAL_CALL 
-ScVbaCommandBar::Controls( const uno::Any& aIndex ) throw (script::BasicErrorException, uno::RuntimeException)
-{
-    sal_Int32 nIndex;
-    uno::Reference< XCommandBarControls > xCommandBarControls( new ScVbaCommandBarControls( this, mxContext, uno::Reference< container::XIndexAccess >() ) );
-    if( aIndex.hasValue() )
-    {
-        if( aIndex >>= nIndex )
-        {
-            uno::Reference< XCommandBarControl > xCommandBarControl( xCommandBarControls->Item( aIndex, uno::Any() ), uno::UNO_QUERY_THROW );
-            return uno::makeAny( xCommandBarControl );
-        }
-        else
-            throw uno::RuntimeException( rtl::OUString::createFromAscii(  "invalid index" ), uno::Reference< uno::XInterface >() );
-    }
-    return uno::makeAny( xCommandBarControls );
-}
-rtl::OUString& 
-ScVbaCommandBar::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBar") );
-    return sImplName;
-}
-uno::Sequence<rtl::OUString> 
-ScVbaCommandBar::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBar" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbacommandbar.hxx b/sc/source/ui/vba/vbacommandbar.hxx
index 3ad45b1..90002a4 100644
--- a/sc/source/ui/vba/vbacommandbar.hxx
+++ b/sc/source/ui/vba/vbacommandbar.hxx
@@ -1,96 +1,3 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_COMMANDBAR_HXX
-#define SC_VBA_COMMANDBAR_HXX
-
-#include <ooo/vba/XCommandBar.hpp>
-#include <com/sun/star/ui/XUIConfigurationManager.hpp>
-#include <com/sun/star/ui/XUIConfigurationPersistence.hpp>
-#include <com/sun/star/container/XIndexContainer.hpp>
-#include <com/sun/star/beans/PropertyValues.hpp>
-
-#include "vbahelperinterface.hxx"
-#include "vbacommandbars.hxx"
-
-#include <map>
-typedef std::map< const rtl::OUString, rtl::OUString > CommandBarNameMap;
-typedef std::pair< const rtl::OUString, rtl::OUString > CommandBarNamePair;
-const CommandBarNamePair namePair[] = { 
-    CommandBarNamePair(  rtl::OUString::createFromAscii("standard"), rtl::OUString::createFromAscii("standardbar") ),
-    CommandBarNamePair(  rtl::OUString::createFromAscii("formatting"), rtl::OUString::createFromAscii("formatobjectbar") ),
-};
-static const CommandBarNameMap mCommandBarNameMap( namePair, ( namePair + sizeof(namePair) / sizeof(namePair[0]) ) );
-
-
-typedef InheritedHelperInterfaceImpl1< ov::XCommandBar > CommandBar_BASE;
-
-class ScVbaCommandBar : public CommandBar_BASE
-{
-private:
-    rtl::OUString       m_sToolBarName;
-    rtl::OUString       m_sMenuModuleName;
-    rtl::OUString       m_sUIName;
-    sal_Bool            m_bTemporary;
-    sal_Bool            m_bIsMenu;
-    sal_Bool            m_bCustom;
-    sal_Bool            m_bCreate;
-    ScVbaCommandBars*   m_pScVbaCommandBars;
-    css::beans::PropertyValues  m_aToolBar;
-    // hard reference for parent
-    css::uno::Reference< ov::XHelperInterface >               m_xParentHardRef;
-    css::uno::Reference< css::ui::XUIConfigurationManager >         m_xUICfgManager;
-    css::uno::Reference< css::ui::XUIConfigurationPersistence >     m_xUICfgPers;
-    css::uno::Reference< css::container::XIndexContainer >          m_xBarSettings;
-    void initCommandBar() throw( css::uno::RuntimeException );
-protected:
-    void getToolBarSettings( rtl::OUString sToolBarName ) throw( css::uno::RuntimeException );
-    void getMenuSettings();
-    void addCustomBar();
-public:
-    ScVbaCommandBar( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, sal_Int32 nModuleType ) throw( css::uno::RuntimeException );
-    ScVbaCommandBar( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, rtl::OUString sToolBarName, sal_Bool bTemporary, sal_Bool bCreate ) throw( css::uno::RuntimeException );
-    
-    sal_Bool IsMenu() { return m_bIsMenu; };
-    css::uno::Reference< css::ui::XUIConfigurationManager > GetUICfgManager() { return m_xUICfgManager; };
-    css::uno::Reference< css::ui::XUIConfigurationPersistence > GetUICfgPers() { return m_xUICfgPers; };
-    css::uno::Reference< css::container::XIndexContainer > GetBarSettings() { return m_xBarSettings; };
-    rtl::OUString GetToolBarName() { return m_sToolBarName; };
-
-    // Attributes
-    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) throw (css::uno::RuntimeException);
-    virtual ::sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( ::sal_Bool _visible ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual void SAL_CALL Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL Controls( const css::uno::Any& aIndex ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
-
-    // XHelperInterface
     virtual rtl::OUString& getServiceImplName();
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
 };
diff --git a/sc/source/ui/vba/vbacommandbarcontrol.cxx b/sc/source/ui/vba/vbacommandbarcontrol.cxx
index fb8fb50..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbarcontrol.cxx
+++ b/sc/source/ui/vba/vbacommandbarcontrol.cxx
@@ -1,395 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbacommandbarcontrol.hxx"
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-uno::Any lcl_getPropertyValue( beans::PropertyValues aPropertyValues, rtl::OUString sPropertyName )
-{
-    sal_Int32 nCount = aPropertyValues.getLength();
-    for( sal_Int32 i = 0; i < nCount; i++ )
-    {
-        if( aPropertyValues[i].Name.equalsIgnoreAsciiCase( sPropertyName ) )
-        {
-            return aPropertyValues[i].Value;
-        }
-    }
-    return uno::Any();
-}
-
-beans::PropertyValues lcl_repalcePropertyValue( beans::PropertyValues aPropertyValues, rtl::OUString sPropertyName, uno::Any aValue )
-{
-    sal_Int32 nCount = aPropertyValues.getLength();
-    for( sal_Int32 i = 0; i < nCount; i++ )
-    {
-        if( aPropertyValues[i].Name.equalsIgnoreAsciiCase( sPropertyName ) )
-        {
-            aPropertyValues[i].Value = aValue;
-            return aPropertyValues;
-        }
-    }
-    return aPropertyValues;
-}
-
-ScVbaCommandBarControl::ScVbaCommandBarControl( const uno::Reference< XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, rtl::OUString sName ) throw (uno::RuntimeException) : CommandBarControl_BASE( xParent, xContext ), m_sName( sName )
-{
-    // exsiting CommandBarBarControl
-    m_xParentHardRef.set( xParent, uno::UNO_QUERY_THROW );
-    initObjects();
-    if( m_xBarSettings->hasElements() )
-    {
-        ScVbaCommandBarControl* pParentCommandBarControl = m_pCommandBarControls->GetParentCommandBarControl();
-        if( pParentCommandBarControl )
-        {
-            beans::PropertyValues aPropertyValues;
-            pParentCommandBarControl->GetCurrentSettings()->getByIndex( pParentCommandBarControl->GetPosition() ) >>= aPropertyValues;
-            pParentCommandBarControl->SetPropertyValues( aPropertyValues );
-            m_xCurrentSettings.set( lcl_getPropertyValue( pParentCommandBarControl->GetPropertyValues(), rtl::OUString::createFromAscii( "ItemDescriptorContainer" ) ), uno::UNO_QUERY_THROW );
-        }
-        if( !m_xCurrentSettings.is() )
-        {
-            m_xCurrentSettings.set( m_xUICfgManager->getSettings( m_pCommandBarControls->GetParentToolBarName(), sal_True ), uno::UNO_QUERY_THROW );
-        }
-        for( sal_Int32 i = 0; i < m_xCurrentSettings->getCount(); i++ )
-        {
-            beans::PropertyValues aPropertyValuesTemp;
-            m_xCurrentSettings->getByIndex( i ) >>= aPropertyValuesTemp;
-            // Label always empty in OOo
-            rtl::OUString sLabel;
-            lcl_getPropertyValue( aPropertyValuesTemp, rtl::OUString::createFromAscii( "Label" ) ) >>= sLabel;
-            if( sLabel.equalsIgnoreAsciiCase( sName ) )
-            {
-                m_nPosition = i;
-                break;
-            }
-            // using CammandURL to find
-            rtl::OUString sCommandURL;
-            lcl_getPropertyValue( aPropertyValuesTemp, rtl::OUString::createFromAscii( "CommandURL" ) ) >>= sCommandURL;
-            sal_Int32 nLastIndex = sCommandURL.lastIndexOf( rtl::OUString::createFromAscii(":") );
-            if( ( nLastIndex != -1 ) && ( ( nLastIndex + 1 ) < sCommandURL.getLength() ) )
-            {
-                sCommandURL = sCommandURL.copy( nLastIndex + 1 );
-            }
-            if( sCommandURL.equalsIgnoreAsciiCase( sName ) )
-            {
-                m_nPosition = i;
-                break;
-            }
-        }
-        if( m_nPosition  == -1 )
-            throw uno::RuntimeException( rtl::OUString::createFromAscii("The CommandBarControl do not exist"), uno::Reference< uno::XInterface >() );
-    }
-    if( m_bIsMenu )
-    {
-        m_sBarName = rtl::OUString::createFromAscii("private:resource/menubar/menubar");
-    }
-    else
-    {
-        m_sBarName = m_pCommandBarControls->GetParentToolBarName();
-    }
-    m_bTemporary = sal_True;
-}
-ScVbaCommandBarControl::ScVbaCommandBarControl( const uno::Reference< XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, rtl::OUString sName, rtl::OUString sCommand, sal_Int32 nPosition, sal_Bool bTemporary ) throw (uno::RuntimeException) :  CommandBarControl_BASE( xParent, xContext ), m_nPosition( nPosition ), m_bTemporary( bTemporary )
-{
-    m_xParentHardRef.set( xParent, uno::UNO_QUERY_THROW );
-    initObjects();
-    if( sName.getLength() > 0 )
-    {
-        m_sName = sName;
-    }
-    if( sCommand.getLength() > 0 )
-    {
-        m_sCommand = sCommand;
-    }
-    else
-    {
-        m_sCommand = rtl::OUString::createFromAscii("vnd.openoffice.org:") + sName;
-    }
-    if( m_bIsMenu )
-    {
-        m_sBarName = rtl::OUString::createFromAscii("private:resource/menubar/menubar");
-        createNewMenuBarControl();
-    }
-    else
-    {
-        m_sBarName = m_pCommandBarControls->GetParentToolBarName();
-        createNewToolBarControl();
-    }
-}
-
-void
-ScVbaCommandBarControl::initObjects() throw (uno::RuntimeException)
-{
-    m_pCommandBarControls = dynamic_cast< ScVbaCommandBarControls* >( m_xParentHardRef.get() );
-    if( !m_pCommandBarControls )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "Parent needs to be a ScVbaCommandBarControls"), uno::Reference< uno::XInterface >() );
-    m_xUICfgManager.set( m_pCommandBarControls->GetUICfgManager(), uno::UNO_QUERY_THROW );
-    m_xUICfgPers.set( m_pCommandBarControls->GetUICfgPers(), uno::UNO_QUERY_THROW );
-    m_xBarSettings.set( m_pCommandBarControls->GetBarSettings(), uno::UNO_QUERY_THROW );
-    m_bIsMenu = m_pCommandBarControls->IsMenu();
-    m_sName = rtl::OUString::createFromAscii( "Custom" );
-    m_nPosition = -1;
-}
-
-void
-ScVbaCommandBarControl::createNewMenuBarControl()
-{
-    uno::Sequence< beans::PropertyValue > aPropertys(4);
-    aPropertys[0].Name = rtl::OUString::createFromAscii("CommandURL");
-    aPropertys[0].Value <<= m_sCommand; 
-    aPropertys[1].Name = rtl::OUString::createFromAscii("Label");
-    aPropertys[1].Value <<= m_sName; 
-    aPropertys[2].Name = rtl::OUString::createFromAscii("Type");
-    aPropertys[2].Value <<= m_nType; 
-    aPropertys[3].Name = rtl::OUString::createFromAscii("ItemDescriptorContainer");
-
-    m_xBarSettings->insertByIndex( m_nPosition, uno::makeAny( aPropertys ) );
-    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
-    rtl::OUString sUIName;
-    xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("UIName") ) >>= sUIName;
-
-    uno::Reference< lang::XSingleComponentFactory > xMenuMSF( m_xBarSettings, uno::UNO_QUERY_THROW );
-    if( m_pCommandBarControls->GetParentCommandBar() != NULL )
-    {
-        // create a new menu
-        m_xBarSettings->insertByIndex( m_nPosition, uno::makeAny( aPropertys ) );
-        m_xCurrentSettings.set( m_xBarSettings, uno::UNO_QUERY_THROW );
-    }
-    else if( m_pCommandBarControls->GetParentCommandBarControl() != NULL )
-    {
-        // create a new menu entry
-        // change the parent MenuItem to a PopupMenu
-        ScVbaCommandBarControl* pPc = m_pCommandBarControls->GetParentCommandBarControl();
-        beans::PropertyValues aPropertyValues;
-        pPc->GetCurrentSettings()->getByIndex( pPc->GetPosition() ) >>= aPropertyValues;
-        pPc->SetPropertyValues( aPropertyValues );
-        
-        // has the property already been set?
-        if( lcl_getPropertyValue( pPc->GetPropertyValues(), rtl::OUString::createFromAscii("ItemDescriptorContainer") ).hasValue() )
-        {
-            lcl_repalcePropertyValue(  pPc->GetPropertyValues(), rtl::OUString::createFromAscii("ItemDescriptorContainer"), uno::makeAny( xMenuMSF->createInstanceWithContext( mxContext ) ) );
-            pPc->GetCurrentSettings()->replaceByIndex( pPc->GetPosition(), uno::makeAny( pPc->GetPropertyValues() ) );
-        }
-        m_xCurrentSettings.set( lcl_getPropertyValue( pPc->GetPropertyValues(), rtl::OUString::createFromAscii("ItemDescriptorContainer") ), uno::UNO_QUERY_THROW );
-        m_xCurrentSettings->insertByIndex( m_nPosition, uno::makeAny( m_aPropertyValues ) );
-    }
-    if( m_xUICfgManager->hasSettings( m_sBarName ) )
-    {
-        m_xUICfgManager->replaceSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-    }
-    else
-    {
-        m_xUICfgManager->insertSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-    }
-    if( !m_bTemporary )
-    {
-        m_xUICfgPers->store();
-    }
-}
-
-void
-ScVbaCommandBarControl::createNewToolBarControl()
-{
-    uno::Sequence< beans::PropertyValue > aPropertys(4);
-    aPropertys[0].Name = rtl::OUString::createFromAscii("CommandURL");
-    aPropertys[0].Value <<= m_sCommand; 
-    aPropertys[1].Name = rtl::OUString::createFromAscii("Label");
-    aPropertys[1].Value <<= m_sName; 
-    aPropertys[2].Name = rtl::OUString::createFromAscii("Type");
-    aPropertys[2].Value <<= m_nType; 
-    aPropertys[3].Name = rtl::OUString::createFromAscii("IsVisible");
-    aPropertys[3].Value <<= sal_True; 
-
-    m_xBarSettings->insertByIndex( m_nPosition, uno::makeAny( aPropertys ) );
-    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
-    rtl::OUString sUIName;
-    xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("UIName") ) >>= sUIName;
-
-    m_xCurrentSettings.set( m_xBarSettings, uno::UNO_QUERY_THROW );
-    if( m_xUICfgManager->hasSettings( m_sBarName ) )
-    {
-        m_xUICfgManager->replaceSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-    }
-    else
-    {
-        m_xUICfgManager->insertSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-    }
-    if( !m_bTemporary )
-    {
-        m_xUICfgPers->store();
-    }
-}
-
-::rtl::OUString SAL_CALL
-ScVbaCommandBarControl::getCaption() throw ( uno::RuntimeException )
-{
-    // "Label" always empty
-    rtl::OUString sCaption;
-    beans::PropertyValues aPropertyValues;
-    if( m_xCurrentSettings.is() )
-    {
-        m_xCurrentSettings->getByIndex( m_nPosition ) >>= aPropertyValues;
-        lcl_getPropertyValue( aPropertyValues, rtl::OUString::createFromAscii("Label") ) >>= sCaption;
-    }
-    else if( m_xBarSettings.is() )
-    {
-        m_xBarSettings->getByIndex( m_nPosition ) >>= aPropertyValues;
-        lcl_getPropertyValue( aPropertyValues, rtl::OUString::createFromAscii("Label") ) >>= sCaption;
-    }
-    return sCaption;
-}
-void SAL_CALL 
-ScVbaCommandBarControl::setCaption( const ::rtl::OUString& _caption ) throw (uno::RuntimeException)
-{
-    if( m_xCurrentSettings.is() )
-    {
-        beans::PropertyValues aPropertyValues;
-        m_xCurrentSettings->getByIndex( m_nPosition ) >>= aPropertyValues;
-        beans::PropertyValues aNewPropertyValues;
-        aNewPropertyValues = lcl_repalcePropertyValue( aPropertyValues, rtl::OUString::createFromAscii("Label"), uno::makeAny( _caption ) );
-        m_xCurrentSettings->replaceByIndex( m_nPosition, uno::makeAny( aNewPropertyValues ) );
-        if( m_xUICfgManager->hasSettings( m_sBarName ) )
-        {
-            m_xUICfgManager->replaceSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-        }
-        else
-        {
-            m_xUICfgManager->insertSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-        }
-        // make it permanent
-        if( !m_bTemporary )
-        {
-            m_xUICfgPers->store();
-        }
-    }
-}
-::rtl::OUString SAL_CALL 
-ScVbaCommandBarControl::getOnAction() throw (uno::RuntimeException)
-{
-    if( m_xCurrentSettings.is() )
-    {
-        beans::PropertyValues aPropertyValues;
-        m_xCurrentSettings->getByIndex( m_nPosition ) >>= aPropertyValues;
-        rtl::OUString sCommandURL;
-        lcl_getPropertyValue( aPropertyValues, rtl::OUString::createFromAscii( "CommandURL" ) ) >>= sCommandURL;
-        return sCommandURL;
-    }
-    return ::rtl::OUString();
-}
-void SAL_CALL 
-ScVbaCommandBarControl::setOnAction( const ::rtl::OUString& _onaction ) throw (uno::RuntimeException)
-{
-    if( m_xCurrentSettings.is() )
-    {
-        beans::PropertyValues aPropertyValues;
-        m_xCurrentSettings->getByIndex( m_nPosition ) >>= aPropertyValues;
-        beans::PropertyValues aNewPropertyValues;
-        aNewPropertyValues = lcl_repalcePropertyValue( aPropertyValues, rtl::OUString::createFromAscii("CommandURL"), uno::makeAny( _onaction ) );
-        m_xCurrentSettings->replaceByIndex( m_nPosition, uno::makeAny( aNewPropertyValues ) );
-        if( m_xUICfgManager->hasSettings( m_sBarName ) )
-        {
-            m_xUICfgManager->replaceSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-        }
-        else
-        {
-            m_xUICfgManager->insertSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-        }
-        // make it permanent
-        if( !m_bTemporary )
-        {
-            m_xUICfgPers->store();
-        }
-    }
-}
-::sal_Bool SAL_CALL 
-ScVbaCommandBarControl::getVisible() throw (uno::RuntimeException)
-{
-    // not possible in UNO?
-    return sal_True;
-}
-void SAL_CALL 
-ScVbaCommandBarControl::setVisible( ::sal_Bool /*_visible*/ ) throw (uno::RuntimeException)
-{
-    // "IsVisilbe"
-}
-void SAL_CALL 
-ScVbaCommandBarControl::Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
-{
-    if( m_xCurrentSettings.is() )
-    {
-        m_xCurrentSettings->removeByIndex( m_nPosition );
-
-        if( m_xUICfgManager->hasSettings( m_sBarName ) )
-        {
-            m_xUICfgManager->replaceSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-        }
-        else
-        {
-            m_xUICfgManager->insertSettings( m_sBarName, uno::Reference< container::XIndexAccess > (m_xBarSettings, uno::UNO_QUERY_THROW ) );
-        }
-        // make it permanent
-        if( !m_bTemporary )
-        {
-            m_xUICfgPers->store();
-        }
-    }
-}
-uno::Any SAL_CALL 
-ScVbaCommandBarControl::Controls( const uno::Any& aIndex ) throw (script::BasicErrorException, uno::RuntimeException)
-{
-    sal_Int32 nIndex;
-    uno::Reference< XCommandBarControls > xCommandBarControls( new ScVbaCommandBarControls( this, mxContext, uno::Reference< container::XIndexAccess >() ) );
-    if( aIndex.hasValue() )
-    {
-        if( aIndex >>= nIndex )
-        {
-            uno::Reference< XCommandBarControl > xCommandBarControl( xCommandBarControls->Item( aIndex, uno::Any() ), uno::UNO_QUERY_THROW );
-            return uno::makeAny( xCommandBarControl );
-        }
-        else
-            throw uno::RuntimeException( rtl::OUString::createFromAscii( "invalid index" ), uno::Reference< uno::XInterface >() );
-    }
-    return uno::makeAny( xCommandBarControls );
-}
-rtl::OUString& 
-ScVbaCommandBarControl::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBarControl") );
-    return sImplName;
-}
-uno::Sequence<rtl::OUString> 
-ScVbaCommandBarControl::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBarControl" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbacommandbarcontrol.hxx b/sc/source/ui/vba/vbacommandbarcontrol.hxx
index df84c1d..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbarcontrol.hxx
+++ b/sc/source/ui/vba/vbacommandbarcontrol.hxx
@@ -1,82 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_COMMANDBARCONTROL_HXX
-#define SC_VBA_COMMANDBARCONTROL_HXX
-
-#include <ooo/vba/XCommandBarControl.hpp>
-
-#include "vbahelperinterface.hxx"
-#include "vbacommandbarcontrols.hxx"
-
-typedef InheritedHelperInterfaceImpl1< ov::XCommandBarControl > CommandBarControl_BASE;
-
-class ScVbaCommandBarControl : public CommandBarControl_BASE
-{
-private:
-    rtl::OUString       m_sName;
-    rtl::OUString       m_sBarName;
-    rtl::OUString       m_sCommand;
-    sal_Int32           m_nType;
-    sal_Int32           m_nPosition;
-    sal_Bool            m_bTemporary;
-    sal_Bool            m_bIsMenu;
-    ScVbaCommandBarControls*        m_pCommandBarControls;
-    css::uno::Reference< ov::XHelperInterface >               m_xParentHardRef;
-    css::uno::Reference< css::ui::XUIConfigurationManager >         m_xUICfgManager;
-    css::uno::Reference< css::ui::XUIConfigurationPersistence >     m_xUICfgPers;
-    css::uno::Reference< css::container::XIndexContainer >          m_xBarSettings;
-    css::uno::Reference< css::container::XIndexContainer >          m_xCurrentSettings;
-    css::beans::PropertyValues                                      m_aPropertyValues;
-    
-    void initObjects() throw (css::uno::RuntimeException);
-    void createNewMenuBarControl();
-    void createNewToolBarControl();
-public:
-    ScVbaCommandBarControl( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, rtl::OUString sName ) throw (css::uno::RuntimeException);
-    ScVbaCommandBarControl( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, rtl::OUString sName, rtl::OUString sCommand, sal_Int32 nPosition, sal_Bool bTemporary ) throw (css::uno::RuntimeException);
-    sal_Int32 GetPosition() { return m_nPosition; };
-    css::uno::Reference< css::container::XIndexContainer > GetCurrentSettings() { return m_xCurrentSettings; };
-    css::beans::PropertyValues GetPropertyValues() { return m_aPropertyValues; };
-    void SetPropertyValues( css::beans::PropertyValues aPropertyValues ) { m_aPropertyValues = aPropertyValues; };
-    
-    // Attributes
-    virtual ::rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const ::rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    virtual ::rtl::OUString SAL_CALL getOnAction() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setOnAction( const ::rtl::OUString& _onaction ) throw (css::uno::RuntimeException);
-    virtual ::sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( ::sal_Bool _visible ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual void SAL_CALL Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL Controls( const css::uno::Any& aIndex ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
-
-    // XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif//SC_VBA_COMMANDBARCONTROL_HXX
diff --git a/sc/source/ui/vba/vbacommandbarcontrols.cxx b/sc/source/ui/vba/vbacommandbarcontrols.cxx
index fb32a10..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbarcontrols.cxx
+++ b/sc/source/ui/vba/vbacommandbarcontrols.cxx
@@ -1,238 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbacommandbarcontrols.hxx"
-#include "vbacommandbarcontrol.hxx"
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-typedef ::cppu::WeakImplHelper1< container::XEnumeration > CommandBarControlEnumeration_BASE;
-class CommandBarControlEnumeration : public CommandBarControlEnumeration_BASE
-{
-    //uno::Reference< uno::XComponentContext > m_xContext;
-    ScVbaCommandBarControls* m_pCommandBarControls;
-    sal_Int32 m_nCurrentPosition;
-public:
-    CommandBarControlEnumeration( ScVbaCommandBarControls* pCommandBarControls ) : m_pCommandBarControls( pCommandBarControls ), m_nCurrentPosition( 0 ) {}
-    virtual sal_Bool SAL_CALL hasMoreElements() throw ( uno::RuntimeException )
-    {
-        if( m_nCurrentPosition < m_pCommandBarControls->getCount() )
-            return sal_True;
-        return sal_False;
-    }
-    virtual uno::Any SAL_CALL nextElement() throw ( container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException )
-    {
-        if( hasMoreElements() )
-        {
-            rtl::OUString sName = m_pCommandBarControls->GetControlNameByIndex( m_nCurrentPosition );
-            m_nCurrentPosition = m_nCurrentPosition + 1;
-            if( sName.getLength() > 0 )
-                return m_pCommandBarControls->createCollectionObject( uno::makeAny( sName ) );
-            else
-                return nextElement();
-        }
-        else
-            throw container::NoSuchElementException();
-    }
-};
-
-ScVbaCommandBarControls::ScVbaCommandBarControls( const uno::Reference< XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, const uno::Reference< container::XIndexAccess> xIndexAccess ) throw (uno::RuntimeException) : CommandBarControls_BASE( xParent, xContext, xIndexAccess )
-{
-    m_bIsMenu = sal_False;
-    m_bHasElements = sal_False;
-    m_xParentHardRef.set( xParent, uno::UNO_QUERY_THROW );
-    m_pCommandBar = dynamic_cast< ScVbaCommandBar* >( m_xParentHardRef.get() );
-    m_pCommandBarControl = dynamic_cast< ScVbaCommandBarControl* >( m_xParentHardRef.get() );
-    if( m_pCommandBar )
-    {
-        m_xUICfgManager.set( m_pCommandBar->GetUICfgManager(), uno::UNO_QUERY_THROW );
-        m_xUICfgPers.set( m_pCommandBar->GetUICfgPers(), uno::UNO_QUERY_THROW );
-        m_xBarSettings.set( m_pCommandBar->GetBarSettings(), uno::UNO_QUERY_THROW );
-        m_bIsMenu = m_pCommandBar->IsMenu();
-        if( m_xBarSettings->hasElements() )
-        {
-            m_bHasElements = sal_True;
-        }
-    }
-    else if( m_pCommandBarControl )
-    {
-    }
-    else
-    {
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parent needs to be a ScVbaCommandBar or a ScVbaCommandBarControl"), uno::Reference< uno::XInterface >() );
-    }
-}
-rtl::OUString
-ScVbaCommandBarControls::GetControlNameByIndex( const sal_Int32 nIndex ) throw ( uno::RuntimeException )
-{
-    sal_Int32 nCount = 0;
-    if( m_bHasElements )
-    {
-        sal_Int32 nBarSettingsCount = m_xBarSettings->getCount();
-        for( sal_Int32 i = 0; i < nBarSettingsCount; i++ )
-        {
-            beans::PropertyValues aMenuValues;
-            m_xBarSettings->getByIndex( i ) >>= aMenuValues;
-            for( sal_Int32 j = 0; j < aMenuValues.getLength(); j++ )
-            {
-                if( aMenuValues[j].Name.equalsIgnoreAsciiCase( rtl::OUString::createFromAscii( "CommandURL" ) ) )
-                {
-                    nCount++;
-                    if( nIndex == nCount )
-                    {
-                        rtl::OUString sCommandURL;
-                        aMenuValues[j].Value >>= sCommandURL;
-                        sal_Int32 nLastIndex = sCommandURL.lastIndexOf( rtl::OUString::createFromAscii(":") );
-                        if( ( nLastIndex != -1 ) && ( ( nLastIndex +1 ) < sCommandURL.getLength() ) )
-                        {
-                            sCommandURL = sCommandURL.copy( nLastIndex + 1 );
-                            return sCommandURL;
-                        }
-                    }
-                }
-            }
-        } 
-    }
-    else
-        throw  uno::RuntimeException( rtl::OUString::createFromAscii( "Out of bound" ), uno::Reference< uno::XInterface >() );
-    return rtl::OUString();
-}
-
-// Attributes
-sal_Int32 SAL_CALL 
-ScVbaCommandBarControls::getCount() throw (uno::RuntimeException)
-{
-    sal_Int32 nCount = 0;
-    if( m_bHasElements )
-    {
-        sal_Int32 nBarSettingsCount = m_xBarSettings->getCount();
-        for( sal_Int32 i = 0; i < nBarSettingsCount; i++ )
-        {
-            beans::PropertyValues aMenuValues;
-            m_xBarSettings->getByIndex( i ) >>= aMenuValues;
-            for( sal_Int32 j = 0; j < aMenuValues.getLength(); j++ )
-            {
-                if( aMenuValues[j].Name.equalsIgnoreAsciiCase( rtl::OUString::createFromAscii( "CommandURL" ) ) )
-                {
-                    nCount++;
-                }
-            }
-        } 
-    }
-    return nCount;
-}
-// XEnumerationAccess
-uno::Type SAL_CALL
-ScVbaCommandBarControls::getElementType() throw ( uno::RuntimeException )
-{
-    return XCommandBarControls::static_type( 0 );
-}
-uno::Reference< container::XEnumeration >
-ScVbaCommandBarControls::createEnumeration() throw ( uno::RuntimeException )
-{
-    return uno::Reference< container::XEnumeration >( new CommandBarControlEnumeration( this ) );
-}
-uno::Any
-ScVbaCommandBarControls::createCollectionObject( const uno::Any& aSource )
-{
-    // only surport the aSource as a name string, because this class is a API wrapper
-    rtl::OUString sName;
-    if( aSource >>= sName )
-        return uno::makeAny( uno::Reference< XCommandBarControl > ( new ScVbaCommandBarControl( this, mxContext, sName ) ) );
-    return uno::Any();
-}
-
-// Methods
-uno::Any SAL_CALL 
-ScVbaCommandBarControls::Item( const uno::Any& aIndex, const uno::Any& /*aIndex*/ ) throw (uno::RuntimeException)
-{
-    if( aIndex.getValueTypeClass() == uno::TypeClass_STRING )
-    {
-        return createCollectionObject( aIndex );
-    } 
-    sal_Int32 nIndex = 0;
-    if( aIndex >>= nIndex )
-    {
-        return createCollectionObject( uno::makeAny( GetControlNameByIndex( nIndex ) ) );
-    }
-    
-    return uno::Any();
-}
-uno::Reference< XCommandBarControl > SAL_CALL 
-ScVbaCommandBarControls::Add( const uno::Any& Type, const uno::Any& Id, const uno::Any& /*Parameter*/, const uno::Any& Before, const uno::Any& Temporary ) throw (script::BasicErrorException, uno::RuntimeException)
-{
-    // Parameter is not supported
-    // the following name needs to be individually created;
-    rtl::OUString sCaption( rtl::OUString::createFromAscii("custom Control") );
-    rtl::OUString sCommand( rtl::OUString::createFromAscii("macro:///Standard.Module1.Test()") );
-    sal_Int32 nType =0;
-    sal_Int32 nPosition = 0;
-    sal_Int32 nId;
-    sal_Bool bTemporary = sal_True;
-    
-    if( Type.hasValue() )
-        if( Type >>= nType )
-        {
-            // evalute the type of the new control
-        }
-    if( Id.hasValue() )
-        if( Id >>= nId )
-        {
-            // evalute the action of the new control
-        }
-    if( Before.hasValue() )
-        if( Before >>= nPosition )
-        {
-            // evalute the position of the new Control
-        }
-    if( Temporary.hasValue() )
-        if( Temporary >>= bTemporary )
-        {
-            // evalute the temporary of the new Control
-        }
-    return uno::Reference< XCommandBarControl > ( new ScVbaCommandBarControl( this, mxContext, sCaption, sCommand, nPosition, bTemporary ) );
-}
-   
-// XHelperInterface
-rtl::OUString& 
-ScVbaCommandBarControls::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBarControls") );
-    return sImplName;
-}
-uno::Sequence<rtl::OUString> 
-ScVbaCommandBarControls::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBarControls" ) );
-    }
-    return aServiceNames;
-}
-
diff --git a/sc/source/ui/vba/vbacommandbarcontrols.hxx b/sc/source/ui/vba/vbacommandbarcontrols.hxx
index e164de8..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbarcontrols.hxx
+++ b/sc/source/ui/vba/vbacommandbarcontrols.hxx
@@ -1,82 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_COMMANDBARCONTROLS_HXX
-#define SC_VBA_COMMANDBARCONTROLS_HXX
-
-#include <ooo/vba/XCommandBarControls.hpp>
-
-#include "vbahelperinterface.hxx"
-#include "vbacommandbar.hxx"
-#include "vbacollectionimpl.hxx"
-
-class ScVbaCommandBarControl;
-
-typedef CollTestImplHelper< ov::XCommandBarControls > CommandBarControls_BASE;
-
-class ScVbaCommandBarControls : public CommandBarControls_BASE
-{
-private:
-    sal_Bool                    m_bIsMenu;
-    sal_Bool                    m_bHasElements;
-    ScVbaCommandBar*            m_pCommandBar; 
-    ScVbaCommandBarControl*     m_pCommandBarControl; 
-    css::uno::Reference< ov::XHelperInterface >               m_xParentHardRef;
-    css::uno::Reference< css::ui::XUIConfigurationManager >         m_xUICfgManager;
-    css::uno::Reference< css::ui::XUIConfigurationPersistence >     m_xUICfgPers;
-    css::uno::Reference< css::container::XIndexContainer >          m_xBarSettings;
-
-public:
-    ScVbaCommandBarControls( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, const css::uno::Reference< css::container::XIndexAccess > xIndexAccess ) throw( css::uno::RuntimeException );
-    css::uno::Reference< css::ui::XUIConfigurationManager > GetUICfgManager() { return m_xUICfgManager; };
-    css::uno::Reference< css::ui::XUIConfigurationPersistence > GetUICfgPers() { return m_xUICfgPers; };
-    css::uno::Reference< css::container::XIndexContainer >  GetBarSettings() { return m_xBarSettings; };
-    sal_Bool IsMenu() { return m_bIsMenu; };
-    ScVbaCommandBar* GetParentCommandBar() { return m_pCommandBar; };
-    ScVbaCommandBarControl* GetParentCommandBarControl() { return m_pCommandBarControl; };
-    rtl::OUString GetParentToolBarName() 
-    { 
-        if( m_pCommandBar ) return m_pCommandBar->GetToolBarName();
-        else return rtl::OUString();
-    }
-    rtl::OUString GetControlNameByIndex( const sal_Int32 nIndex ) throw ( css::uno::RuntimeException );
-
-    // Attributes
-    virtual ::sal_Int32 SAL_CALL getCount() throw (css::uno::RuntimeException);
-    // XEnumerationAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
-    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
-
-    // Methods     
-    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index, const css::uno::Any& /*Index2*/ ) throw (css::uno::RuntimeException); 
-    virtual css::uno::Reference< ov::XCommandBarControl > SAL_CALL Add( const css::uno::Any& Type, const css::uno::Any& Id, const css::uno::Any& Parameter, const css::uno::Any& Before, const css::uno::Any& Temporary ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
-    // XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-
-#endif//SC_VBA_COMMANDBARCONTROLS_HXX
diff --git a/sc/source/ui/vba/vbacommandbars.cxx b/sc/source/ui/vba/vbacommandbars.cxx
index db1c007..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbars.cxx
+++ b/sc/source/ui/vba/vbacommandbars.cxx
@@ -1,239 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/lang/XServiceInfo.hpp>
-#include <com/sun/star/frame/XDesktop.hpp>
-#include <com/sun/star/container/XNameAccess.hpp>
-
-#include "vbacommandbars.hxx"
-#include "vbacommandbar.hxx"
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-typedef ::cppu::WeakImplHelper1< container::XEnumeration > CommandBarEnumeration_BASE;
-
-static rtl::OUString sSpreadsheetDocumentUrl( rtl::OUString::createFromAscii( "com.sun.star.sheet.SpreadsheetDocument" ) );
-static rtl::OUString sTextDocumentUrl( rtl::OUString::createFromAscii( "com.sun.star.text.TextDocument" ) );
-static rtl::OUString sWindowStateConfUrl( rtl::OUString::createFromAscii( "com.sun.star.ui.WindowStateConfiguration" ) );
-
-class CommandBarEnumeration : public CommandBarEnumeration_BASE
-{
-    uno::Reference< uno::XComponentContext > m_xContext;
-    uno::Reference< XCommandBars > m_xCommandBars;
-    uno::Sequence< rtl::OUString > m_sNames;
-    sal_Int32 m_nCurrentPosition;
-public:
-    CommandBarEnumeration( const uno::Reference< uno::XComponentContext > xContext, const uno::Reference< XCommandBars > xCommandBars, const uno::Sequence< rtl::OUString > sNames ) : m_xContext( xContext ), m_xCommandBars( xCommandBars ), m_sNames( sNames ), m_nCurrentPosition( 0 )
-    {
-    }
-    virtual sal_Bool SAL_CALL hasMoreElements() throw ( uno::RuntimeException )
-    {
-        if( m_nCurrentPosition < m_sNames.getLength() )
-            return sal_True;
-        return sal_False;
-    }
-    virtual uno::Any SAL_CALL nextElement() throw ( container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException )
-    {
-        if( hasMoreElements() )
-        {
-            rtl::OUString sName( m_sNames[ m_nCurrentPosition ] );
-            m_nCurrentPosition = m_nCurrentPosition + 1;
-            if( sName.indexOf( rtl::OUString::createFromAscii("private:resource/toolbar/") ) != -1 ) 
-            {
-                sal_Int32 nLastIndex = sName.lastIndexOf( rtl::OUString::createFromAscii( "/" ) );
-                if( ( nLastIndex != -1 ) && ( ( nLastIndex + 1 ) < sName.getLength() ) )
-                {
-                   sName = sName.copy( nLastIndex + 1);
-                   if( sName.getLength() > 0 )
-                   {
-                        uno::Reference< XHelperInterface > xHelperInterface( m_xCommandBars, uno::UNO_QUERY_THROW );
-                        uno::Reference< XCommandBar > xCommandBar( new ScVbaCommandBar( xHelperInterface, m_xContext, sName, sal_True, sal_False ) );
-                        if( xCommandBar.is() )
-                            return uno::makeAny( xCommandBar );
-                        else
-                            return nextElement();
-                    }
-                    else
-                        return nextElement();
-                    }
-             }
-             else
-                return nextElement();
-        }
-        else
-            throw container::NoSuchElementException();
-        return uno::Any();
-    }
-};
-
-
-ScVbaCommandBars::ScVbaCommandBars( const uno::Reference< XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, const uno::Reference< container::XIndexAccess > xIndexAccess ) : CommandBars_BASE( xParent, xContext, xIndexAccess )
-{
-    retrieveObjects();
-}
-void
-ScVbaCommandBars::retrieveObjects() throw ( uno::RuntimeException )
-{
-    uno::Reference< lang::XServiceInfo > xServiceInfo( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    if( xServiceInfo->supportsService( sSpreadsheetDocumentUrl ) )
-    {
-        m_sModuleName = sSpreadsheetDocumentUrl;
-    }
-    else if( xServiceInfo->supportsService( sTextDocumentUrl ) )
-    {
-        m_sModuleName = sTextDocumentUrl;
-    }
-    else
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "Unsupported Document" ), uno::Reference< uno::XInterface >() );
-    
-    uno::Reference < lang::XMultiServiceFactory > xMSF( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-    uno::Reference < container::XNameAccess > xNameAccess( xMSF->createInstance( sWindowStateConfUrl ), uno::UNO_QUERY_THROW );
-    m_xNameAccess.set( xNameAccess->getByName( m_sModuleName ), uno::UNO_QUERY_THROW );
-}
-
-// XEnumerationAccess
-uno::Type SAL_CALL 
-ScVbaCommandBars::getElementType() throw ( uno::RuntimeException )
-{
-    return XCommandBars::static_type( 0 );
-}
-uno::Reference< container::XEnumeration >
-ScVbaCommandBars::createEnumeration() throw ( uno::RuntimeException )
-{
-    return uno::Reference< container::XEnumeration >( new CommandBarEnumeration( mxContext, this, m_xNameAccess->getElementNames() ) );
-}
-
-uno::Any
-ScVbaCommandBars::createCollectionObject( const uno::Any& aSource )
-{
-    // aSource should be a name at this time, because of the class is API wrapper.
-    rtl::OUString sToolBarName;
-    if( aSource >>= sToolBarName )
-    {
-        sToolBarName = sToolBarName.toAsciiLowerCase();
-        if( sToolBarName.equalsIgnoreAsciiCase( rtl::OUString::createFromAscii("Worksheet Menu Bar") ) )
-        {
-            return uno::makeAny( uno::Reference< XCommandBar > ( new ScVbaCommandBar( this, mxContext, 0 ) ) );
-        }
-        else if( sToolBarName.equalsIgnoreAsciiCase( rtl::OUString::createFromAscii("Menu Bar") ) )
-        {
-            return uno::makeAny( uno::Reference< XCommandBar > ( new ScVbaCommandBar( this, mxContext, 1 ) ) );
-        }
-        else if( checkToolBarExist( sToolBarName ) )
-        {
-            return uno::makeAny( uno::Reference< XCommandBar > (new ScVbaCommandBar( this, mxContext, sToolBarName, sal_True, sal_False ) ) );
-        }
-    }
-    return uno::Any();
-}
-
-// XCommandBars
-uno::Reference< XCommandBar > SAL_CALL 
-ScVbaCommandBars::Add( const css::uno::Any& Name, const css::uno::Any& /*Position*/, const css::uno::Any& /*MenuBar*/, const css::uno::Any& Temporary ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
-{
-    // Position - MsoBar MenuBar - sal_Bool
-    // Currently only the Name is supported.
-    rtl::OUString sName;
-    if( !( Name >>= sName ) )
-    {
-        sName = rtl::OUString::createFromAscii("Custom1");
-    }
-    sal_Bool bTemporary = false;
-    if( !( Temporary >>= bTemporary ) )
-    {
-        bTemporary = sal_True;
-    }
-    return uno::Reference< XCommandBar >( new ScVbaCommandBar( this, mxContext, sName.toAsciiLowerCase(), bTemporary, sal_True ) );
-}
-sal_Int32 SAL_CALL 
-ScVbaCommandBars::getCount() throw(css::uno::RuntimeException)
-{
-    // Filter out all toolbars from the window collection
-    sal_Int32 nCount = 0;
-    uno::Sequence< ::rtl::OUString > allNames = m_xNameAccess->getElementNames();
-    for( sal_Int32 i = 0; i < allNames.getLength(); i++ )
-    {
-        if(allNames[i].indexOf( rtl::OUString::createFromAscii("private:resource/toolbar/") ) != -1 )
-        {
-            nCount++;
-        }
-    }
-    return nCount;
-}
-
-// ScVbaCollectionBaseImpl
-uno::Any SAL_CALL
-ScVbaCommandBars::Item( const uno::Any& aIndex, const uno::Any& /*aIndex2*/ ) throw( uno::RuntimeException )
-{
-    if( aIndex.getValueTypeClass() == uno::TypeClass_STRING )
-    {
-        return createCollectionObject( aIndex );    
-    }
-    return uno::Any();
-}
-
-sal_Bool
-ScVbaCommandBars::checkToolBarExist( rtl::OUString sToolBarName )
-{
-    CommandBarNameMap::const_iterator iter = mCommandBarNameMap.find( sToolBarName.toAsciiLowerCase() );
-    if( iter != mCommandBarNameMap.end() )
-    {
-        return sal_True;
-    }    
-    uno::Sequence< ::rtl::OUString > allNames = m_xNameAccess->getElementNames();
-    for( sal_Int32 i = 0; i < allNames.getLength(); i++ )
-    {
-        if(allNames[i].indexOf( rtl::OUString::createFromAscii("private:resource/toolbar/") ) != -1 )
-        {
-            if( allNames[i].indexOf( sToolBarName ) != -1 )
-            {
-                return sal_True;
-            }
-        }
-    }
-    return sal_False;
-}
-    
-// XHelperInterface
-rtl::OUString& 
-ScVbaCommandBars::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBars") );
-    return sImplName;
-}
-uno::Sequence<rtl::OUString> 
-ScVbaCommandBars::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBars" ) );
-    }
-    return aServiceNames;
-}
-
diff --git a/sc/source/ui/vba/vbacommandbars.hxx b/sc/source/ui/vba/vbacommandbars.hxx
index f9ada84..e69de29 100644
--- a/sc/source/ui/vba/vbacommandbars.hxx
+++ b/sc/source/ui/vba/vbacommandbars.hxx
@@ -1,71 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_COMMANDBARS_HXX
-#define SC_VBA_COMMANDBARS_HXX
-
-#include <ooo/vba/XCommandBar.hpp>
-#include <ooo/vba/XCommandBars.hpp>
-#include <com/sun/star/container/XNameAccess.hpp>
-
-#include <cppuhelper/implbase1.hxx>
-
-#include "vbahelperinterface.hxx"
-#include "vbacollectionimpl.hxx"
-
-typedef CollTestImplHelper< ov::XCommandBars > CommandBars_BASE;
-
-class ScVbaCommandBars : public CommandBars_BASE
-{
-private:
-    css::uno::Reference< css::container::XNameAccess > m_xNameAccess;
-    rtl::OUString m_sModuleName;
-    void retrieveObjects() throw( css::uno::RuntimeException );
-public:
-    ScVbaCommandBars( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, const css::uno::Reference< css::container::XIndexAccess > xIndexAccess );
-
-    sal_Bool checkToolBarExist( rtl::OUString sToolBarName );
-    rtl::OUString GetModuleName(){ return m_sModuleName; };
-    css::uno::Reference< css::container::XNameAccess > GetWindows() 
-    { 
-        retrieveObjects();
-        return m_xNameAccess; 
-    };
-    // XCommandBars
-    virtual css::uno::Reference< ov::XCommandBar > SAL_CALL Add( const css::uno::Any& Name, const css::uno::Any& Position, const css::uno::Any& MenuBar, const css::uno::Any& Temporary ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
-    // XEnumerationAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
-    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
-
-    virtual sal_Int32 SAL_CALL getCount() throw(css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& aIndex, const css::uno::Any& /*aIndex2*/ ) throw( css::uno::RuntimeException);
-    // XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-
-#endif//SC_VBA_COMMANDBARS_HXX
diff --git a/sc/source/ui/vba/vbacomment.hxx b/sc/source/ui/vba/vbacomment.hxx
index b22aca9..91d8a8a 100644
--- a/sc/source/ui/vba/vbacomment.hxx
+++ b/sc/source/ui/vba/vbacomment.hxx
@@ -36,7 +36,7 @@
 #include <com/sun/star/table/XCellRange.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XComment > ScVbaComment_BASE;
 
diff --git a/sc/source/ui/vba/vbacomments.hxx b/sc/source/ui/vba/vbacomments.hxx
index 4e928b8..f4360c9 100644
--- a/sc/source/ui/vba/vbacomments.hxx
+++ b/sc/source/ui/vba/vbacomments.hxx
@@ -31,8 +31,8 @@
 
 #include <ooo/vba/excel/XComments.hpp>
 
-#include "vbahelper.hxx"
-#include "vbacollectionimpl.hxx"
+#include "excelvbahelper.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 #include "vbacomment.hxx"
 
 typedef CollTestImplHelper< ov::excel::XComments > ScVbaComments_BASE;
diff --git a/sc/source/ui/vba/vbacondition.hxx b/sc/source/ui/vba/vbacondition.hxx
index 62f4b11..ec5500e 100644
--- a/sc/source/ui/vba/vbacondition.hxx
+++ b/sc/source/ui/vba/vbacondition.hxx
@@ -28,7 +28,7 @@
 #define SC_VBA_CONDITION_HXX
 #include <com/sun/star/sheet/XSheetCondition.hpp> 
 #include <com/sun/star/sheet/XCellRangeAddressable.hpp> 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 #include <com/sun/star/sheet/ConditionOperator.hpp>
 
 template< typename Ifc1 >
diff --git a/sc/source/ui/vba/vbacontrol.cxx b/sc/source/ui/vba/vbacontrol.cxx
index 13941d7..e69de29 100644
--- a/sc/source/ui/vba/vbacontrol.cxx
+++ b/sc/source/ui/vba/vbacontrol.cxx
@@ -1,465 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/form/FormComponentType.hpp>
-#include <com/sun/star/awt/XControlModel.hpp>
-#include <com/sun/star/awt/XControl.hpp>
-#include <com/sun/star/awt/XWindow2.hpp>
-#include <com/sun/star/lang/XEventListener.hpp>
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/frame/XModel.hpp>
-#include <com/sun/star/view/XControlAccess.hpp>
-#include <com/sun/star/container/XChild.hpp>
-#include <com/sun/star/form/binding/XBindableValue.hpp>
-#include <com/sun/star/form/binding/XListEntrySink.hpp>
-#include <com/sun/star/table/CellAddress.hpp>
-#include <com/sun/star/table/CellRangeAddress.hpp>
-#ifdef VBA_OOBUILD_HACK
-#include <svtools/bindablecontrolhelper.hxx>
-#endif
-#include"vbacontrol.hxx"
-#include"vbacombobox.hxx"
-#include "vbabutton.hxx"
-#include "vbalabel.hxx"
-#include "vbatextbox.hxx"
-#include "vbaradiobutton.hxx"
-#include "vbalistbox.hxx"
-#include "vbatogglebutton.hxx"
-#include "vbacheckbox.hxx"
-#include "vbaframe.hxx"
-#include "vbascrollbar.hxx"
-#include "vbaprogressbar.hxx"
-#include "vbamultipage.hxx"
-#include "vbaspinbutton.hxx"
-#include "vbaimage.hxx"
-
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-uno::Reference< css::awt::XWindowPeer > 
-ScVbaControl::getWindowPeer() throw (uno::RuntimeException)
-{
-    uno::Reference< drawing::XControlShape > xControlShape( m_xControl, uno::UNO_QUERY );
-
-    uno::Reference< awt::XControlModel > xControlModel;
-    uno::Reference< css::awt::XWindowPeer >  xWinPeer;
-    if ( !xControlShape.is() ) 
-    { 
-        // would seem to be a Userform control
-        uno::Reference< awt::XControl > xControl( m_xControl, uno::UNO_QUERY_THROW );
-        xWinPeer =  xControl->getPeer();
-    return xWinPeer;
-    }
-    // form control
-    xControlModel.set( xControlShape->getControl(), uno::UNO_QUERY_THROW );
-
-    uno::Reference< view::XControlAccess > xControlAccess( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    try
-    {
-        uno::Reference< awt::XControl > xControl( xControlAccess->getControl( xControlModel ), uno::UNO_QUERY );
-        xWinPeer =  xControl->getPeer();
-    }
-    catch( uno::Exception )
-    {
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "The Control does not exsit" ),
-                uno::Reference< uno::XInterface >() );
-    }
-    return xWinPeer;
-}
-
-//ScVbaControlListener
-class ScVbaControlListener: public cppu::WeakImplHelper1< lang::XEventListener >
-{
-private:
-    ScVbaControl *pControl;
-public:
-    ScVbaControlListener( ScVbaControl *pTmpControl );
-    virtual ~ScVbaControlListener();
-    virtual void SAL_CALL disposing( const lang::EventObject& rEventObject ) throw( uno::RuntimeException );
-};
-
-ScVbaControlListener::ScVbaControlListener( ScVbaControl *pTmpControl ): pControl( pTmpControl )
-{
-}
-
-ScVbaControlListener::~ScVbaControlListener()
-{
-}
-
-void SAL_CALL
-ScVbaControlListener::disposing( const lang::EventObject& ) throw( uno::RuntimeException )
-{
-    if( pControl )
-    {
-        pControl->removeResouce();
-        pControl = NULL;
-    }
-}
-
-//ScVbaControl
-
-ScVbaControl::ScVbaControl( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< ::uno::XInterface >& xControl,  const css::uno::Reference< css::frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ControlImpl_BASE( xParent, xContext ),  m_xControl( xControl ), m_xModel( xModel )
-{
-    //add listener
-    m_xEventListener.set( new ScVbaControlListener( this ) );
-    setGeometryHelper( pGeomHelper );
-    uno::Reference< lang::XComponent > xComponent( m_xControl, uno::UNO_QUERY_THROW );
-    xComponent->addEventListener( m_xEventListener );
-   
-    //init m_xProps
-    uno::Reference< drawing::XControlShape > xControlShape( m_xControl, uno::UNO_QUERY ) ;
-    uno::Reference< awt::XControl> xUserFormControl( m_xControl, uno::UNO_QUERY ) ;
-    if ( xControlShape.is() ) // form control
-        m_xProps.set( xControlShape->getControl(), uno::UNO_QUERY_THROW );
-    else if ( xUserFormControl.is() ) // userform control
-        m_xProps.set( xUserFormControl->getModel(), uno::UNO_QUERY_THROW );
-}
-
-ScVbaControl::~ScVbaControl()
-{
-    if( m_xControl.is() )
-{
-        uno::Reference< lang::XComponent > xComponent( m_xControl, uno::UNO_QUERY_THROW );
-    xComponent->removeEventListener( m_xEventListener );
-}
-}
-
-void 
-ScVbaControl::setGeometryHelper( AbstractGeometryAttributes* pHelper )
-{
-    mpGeometryHelper.reset( pHelper );
-}
-
-void ScVbaControl::removeResouce() throw( uno::RuntimeException )
-{
-    uno::Reference< lang::XComponent > xComponent( m_xControl, uno::UNO_QUERY_THROW );
-    xComponent->removeEventListener( m_xEventListener );
-    m_xControl= NULL;
-    m_xProps = NULL;
-}
-
-//In design model has different behavior
-sal_Bool SAL_CALL ScVbaControl::getEnabled() throw (uno::RuntimeException)
-{
-    uno::Any aValue = m_xProps->getPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Enabled" ) ) );
-    sal_Bool bRet = false;
-    aValue >>= bRet;
-    return bRet;
-}
-
-void SAL_CALL ScVbaControl::setEnabled( sal_Bool bVisible ) throw (uno::RuntimeException)
-{
-    uno::Any aValue( bVisible );
-    m_xProps->setPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Enabled" ) ), aValue);
-
-}
-
-sal_Bool SAL_CALL ScVbaControl::getVisible() throw (uno::RuntimeException)
-{
-    sal_Bool bVisible = sal_False;
-    m_xProps->getPropertyValue(rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "EnableVisible" ) ) ) >>= bVisible;
-    return bVisible;
-}
-
-void SAL_CALL ScVbaControl::setVisible( sal_Bool bVisible ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "EnableVisible" ) ), uno::makeAny( bVisible ) );
-}
-double SAL_CALL ScVbaControl::getHeight() throw (uno::RuntimeException)
-{
-    return mpGeometryHelper->getHeight();
-}
-void SAL_CALL ScVbaControl::setHeight( double _height ) throw (uno::RuntimeException)
-{
-    mpGeometryHelper->setHeight( _height );
-}
-
-double SAL_CALL ScVbaControl::getWidth() throw (uno::RuntimeException)
-{
-    return mpGeometryHelper->getWidth();
-}
-void SAL_CALL ScVbaControl::setWidth( double _width ) throw (uno::RuntimeException)
-{
-    mpGeometryHelper->setWidth( _width );
-}
-
-double SAL_CALL
-ScVbaControl::getLeft() throw (uno::RuntimeException)
-{
-    return mpGeometryHelper->getLeft();
-}
-
-void SAL_CALL
-ScVbaControl::setLeft( double _left ) throw (uno::RuntimeException)
-{
-    mpGeometryHelper->setLeft( _left );
-
-}
-
-double SAL_CALL
-ScVbaControl::getTop() throw (uno::RuntimeException)
-{
-    return mpGeometryHelper->getTop();
-}
-
-void SAL_CALL
-ScVbaControl::setTop( double _top ) throw (uno::RuntimeException)
-{
-    mpGeometryHelper->setTop( _top );
-}
-
-uno::Reference< uno::XInterface > SAL_CALL
-ScVbaControl::getObject() throw (uno::RuntimeException)
-{
-    uno::Reference< msforms::XControl > xRet( this );
-    return xRet;
-}
-
-void SAL_CALL ScVbaControl::SetFocus() throw (uno::RuntimeException) 
-{
-    uno::Reference< awt::XWindow > xWin( m_xControl, uno::UNO_QUERY_THROW );
-    xWin->setFocus();
-}
-
-rtl::OUString SAL_CALL 
-ScVbaControl::getControlSource() throw (uno::RuntimeException)
-{
-// #FIXME I *hate* having these upstream differences
-// but this is necessary until I manage to upstream other
-// dependant parts
-#ifdef VBA_OOBUILD_HACK
-    rtl::OUString sControlSource;
-    uno::Reference< form::binding::XBindableValue > xBindable( m_xProps, uno::UNO_QUERY );
-    if ( xBindable.is() )
-    {
-        try
-        {
-            uno::Reference< lang::XMultiServiceFactory > xFac( m_xModel, uno::UNO_QUERY_THROW );
-            uno::Reference< beans::XPropertySet > xConvertor( xFac->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.table.CellAddressConversion" ))), uno::UNO_QUERY );
-            uno::Reference< beans::XPropertySet > xProps( xBindable->getValueBinding(), uno::UNO_QUERY_THROW );
-            table::CellAddress aAddress;
-            xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BoundCell") ) ) >>= aAddress;
-            xConvertor->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Address") ), uno::makeAny( aAddress ) );
-                    xConvertor->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("XL_A1_Representation") ) ) >>= sControlSource;
-        }
-        catch( uno::Exception& )
-        {
-        }	
-    }
-    return sControlSource;
-#else
-    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("getControlSource not supported") ), uno::Reference< uno::XInterface >()); // not supported
-#endif
-}
-
-void SAL_CALL 
-ScVbaControl::setControlSource( const rtl::OUString& _controlsource ) throw (uno::RuntimeException)
-{
-#ifdef VBA_OOBUILD_HACK
-    rtl::OUString sEmpty;
-    svt::BindableControlHelper::ApplyListSourceAndBindableData( m_xModel, m_xProps, _controlsource, sEmpty );
-#else
-    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("setControlSource not supported ") ).concat( _controlsource ), uno::Reference< uno::XInterface >()); // not supported
-#endif
-}
-
-rtl::OUString SAL_CALL 
-ScVbaControl::getRowSource() throw (uno::RuntimeException)
-{
-#ifdef VBA_OOBUILD_HACK
-    rtl::OUString sRowSource;
-    uno::Reference< form::binding::XListEntrySink > xListSink( m_xProps, uno::UNO_QUERY );
-    if ( xListSink.is() )
-    {
-        try
-        {
-            uno::Reference< lang::XMultiServiceFactory > xFac( m_xModel, uno::UNO_QUERY_THROW );
-            uno::Reference< beans::XPropertySet > xConvertor( xFac->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.table.CellRangeAddressConversion" ))), uno::UNO_QUERY );
-
-            uno::Reference< beans::XPropertySet > xProps( xListSink->getListEntrySource(), uno::UNO_QUERY_THROW );
-            table::CellRangeAddress aAddress;
-            xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CellRange") ) ) >>= aAddress;
-            xConvertor->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Address")), uno::makeAny( aAddress ) );
-            xConvertor->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("XL_A1_Representation") ) ) >>= sRowSource;
-        }
-        catch( uno::Exception& )
-        {
-        }	
-    }
-    return sRowSource;
-#else
-    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("getRowSource not supported") ), uno::Reference< uno::XInterface >()); // not supported
-#endif
-}
-
-void SAL_CALL 
-ScVbaControl::setRowSource( const rtl::OUString& _rowsource ) throw (uno::RuntimeException)
-{
-#ifdef VBA_OOBUILD_HACK
-    rtl::OUString sEmpty;
-    svt::BindableControlHelper::ApplyListSourceAndBindableData( m_xModel, m_xProps, sEmpty, _rowsource );
-#else
-    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("setRowSource not supported ") ).concat( _rowsource ), uno::Reference< uno::XInterface >()); // not supported
-#endif
-}
-
-rtl::OUString SAL_CALL 
-ScVbaControl::getName() throw (uno::RuntimeException)
-{
-    rtl::OUString sName;
-    m_xProps->getPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Name" ) ) ) >>= sName;
-    return sName;
-
-}
-
-void SAL_CALL
-ScVbaControl::setName( const rtl::OUString& _name ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Name" ) ), uno::makeAny( _name ) );
-    }
-//ScVbaControlFactory
-
-ScVbaControlFactory::ScVbaControlFactory( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel ): m_xContext( xContext ), m_xControl( xControl ), m_xModel( xModel )
-{
-}
-
-ScVbaControl* ScVbaControlFactory::createControl()  throw (uno::RuntimeException)
-{
-    return createControl( m_xModel );
-}
-ScVbaControl* ScVbaControlFactory::createControl( const uno::Reference< uno::XInterface >& xParent )  throw (uno::RuntimeException)
-{
-    uno::Reference< drawing::XControlShape > xControlShape( m_xControl, uno::UNO_QUERY );
-    if ( xControlShape.is() ) // form controls
-        return createControl( xControlShape, xParent );
-    uno::Reference< awt::XControl > xControl( m_xControl, uno::UNO_QUERY );
-    if ( !xControl.is() )
-        throw uno::RuntimeException(); // really we should be more informative
-    return createControl( xControl, xParent );
-    
-}
-
-ScVbaControl* ScVbaControlFactory::createControl(const uno::Reference< drawing::XControlShape >& xControlShape,  const uno::Reference< uno::XInterface >& /*xParent*/ )  throw (uno::RuntimeException)
-{
-    uno::Reference< beans::XPropertySet > xProps( xControlShape->getControl(), uno::UNO_QUERY_THROW );
-    sal_Int32 nClassId = -1;
-    const static rtl::OUString sClassId( RTL_CONSTASCII_USTRINGPARAM("ClassId") );
-    xProps->getPropertyValue( sClassId ) >>= nClassId;
-    uno::Reference< XHelperInterface > xVbaParent; // #FIXME - should be worksheet I guess
-    switch( nClassId )
-    {
-        case form::FormComponentType::COMBOBOX:
-            return new ScVbaComboBox( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::COMMANDBUTTON:
-            return new ScVbaButton( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::FIXEDTEXT:
-            return new ScVbaLabel( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::TEXTFIELD:
-            return new ScVbaTextBox( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::RADIOBUTTON:
-            return new ScVbaRadioButton( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::LISTBOX:
-            return new ScVbaListBox( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::SPINBUTTON:
-            return new ScVbaSpinButton( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        case form::FormComponentType::IMAGECONTROL:
-            return new ScVbaImage( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
-        default:
-            throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Donot support this Control Type." ), uno::Reference< uno::XInterface >() );
-    }
-}
-
-ScVbaControl* ScVbaControlFactory::createControl( const uno::Reference< awt::XControl >& xControl,  const uno::Reference< uno::XInterface >& xParent  )  throw (uno::RuntimeException)
-{
-    uno::Reference< beans::XPropertySet > xProps( xControl->getModel(), uno::UNO_QUERY_THROW );
-    uno::Reference< lang::XServiceInfo > xServiceInfo( xProps, uno::UNO_QUERY_THROW );
-    ScVbaControl* pControl = NULL;
-    uno::Reference< XHelperInterface > xVbaParent; // #FIXME - should be worksheet I guess
-    if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCheckBoxModel") ) ) )
-    pControl = new ScVbaCheckbox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );	
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ) ) )
-    pControl = new ScVbaRadioButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );	
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlEditModel") ) ) )
-        pControl = new ScVbaTextBox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ), true );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlButtonModel") ) ) )
-    {
-        sal_Bool bToggle = sal_False;
-        xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Toggle") ) ) >>= bToggle;
-        if ( bToggle )
-            pControl = new ScVbaToggleButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-        else
-            pControl = new ScVbaButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    }
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ) ) )
-        pControl = new ScVbaComboBox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ), true );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) ) )
-    pControl = new ScVbaListBox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedTextModel") ) ) )
-    pControl = new ScVbaLabel( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlImageControlModel") ) ) )
-    pControl = new ScVbaImage( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlProgressBarModel") ) ) )
-    pControl = new ScVbaProgressBar( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
-    pControl = new ScVbaFrame( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ) ) )
-    pControl = new ScVbaScrollBar( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ) )
-    pControl = new ScVbaMultiPage( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ), xParent );
-    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ) ) )
-    pControl = new ScVbaSpinButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
-    else
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Unsupported control " ), uno::Reference< uno::XInterface >() );
-    return pControl;
-}
-
-rtl::OUString& 
-ScVbaControl::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaControl") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaControl::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Control" ) );
-    }
-    return aServiceNames;
-}
-
-
diff --git a/sc/source/ui/vba/vbacontrol.hxx b/sc/source/ui/vba/vbacontrol.hxx
index b8d5b66..e69de29 100644
--- a/sc/source/ui/vba/vbacontrol.hxx
+++ b/sc/source/ui/vba/vbacontrol.hxx
@@ -1,108 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_CONTROL_HXX
-#define SC_VBA_CONTROL_HXX
-
-#include <cppuhelper/implbase1.hxx>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <com/sun/star/uno/XComponentContext.hpp>
-#include <com/sun/star/script/XDefaultProperty.hpp>
-#include <com/sun/star/drawing/XControlShape.hpp>
-#include <com/sun/star/awt/XControl.hpp>
-#include <com/sun/star/awt/XWindowPeer.hpp>
-#include <ooo/vba/msforms/XControl.hpp>
-
-#include "vbahelper.hxx"
-#include "vbahelperinterface.hxx"
-
-//typedef ::cppu::WeakImplHelper1< ov::msforms::XControl > ControlImpl_BASE;
-typedef InheritedHelperInterfaceImpl1< ov::msforms::XControl > ControlImpl_BASE;
-
-class ScVbaControl : public ControlImpl_BASE
-{
-private:
-    com::sun::star::uno::Reference< com::sun::star::lang::XEventListener > m_xEventListener;
-protected:
-    std::auto_ptr< ov::AbstractGeometryAttributes > mpGeometryHelper;
-    css::uno::Reference< css::beans::XPropertySet > m_xProps;
-    css::uno::Reference< css::uno::XInterface > m_xControl;
-    css::uno::Reference< css::frame::XModel > m_xModel;
-
-    virtual css::uno::Reference< css::awt::XWindowPeer > getWindowPeer() throw (css::uno::RuntimeException);
-public:
-    ScVbaControl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, 
-                    const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pHelper );
-    virtual ~ScVbaControl();
-    // This class will own the helper, so make sure it is allocated from 
-    // the heap
-    void setGeometryHelper( ov::AbstractGeometryAttributes* pHelper );
-    // XControl
-    virtual sal_Bool SAL_CALL getEnabled() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setEnabled( sal_Bool _enabled ) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getHeight() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setHeight( double _height ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getWidth() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setWidth( double _width ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getLeft() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setLeft( double _left ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getTop() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setTop( double _top ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL SetFocus(  ) throw (css::uno::RuntimeException);
-
-    virtual css::uno::Reference< css::uno::XInterface > SAL_CALL getObject() throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getControlSource() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setControlSource( const rtl::OUString& _controlsource ) throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getRowSource() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setName( const rtl::OUString& _name ) throw (css::uno::RuntimeException);
-    //remove resouce because ooo.vba.excel.XControl is a wrapper of com.sun.star.drawing.XControlShape
-    virtual void removeResouce() throw( css::uno::RuntimeException );
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-
-
-class ScVbaControlFactory
-{
-public:
-    ScVbaControlFactory( const css::uno::Reference< css::uno::XComponentContext >& xContext, 
-                    const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel );
-    ScVbaControl* createControl()  throw ( css::uno::RuntimeException );
-    ScVbaControl* createControl( const css::uno::Reference< css::uno::XInterface >& xParent )  throw ( css::uno::RuntimeException );
-private:
-    ScVbaControl* createControl( const css::uno::Reference< css::awt::XControl >&, const css::uno::Reference< css::uno::XInterface >&  )  throw ( css::uno::RuntimeException );
-    ScVbaControl* createControl( const css::uno::Reference< css::drawing::XControlShape >&, const css::uno::Reference< css::uno::XInterface >& )  throw ( css::uno::RuntimeException );
-    css::uno::Reference< css::uno::XComponentContext > m_xContext;
-    css::uno::Reference< css::uno::XInterface > m_xControl;
-    css::uno::Reference< css::frame::XModel > m_xModel;
-};
-
-#endif//SC_VBA_CONTROL_HXX
diff --git a/sc/source/ui/vba/vbacontrols.cxx b/sc/source/ui/vba/vbacontrols.cxx
index 1c8111f..e69de29 100644
--- a/sc/source/ui/vba/vbacontrols.cxx
+++ b/sc/source/ui/vba/vbacontrols.cxx
@@ -1,224 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-
-#include "vbacontrols.hxx"
-#include "vbacontrol.hxx"
-#include <cppuhelper/implbase2.hxx>
-#include <com/sun/star/awt/XControlContainer.hpp>
-#include <hash_map>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-typedef ::cppu::WeakImplHelper2< container::XNameAccess, container::XIndexAccess > ArrayWrapImpl;
-
-typedef  std::hash_map< rtl::OUString, sal_Int32, ::rtl::OUStringHash,
-    ::std::equal_to< ::rtl::OUString >  > ControlIndexMap;
-typedef  std::vector< uno::Reference< awt::XControl > > ControlVec;
-
-class ControlArrayWrapper : public ArrayWrapImpl
-{
-    uno::Reference< awt::XControlContainer > mxDialog;
-    uno::Sequence< ::rtl::OUString > msNames;
-    ControlVec mControls;
-    ControlIndexMap mIndices;
-
-    rtl::OUString getControlName( const uno::Reference< awt::XControl >& xCtrl )
-    {
-        uno::Reference< beans::XPropertySet > xProp( xCtrl->getModel(), uno::UNO_QUERY );
-        rtl::OUString sName;
-        xProp->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Name" ) ) ) >>= sName;
-        return sName;
-    }
-
-public:
-
-    ControlArrayWrapper( const uno::Reference< awt::XControl >& xDialog )
-    {
-        mxDialog.set( xDialog, uno::UNO_QUERY_THROW );
-        uno::Sequence< uno::Reference< awt::XControl > > sXControls = mxDialog->getControls();
-    
-        msNames.realloc( sXControls.getLength() );
-        for ( sal_Int32 i = 0; i < sXControls.getLength(); ++i )
-        {
-            uno::Reference< awt::XControl > xCtrl = sXControls[ i ];
-            msNames[ i ] = getControlName( xCtrl );
-            mControls.push_back( xCtrl );
-            mIndices[ msNames[ i ] ] = i;
-        }
-    }
-    
-    // XElementAccess
-    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
-    {
-        return awt::XControl::static_type(0);
-    }
-    
-    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) 
-    {
-        return ( mControls.size() > 0 );
-    }
-    
-    // XNameAcess 
-    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
-    {
-        if ( !hasByName( aName ) )
-            throw container::NoSuchElementException();
-        return getByIndex( mIndices[ aName ] );
-    }
-    
-    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
-    {
-        return msNames;
-    }
-    
-    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException)
-    {
-        ControlIndexMap::iterator it = mIndices.find( aName );
-        return it != mIndices.end();
-    }
-    
-    // XElementAccess
-    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (css::uno::RuntimeException)
-    {
-        return mControls.size();
-    }
-    
-    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
-    {
-        if ( Index < 0 || Index >= static_cast< sal_Int32 >( mControls.size() ) )
-            throw lang::IndexOutOfBoundsException();
-        return uno::makeAny( mControls[ Index ] );
-    }
-};
-
-
-class ControlsEnumWrapper : public EnumerationHelper_BASE
-{
-    uno::Reference<XHelperInterface > m_xParent;
-    uno::Reference<uno::XComponentContext > m_xContext;
-    uno::Reference<container::XIndexAccess > m_xIndexAccess;
-    uno::Reference<awt::XControl > m_xDlg;
-    sal_Int32 nIndex;
-
-public:
-
-    ControlsEnumWrapper(  const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xIndexAccess, const uno::Reference< awt::XControl >& xDlg ) :  m_xParent( xParent ), m_xContext( xContext), m_xIndexAccess( xIndexAccess ), m_xDlg( xDlg ), nIndex( 0 ) {}
-
-    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
-    {
-        return ( nIndex < m_xIndexAccess->getCount() );
-    }
-
-    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
-    {
-        if ( nIndex < m_xIndexAccess->getCount() )
-        {
-            uno::Reference< frame::XModel > xModel;
-            uno::Reference< uno::XInterface > xControl;
-            m_xIndexAccess->getByIndex( nIndex++ ) >>= xControl;
-            // Create control from awt::XControl
-            ScVbaControlFactory aFac( m_xContext, xControl,  xModel );
-            uno::Reference< msforms::XControl > xVBAControl( aFac.createControl( m_xDlg->getModel() ) );
-            return uno::makeAny( xVBAControl );
-        }
-        throw container::NoSuchElementException();
-    }
-
-};
-
-
-uno::Reference<container::XIndexAccess >
-lcl_controlsWrapper( const uno::Reference< awt::XControl >& xDlg )
-{
-    return new ControlArrayWrapper( xDlg );
-}
-
-ScVbaControls::ScVbaControls( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext,
-                const css::uno::Reference< awt::XControl >& xDialog )
-            : ControlsImpl_BASE( xParent, xContext, lcl_controlsWrapper( xDialog  ) )
-{
-    mxDialog.set( xDialog, uno::UNO_QUERY_THROW );
-}
-
-uno::Reference< container::XEnumeration >
-ScVbaControls::createEnumeration() throw (uno::RuntimeException)
-{
-    uno::Reference< container::XEnumeration > xEnum( new ControlsEnumWrapper( mxParent, mxContext, m_xIndexAccess, mxDialog ) );
-    if ( !xEnum.is() )
-        throw uno::RuntimeException();
-    return xEnum;
-}
-
-uno::Any
-ScVbaControls::createCollectionObject( const css::uno::Any& aSource )
-{
-    // Create control from awt::XControl
-    uno::Reference< awt::XControl > xControl;
-    aSource >>= xControl;
-    uno::Reference< frame::XModel > xModel;
-    ScVbaControlFactory aFac( mxContext, xControl,  xModel );
-    uno::Reference< msforms::XControl > xVBAControl( aFac.createControl( mxDialog->getModel() ) );
-    return uno::makeAny( xVBAControl );
-}
-
-void SAL_CALL 
-ScVbaControls::Move( double cx, double cy ) throw (uno::RuntimeException)
-{
-    uno::Reference< container::XEnumeration > xEnum( createEnumeration() );
-    while ( xEnum->hasMoreElements() )
-    {
-        uno::Reference< msforms::XControl > xControl( xEnum->nextElement(), uno::UNO_QUERY_THROW );
-        xControl->setLeft( xControl->getLeft() + cx );
-        xControl->setTop( xControl->getTop() + cy ); 
-    }
-}
-
-uno::Type
-ScVbaControls::getElementType() throw (uno::RuntimeException)
-{
-    return ooo::vba::msforms::XControl::static_type(0);
-}
-rtl::OUString& 
-ScVbaControls::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaControls") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaControls::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Controls" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbacontrols.hxx b/sc/source/ui/vba/vbacontrols.hxx
index ee87624..e69de29 100644
--- a/sc/source/ui/vba/vbacontrols.hxx
+++ b/sc/source/ui/vba/vbacontrols.hxx
@@ -1,59 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_CONTROLS_HXX
-#define SC_VBA_CONTROLS_HXX
-
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XControls.hpp>
-#include <com/sun/star/awt/XControl.hpp>
-
-#include "vbacollectionimpl.hxx"
-#include "vbahelper.hxx"
-
-typedef CollTestImplHelper< ov::msforms::XControls > ControlsImpl_BASE;
-
-class ScVbaControls : public ControlsImpl_BASE
-{
-    css::uno::Reference< css::awt::XControl > mxDialog;
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-public:
-    ScVbaControls( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, 
-                    const css::uno::Reference< css::awt::XControl >& xDialog );
-    // XControls
-     virtual void SAL_CALL Move( double cx, double cy ) throw (css::uno::RuntimeException);
-    // XEnumerationAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
-
-    // ScVbaCollectionBaseImpl
-    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
-    
-};
-#endif //SC_VBA_OLEOBJECTS_HXX
-
diff --git a/sc/source/ui/vba/vbadialog.cxx b/sc/source/ui/vba/vbadialog.cxx
index 01023cc..8c3881b 100644
--- a/sc/source/ui/vba/vbadialog.cxx
+++ b/sc/source/ui/vba/vbadialog.cxx
@@ -24,39 +24,11 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include <comphelper/processfactory.hxx>
-
-#include <com/sun/star/lang/XMultiComponentFactory.hpp>
-#include <com/sun/star/frame/XModel.hpp>
-#include <ooo/vba/excel/XApplication.hpp>
-
-#include <tools/string.hxx>
-
-#include "vbahelper.hxx"
 #include "vbadialog.hxx"
-#include "vbaglobals.hxx"
 
 using namespace ::ooo::vba;
 using namespace ::com::sun::star;
 
-// fails silently
-void
-ScVbaDialog::Show() throw(uno::RuntimeException)
-{
-    rtl::OUString aURL;
-        uno::Reference< frame::XModel > xModel = getCurrentDocument();
-    if ( xModel.is() )
-    {
-        aURL = mapIndexToName( mnIndex );
-        if( aURL.getLength()  )
-            throw uno::RuntimeException(
-                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( " Unable to open the specified dialog " ) ),
-                uno::Reference< XInterface > () );
-        dispatchRequests( xModel, aURL );
-    }
-}	
-
-
 static const rtl::OUString aStringList[]=
 {
     rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:Open" ) ),
@@ -99,7 +71,7 @@ ScVbaDialog::mapIndexToName( sal_Int32 nIndex )
 rtl::OUString& 
 ScVbaDialog::getServiceImplName()
 {
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaPivotTable") );
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaDialog") );
     return sImplName;
 }
 
@@ -110,7 +82,7 @@ ScVbaDialog::getServiceNames()
     if ( aServiceNames.getLength() == 0 )
     {
         aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.PivotTable" ) );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Dialog" ) );
     }
     return aServiceNames;
 }
diff --git a/sc/source/ui/vba/vbadialog.hxx b/sc/source/ui/vba/vbadialog.hxx
index 8dd149d..40f4a4a 100644
--- a/sc/source/ui/vba/vbadialog.hxx
+++ b/sc/source/ui/vba/vbadialog.hxx
@@ -28,27 +28,20 @@
 #define SC_VBA_DIALOG_HXX
 
 #include <cppuhelper/implbase1.hxx>
-
-#include <com/sun/star/uno/XComponentContext.hpp>
-#include <ooo/vba/XGlobals.hpp>
-#include <ooo/vba/excel/XApplication.hpp>
 #include <ooo/vba/excel/XDialog.hpp>
- 
-#include "vbahelperinterface.hxx"
-#include "vbadialog.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbadialogbase.hxx>
 
-typedef InheritedHelperInterfaceImpl1< ov::excel::XDialog > ScVbaDialog_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaDialogBase, ov::excel::XDialog > ScVbaDialog_BASE;
 
 class ScVbaDialog : public ScVbaDialog_BASE
 {
-    sal_Int32 mnIndex;
 public:
-    ScVbaDialog( const css::uno::Reference< ov::XHelperInterface >& xParent, sal_Int32 nIndex, const css::uno::Reference< css::uno::XComponentContext > xContext ):ScVbaDialog_BASE( xParent, xContext ), mnIndex( nIndex ) {}
+    ScVbaDialog( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, const css::uno::Reference< css::frame::XModel >& xModel, sal_Int32 nIndex ):ScVbaDialog_BASE( xParent, xContext, xModel, nIndex ) {}
     virtual ~ScVbaDialog() {}
 
     // Methods
-    virtual void SAL_CALL Show() throw (css::uno::RuntimeException);
-    rtl::OUString mapIndexToName( sal_Int32 nIndex );
+    virtual rtl::OUString mapIndexToName( sal_Int32 nIndex );
     // XHelperInterface
     virtual rtl::OUString& getServiceImplName();
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
diff --git a/sc/source/ui/vba/vbadialogs.cxx b/sc/source/ui/vba/vbadialogs.cxx
index 8d0bef8..53b02c2 100644
--- a/sc/source/ui/vba/vbadialogs.cxx
+++ b/sc/source/ui/vba/vbadialogs.cxx
@@ -24,18 +24,8 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include <comphelper/processfactory.hxx>
-
-#include <com/sun/star/lang/XMultiComponentFactory.hpp>
-#include <com/sun/star/frame/XModel.hpp>
-#include <ooo/vba/excel/XApplication.hpp>
 #include <ooo/vba/excel/XDialog.hpp>
-
-#include <tools/string.hxx>
-
-#include "vbahelper.hxx"
 #include "vbadialogs.hxx"
-#include "vbaglobals.hxx"
 #include "vbadialog.hxx"
 
 using namespace ::ooo::vba;
@@ -46,26 +36,19 @@ ScVbaDialogs::Dummy() throw (uno::RuntimeException)
 {
 }
 
-::sal_Int32
-ScVbaDialogs::getCount() throw (uno::RuntimeException)
-{
-    //#TODO #FIXEME
-    //SC_VBA_STUB();
-    return 0;
-}
-
 uno::Any
 ScVbaDialogs::Item( const uno::Any &aItem ) throw (uno::RuntimeException)
 {
     sal_Int32 nIndex = 0;
     aItem >>= nIndex;
-    uno::Reference< excel::XDialog > aDialog( new ScVbaDialog( uno::Reference< XHelperInterface >( ScVbaGlobals::getGlobalsImpl( mxContext )->getApplication(), uno::UNO_QUERY_THROW ), nIndex, mxContext ) );
+    uno::Reference< excel::XDialog > aDialog( new ScVbaDialog( uno::Reference< XHelperInterface >( Application(),uno::UNO_QUERY_THROW ), mxContext, m_xModel, nIndex ) );
     return uno::Any( aDialog );
 }
+
 rtl::OUString& 
 ScVbaDialogs::getServiceImplName()
 {
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaWorksheet") );
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaDialogs") );
     return sImplName;
 }
 
@@ -76,7 +59,7 @@ ScVbaDialogs::getServiceNames()
     if ( aServiceNames.getLength() == 0 )
     {
         aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Worksheet" ) );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Dialogs" ) );
     }
     return aServiceNames;
 }
diff --git a/sc/source/ui/vba/vbadialogs.hxx b/sc/source/ui/vba/vbadialogs.hxx
index bcac821..9aab5da 100644
--- a/sc/source/ui/vba/vbadialogs.hxx
+++ b/sc/source/ui/vba/vbadialogs.hxx
@@ -27,25 +27,22 @@
 #ifndef SC_VBA_DIALOGS_HXX
 #define SC_VBA_DIALOGS_HXX
 
-#include <cppuhelper/implbase1.hxx>
-
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <ooo/vba/excel/XDialogs.hpp>
 #include <ooo/vba/XCollection.hpp>
-#include "vbahelperinterface.hxx" 
-
-class ScModelObj;
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbadialogsbase.hxx>
+#include <cppuhelper/implbase1.hxx>
 
-typedef InheritedHelperInterfaceImpl1< ov::excel::XDialogs > ScVbaDialogs_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaDialogsBase, ov::excel::XDialogs > ScVbaDialogs_BASE;
 
 class ScVbaDialogs : public ScVbaDialogs_BASE
 {
 public:
-    ScVbaDialogs( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > &xContext ): ScVbaDialogs_BASE( xParent, xContext ) {} 
+    ScVbaDialogs( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > &xContext, const css::uno::Reference< css::frame::XModel >& xModel ): ScVbaDialogs_BASE( xParent, xContext, xModel ) {}
     virtual ~ScVbaDialogs() {}
 
     // XCollection
-    virtual ::sal_Int32 SAL_CALL getCount() throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index ) throw (css::uno::RuntimeException);
 
     // XDialogs
diff --git a/sc/source/ui/vba/vbafillformat.cxx b/sc/source/ui/vba/vbafillformat.cxx
index cc332d9..e69de29 100644
--- a/sc/source/ui/vba/vbafillformat.cxx
+++ b/sc/source/ui/vba/vbafillformat.cxx
@@ -1,199 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <com/sun/star/awt/Gradient.hpp>
-#include <com/sun/star/awt/GradientStyle.hpp>
-#include <ooo/vba/office/MsoGradientStyle.hpp>
-#include "vbafillformat.hxx"
-#include "vbacolorformat.hxx"
-
-using namespace ooo::vba;
-using namespace com::sun::star;
-
-ScVbaFillFormat::ScVbaFillFormat( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape > xShape ) : ScVbaFillFormat_BASE( xParent, xContext ), m_xShape( xShape )
-{
-    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
-    m_nFillStyle = drawing::FillStyle_SOLID;
-    m_nForeColor = 0;
-    m_nBackColor = 0;
-    m_nGradientAngle = 0;
-}
-
-void
-ScVbaFillFormat::setFillStyle( drawing::FillStyle nFillStyle ) throw (uno::RuntimeException)
-{
-    m_nFillStyle = nFillStyle;
-    if( m_nFillStyle == drawing::FillStyle_GRADIENT )
-    {
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillStyle"), uno::makeAny( drawing::FillStyle_GRADIENT ) );
-        awt::Gradient aGradient;
-        // AXIAL
-        // RADIAL
-        // ELLIPTICAL
-        // SQUARE
-        // RECT
-        aGradient.Style = awt::GradientStyle_LINEAR;
-        aGradient.StartColor = ForeColor()->getRGB();
-        aGradient.EndColor = BackColor()->getRGB();
-        aGradient.Angle = m_nGradientAngle;
-        aGradient.Border = 0;
-        aGradient.XOffset = 0;
-        aGradient.YOffset = 0;
-        aGradient.StartIntensity = 100;
-        aGradient.EndIntensity = 100;
-        aGradient.StepCount = 1;
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillGradient"), uno::makeAny( aGradient ) );
-    }
-    else if( m_nFillStyle == drawing::FillStyle_SOLID )
-    {
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillStyle"), uno::makeAny(drawing::FillStyle_SOLID) );
-    }
-}
-
-void
-ScVbaFillFormat::setForeColorAndInternalStyle( sal_Int32 nForeColor ) throw (css::uno::RuntimeException)
-{
-    m_nForeColor = nForeColor;
-    setFillStyle( m_nFillStyle );
-}
-
-// Attributes
-sal_Bool SAL_CALL 
-ScVbaFillFormat::getVisible() throw (uno::RuntimeException)
-{
-    drawing::FillStyle nFillStyle;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("FillStyle") ) >>= nFillStyle;
-    if( nFillStyle == drawing::FillStyle_NONE )
-        return sal_False;
-    return sal_True;
-}
-
-void SAL_CALL 
-ScVbaFillFormat::setVisible( sal_Bool _visible ) throw (uno::RuntimeException)
-{
-    drawing::FillStyle aFillStyle;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("FillStyle") ) >>= aFillStyle;
-    if( !_visible )
-    {
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillStyle"), uno::makeAny( drawing::FillStyle_NONE ) );
-    }
-    else
-    {
-        if( aFillStyle == drawing::FillStyle_NONE )
-        {
-            setFillStyle( m_nFillStyle );
-        }
-    }
-}
-
-double SAL_CALL 
-ScVbaFillFormat::getTransparency() throw (uno::RuntimeException)
-{
-    sal_Int16 nTransparence = 0;
-    double dTransparence = 0;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "FillTransparence" ) ) >>= nTransparence;
-    dTransparence = static_cast<double>( nTransparence );
-    dTransparence /= 100;
-    return dTransparence;
-}
-
-void SAL_CALL 
-ScVbaFillFormat::setTransparency( double _transparency ) throw (uno::RuntimeException)
-{
-    sal_Int16 nTransparence = static_cast< sal_Int16 >( _transparency * 100 );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillTransparence" ), uno::makeAny( nTransparence ) );
-}
-
-
-// Methods
-void SAL_CALL 
-ScVbaFillFormat::Solid() throw (uno::RuntimeException)
-{
-    setFillStyle( drawing::FillStyle_SOLID );
-}
-
-void SAL_CALL 
-ScVbaFillFormat::TwoColorGradient( sal_Int32 style, sal_Int32 /*variant*/ ) throw (uno::RuntimeException)
-{
-    if( style == office::MsoGradientStyle::msoGradientHorizontal )
-    {
-        m_nGradientAngle = 0;
-        setFillStyle( drawing::FillStyle_GRADIENT );
-    }
-    else if( style == office::MsoGradientStyle::msoGradientVertical )
-    {
-        m_nGradientAngle = 900;
-        setFillStyle( drawing::FillStyle_GRADIENT );
-    }
-    else if( style == office::MsoGradientStyle::msoGradientDiagonalDown )
-    {
-        m_nGradientAngle = 450;
-        setFillStyle( drawing::FillStyle_GRADIENT );
-    }
-    else if( style == office::MsoGradientStyle::msoGradientDiagonalUp )
-    {
-        m_nGradientAngle = 900 + 450;
-        setFillStyle( drawing::FillStyle_GRADIENT );
-    }
-}
-
-uno::Reference< msforms::XColorFormat > SAL_CALL 
-ScVbaFillFormat::BackColor() throw (uno::RuntimeException)
-{
-    if( !m_xColorFormat.is() )
-        m_xColorFormat.set( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ColorFormatType::FILLFORMAT_BACKCOLOR ) );
-    return m_xColorFormat;
-}
-
-uno::Reference< msforms::XColorFormat > SAL_CALL 
-ScVbaFillFormat::ForeColor() throw (uno::RuntimeException)
-{
-    if( !m_xColorFormat.is() )
-        m_xColorFormat.set( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ColorFormatType::FILLFORMAT_FORECOLOR ) );
-    return m_xColorFormat;
-}
-
-
-rtl::OUString&
-ScVbaFillFormat::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaFillFormat") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString >
-ScVbaFillFormat::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.FillFormat" ) );
-    }
-    return aServiceNames;
-}
-
diff --git a/sc/source/ui/vba/vbafillformat.hxx b/sc/source/ui/vba/vbafillformat.hxx
index edd5b39..e69de29 100644
--- a/sc/source/ui/vba/vbafillformat.hxx
+++ b/sc/source/ui/vba/vbafillformat.hxx
@@ -1,71 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_XFILLFORMAT_HXX
-#define SC_VBA_XFILLFORMAT_HXX
-
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/drawing/FillStyle.hpp>
-#include <ooo/vba/msforms/XFillFormat.hpp>
-#include "vbahelperinterface.hxx"
-
-typedef InheritedHelperInterfaceImpl1< ov::msforms::XFillFormat > ScVbaFillFormat_BASE;
-
-class ScVbaFillFormat : public ScVbaFillFormat_BASE
-{
-private:
-    css::uno::Reference< css::drawing::XShape > m_xShape;
-    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
-    css::uno::Reference< ov::msforms::XColorFormat > m_xColorFormat;
-    css::drawing::FillStyle m_nFillStyle;
-    sal_Int32 m_nForeColor;
-    sal_Int32 m_nBackColor;
-    sal_Int16 m_nGradientAngle;
-private:
-    void setFillStyle( css::drawing::FillStyle nFillStyle ) throw (css::uno::RuntimeException);
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-
-public:
-    ScVbaFillFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape > xShape );
-
-    void setForeColorAndInternalStyle( sal_Int32 nForeColor ) throw (css::uno::RuntimeException);
-    // Attributes
-    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getTransparency() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setTransparency( double _transparency ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual void SAL_CALL Solid() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL TwoColorGradient( sal_Int32 style, sal_Int32 variant ) throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL BackColor() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL ForeColor() throw (css::uno::RuntimeException);
-
-};
-
-#endif//SC_VBA_XFILLFORMAT_HXX
diff --git a/sc/source/ui/vba/vbafont.cxx b/sc/source/ui/vba/vbafont.cxx
index b7131d8..73eb0f5 100644
--- a/sc/source/ui/vba/vbafont.cxx
+++ b/sc/source/ui/vba/vbafont.cxx
@@ -43,37 +43,14 @@
 using namespace ::ooo::vba;
 using namespace ::com::sun::star;
 
-// use local constants there is no need to expose these constants
-// externally. Looking at the Format->Character dialog it seem that
-// these may infact be even be calculated. Leave hardcoded for now
-// #FIXEME #TBD investigate the code for dialog mentioned above
-
-// The font baseline is not specified.
-const short NORMAL = 0;
-
-// specifies a superscripted.
-const short SUPERSCRIPT = 33;
-
-// specifies a subscripted.
-const short SUBSCRIPT = -33;
-
-// specifies a hight of superscripted font
- const sal_Int8 SUPERSCRIPTHEIGHT = 58;
-
-// specifies a hight of subscripted font
-const sal_Int8 SUBSCRIPTHEIGHT = 58;
-
-// specifies a hight of normal font
-const short NORMALHEIGHT = 100;
-
-ScVbaFont::ScVbaFont( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const ScVbaPalette& dPalette, uno::Reference< beans::XPropertySet > xPropertySet, ScCellRangeObj* pRangeObj  ) throw ( uno::RuntimeException ) : ScVbaFont_BASE( xParent, xContext ), mxFont( xPropertySet, css::uno::UNO_QUERY_THROW ), mPalette( dPalette ),  mpRangeObj( pRangeObj )
+ScVbaFont::ScVbaFont( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const ScVbaPalette& dPalette, uno::Reference< beans::XPropertySet > xPropertySet, ScCellRangeObj* pRangeObj  ) throw ( uno::RuntimeException ) : ScVbaFont_BASE( xParent, xContext, dPalette.getPalette(), xPropertySet ), mPalette( dPalette ),  mpRangeObj( pRangeObj )
 {
 }
 
 SfxItemSet*  
 ScVbaFont::GetDataSet()
 {
-    SfxItemSet* pDataSet = ScVbaCellRangeAccess::GetDataSet( mpRangeObj );
+    SfxItemSet* pDataSet = excel::ScVbaCellRangeAccess::GetDataSet( mpRangeObj );
     return pDataSet;
 }
 
@@ -240,19 +217,13 @@ ScVbaFont::getSubscript() throw ( uno::RuntimeException )
     return uno::makeAny( ( nValue == SUBSCRIPT ) );
 }
 
-void SAL_CALL
-ScVbaFont::setSize( const uno::Any& aValue ) throw( uno::RuntimeException )
-{
-    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharHeight" ) ), aValue );
-}
-
 uno::Any SAL_CALL
 ScVbaFont::getSize() throw ( uno::RuntimeException )
 {
     if ( GetDataSet() )
         if (  GetDataSet()->GetItemState( ATTR_FONT_HEIGHT, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
-        return mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharHeight" ) ) );
+        return ScVbaFont_BASE::getSize();
 }
 
 void SAL_CALL
@@ -264,43 +235,22 @@ ScVbaFont::setColorIndex( const uno::Any& _colorindex ) throw( uno::RuntimeExcep
     // handled properly here
 
     if ( !nIndex || ( nIndex == excel::XlColorIndex::xlColorIndexAutomatic ) )
+        {
         nIndex = 1;  // check defualt ( assume black )
-    --nIndex; // OOo indices are zero bases
-    uno::Reference< container::XIndexAccess > xIndex = mPalette.getPalette();
-    // setColor expects colors in XL RGB values
-    // #FIXME this is daft we convert OO RGB val to XL RGB val and
-    // then back again to OO RGB value
-    setColor( OORGBToXLRGB(xIndex->getByIndex( nIndex )) );
+                ScVbaFont_BASE::setColorIndex( uno::makeAny( nIndex ) );
+        }
+        else
+            ScVbaFont_BASE::setColorIndex( _colorindex );
 }
 
 
 uno::Any SAL_CALL
 ScVbaFont::getColorIndex() throw ( uno::RuntimeException )
 {
-    sal_Int32 nColor = 0;
     if ( GetDataSet() )
         if (  GetDataSet()->GetItemState( ATTR_FONT_COLOR, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
-
-    // getColor returns Xl ColorValue, need to convert it to OO val
-    // as the palette deals with OO RGB values
-    // #FIXME this is daft in getColor we convert OO RGB val to XL RGB val
-    // and then back again to OO RGB value
-    XLRGBToOORGB( getColor() ) >>= nColor;
-    uno::Reference< container::XIndexAccess > xIndex = mPalette.getPalette();
-    sal_Int32 nElems = xIndex->getCount();
-    sal_Int32 nIndex = -1;
-    for ( sal_Int32 count=0; count<nElems; ++count )
-           {
-        sal_Int32 nPaletteColor = 0;
-        xIndex->getByIndex( count ) >>= nPaletteColor;
-        if ( nPaletteColor == nColor )
-        {
-            nIndex = count + 1; // 1 based
-            break;
-        }
-    }
-    return uno::makeAny( nIndex );
+    return ScVbaFont_BASE::getColorIndex();
 }
 
 //////////////////////////////////////////////////////////////////////////////////////////
@@ -393,28 +343,13 @@ ScVbaFont::getFontStyle() throw ( uno::RuntimeException )
     return uno::makeAny( aStyles.makeStringAndClear() );
 }
 
-void SAL_CALL
-ScVbaFont::setBold( const uno::Any& aValue ) throw( uno::RuntimeException )
-{
-    sal_Bool bValue = sal_False;
-    aValue >>= bValue;
-    double fBoldValue = awt::FontWeight::NORMAL;
-    if( bValue )
-        fBoldValue = awt::FontWeight::BOLD;
-    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharWeight" ) ), ( uno::Any )fBoldValue );
-
-}
-
 uno::Any SAL_CALL
 ScVbaFont::getBold() throw ( uno::RuntimeException )
 {
     if ( GetDataSet() )
         if (  GetDataSet()->GetItemState( ATTR_FONT_WEIGHT, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
-
-    double fValue = 0.0;
-    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharWeight" ) ) ) >>= fValue;
-    return uno::makeAny( fValue == awt::FontWeight::BOLD );
+    return ScVbaFont_BASE::getBold();
 }
 
 void SAL_CALL
@@ -478,32 +413,13 @@ ScVbaFont::getUnderline() throw ( uno::RuntimeException )
     return uno::makeAny( nValue );
 }
 
-void SAL_CALL
-ScVbaFont::setStrikethrough( const uno::Any& aValue ) throw ( uno::RuntimeException )
-{
-    sal_Bool bValue = sal_False;
-    aValue >>= bValue;
-    short nValue = awt::FontStrikeout::NONE;
-    if( bValue )
-        nValue = awt::FontStrikeout::SINGLE;
-    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharStrikeout" ) ), ( uno::Any )nValue );
-}
-
 uno::Any SAL_CALL
 ScVbaFont::getStrikethrough() throw ( uno::RuntimeException )
 {
     if ( GetDataSet() )
         if (  GetDataSet()->GetItemState( ATTR_FONT_CROSSEDOUT, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
-    short nValue = 0;
-    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharStrikeout" ) ) ) >>= nValue;
-    return uno::Any( nValue == awt::FontStrikeout::SINGLE );
-}
-
-void  SAL_CALL
-ScVbaFont::setShadow( const uno::Any& aValue ) throw ( uno::RuntimeException )
-{
-    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharShadowed" ) ), aValue );
+    return ScVbaFont_BASE::getStrikethrough();
 }
 
 uno::Any SAL_CALL
@@ -512,18 +428,7 @@ ScVbaFont::getShadow() throw (uno::RuntimeException)
     if ( GetDataSet() )
         if (  GetDataSet()->GetItemState( ATTR_FONT_SHADOWED, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
-    return mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharShadowed" ) ) );
-}
-
-void  SAL_CALL
-ScVbaFont::setItalic( const uno::Any& aValue ) throw ( uno::RuntimeException )
-{
-    sal_Bool bValue = sal_False;
-    aValue >>= bValue;
-    short nValue = awt::FontSlant_NONE;
-    if( bValue )
-        nValue = awt::FontSlant_ITALIC;
-    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharPosture" ) ), ( uno::Any )nValue );
+    return ScVbaFont_BASE::getShadow();
 }
 
 uno::Any SAL_CALL
@@ -533,17 +438,7 @@ ScVbaFont::getItalic() throw ( uno::RuntimeException )
         if (  GetDataSet()->GetItemState( ATTR_FONT_POSTURE, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
 
-    awt::FontSlant aFS;
-    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharPosture" ) ) ) >>= aFS;
-    return uno::makeAny( aFS == awt::FontSlant_ITALIC );
-}
-
-void  SAL_CALL
-ScVbaFont::setName( const uno::Any& aValue ) throw ( uno::RuntimeException )
-{
-    rtl::OUString sString;
-    aValue >>= sString;
-    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharFontName" ) ), aValue);
+    return ScVbaFont_BASE::getItalic();
 }
 
 uno::Any SAL_CALL
@@ -552,22 +447,17 @@ ScVbaFont::getName() throw ( uno::RuntimeException )
     if ( GetDataSet() )
         if (  GetDataSet()->GetItemState( ATTR_FONT, TRUE, NULL) == SFX_ITEM_DONTCARE )
             return aNULL();
-    return mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharFontName" ) ) );
+    return ScVbaFont_BASE::getName();
 }
 uno::Any
 ScVbaFont::getColor() throw (uno::RuntimeException)
 {
+    // #TODO #FIXME - behave like getXXX above ( wrt. GetDataSet )
     uno::Any aAny;
     aAny = OORGBToXLRGB( mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharColor" ) ) ) );
     return aAny;
 }
 
-void
-ScVbaFont::setColor( const uno::Any& _color  ) throw (uno::RuntimeException)
-{
-    mxFont->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharColor" ) ) , XLRGBToOORGB(_color));
-}
-
 void  SAL_CALL
 ScVbaFont::setOutlineFont( const uno::Any& aValue ) throw ( uno::RuntimeException )
 {
diff --git a/sc/source/ui/vba/vbafont.hxx b/sc/source/ui/vba/vbafont.hxx
index 86875a8..4cbcd48 100644
--- a/sc/source/ui/vba/vbafont.hxx
+++ b/sc/source/ui/vba/vbafont.hxx
@@ -29,19 +29,19 @@
 
 #include <cppuhelper/implbase1.hxx>
 
-#include <ooo/vba/excel/XFont.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
-#include "vbahelperinterface.hxx"
+#include <ooo/vba/excel/XFont.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbafontbase.hxx>
 #include "vbapalette.hxx"
 
 class ScTableSheetsObj;
 class ScCellRangeObj;
 
-typedef  InheritedHelperInterfaceImpl1< ov::excel::XFont > ScVbaFont_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaFontBase, ov::excel::XFont > ScVbaFont_BASE;
 
 class ScVbaFont : public ScVbaFont_BASE
 {
-    css::uno::Reference< css::beans::XPropertySet > mxFont;
     ScVbaPalette mPalette;
     ScCellRangeObj* mpRangeObj;
     SfxItemSet*  GetDataSet();
@@ -51,7 +51,6 @@ public:
 
     // Attributes
     virtual css::uno::Any SAL_CALL getSize() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setSize( const css::uno::Any& _size ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getStandardFontSize() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setStandardFontSize( const css::uno::Any& _standardfontsize ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getStandardFont() throw (css::uno::RuntimeException);
@@ -61,23 +60,17 @@ public:
     virtual css::uno::Any SAL_CALL getColorIndex() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setColorIndex( const css::uno::Any& _colorindex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getBold() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setBold( const css::uno::Any& _bold ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getUnderline() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setUnderline( const css::uno::Any& _underline ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getStrikethrough() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setStrikethrough( const css::uno::Any& _strikethrough ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getShadow() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setShadow( const css::uno::Any& _shadow ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getItalic() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setItalic( const css::uno::Any& _italic ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getSubscript() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setSubscript( const css::uno::Any& _subscript ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getSuperscript() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setSuperscript( const css::uno::Any& _superscript ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getName() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setName( const css::uno::Any& _name ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getColor() throw (css::uno::RuntimeException) ;
-    virtual void SAL_CALL setColor( const css::uno::Any& _color ) throw (css::uno::RuntimeException) ;
     virtual css::uno::Any SAL_CALL getOutlineFont() throw (css::uno::RuntimeException) ;
     virtual void SAL_CALL setOutlineFont( const css::uno::Any& _outlinefont ) throw (css::uno::RuntimeException) ;
     // XHelperInterface
diff --git a/sc/source/ui/vba/vbaformat.cxx b/sc/source/ui/vba/vbaformat.cxx
index 3d974bd..4ce8a55 100644
--- a/sc/source/ui/vba/vbaformat.cxx
+++ b/sc/source/ui/vba/vbaformat.cxx
@@ -30,6 +30,7 @@
 #include <ooo/vba/excel/XlHAlign.hpp>
 #include <ooo/vba/excel/XlOrientation.hpp>
 #include <ooo/vba/excel/Constants.hpp>
+#include <ooo/vba/excel/XRange.hpp>
 #include <com/sun/star/table/CellVertJustify.hpp>
 #include <com/sun/star/table/CellHoriJustify.hpp>
 #include <com/sun/star/table/CellOrientation.hpp>
@@ -338,7 +339,7 @@ template< typename Ifc1 >
 uno::Any SAL_CALL 
 ScVbaFormat<Ifc1>::Borders( const uno::Any& Index ) throw (script::BasicErrorException, uno::RuntimeException )
 {
-    ScVbaPalette aPalette( getDocShell( mxModel ) );	
+    ScVbaPalette aPalette( excel::getDocShell( mxModel ) );
     uno::Reference< XCollection > xColl =  new ScVbaBorders( thisHelperIface(), ScVbaFormat_BASE::mxContext, uno::Reference< table::XCellRange >( mxPropertySet, uno::UNO_QUERY_THROW ), aPalette );
 
     if ( Index.hasValue() )
@@ -352,7 +353,7 @@ template< typename Ifc1 >
 uno::Reference< excel::XFont > SAL_CALL 
 ScVbaFormat<Ifc1>::Font(  ) throw (script::BasicErrorException, uno::RuntimeException)
 {
-    ScVbaPalette aPalette( getDocShell( mxModel ) );
+    ScVbaPalette aPalette( excel::getDocShell( mxModel ) );
     return new ScVbaFont( thisHelperIface(), ScVbaFormat_BASE::mxContext, aPalette, mxPropertySet );
 }
 
diff --git a/sc/source/ui/vba/vbaformat.hxx b/sc/source/ui/vba/vbaformat.hxx
index ca46b2b..3148619 100644
--- a/sc/source/ui/vba/vbaformat.hxx
+++ b/sc/source/ui/vba/vbaformat.hxx
@@ -36,7 +36,7 @@
 #include <com/sun/star/lang/XMultiServiceFactory.hpp>
 #include <com/sun/star/lang/Locale.hpp>
 #include <com/sun/star/beans/XPropertyState.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 template< typename Ifc1 >
 class ScVbaFormat : public InheritedHelperInterfaceImpl1< Ifc1 >
diff --git a/sc/source/ui/vba/vbaformatconditions.cxx b/sc/source/ui/vba/vbaformatconditions.cxx
index b5a6dc9..d47dfed 100644
--- a/sc/source/ui/vba/vbaformatconditions.cxx
+++ b/sc/source/ui/vba/vbaformatconditions.cxx
@@ -33,6 +33,7 @@
 #include "vbaformatcondition.hxx"
 #include "vbaworkbook.hxx"
 #include "vbastyles.hxx"
+#include "vbaglobals.hxx"
 using namespace ::ooo::vba;
 using namespace ::com::sun::star;
 
@@ -47,7 +48,7 @@ static rtl::OUString sStyleNamePrefix( RTL_CONSTASCII_USTRINGPARAM("Excel_CondFo
 ScVbaFormatConditions::ScVbaFormatConditions( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< sheet::XSheetConditionalEntries >& _xSheetConditionalEntries, const uno::Reference< frame::XModel >& xModel ) : ScVbaFormatConditions_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( _xSheetConditionalEntries, uno::UNO_QUERY_THROW ) ), mxSheetConditionalEntries( _xSheetConditionalEntries )
 {
     mxRangeParent.set( xParent, uno::UNO_QUERY_THROW );
-    uno::Reference< excel::XWorkbook > xWorkbook = new ScVbaWorkbook(  uno::Reference< XHelperInterface >( ScVbaGlobals::getGlobalsImpl( xContext )->getApplication(), uno::UNO_QUERY_THROW ), xContext, xModel );
+    uno::Reference< excel::XWorkbook > xWorkbook = new ScVbaWorkbook(  uno::Reference< XHelperInterface >( Application(), uno::UNO_QUERY_THROW ), xContext, xModel );
     mxStyles.set( xWorkbook->Styles( uno::Any() ), uno::UNO_QUERY_THROW );
     uno::Reference< sheet::XCellRangeAddressable > xCellRange( mxRangeParent->getCellRange(), uno::UNO_QUERY_THROW );
     mxParentRangePropertySet.set( xCellRange, uno::UNO_QUERY_THROW );
diff --git a/sc/source/ui/vba/vbaformatconditions.hxx b/sc/source/ui/vba/vbaformatconditions.hxx
index 3157021..46abf52 100644
--- a/sc/source/ui/vba/vbaformatconditions.hxx
+++ b/sc/source/ui/vba/vbaformatconditions.hxx
@@ -32,7 +32,7 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/table/CellAddress.hpp>
 #include <com/sun/star/sheet/XSheetConditionalEntries.hpp>
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 
 typedef CollTestImplHelper< ov::excel::XFormatConditions > ScVbaFormatConditions_BASE;
 class ScVbaFormatConditions: public ScVbaFormatConditions_BASE
diff --git a/sc/source/ui/vba/vbaframe.cxx b/sc/source/ui/vba/vbaframe.cxx
index 130a961..e69de29 100644
--- a/sc/source/ui/vba/vbaframe.cxx
+++ b/sc/source/ui/vba/vbaframe.cxx
@@ -1,85 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbaframe.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-ScVbaFrame::ScVbaFrame( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : FrameImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaFrame::getCaption() throw (css::uno::RuntimeException)
-{
-    rtl::OUString Label;
-    m_xProps->getPropertyValue( LABEL ) >>= Label;
-    return Label;
-}
-
-void SAL_CALL 
-ScVbaFrame::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
-}
-
-uno::Any SAL_CALL 
-ScVbaFrame::getValue() throw (css::uno::RuntimeException)
-{
-    return uno::makeAny( getCaption() );
-}
-
-void SAL_CALL 
-ScVbaFrame::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
-{
-    rtl::OUString sCaption;
-    _value >>= sCaption;
-    setCaption( sCaption ); 
-}
-
-rtl::OUString& 
-ScVbaFrame::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaFrame") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaFrame::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Frame" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbaframe.hxx b/sc/source/ui/vba/vbaframe.hxx
index 7ca8cf4..e69de29 100644
--- a/sc/source/ui/vba/vbaframe.hxx
+++ b/sc/source/ui/vba/vbaframe.hxx
@@ -1,50 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_FRAME_HXX
-#define SC_VBA_FRAME_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XLabel.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XLabel > FrameImpl_BASE;
-
-class ScVbaFrame : public FrameImpl_BASE
-{
-public:
-    ScVbaFrame(  const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_LABEL_HXX
diff --git a/sc/source/ui/vba/vbaglobals.cxx b/sc/source/ui/vba/vbaglobals.cxx
index 6be6942..122eda5 100644
--- a/sc/source/ui/vba/vbaglobals.cxx
+++ b/sc/source/ui/vba/vbaglobals.cxx
@@ -24,13 +24,14 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 #include "vbaglobals.hxx"
 
 #include <comphelper/unwrapargs.hxx>
 
 #include <com/sun/star/lang/XMultiComponentFactory.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
+#include <cppuhelper/component_context.hxx>
 
 #include "vbaapplication.hxx"
 #include "vbaworksheet.hxx"
@@ -46,11 +47,20 @@ using namespace ::ooo::vba;
 // ScVbaGlobals
 // =============================================================================
 
-ScVbaGlobals::ScVbaGlobals(  css::uno::Reference< css::uno::XComponentContext >const& rxContext )
-        :m_xContext( rxContext )
+//ScVbaGlobals::ScVbaGlobals(  css::uno::Reference< css::uno::XComponentContext >const& rxContext,  ) : ScVbaGlobals_BASE( uno::Reference< XHelperInterface >(), rxContext )
+rtl::OUString sDocCtxName( RTL_CONSTASCII_USTRINGPARAM("ExcelDocumentContext") );
+
+ScVbaGlobals::ScVbaGlobals( uno::Sequence< uno::Any > const& aArgs, uno::Reference< uno::XComponentContext >const& rxContext ) : ScVbaGlobals_BASE( uno::Reference< XHelperInterface >(), rxContext, sDocCtxName )
 {
     OSL_TRACE("ScVbaGlobals::ScVbaGlobals()");
-    mxApplication = uno::Reference< excel::XApplication > ( new ScVbaApplication( m_xContext) );
+
+        uno::Sequence< beans::PropertyValue > aInitArgs( 2 );
+        aInitArgs[ 0 ].Name = rtl::OUString::createFromAscii("Application");
+        aInitArgs[ 0 ].Value = uno::makeAny( getApplication() );
+        aInitArgs[ 1 ].Name = sDocCtxName;
+        aInitArgs[ 1 ].Value = uno::makeAny( getXSomethingFromArgs< frame::XModel >( aArgs, 0 ) );
+
+        init( aInitArgs );
 }
 
 ScVbaGlobals::~ScVbaGlobals()
@@ -58,23 +68,6 @@ ScVbaGlobals::~ScVbaGlobals()
     OSL_TRACE("ScVbaGlobals::~ScVbaGlobals");
 }
 
-// Will throw if singleton can't be accessed 
-uno::Reference< XGlobals >
-ScVbaGlobals::getGlobalsImpl( const uno::Reference< uno::XComponentContext >& xContext ) throw ( uno::RuntimeException )
-{
-    uno::Reference< XGlobals > xGlobals( 
-        xContext->getValueByName( ::rtl::OUString::createFromAscii( 
-            "/singletons/ooo.vba.theGlobals") ), uno::UNO_QUERY);
-
-    if ( !xGlobals.is() )
-    {
-        throw uno::RuntimeException(
-                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ": Couldn't access Globals" ) ),
-                    uno::Reference< XInterface >() );
-    }
-    return xGlobals;
-}
-
 // =============================================================================
 // XGlobals
 // =============================================================================
@@ -82,14 +75,16 @@ uno::Reference<excel::XApplication >
 ScVbaGlobals::getApplication() throw (uno::RuntimeException)
 {
 //	OSL_TRACE("In ScVbaGlobals::getApplication");	
-    return mxApplication;
+        if ( !mxApplication.is() )
+        mxApplication.set( new ScVbaApplication( mxContext) );
+	return mxApplication;
 }
 
 uno::Reference< excel::XWorkbook > SAL_CALL 
 ScVbaGlobals::getActiveWorkbook() throw (uno::RuntimeException)
 {
 //	OSL_TRACE("In ScVbaGlobals::getActiveWorkbook");	
-    uno::Reference< excel::XWorkbook > xWorkbook( mxApplication->getActiveWorkbook(), uno::UNO_QUERY);
+    uno::Reference< excel::XWorkbook > xWorkbook( getApplication()->getActiveWorkbook(), uno::UNO_QUERY);
     if ( xWorkbook.is() )
     {
         return xWorkbook;    
@@ -100,22 +95,28 @@ ScVbaGlobals::getActiveWorkbook() throw (uno::RuntimeException)
 }
 
 
+uno::Reference< excel::XWindow > SAL_CALL
+ScVbaGlobals::getActiveWindow() throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveWindow();
+}
+
 uno::Reference< excel::XWorksheet > SAL_CALL 
 ScVbaGlobals::getActiveSheet() throw (uno::RuntimeException)
 {
-    return mxApplication->getActiveSheet();
+    return getApplication()->getActiveSheet();
 }
 
 uno::Any SAL_CALL 
 ScVbaGlobals::WorkBooks( const uno::Any& aIndex ) throw (uno::RuntimeException)
 {
-    return uno::Any( mxApplication->Workbooks(aIndex) );
+    return uno::Any( getApplication()->Workbooks(aIndex) );
 }
 
 uno::Any SAL_CALL
 ScVbaGlobals::WorkSheets(const uno::Any& aIndex) throw (uno::RuntimeException)
 {
-    return mxApplication->Worksheets( aIndex );
+    return getApplication()->Worksheets( aIndex );
 }
 uno::Any SAL_CALL
 ScVbaGlobals::Sheets( const uno::Any& aIndex ) throw (uno::RuntimeException)
@@ -123,26 +124,6 @@ ScVbaGlobals::Sheets( const uno::Any& aIndex ) throw (uno::RuntimeException)
     return WorkSheets( aIndex );
 }
 
-::uno::Sequence< ::uno::Any > SAL_CALL
-ScVbaGlobals::getGlobals(  ) throw (::uno::RuntimeException)
-{
-    sal_uInt32 nMax = 0;
-    uno::Sequence< uno::Any > maGlobals(4);
-    maGlobals[ nMax++ ] <<= ScVbaGlobals::getGlobalsImpl(m_xContext);
-    maGlobals[ nMax++ ] <<= mxApplication;
-
-    uno::Reference< excel::XWorkbook > xWorkbook = mxApplication->getActiveWorkbook();
-    if( xWorkbook.is() )
-    {
-        maGlobals[ nMax++ ] <<= xWorkbook;
-        uno::Reference< excel::XWorksheet > xWorksheet = xWorkbook->getActiveSheet();
-        if( xWorksheet.is() )
-            maGlobals[ nMax++ ] <<= xWorksheet;
-    }
-    maGlobals.realloc( nMax );
-    return maGlobals;
-}
-
 uno::Any SAL_CALL 
 ScVbaGlobals::Range( const uno::Any& Cell1, const uno::Any& Cell2 ) throw (uno::RuntimeException)
 {
@@ -155,13 +136,140 @@ ScVbaGlobals::Names( const css::uno::Any& aIndex ) throw ( uno::RuntimeException
     return getApplication()->Names( aIndex );
 }
 
+uno::Reference< excel::XRange > SAL_CALL
+ScVbaGlobals::getActiveCell() throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveCell();
+}
+
+uno::Reference< XAssistant > SAL_CALL
+ScVbaGlobals::getAssistant() throw (uno::RuntimeException)
+{
+    return getApplication()->getAssistant();
+}
+
+uno::Any SAL_CALL
+ScVbaGlobals::getSelection() throw (uno::RuntimeException)
+{
+    return getApplication()->getSelection();
+}
+
+uno::Reference< excel::XWorkbook > SAL_CALL
+ScVbaGlobals::getThisWorkbook() throw (uno::RuntimeException)
+{
+    return getApplication()->getThisWorkbook();
+}
+void SAL_CALL
+ScVbaGlobals::Calculate()  throw (::com::sun::star::script::BasicErrorException, ::com::sun::star::uno::RuntimeException)
+{
+    return getApplication()->Calculate();
+}
+
+uno::Reference< excel::XRange > SAL_CALL
+ScVbaGlobals::Cells( const uno::Any& RowIndex, const uno::Any& ColumnIndex ) throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveSheet()->Cells( RowIndex, ColumnIndex );
+}
+uno::Reference< excel::XRange > SAL_CALL
+ScVbaGlobals::Columns( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveSheet()->Columns( aIndex );
+}
+
+uno::Any SAL_CALL
+ScVbaGlobals::CommandBars( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    uno::Reference< XApplicationBase > xBase( getApplication(), uno::UNO_QUERY_THROW );
+    return xBase->CommandBars( aIndex );
+}
+
+css::uno::Reference< ov::excel::XRange > SAL_CALL
+ScVbaGlobals::Union( const css::uno::Reference< ov::excel::XRange >& Arg1, const css::uno::Reference< ov::excel::XRange >& Arg2, const css::uno::Any& Arg3, const css::uno::Any& Arg4, const css::uno::Any& Arg5, const css::uno::Any& Arg6, const css::uno::Any& Arg7, const css::uno::Any& Arg8, const css::uno::Any& Arg9, const css::uno::Any& Arg10, const css::uno::Any& Arg11, const css::uno::Any& Arg12, const css::uno::Any& Arg13, const css::uno::Any& Arg14, const css::uno::Any& Arg15, const css::uno::Any& Arg16, const css::uno::Any& Arg17, const css::uno::Any& Arg18, const css::uno::Any& Arg19, const css::uno::Any& Arg20, const css::uno::Any& Arg21, const css::uno::Any& Arg22, const css::uno::Any& Arg23, const css::uno::Any& Arg24, const css::uno::Any& Arg25, const css::uno::Any& Arg26, const css::uno::Any& Arg27, const css::uno::Any& Arg28, const css::uno::Any& Arg29, const css::uno::Any& Arg30 ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
+{
+    return getApplication()->Union(  Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30 );
+}
+css::uno::Reference< ov::excel::XRange > SAL_CALL
+ScVbaGlobals::Intersect( const css::uno::Reference< ov::excel::XRange >& Arg1, const css::uno::Reference< ov::excel::XRange >& Arg2, const css::uno::Any& Arg3, const css::uno::Any& Arg4, const css::uno::Any& Arg5, const css::uno::Any& Arg6, const css::uno::Any& Arg7, const css::uno::Any& Arg8, const css::uno::Any& Arg9, const css::uno::Any& Arg10, const css::uno::Any& Arg11, const css::uno::Any& Arg12, const css::uno::Any& Arg13, const css::uno::Any& Arg14, const css::uno::Any& Arg15, const css::uno::Any& Arg16, const css::uno::Any& Arg17, const css::uno::Any& Arg18, const css::uno::Any& Arg19, const css::uno::Any& Arg20, const css::uno::Any& Arg21, const css::uno::Any& Arg22, const css::uno::Any& Arg23, const css::uno::Any& Arg24, const css::uno::Any& Arg25, const css::uno::Any& Arg26, const css::uno::Any& Arg27, const css::uno::Any& Arg28, const css::uno::Any& Arg29, const css::uno::Any& Arg30 ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
+{
+    return getApplication()->Intersect(  Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12, Arg13, Arg14, Arg15, Arg16, Arg17, Arg18, Arg19, Arg20, Arg21, Arg22, Arg23, Arg24, Arg25, Arg26, Arg27, Arg28, Arg29, Arg30 );
+}
+
+uno::Any SAL_CALL
+ScVbaGlobals::Evaluate( const ::rtl::OUString& Name ) throw (uno::RuntimeException)
+{
+    return getApplication()->Evaluate( Name );
+}
+
+css::uno::Any SAL_CALL
+ScVbaGlobals::WorksheetFunction(  ) throw (css::uno::RuntimeException)
+{
+    return getApplication()->WorksheetFunction();
+}
+
+uno::Any SAL_CALL
+ScVbaGlobals::Windows( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    return getApplication()->Windows( aIndex );
+}
+
+uno::Reference< excel::XRange > SAL_CALL
+ScVbaGlobals::Rows( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveSheet()->Rows( aIndex );
+
+}
+
+uno::Sequence< ::rtl::OUString > SAL_CALL
+ScVbaGlobals::getAvailableServiceNames(  ) throw (uno::RuntimeException)
+{
+    static bool bInit = false;
+    static uno::Sequence< rtl::OUString > serviceNames( ScVbaGlobals_BASE::getAvailableServiceNames() );
+    if ( !bInit )
+    {
+         rtl::OUString names[] = {
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.excel.Range" ) ),
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.excel.Workbook" ) ),
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.excel.Window" ) ),
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.excel.Worksheet" ) ),
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.excel.Application" ) ),
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.excel.Hyperlink" ) ),
+          };
+        sal_Int32 nExcelServices = ( sizeof( names )/ sizeof( names[0] ) );
+        sal_Int32 startIndex = serviceNames.getLength();
+        serviceNames.realloc( serviceNames.getLength() + nExcelServices );
+        for ( sal_Int32 index = 0; index < nExcelServices; ++index )
+             serviceNames[ startIndex + index ] = names[ index ];
+        bInit = true;
+    }
+    return serviceNames;
+}
+
+rtl::OUString&
+ScVbaGlobals::getServiceImplName()
+{
+        static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaGlobals") );
+        return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaGlobals::getServiceNames()
+{
+        static uno::Sequence< rtl::OUString > aServiceNames;
+        if ( aServiceNames.getLength() == 0 )
+        {
+                aServiceNames.realloc( 1 );
+                aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Globals" ) );
+        }
+        return aServiceNames;
+}
+
 namespace globals
 {
 namespace sdecl = comphelper::service_decl;
-sdecl::class_<ScVbaGlobals, sdecl::with_args<false> > serviceImpl;
+sdecl::vba_service_class_<ScVbaGlobals, sdecl::with_args<true> > serviceImpl;
 extern sdecl::ServiceDecl const serviceDecl(
     serviceImpl,
     "ScVbaGlobals",
-    "ooo.vba.Globals" );
+    "ooo.vba.excel.Globals" );
 }
 
diff --git a/sc/source/ui/vba/vbaglobals.hxx b/sc/source/ui/vba/vbaglobals.hxx
index 90d0e42..b124065 100644
--- a/sc/source/ui/vba/vbaglobals.hxx
+++ b/sc/source/ui/vba/vbaglobals.hxx
@@ -30,43 +30,65 @@
 #include <com/sun/star/lang/XServiceInfo.hpp>
 #include <com/sun/star/lang/XInitialization.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
-#include <ooo/vba/XGlobals.hpp>
+#include <ooo/vba/excel/XGlobals.hpp>
+#include <ooo/vba/excel/XApplication.hpp>
 
 #include <cppuhelper/implbase1.hxx>
-#include "vbahelper.hxx"
+#include "excelvbahelper.hxx"
 
+#include <vbahelper/vbaglobalbase.hxx>
     // =============================================================================
     // class ScVbaGlobals
     // =============================================================================
 
-    typedef ::cppu::WeakImplHelper1<    
- ov::XGlobals > ScVbaGlobals_BASE;
-
+typedef ::cppu::ImplInheritanceHelper1< VbaGlobalsBase, ov::excel::XGlobals > ScVbaGlobals_BASE;
 
     class ScVbaGlobals : public ScVbaGlobals_BASE
     {
-    private:
-            css::uno::Reference< css::uno::XComponentContext > m_xContext;
-            css::uno::Reference< ov::excel::XApplication > mxApplication;
+        css::uno::Reference< ov::excel::XApplication > mxApplication;
+        virtual css::uno::Reference<
+ ov::excel::XApplication > SAL_CALL getApplication()
+                        throw (css::uno::RuntimeException);
     public:
     
-        ScVbaGlobals(
+        ScVbaGlobals( css::uno::Sequence< css::uno::Any > const& aArgs,
             css::uno::Reference< css::uno::XComponentContext >const& rxContext );
+        //ScVbaGlobals(
+        //    css::uno::Reference< css::uno::XComponentContext >const& rxContext,  );
         virtual ~ScVbaGlobals();
 
-        static 	css::uno::Reference< ov::XGlobals > getGlobalsImpl(const css::uno::Reference< css::uno::XComponentContext >& ) throw (css::uno::RuntimeException);
-
         // XGlobals
-        virtual css::uno::Reference<
- ov::excel::XApplication > SAL_CALL getApplication()
-                        throw (css::uno::RuntimeException);
         virtual css::uno::Reference< ov::excel::XWorkbook > SAL_CALL getActiveWorkbook() throw (css::uno::RuntimeException);
+        virtual css::uno::Reference< ov::excel::XWindow > SAL_CALL getActiveWindow() throw (css::uno::RuntimeException);
         virtual css::uno::Reference< ov::excel::XWorksheet > SAL_CALL getActiveSheet() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::XAssistant > SAL_CALL getAssistant() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Calculate(  ) throw (::com::sun::star::script::BasicErrorException, ::com::sun::star::uno::RuntimeException);
+
+    virtual css::uno::Any SAL_CALL getSelection() throw (css::uno::RuntimeException);
+        virtual css::uno::Reference< ov::excel::XRange > SAL_CALL getActiveCell() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::excel::XWorkbook > SAL_CALL getThisWorkbook() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::excel::XRange > SAL_CALL Cells( const css::uno::Any& RowIndex, const css::uno::Any& ColumnIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::excel::XRange > SAL_CALL Columns( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL CommandBars( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Evaluate( const ::rtl::OUString& Name ) throw (css::uno::RuntimeException);
+
         virtual css::uno::Any SAL_CALL WorkSheets(const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
         virtual css::uno::Any SAL_CALL WorkBooks(const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL WorksheetFunction(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Windows( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Sheets( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
-    virtual css::uno::Sequence< css::uno::Any > SAL_CALL getGlobals(  ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Range( const css::uno::Any& Cell1, const css::uno::Any& Cell2 ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ::ooo::vba::excel::XRange > SAL_CALL Rows( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Names( const css::uno::Any& aIndex ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Reference< ov::excel::XRange > SAL_CALL Intersect( const css::uno::Reference< ov::excel::XRange >& Arg1, const css::uno::Reference< ov::excel::XRange >& Arg2, const css::uno::Any& Arg3, const css::uno::Any& Arg4, const css::uno::Any& Arg5, const css::uno::Any& Arg6, const css::uno::Any& Arg7, const css::uno::Any& Arg8, const css::uno::Any& Arg9, const css::uno::Any& Arg10, const css::uno::Any& Arg11, const css::uno::Any& Arg12, const css::uno::Any& Arg13, const css::uno::Any& Arg14, const css::uno::Any& Arg15, const css::uno::Any& Arg16, const css::uno::Any& Arg17, const css::uno::Any& Arg18, const css::uno::Any& Arg19, const css::uno::Any& Arg20, const css::uno::Any& Arg21, const css::uno::Any& Arg22, const css::uno::Any& Arg23, const css::uno::Any& Arg24, const css::uno::Any& Arg25, const css::uno::Any& Arg26, const css::uno::Any& Arg27, const css::uno::Any& Arg28, const css::uno::Any& Arg29, const css::uno::Any& Arg30 ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::excel::XRange > SAL_CALL Union( const css::uno::Reference< ov::excel::XRange >& Arg1, const css::uno::Reference< ov::excel::XRange >& Arg2, const css::uno::Any& Arg3, const css::uno::Any& Arg4, const css::uno::Any& Arg5, const css::uno::Any& Arg6, const css::uno::Any& Arg7, const css::uno::Any& Arg8, const css::uno::Any& Arg9, const css::uno::Any& Arg10, const css::uno::Any& Arg11, const css::uno::Any& Arg12, const css::uno::Any& Arg13, const css::uno::Any& Arg14, const css::uno::Any& Arg15, const css::uno::Any& Arg16, const css::uno::Any& Arg17, const css::uno::Any& Arg18, const css::uno::Any& Arg19, const css::uno::Any& Arg20, const css::uno::Any& Arg21, const css::uno::Any& Arg22, const css::uno::Any& Arg23, const css::uno::Any& Arg24, const css::uno::Any& Arg25, const css::uno::Any& Arg26, const css::uno::Any& Arg27, const css::uno::Any& Arg28, const css::uno::Any& Arg29, const css::uno::Any& Arg30 ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+
+
+
+    // XMultiServiceFactory
+    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getAvailableServiceNames(  ) throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
     };
 #endif // 
diff --git a/sc/source/ui/vba/vbahelper.cxx b/sc/source/ui/vba/vbahelper.cxx
index 6aba529..e69de29 100644
--- a/sc/source/ui/vba/vbahelper.cxx
+++ b/sc/source/ui/vba/vbahelper.cxx
@@ -1,825 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <cppuhelper/bootstrap.hxx>
-#include <com/sun/star/util/XURLTransformer.hpp>
-#include <com/sun/star/frame/XDispatchProvider.hpp>
-#include <com/sun/star/frame/XModel.hpp>
-#include <com/sun/star/frame/XFrame.hpp>
-#include <com/sun/star/frame/XDesktop.hpp>
-#include <com/sun/star/frame/XController.hpp>
-#include <com/sun/star/uno/XComponentContext.hpp>
-#include <com/sun/star/lang/XMultiComponentFactory.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <com/sun/star/beans/XIntrospection.hpp>
-
-#include <comphelper/processfactory.hxx>
-
-#include <sfx2/objsh.hxx>
-#include <sfx2/viewfrm.hxx>
-#include <sfx2/dispatch.hxx>
-#include <sfx2/app.hxx>
-#include <svtools/stritem.hxx>
-
-#include <docuno.hxx>
-
-#include <basic/sbx.hxx>
-#include <basic/sbstar.hxx>
-#include <rtl/math.hxx>
-
-#include <math.h>
-#include "vbahelper.hxx"
-#include "tabvwsh.hxx"
-#include "transobj.hxx"
-#include "scmod.hxx"
-#include "vbashape.hxx"
-#include "unonames.hxx"
-#include "cellsuno.hxx"
-using namespace ::com::sun::star;
-using namespace ::ooo::vba;
-
-#define POINTTO100THMILLIMETERFACTOR 35.27778
-void unoToSbxValue( SbxVariable* pVar, const uno::Any& aValue );
-
-uno::Any sbxToUnoValue( SbxVariable* pVar );
-
-
-namespace ooo
-{
-namespace vba
-{
-
-const double Millimeter::factor =  35.27778;
-
-uno::Reference< beans::XIntrospectionAccess >
-getIntrospectionAccess( const uno::Any& aObject ) throw (uno::RuntimeException)
-{
-    static uno::Reference< beans::XIntrospection > xIntrospection;
-    if( !xIntrospection.is() )
-    {
-        uno::Reference< lang::XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
-        xIntrospection.set( xFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.beans.Introspection") ), uno::UNO_QUERY_THROW );
-    }
-    return xIntrospection->inspect( aObject );
-}
-
-uno::Reference< script::XTypeConverter >
-getTypeConverter( const uno::Reference< uno::XComponentContext >& xContext ) throw (uno::RuntimeException)
-{
-    static uno::Reference< script::XTypeConverter > xTypeConv( xContext->getServiceManager()->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.script.Converter") ), xContext ), uno::UNO_QUERY_THROW );
-    return xTypeConv;
-}
-// helper method to determine if the view ( calc ) is in print-preview mode
-bool isInPrintPreview( SfxViewFrame* pView )
-{
-    sal_uInt16 nViewNo = SID_VIEWSHELL1 - SID_VIEWSHELL0;
-    if ( pView->GetObjectShell()->GetFactory().GetViewFactoryCount() >
-nViewNo && !pView->GetObjectShell()->IsInPlaceActive() )
-    {
-        SfxViewFactory &rViewFactory =
-            pView->GetObjectShell()->GetFactory().GetViewFactory(nViewNo);
-        if (  pView->GetCurViewId() == rViewFactory.GetOrdinal() )
-            return true;
-    }
-    return false;
-}
-const ::rtl::OUString REPLACE_CELLS_WARNING(  RTL_CONSTASCII_USTRINGPARAM( "ReplaceCellsWarning"));
-const uno::Any&
-aNULL()
-{
-     static  uno::Any aNULLL = uno::makeAny( uno::Reference< uno::XInterface >() );
-    return aNULLL;
-}
-
-class PasteCellsWarningReseter
-{
-private:
-    bool bInitialWarningState;
-    static uno::Reference< beans::XPropertySet > getGlobalSheetSettings() throw ( uno::RuntimeException )
-    {
-        static uno::Reference< beans::XPropertySet > xTmpProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
-        static uno::Reference<uno::XComponentContext > xContext( xTmpProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY_THROW );
-        static uno::Reference<lang::XMultiComponentFactory > xServiceManager(
-                xContext->getServiceManager(), uno::UNO_QUERY_THROW );
-        static uno::Reference< beans::XPropertySet > xProps( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.sheet.GlobalSheetSettings" ) ) ,xContext ), uno::UNO_QUERY_THROW );
-        return xProps;
-    }
-
-    bool getReplaceCellsWarning() throw ( uno::RuntimeException )
-    {
-        sal_Bool res = sal_False;
-        getGlobalSheetSettings()->getPropertyValue( REPLACE_CELLS_WARNING ) >>= res;
-        return ( res == sal_True );
-    }
-
-    void setReplaceCellsWarning( bool bState ) throw ( uno::RuntimeException )
-    {
-        getGlobalSheetSettings()->setPropertyValue( REPLACE_CELLS_WARNING, uno::makeAny( bState ) );
-    }
-public:
-    PasteCellsWarningReseter() throw ( uno::RuntimeException )
-    {
-        bInitialWarningState = getReplaceCellsWarning();
-        if ( bInitialWarningState )
-            setReplaceCellsWarning( false );
-    }
-    ~PasteCellsWarningReseter()
-    {
-        if ( bInitialWarningState )
-        {
-            // don't allow dtor to throw
-            try
-            {
-                setReplaceCellsWarning( true );
-            }
-            catch ( uno::Exception& /*e*/ ){}
-        }
-    }
-};
-
-void
-dispatchRequests (uno::Reference< frame::XModel>& xModel,rtl::OUString & aUrl, uno::Sequence< beans::PropertyValue >& sProps )
-{
-
-    util::URL  url ;
-    url.Complete = aUrl;
-    rtl::OUString emptyString = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "" ));
-    uno::Reference<frame::XController> xController = xModel->getCurrentController();
-    uno::Reference<frame::XFrame> xFrame = xController->getFrame();
-    uno::Reference<frame::XDispatchProvider> xDispatchProvider (xFrame,uno::UNO_QUERY_THROW);
-    try
-    {
-        uno::Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
-        uno::Reference<uno::XComponentContext > xContext( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY_THROW  );
-        if ( !xContext.is() )
-        {
-            return ;
-        }
-
-        uno::Reference<lang::XMultiComponentFactory > xServiceManager(
-                xContext->getServiceManager() );
-        if ( !xServiceManager.is() )
-        {
-            return ;
-        }
-        uno::Reference<util::XURLTransformer> xParser( xServiceManager->createInstanceWithContext(     rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ) )
-            ,xContext), uno::UNO_QUERY_THROW );
-        if (!xParser.is())
-            return;
-        xParser->parseStrict (url);
-    }
-    catch ( uno::Exception & /*e*/ )
-    {
-        return ;
-    }
-
-    uno::Reference<frame::XDispatch> xDispatcher = xDispatchProvider->queryDispatch(url,emptyString,0);
-
-    uno::Sequence<beans::PropertyValue> dispatchProps(1);
-
-    sal_Int32 nProps = sProps.getLength();
-    beans::PropertyValue* pDest = dispatchProps.getArray();
-    if ( nProps )
-    {
-        dispatchProps.realloc( nProps + 1 );
-        // need to reaccquire pDest after realloc
-        pDest = dispatchProps.getArray();
-        beans::PropertyValue* pSrc = sProps.getArray();
-        for ( sal_Int32 index=0; index<nProps; ++index, ++pSrc, ++pDest )
-            *pDest = *pSrc;
-    }
-
-    (*pDest).Name = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Silent" ));
-    (*pDest).Value <<= (sal_Bool)sal_True;
-
-    if (xDispatcher.is())
-        xDispatcher->dispatch( url, dispatchProps );
-}
-
-void
-dispatchRequests (uno::Reference< frame::XModel>& xModel,rtl::OUString & aUrl) 
-{
-    uno::Sequence<beans::PropertyValue> dispatchProps;
-    dispatchRequests( xModel, aUrl, dispatchProps );
-}
-
-
-void dispatchExecute(css::uno::Reference< css::frame::XModel>& xModel, USHORT nSlot, SfxCallMode nCall)
-{
-    ScTabViewShell* pViewShell = getBestViewShell( xModel );
-    SfxViewFrame* pViewFrame = NULL;
-    if ( pViewShell )
-        pViewFrame = pViewShell->GetViewFrame();
-    if ( pViewFrame )
-    {
-        SfxDispatcher* pDispatcher = pViewFrame->GetDispatcher();
-        if( pDispatcher )
-        {
-            pDispatcher->Execute( nSlot , nCall );
-        }
-    }	
-}
-        
-void
-implnPaste()
-{
-    PasteCellsWarningReseter resetWarningBox;
-    ScTabViewShell* pViewShell = getCurrentBestViewShell();
-    if ( pViewShell )
-    {
-        pViewShell->PasteFromSystem();
-        pViewShell->CellContentChanged();
-    }
-}
-
-
-void
-implnCopy()
-{
-    ScTabViewShell* pViewShell = getCurrentBestViewShell();
-    if ( pViewShell )
-        pViewShell->CopyToClip(NULL,false,false,true);
-}
-
-void 
-implnCut()
-{
-    ScTabViewShell* pViewShell =  getCurrentBestViewShell();
-    if ( pViewShell )
-        pViewShell->CutToClip( NULL, TRUE );
-}
-
-void implnPasteSpecial(USHORT nFlags,USHORT nFunction,sal_Bool bSkipEmpty, sal_Bool bTranspose)
-{
-    PasteCellsWarningReseter resetWarningBox;
-    sal_Bool bAsLink(sal_False), bOtherDoc(sal_False);
-    InsCellCmd eMoveMode = INS_NONE;
-
-    ScTabViewShell* pTabViewShell = ScTabViewShell::GetActiveViewShell();
-    if ( !pTabViewShell ) 
-        // none active, try next best
-        pTabViewShell = getCurrentBestViewShell();
-    if ( pTabViewShell )
-    {
-        ScViewData* pView = pTabViewShell->GetViewData();	
-        Window* pWin = ( pView != NULL ) ? pView->GetActiveWin() : NULL;
-        if ( pView && pWin )
-        {
-            if ( bAsLink && bOtherDoc )
-                pTabViewShell->PasteFromSystem(0);//SOT_FORMATSTR_ID_LINK
-            else 
-            {
-                ScTransferObj* pOwnClip = ScTransferObj::GetOwnClipboard( pWin );
-                ScDocument* pDoc = NULL; 
-                if ( pOwnClip )
-                    pDoc = pOwnClip->GetDocument();	
-                pTabViewShell->PasteFromClip( nFlags, pDoc,
-                    nFunction, bSkipEmpty, bTranspose, bAsLink,
-                    eMoveMode, IDF_NONE, TRUE );
-                pTabViewShell->CellContentChanged();
-            }
-        }
-    }
-
-}
-
- uno::Reference< frame::XModel > 
-getCurrentDocument() throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel;
-    SbxObject* pBasic = dynamic_cast< SbxObject* > ( SFX_APP()->GetBasic() );
-    SbxObject* basicChosen =  pBasic ;
-    if ( basicChosen == NULL)
-    {
-        OSL_TRACE("getModelFromBasic() StarBASIC* is NULL" );
-        return xModel;
-    }    
-    SbxObject* p = pBasic;
-    SbxObject* pParent = p->GetParent();
-    SbxObject* pParentParent = pParent ? pParent->GetParent() : NULL;
-
-    if( pParentParent )
-    {
-        basicChosen = pParentParent;
-    }
-    else if( pParent )
-    {
-        basicChosen = pParent;
-    }
-
-
-    uno::Any aModel; 
-    SbxVariable *pCompVar = basicChosen->Find(  UniString(RTL_CONSTASCII_USTRINGPARAM("ThisComponent")), SbxCLASS_OBJECT );
-
-    if ( pCompVar )
-    {
-        aModel = sbxToUnoValue( pCompVar );
-        if ( sal_False == ( aModel >>= xModel ) ||
-            !xModel.is() )
-        {
-            // trying last gasp try the current component
-            uno::Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
-            // test if vba service is present
-            uno::Reference< uno::XComponentContext > xCtx( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY_THROW );
-            uno::Reference<lang::XMultiComponentFactory > xSMgr( xCtx->getServiceManager(), uno::UNO_QUERY_THROW );
-            uno::Reference< frame::XDesktop > xDesktop (xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"), xCtx), uno::UNO_QUERY_THROW );
-            xModel.set( xDesktop->getCurrentComponent(), uno::UNO_QUERY );
-            if ( !xModel.is() )
-            {
-                throw uno::RuntimeException( 
-                    rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Can't extract model from basic ( its obviously not set yet ) therefore don't know the currently selected document") ), uno::Reference< uno::XInterface >() );
-            }
-            return xModel;
-        }
-        else
-        {
-            OSL_TRACE("Have model ThisComponent points to url %s",
-            ::rtl::OUStringToOString( xModel->getURL(),
-                RTL_TEXTENCODING_ASCII_US ).pData->buffer );
-        }
-    }
-    else
-    {
-        OSL_TRACE("Failed to get ThisComponent");
-        throw uno::RuntimeException( 
-            rtl::OUString( 
-                RTL_CONSTASCII_USTRINGPARAM(
-                    "Can't determine the currently selected document") ),
-            uno::Reference< uno::XInterface >() );
-    }
-    return xModel;
-}
-
-ScDocShell* 
-getDocShell( css::uno::Reference< css::frame::XModel>& xModel ) 
-{
-    uno::Reference< uno::XInterface > xIf( xModel, uno::UNO_QUERY_THROW );
-    ScModelObj* pModel = dynamic_cast< ScModelObj* >( xIf.get() );
-    ScDocShell* pDocShell = NULL;
-    if ( pModel )
-        pDocShell = (ScDocShell*)pModel->GetEmbeddedObject();
-    return pDocShell;
-
-}
-
-ScTabViewShell* 
-getBestViewShell(  css::uno::Reference< css::frame::XModel>& xModel )
-{
-    ScDocShell* pDocShell = getDocShell( xModel );
-    if ( pDocShell )
-        return pDocShell->GetBestViewShell();
-    return NULL;
-}
-
-ScTabViewShell* 
-getCurrentBestViewShell()
-{ 
-    uno::Reference< frame::XModel > xModel = getCurrentDocument();
-    return getBestViewShell( xModel );
-}
-
-SfxViewFrame* 
-getCurrentViewFrame()
-{
-    ScTabViewShell* pViewShell = getCurrentBestViewShell();	
-    if ( pViewShell )
-        return pViewShell->GetViewFrame();
-    return NULL;
-}
-
-sal_Int32 
-OORGBToXLRGB( sal_Int32 nCol )
-{
-    sal_Int32 nRed = nCol;
-    nRed &= 0x00FF0000;
-    nRed >>= 16;
-    sal_Int32 nGreen = nCol;
-    nGreen &= 0x0000FF00;
-    nGreen >>= 8;
-    sal_Int32 nBlue = nCol;
-    nBlue &= 0x000000FF;
-    sal_Int32 nRGB =  ( (nBlue << 16) | (nGreen << 8) | nRed );
-    return nRGB;
-}
-sal_Int32 
-XLRGBToOORGB( sal_Int32 nCol )
-{
-    sal_Int32 nBlue = nCol;
-    nBlue &= 0x00FF0000;
-    nBlue >>= 16;
-    sal_Int32 nGreen = nCol;
-    nGreen &= 0x0000FF00;
-    nGreen >>= 8;
-    sal_Int32 nRed = nCol;
-    nRed &= 0x000000FF;
-    sal_Int32 nRGB =  ( (nRed << 16) | (nGreen << 8) | nBlue );
-    return nRGB;
-}
-uno::Any 
-OORGBToXLRGB( const uno::Any& aCol )
-{
-    sal_Int32 nCol=0;
-    aCol >>= nCol;
-    nCol = OORGBToXLRGB( nCol );
-    return uno::makeAny( nCol );
-}
-uno::Any 
-XLRGBToOORGB(  const uno::Any& aCol )
-{
-    sal_Int32 nCol=0;
-    aCol >>= nCol;
-    nCol = XLRGBToOORGB( nCol );
-    return uno::makeAny( nCol );
-}
-
-void PrintOutHelper( const uno::Any& From, const uno::Any& To, const uno::Any& Copies, const uno::Any& Preview, const uno::Any& /*ActivePrinter*/, const uno::Any& /*PrintToFile*/, const uno::Any& Collate, const uno::Any& PrToFileName, css::uno::Reference< frame::XModel >& xModel, sal_Bool bUseSelection  )
-{
-    sal_Int32 nTo = 0;
-    sal_Int32 nFrom = 0;
-    sal_Int16 nCopies = 1;
-    sal_Bool bPreview = sal_False;
-    sal_Bool bCollate = sal_False;
-    sal_Bool bSelection = bUseSelection;
-    From >>= nFrom;
-    To >>= nTo;
-    Copies >>= nCopies;
-    Preview >>= bPreview;
-    if ( nCopies > 1 ) // Collate only useful when more that 1 copy
-        Collate >>= bCollate;
-
-    rtl::OUString sRange(  RTL_CONSTASCII_USTRINGPARAM( "-" ) );
-    rtl::OUString sFileName;
-    
-    if (( nFrom || nTo ) )
-    {
-        if ( nFrom )
-            sRange = ( ::rtl::OUString::valueOf( nFrom ) + sRange );
-        if ( nTo )
-            sRange += ::rtl::OUString::valueOf( nTo );
-    }
-
-    if (  PrToFileName.getValue() )
-    {
-        PrToFileName >>= sFileName;
-    }
-    ScTabViewShell* pViewShell = getBestViewShell( xModel );
-    SfxViewFrame* pViewFrame = NULL;
-    if ( pViewShell )
-        pViewFrame = pViewShell->GetViewFrame();
-    if ( pViewFrame )
-    {
-        SfxAllItemSet aArgs( SFX_APP()->GetPool() );
-                
-        SfxBoolItem sfxCollate( SID_PRINT_COLLATE, bCollate );
-        aArgs.Put( sfxCollate, sfxCollate.Which() );
-        SfxInt16Item sfxCopies( SID_PRINT_COPIES, nCopies );
-        aArgs.Put( sfxCopies, sfxCopies.Which() );
-        if ( sFileName.getLength() )
-        {
-            SfxStringItem sfxFileName( SID_FILE_NAME, sFileName);
-            aArgs.Put( sfxFileName, sfxFileName.Which() );
-        
-        }
-        if (  sRange.getLength() )
-        {
-            SfxStringItem sfxRange( SID_PRINT_PAGES, sRange );
-            aArgs.Put( sfxRange, sfxRange.Which() );
-        }
-        SfxBoolItem sfxSelection( SID_SELECTION, bSelection );
-        aArgs.Put( sfxSelection, sfxSelection.Which() );
-        SfxBoolItem sfxAsync( SID_ASYNCHRON, sal_False );
-        aArgs.Put( sfxAsync, sfxAsync.Which() );
-        SfxDispatcher* pDispatcher = pViewFrame->GetDispatcher();
-
-        if ( pDispatcher )
-        {
-            if ( bPreview )
-            {
-                if ( !pViewFrame->GetFrame()->IsInPlace() ) 	
-                {
-                    SC_MOD()->InputEnterHandler();
-                    pViewFrame->GetDispatcher()->Execute( SID_VIEWSHELL1, SFX_CALLMODE_SYNCHRON );
-                    while ( isInPrintPreview( pViewFrame ) )
-                        Application::Yield();
-                }
-            }
-            else
-                pDispatcher->Execute( (USHORT)SID_PRINTDOC, (SfxCallMode)SFX_CALLMODE_SYNCHRON, aArgs );
-        }
-            
-    }
-    
-    // #FIXME #TODO
-    // 1 ActivePrinter ( how/can we switch a printer via API? )
-    // 2 PrintToFile ( ms behaviour if this option is specified but no 
-    //   filename supplied 'PrToFileName' then the user will be prompted )
-    // 3 Need to check behaviour of Selected sheets with range ( e.g. From & To
-    //    values ) in oOO these options are mutually exclusive
-    // 4 There is a pop up to do with transparent objects in the print source
-    //   should be able to disable that via configuration for the duration
-    //   of this method
-}
-
- void PrintPreviewHelper( const css::uno::Any& /*EnableChanges*/, css::uno::Reference< css::frame::XModel >& xModel )
-{
-    dispatchExecute( xModel, SID_VIEWSHELL1 );
-}
-
-rtl::OUString getAnyAsString( const uno::Any& pvargItem ) throw ( uno::RuntimeException )
-{
-    uno::Type aType = pvargItem.getValueType();
-    uno::TypeClass eTypeClass = aType.getTypeClass();
-    rtl::OUString sString;
-    switch ( eTypeClass )
-    {
-        case uno::TypeClass_BOOLEAN:
-        {
-            sal_Bool bBool = sal_False;
-            pvargItem >>= bBool;
-            sString = rtl::OUString::valueOf( bBool );
-            break;
-        }
-        case uno::TypeClass_STRING:
-            pvargItem >>= sString;
-            break;
-        case uno::TypeClass_FLOAT:
-            {
-                float aFloat = 0;
-                pvargItem >>= aFloat;
-                sString = rtl::OUString::valueOf( aFloat );
-                break;
-            }
-        case uno::TypeClass_DOUBLE:
-            {
-                double aDouble = 0;
-                pvargItem >>= aDouble;
-                sString = rtl::OUString::valueOf( aDouble );
-                break;
-            }
-        case uno::TypeClass_SHORT:
-        case uno::TypeClass_LONG:
-        case uno::TypeClass_BYTE:
-            {
-                sal_Int32 aNum = 0;
-                pvargItem >>= aNum;
-                sString = rtl::OUString::valueOf( aNum );
-                break;
-            }
-
-        case uno::TypeClass_HYPER:
-            {
-                sal_Int64 aHyper = 0;
-                pvargItem >>= aHyper;
-                sString = rtl::OUString::valueOf( aHyper );
-                break;
-            }
-        default:
-                   throw uno::RuntimeException( rtl::OUString::createFromAscii( "Invalid type, can't convert" ), uno::Reference< uno::XInterface >() );
-    }
-    return sString;
-}
-
-
-rtl::OUString 
-ContainerUtilities::getUniqueName( const uno::Sequence< ::rtl::OUString >&  _slist, const rtl::OUString& _sElementName, const ::rtl::OUString& _sSuffixSeparator)
-{
-    return getUniqueName(_slist, _sElementName, _sSuffixSeparator, sal_Int32(2));
-}
-
-rtl::OUString 
-ContainerUtilities::getUniqueName( const uno::Sequence< rtl::OUString >& _slist, const rtl::OUString _sElementName, const rtl::OUString& _sSuffixSeparator, sal_Int32 _nStartSuffix)
-{
-    sal_Int32 a = _nStartSuffix;
-    rtl::OUString scompname = _sElementName;
-    bool bElementexists = true;
-    sal_Int32 nLen = _slist.getLength();
-    if ( nLen == 0 )
-        return _sElementName;
-
-    while (bElementexists == true) 
-    {
-        for (sal_Int32 i = 0; i < nLen; i++)
-        {
-            if (FieldInList(_slist, scompname) == -1)
-            {
-                return scompname;
-            }
-        }
-        scompname = _sElementName + _sSuffixSeparator + rtl::OUString::valueOf( a++ );
-    }
-    return rtl::OUString();
-}
-
-sal_Int32 
-ContainerUtilities::FieldInList( const uno::Sequence< rtl::OUString >& SearchList, const rtl::OUString& SearchString )
-{
-    sal_Int32 FieldLen = SearchList.getLength();
-    sal_Int32 retvalue = -1;
-    for (sal_Int32 i = 0; i < FieldLen; i++) 
-    {
-        // I wonder why comparing lexicographically is done
-        // when its a match is whats interesting?
-        //if (SearchList[i].compareTo(SearchString) == 0) 
-        if ( SearchList[i].equals( SearchString ) ) 
-        {
-            retvalue = i;
-            break;
-        }
-    }
-    return retvalue;
-
-}
-bool NeedEsc(sal_Unicode cCode)
-{
-    String sEsc(RTL_CONSTASCII_USTRINGPARAM(".^$+\\|{}()"));
-    return (STRING_NOTFOUND != sEsc.Search(cCode));
-}
-
-rtl::OUString VBAToRegexp(const rtl::OUString &rIn, bool bForLike )
-{
-    rtl::OUStringBuffer sResult;
-    const sal_Unicode *start = rIn.getStr();
-    const sal_Unicode *end = start + rIn.getLength();
-
-    int seenright = 0;
-    if ( bForLike )
-        sResult.append(static_cast<sal_Unicode>('^'));
-
-    while (start < end) 
-    {
-        switch (*start)
-        {
-            case '?':
-                sResult.append(static_cast<sal_Unicode>('.'));
-                start++;
-                break;
-            case '*':
-                sResult.append(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM(".*")));
-                start++;
-                break;
-            case '#':
-                sResult.append(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("[0-9]")));
-                start++;
-                break;
-            case '~':
-                sResult.append(static_cast<sal_Unicode>('\\'));
-                sResult.append(*(++start));
-                start++;
-                break;
-                // dump the ~ and escape the next characture
-            case ']':
-                sResult.append(static_cast<sal_Unicode>('\\'));
-                sResult.append(*start++);
-                break;
-            case '[':
-                sResult.append(*start++);
-                seenright = 0;
-                while (start < end && !seenright)
-                {
-                    switch (*start)
-                    {
-                        case '[':
-                        case '?':
-                        case '*':
-                        sResult.append(static_cast<sal_Unicode>('\\'));
-                        sResult.append(*start);
-                            break;
-                        case ']':
-                        sResult.append(*start);
-                            seenright = 1;
-                            break;
-                        case '!':
-                            sResult.append(static_cast<sal_Unicode>('^'));
-                            break;
-                        default:
-                        if (NeedEsc(*start))
-                            sResult.append(static_cast<sal_Unicode>('\\'));
-                        sResult.append(*start);
-                            break;
-                    }
-                    start++;
-                }
-                break;
-            default:
-                if (NeedEsc(*start))
-                    sResult.append(static_cast<sal_Unicode>('\\'));
-                sResult.append(*start++);
-        }
-    }
-
-    if ( bForLike )
-        sResult.append(static_cast<sal_Unicode>('$'));
-
-    return sResult.makeStringAndClear( );
-}
-
-double getPixelTo100thMillimeterConversionFactor( css::uno::Reference< css::awt::XDevice >& xDevice, sal_Bool bVertical)
-{
-    double fConvertFactor = 1.0;
-    if( bVertical )
-    {
-        fConvertFactor = xDevice->getInfo().PixelPerMeterY/100000;
-    }
-    else
-    {
-        fConvertFactor = xDevice->getInfo().PixelPerMeterX/100000;	
-    }
-    return fConvertFactor;
-}
-
-double PointsToPixels( css::uno::Reference< css::awt::XDevice >& xDevice, double fPoints, sal_Bool bVertical)
-{
-    double fConvertFactor = getPixelTo100thMillimeterConversionFactor( xDevice, bVertical );
-    return fPoints * POINTTO100THMILLIMETERFACTOR * fConvertFactor;
-}
-double PixelsToPoints( css::uno::Reference< css::awt::XDevice >& xDevice, double fPixels, sal_Bool bVertical)
-{
-    double fConvertFactor = getPixelTo100thMillimeterConversionFactor( xDevice, bVertical );
-    return (fPixels/fConvertFactor)/POINTTO100THMILLIMETERFACTOR;
-}
-
-ConcreteXShapeGeometryAttributes::ConcreteXShapeGeometryAttributes( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape )
-{
-    m_xShape = new ScVbaShape( xContext, xShape );
-}
-
-#define VBA_LEFT "PositionX"
-#define VBA_TOP "PositionY"
-UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComponentContext >& /*xContext*/, const uno::Reference< awt::XControl >& xControl )
-{
-    mxModel.set( xControl->getModel(), uno::UNO_QUERY_THROW );
-}
-    double UserFormGeometryHelper::getLeft()
-    {
-    sal_Int32 nLeft = 0;
-    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ) ) >>= nLeft;	
-    return Millimeter::getInPoints( nLeft );
-    }
-    void UserFormGeometryHelper::setLeft( double nLeft )
-    {
-        mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nLeft ) ) );
-    }
-    double UserFormGeometryHelper::getTop()
-    {
-    sal_Int32 nTop = 0;
-    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	VBA_TOP ) ) ) >>= nTop;	
-    return Millimeter::getInPoints( nTop );
-    }
-    void UserFormGeometryHelper::setTop( double nTop )
-    {
-    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	VBA_TOP ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nTop ) ) );
-    }
-    double UserFormGeometryHelper::getHeight()
-    {
-    sal_Int32 nHeight = 0;
-    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	SC_UNONAME_CELLHGT ) ) ) >>= nHeight;	
-    return Millimeter::getInPoints( nHeight );
-    }
-    void UserFormGeometryHelper::setHeight( double nHeight )
-    {
-    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	SC_UNONAME_CELLHGT ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nHeight ) ) );
-    }
-    double UserFormGeometryHelper::getWidth()
-    {
-    sal_Int32 nWidth = 0;
-    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	SC_UNONAME_CELLWID ) ) ) >>= nWidth;	
-    return Millimeter::getInPoints( nWidth );
-    }
-    void UserFormGeometryHelper::setWidth( double nWidth)
-    {
-    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	SC_UNONAME_CELLWID ) ), uno::makeAny(  Millimeter::getInHundredthsOfOneMillimeter( nWidth ) ) );
-    }
-
-SfxItemSet*
-ScVbaCellRangeAccess::GetDataSet( ScCellRangeObj* pRangeObj )
-{
-    SfxItemSet* pDataSet = pRangeObj ? pRangeObj->GetCurrentDataSet( true ) : NULL ;
-    return pDataSet;
-    
-}
-
-} // openoffice
-} //org
diff --git a/sc/source/ui/vba/vbahelper.hxx b/sc/source/ui/vba/vbahelper.hxx
index bf724ce..e69de29 100644
--- a/sc/source/ui/vba/vbahelper.hxx
+++ b/sc/source/ui/vba/vbahelper.hxx
@@ -1,349 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_HELPER_HXX
-#define SC_VBA_HELPER_HXX
-
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/beans/XIntrospectionAccess.hpp>
-#include <com/sun/star/script/BasicErrorException.hpp>
-#include <com/sun/star/script/XTypeConverter.hpp>
-#include <com/sun/star/lang/IllegalArgumentException.hpp>
-#include <com/sun/star/awt/XControl.hpp>
-#include <com/sun/star/awt/XDevice.hpp>
-#include <basic/sberrors.hxx>
-#include <cppuhelper/implbase1.hxx>
-#include <com/sun/star/frame/XModel.hpp>
-#include <docsh.hxx>
-#include <sfx2/dispatch.hxx>
-#include <ooo/vba/msforms/XShape.hpp>
-#include "cellsuno.hxx"
-
-namespace css = ::com::sun::star;
-
-namespace ooo 
-{
-    namespace vba 
-    {
-        template < class T > 
-        css::uno::Reference< T > getXSomethingFromArgs( css::uno::Sequence< css::uno::Any > const & args, sal_Int32 nPos, bool bCanBeNull = true ) throw (css::lang::IllegalArgumentException)
-        {
-            if ( args.getLength() < ( nPos + 1) )
-                throw css::lang::IllegalArgumentException();
-            css::uno::Reference< T > aSomething( args[ nPos ], css::uno::UNO_QUERY );
-            if ( !bCanBeNull && !aSomething.is() )
-                throw css::lang::IllegalArgumentException();
-            return aSomething;
-        }
-        css::uno::Reference< css::beans::XIntrospectionAccess > getIntrospectionAccess( const css::uno::Any& aObject ) throw (css::uno::RuntimeException);
-        css::uno::Reference< css::script::XTypeConverter > getTypeConverter( const css::uno::Reference< css::uno::XComponentContext >& xContext ) throw (css::uno::RuntimeException);
-
-        void dispatchRequests (css::uno::Reference< css::frame::XModel>& xModel,rtl::OUString & aUrl) ;
-        void dispatchRequests (css::uno::Reference< css::frame::XModel>& xModel,rtl::OUString & aUrl, css::uno::Sequence< css::beans::PropertyValue >& sProps ) ;
-        void dispatchExecute(css::uno::Reference< css::frame::XModel>& xModel, USHORT nSlot, SfxCallMode nCall = SFX_CALLMODE_SYNCHRON );
-        void implnCopy();
-        void implnPaste();
-        void implnCut();
-        void implnPasteSpecial(sal_uInt16 nFlags,sal_uInt16 nFunction,sal_Bool bSkipEmpty, sal_Bool bTranspose);
-        css::uno::Reference< css::frame::XModel >
-            getCurrentDocument() throw (css::uno::RuntimeException);
-        ScTabViewShell* getBestViewShell( css::uno::Reference< css::frame::XModel>& xModel ) ;
-        ScDocShell* getDocShell( css::uno::Reference< css::frame::XModel>& xModel ) ;
-        ScTabViewShell* getCurrentBestViewShell();
-        SfxViewFrame* getCurrentViewFrame();
-        sal_Int32 OORGBToXLRGB( sal_Int32 );
-        sal_Int32 XLRGBToOORGB( sal_Int32 );
-        css::uno::Any OORGBToXLRGB( const css::uno::Any& );
-        css::uno::Any XLRGBToOORGB( const css::uno::Any& );
-        // provide a NULL object that can be passed as variant so that 
-        // the object when passed to IsNull will return true. aNULL 
-        // contains an empty object reference
-        const css::uno::Any& aNULL();
-        void PrintOutHelper( const css::uno::Any& From, const css::uno::Any& To, const css::uno::Any& Copies, const css::uno::Any& Preview, const css::uno::Any& ActivePrinter, const css::uno::Any& PrintToFile, const css::uno::Any& Collate, const css::uno::Any& PrToFileName, css::uno::Reference< css::frame::XModel >& xModel, sal_Bool bSelection  );
-        void PrintPreviewHelper( const css::uno::Any& EnableChanges, css::uno::Reference< css::frame::XModel >& xModel );
-
-        rtl::OUString getAnyAsString( const css::uno::Any& pvargItem ) throw ( css::uno::RuntimeException );
-        rtl::OUString VBAToRegexp(const rtl::OUString &rIn, bool bForLike = false); // needs to be in an uno service ( already this code is duplicated in basic )
-    double getPixelTo100thMillimeterConversionFactor( css::uno::Reference< css::awt::XDevice >& xDevice, sal_Bool bVertical);
-    double PointsToPixels( css::uno::Reference< css::awt::XDevice >& xDevice, double fPoints, sal_Bool bVertical);
-    double PixelsToPoints( css::uno::Reference< css::awt::XDevice >& xDevice, double fPoints, sal_Bool bVertical);
-
-
-class ScVbaCellRangeAccess
-{
-public:
-    static SfxItemSet* GetDataSet( ScCellRangeObj* pRangeObj );
-};
-
-class Millimeter
-{
-//Factor to translate between points and hundredths of millimeters:
-private:
-    static const double factor;
-    
-    double m_nMillimeter;
-
-public:
-    Millimeter():m_nMillimeter(0) {}
-    
-    Millimeter(double mm):m_nMillimeter(mm) {}
-    
-    void set(double mm) { m_nMillimeter = mm; }
-    void setInPoints(double points) 
-    { 
-        m_nMillimeter = points * 0.352777778; 
-        // 25.4mm / 72 
-    }
-      
-    void setInHundredthsOfOneMillimeter(double hmm)
-    {
-        m_nMillimeter = hmm / 100;
-    }
-    
-    double get()
-    {
-        return m_nMillimeter;
-    }
-    double getInHundredthsOfOneMillimeter()
-    {
-        return m_nMillimeter * 100;
-    }
-    double getInPoints()
-    {
-        return m_nMillimeter * 2.834645669; // 72 / 25.4mm
-    }    
-
-    static sal_Int32 getInHundredthsOfOneMillimeter(double points)
-    {
-        sal_Int32 mm = static_cast<sal_Int32>(points * factor);
-        return mm;
-    }
-    
-    static double getInPoints(int _hmm)
-    {
-        double points = double( static_cast<double>(_hmm) / factor);
-        return points;
-    }
-};
-
-class AbstractGeometryAttributes // probably should replace the ShapeHelper below
-{
-public:
-    virtual ~AbstractGeometryAttributes() {}
-    virtual double getLeft() = 0;
-    virtual void setLeft( double ) = 0;
-    virtual double getTop() = 0;
-    virtual void setTop( double ) = 0;
-    virtual double getHeight() = 0;
-    virtual void setHeight( double ) = 0;
-    virtual double getWidth() = 0;
-    virtual void setWidth( double ) = 0;
-};
-
-class ConcreteXShapeGeometryAttributes : public AbstractGeometryAttributes
-{
-public:
-    css::uno::Reference< ooo::vba::msforms::XShape > m_xShape; 
-    ConcreteXShapeGeometryAttributes( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape );
-    virtual double getLeft()
-    {
-        return m_xShape->getLeft();
-    }
-    virtual void setLeft( double nLeft )
-    {
-        m_xShape->setLeft( nLeft );
-    }
-    virtual double getTop()
-    {
-        return m_xShape->getTop();
-    }
-    virtual void setTop( double nTop )
-    {
-        m_xShape->setTop( nTop );
-    }
-
-    virtual double getHeight()
-    {
-        return m_xShape->getHeight();
-    }
-    virtual void setHeight( double nHeight )
-    {
-        m_xShape->setHeight( nHeight );
-    }
-    virtual double getWidth()
-    {
-        return m_xShape->getWidth();
-    }
-    virtual void setWidth( double nWidth)
-    {
-        m_xShape->setHeight( nWidth );
-    }
-
-   
-};
-#define VBA_LEFT "PositionX"
-#define VBA_TOP "PositionY"
-class UserFormGeometryHelper : public AbstractGeometryAttributes
-{
-
-    css::uno::Reference< css::beans::XPropertySet > mxModel;
-public:
-    UserFormGeometryHelper( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::awt::XControl >& xControl );
-    virtual double getLeft();
-    virtual void setLeft( double nLeft );
-    virtual double getTop();
-    virtual void setTop( double nTop );
-    virtual double getHeight();
-    virtual void setHeight( double nHeight );
-    virtual double getWidth();
-    virtual void setWidth( double nWidth);
-};
-
-class ShapeHelper
-{
-protected:
-    css::uno::Reference< css::drawing::XShape > xShape;
-public:
-    ShapeHelper( const css::uno::Reference< css::drawing::XShape >& _xShape) throw (css::script::BasicErrorException ) : xShape( _xShape )
-    { 
-        if( !xShape.is() ) 
-            throw css::uno::RuntimeException( rtl::OUString::createFromAscii("No valid shape for helper"), css::uno::Reference< css::uno::XInterface >() );
-    }
-    
-    double getHeight()
-    {
-            return  Millimeter::getInPoints(xShape->getSize().Height);
-        }
-
-
-        void setHeight(double _fheight) throw ( css::script::BasicErrorException )
-    {
-        try
-        {
-            css::awt::Size aSize = xShape->getSize();
-            aSize.Height = Millimeter::getInHundredthsOfOneMillimeter(_fheight);
-            xShape->setSize(aSize);
-        }
-        catch ( css::uno::Exception& /*e*/)
-        {
-            throw css::script::BasicErrorException( rtl::OUString(), css::uno::Reference< css::uno::XInterface >(), SbERR_METHOD_FAILED, rtl::OUString() );
-            }
-    }
-    
-    
-    double getWidth()
-    { 
-        return Millimeter::getInPoints(xShape->getSize().Width);
-        }
-
-    void setWidth(double _fWidth) throw ( css::script::BasicErrorException )
-    {
-        try
-        {
-            css::awt::Size aSize = xShape->getSize();
-            aSize.Width = Millimeter::getInHundredthsOfOneMillimeter(_fWidth);
-            xShape->setSize(aSize);
-        }
-        catch (css::uno::Exception& /*e*/)
-        {
-            throw css::script::BasicErrorException( rtl::OUString(), css::uno::Reference< css::uno::XInterface >(), SbERR_METHOD_FAILED, rtl::OUString() );
-        }
-    }
-    
-    
-    double getLeft()
-    {
-        return Millimeter::getInPoints(xShape->getPosition().X);
-    }
-
-    
-    void setLeft(double _fLeft)
-    {
-        css::awt::Point aPoint = xShape->getPosition();
-        aPoint.X = Millimeter::getInHundredthsOfOneMillimeter(_fLeft);
-        xShape->setPosition(aPoint);
-    }
-    
-
-    double getTop()
-    {
-            return Millimeter::getInPoints(xShape->getPosition().Y);
-    }
-
-    
-    void setTop(double _fTop)
-    {
-        css::awt::Point aPoint = xShape->getPosition();
-        aPoint.Y = Millimeter::getInHundredthsOfOneMillimeter(_fTop);
-        xShape->setPosition(aPoint);
-    }
-    
-};
-
-class ContainerUtilities
-{
-
-public: 
-    static rtl::OUString getUniqueName( const css::uno::Sequence< ::rtl::OUString >&  _slist, const rtl::OUString& _sElementName, const ::rtl::OUString& _sSuffixSeparator);
-    static rtl::OUString getUniqueName( const css::uno::Sequence< rtl::OUString >& _slist, const rtl::OUString _sElementName, const rtl::OUString& _sSuffixSeparator, sal_Int32 _nStartSuffix );
-
-    static sal_Int32 FieldInList( const css::uno::Sequence< rtl::OUString >& SearchList, const rtl::OUString& SearchString );
-};
-
-// really just a a place holder to ease the porting pain
-class DebugHelper
-{
-public:
-    static void exception( const rtl::OUString&  DetailedMessage, const css::uno::Exception& ex,  int err, const rtl::OUString& /*additionalArgument*/ ) throw( css::script::BasicErrorException )
-    {
-        // #TODO #FIXME ( do we want to support additionalArg here )
-        throw css::script::BasicErrorException( DetailedMessage.concat( rtl::OUString::createFromAscii(" ") ).concat( ex.Message ), css::uno::Reference< css::uno::XInterface >(), err, rtl::OUString() );
-    }
-
-    static void exception( int err,  const rtl::OUString& additionalArgument ) throw( css::script::BasicErrorException )
-    {
-        exception( rtl::OUString(), css::uno::Exception(), err, additionalArgument );
-    }
-
-    static void exception( css::uno::Exception& ex ) throw( css::script::BasicErrorException )
-    {
-        exception( rtl::OUString(), ex, SbERR_INTERNAL_ERROR, rtl::OUString() );
-    }
-};
-    } // openoffice
-} // org
-
-namespace ov = ooo::vba;
-
-#ifdef DEBUG
-#  define SC_VBA_FIXME(a) OSL_TRACE( a )
-#  define SC_VBA_STUB() SC_VBA_FIXME(( "%s - stubbed\n", __FUNCTION__ ))
-#else
-#  define SC_VBA_FIXME(a)
-#  define SC_VBA_STUB()
-#endif
-
-#endif
diff --git a/sc/source/ui/vba/vbahelperinterface.hxx b/sc/source/ui/vba/vbahelperinterface.hxx
index de17760..e69de29 100644
--- a/sc/source/ui/vba/vbahelperinterface.hxx
+++ b/sc/source/ui/vba/vbahelperinterface.hxx
@@ -1,113 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_HELPERINTERFACE_HXX
-#define SC_VBA_HELPERINTERFACE_HXX
-
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/XHelperInterface.hpp>
-#include "vbahelper.hxx"
-#include "vbaglobals.hxx"
-
-// use this class when you have an a object like
-// interface  XAnInterface which contains XHelperInterface in its inheritance hierarchy
-// interface XAnInterface
-// { 
-//     interface XHelperInterface;
-//     [attribute, string] name;
-// }
-// or
-// interface XAnInterface : XHelperInterface;
-// { 
-//     [attribute, string] name;
-// }
-//
-// then this class can provide a default implementation of XHelperInterface,
-// you can use it like this
-// typedef InheritedHelperInterfaceImpl< XAnInterface > > AnInterfaceImpl_BASE;
-// class AnInterfaceImpl : public AnInterfaceImpl_BASE
-// {
-// public:
-//     AnInterface( const Reference< HelperInterface >& xParent ) : AnInterfaceImpl_BASE( xParent ) {}
-//     // implement XAnInterface methods only, no need to implement the XHelperInterface 
-//     // methods
-//     virtual void setName( const OUString& );  
-//     virtual OUString getName();  
-// }
-//
-const ::rtl::OUString sHelperServiceName( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.HelperServiceBase" ) );
-
-template< typename Ifc1 >
-class InheritedHelperInterfaceImpl : public Ifc1
-{
-protected: 
-    css::uno::WeakReference< ov::XHelperInterface > mxParent;
-    css::uno::Reference< css::uno::XComponentContext > mxContext;
-public:
-    InheritedHelperInterfaceImpl() {}
-    InheritedHelperInterfaceImpl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext ) : mxParent( xParent ), mxContext( xContext ) {}
-    virtual rtl::OUString& getServiceImplName() = 0;
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames() = 0;
-
-    // XHelperInterface Methods
-    virtual ::sal_Int32 SAL_CALL getCreator() throw (css::script::BasicErrorException, css::uno::RuntimeException)
-    {
-        return 0x53756E4F;
-    }
-    virtual css::uno::Reference< ov::XHelperInterface > SAL_CALL getParent(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException) { return mxParent; }
-    
-    virtual css::uno::Any SAL_CALL Application(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException) { return  css::uno::makeAny( ScVbaGlobals::getGlobalsImpl( mxContext )->getApplication() ); }
-
-
-    // XServiceInfo Methods
-    virtual ::rtl::OUString SAL_CALL getImplementationName(  ) throw (css::uno::RuntimeException) { return getServiceImplName(); }
-    virtual ::sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw (css::uno::RuntimeException) 
-    { 
-        css::uno::Sequence< rtl::OUString > sServices = getSupportedServiceNames();
-        const rtl::OUString* pStart = sServices.getConstArray();
-        const rtl::OUString* pEnd = pStart + sServices.getLength();
-        for ( ; pStart != pEnd ; ++pStart )
-            if ( (*pStart).equals( ServiceName ) )
-                return sal_True;
-        return sal_False;	
-    }
-    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) throw (css::uno::RuntimeException) 
-    { 
-        css::uno::Sequence< rtl::OUString > aNames = getServiceNames();;
-        return aNames;
-    }
- };
-
-template< typename Ifc1 >
-class InheritedHelperInterfaceImpl1 : public InheritedHelperInterfaceImpl< ::cppu::WeakImplHelper1< Ifc1 > >
-
-{
-typedef InheritedHelperInterfaceImpl< ::cppu::WeakImplHelper1< Ifc1 > > Base;
-public:
-    InheritedHelperInterfaceImpl1< Ifc1 > ( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext ) : Base( xParent, xContext ) {}	
-
-};
-#endif
diff --git a/sc/source/ui/vba/vbahyperlink.cxx b/sc/source/ui/vba/vbahyperlink.cxx
index 6f424c7..17d83a9 100644
--- a/sc/source/ui/vba/vbahyperlink.cxx
+++ b/sc/source/ui/vba/vbahyperlink.cxx
@@ -24,7 +24,7 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 #include "vbahyperlink.hxx"
 #include <com/sun/star/container/XIndexAccess.hpp>
 #include <com/sun/star/text/XTextFieldsSupplier.hpp> 
diff --git a/sc/source/ui/vba/vbahyperlink.hxx b/sc/source/ui/vba/vbahyperlink.hxx
index 34e868c..4680fab 100644
--- a/sc/source/ui/vba/vbahyperlink.hxx
+++ b/sc/source/ui/vba/vbahyperlink.hxx
@@ -32,7 +32,7 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <ooo/vba/excel/XRange.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XHyperlink > HyperlinkImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbaimage.cxx b/sc/source/ui/vba/vbaimage.cxx
index f782639..e69de29 100644
--- a/sc/source/ui/vba/vbaimage.cxx
+++ b/sc/source/ui/vba/vbaimage.cxx
@@ -1,56 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbaimage.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-ScVbaImage::ScVbaImage( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ImageImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-rtl::OUString& 
-ScVbaImage::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaImage") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaImage::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Image" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbaimage.hxx b/sc/source/ui/vba/vbaimage.hxx
index ecb4274..e69de29 100644
--- a/sc/source/ui/vba/vbaimage.hxx
+++ b/sc/source/ui/vba/vbaimage.hxx
@@ -1,45 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_IMAGE_HXX
-#define SC_VBA_IMAGE_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XImage.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XImage > ImageImpl_BASE;
-
-class ScVbaImage : public ImageImpl_BASE
-{
-public:
-    ScVbaImage( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_IMAGE_HXX
diff --git a/sc/source/ui/vba/vbainterior.cxx b/sc/source/ui/vba/vbainterior.cxx
index 3f8918a..7a805ae 100644
--- a/sc/source/ui/vba/vbainterior.cxx
+++ b/sc/source/ui/vba/vbainterior.cxx
@@ -159,11 +159,19 @@ ScVbaInterior::setColorIndex( const css::uno::Any& _colorindex ) throw (css::uno
 {
     sal_Int32 nIndex = 0;
     _colorindex >>= nIndex;
-    
-    // setColor expects colors in XL RGB values
-    // #FIXME this is daft we convert OO RGB val to XL RGB val and
-    // then back again to OO RGB value
-    setColor( OORGBToXLRGB( GetIndexColor( nIndex ) ) );
+
+    // hackly for excel::XlColorIndex::xlColorIndexNone
+    if( nIndex == excel::XlColorIndex::xlColorIndexNone )
+    {
+        m_xProps->setPropertyValue( BACKCOLOR, uno::makeAny( sal_Int32( -1 ) ) );
+    }
+    else
+    {
+        // setColor expects colors in XL RGB values
+        // #FIXME this is daft we convert OO RGB val to XL RGB val and
+        // then back again to OO RGB value
+        setColor( OORGBToXLRGB( GetIndexColor( nIndex ) ) );
+    }
 }
 uno::Any
 ScVbaInterior::GetIndexColor( const sal_Int32& nColorIndex )
@@ -201,13 +209,21 @@ uno::Any SAL_CALL
 ScVbaInterior::getColorIndex() throw ( css::uno::RuntimeException )
 {
     sal_Int32 nColor = 0;
+    // hackly for excel::XlColorIndex::xlColorIndexNone
+    uno::Any aColor = m_xProps->getPropertyValue( BACKCOLOR );
+    if( ( aColor >>= nColor ) && ( nColor == -1 ) )
+    {
+        nColor = excel::XlColorIndex::xlColorIndexNone;
+        return uno::makeAny( nColor );
+    }
+
     // getColor returns Xl ColorValue, need to convert it to OO val
     // as the palette deals with OO RGB values 
     // #FIXME this is daft in getColor we convert OO RGB val to XL RGB val 
     // and then back again to OO RGB value
     XLRGBToOORGB( getColor() ) >>= nColor; 
      
-    return uno::makeAny( GetIndexColor( nColor ) );
+    return uno::makeAny( GetColorIndex( nColor ) );
 }
 Color
 ScVbaInterior::GetPatternColor( const Color& rPattColor, const Color& rBackColor, sal_uInt32 nXclPattern )
diff --git a/sc/source/ui/vba/vbainterior.hxx b/sc/source/ui/vba/vbainterior.hxx
index d1a24e2..b6cef3e 100644
--- a/sc/source/ui/vba/vbainterior.hxx
+++ b/sc/source/ui/vba/vbainterior.hxx
@@ -31,9 +31,10 @@
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/container/XIndexAccess.hpp>
+#include <com/sun/star/container/XNameContainer.hpp>
 
 #include <com/sun/star/script/XInvocation.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 class ScDocument;
 
diff --git a/sc/source/ui/vba/vbalabel.cxx b/sc/source/ui/vba/vbalabel.cxx
index 9ef6c2c..e69de29 100644
--- a/sc/source/ui/vba/vbalabel.cxx
+++ b/sc/source/ui/vba/vbalabel.cxx
@@ -1,85 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbalabel.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-ScVbaLabel::ScVbaLabel(  const css::uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : LabelImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaLabel::getCaption() throw (css::uno::RuntimeException)
-{
-    rtl::OUString Label;
-    m_xProps->getPropertyValue( LABEL ) >>= Label;
-    return Label;
-}
-
-void SAL_CALL 
-ScVbaLabel::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
-}
-uno::Any SAL_CALL 
-ScVbaLabel::getValue() throw (css::uno::RuntimeException)
-{
-    return uno::makeAny( getCaption() );
-}
-
-void SAL_CALL 
-ScVbaLabel::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
-{
-    rtl::OUString sCaption;
-    _value >>= sCaption;
-    setCaption( sCaption ); 
-}
-
-
-rtl::OUString& 
-ScVbaLabel::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaLabel") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaLabel::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Label" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbalabel.hxx b/sc/source/ui/vba/vbalabel.hxx
index 6286061..e69de29 100644
--- a/sc/source/ui/vba/vbalabel.hxx
+++ b/sc/source/ui/vba/vbalabel.hxx
@@ -1,53 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_LABEL_HXX
-#define SC_VBA_LABEL_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XLabel.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-#include <cppuhelper/implbase2.hxx>
-
-typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XLabel, css::script::XDefaultProperty  > LabelImpl_BASE;
-
-class ScVbaLabel : public LabelImpl_BASE
-{
-public:
-    ScVbaLabel( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-};
-#endif //SC_VBA_LABEL_HXX
diff --git a/sc/source/ui/vba/vbalineformat.cxx b/sc/source/ui/vba/vbalineformat.cxx
index f4ddb77..e69de29 100644
--- a/sc/source/ui/vba/vbalineformat.cxx
+++ b/sc/source/ui/vba/vbalineformat.cxx
@@ -1,455 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <ooo/vba/office/MsoArrowheadStyle.hpp>
-#include <ooo/vba/office/MsoArrowheadLength.hpp>
-#include <ooo/vba/office/MsoArrowheadWidth.hpp>
-#include <ooo/vba/office/MsoLineDashStyle.hpp>
-#include <com/sun/star/drawing/LineStyle.hpp>
-#include <com/sun/star/drawing/LineDash.hpp>
-#include "vbalineformat.hxx"
-#include "vbacolorformat.hxx"
-
-using namespace ooo::vba;
-using namespace com::sun::star;
-
-ScVbaLineFormat::ScVbaLineFormat( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape > xShape ) : ScVbaLineFormat_BASE( xParent, xContext ), m_xShape( xShape ) 
-{
-    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
-    m_nLineDashStyle = office::MsoLineDashStyle::msoLineSolid;
-    m_nLineWeight = 1;
-}
-
-sal_Int32
-ScVbaLineFormat::calculateArrowheadSize()
-{
-    return 0;
-}
-
-sal_Int32
-ScVbaLineFormat::convertLineStartEndNameToArrowheadStyle( rtl::OUString sLineName )
-{
-    sal_Int32 nLineType = office::MsoArrowheadStyle::msoArrowheadNone;
-    if (sLineName.equals(rtl::OUString::createFromAscii("Small Arrow")) ||
-        sLineName.equals(rtl::OUString::createFromAscii("Arrow")) ||
-        sLineName.equals(rtl::OUString::createFromAscii("msArrowEnd")) ||
-        sLineName.equals(rtl::OUString::createFromAscii("Double Arrow")))
-    {
-        // msoArrowheadTriangle
-        nLineType = office::MsoArrowheadStyle::msoArrowheadTriangle;
-    }
-    else if (sLineName.equals(rtl::OUString::createFromAscii("Square 45")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("Square")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("msArrowDiamondEnd")))
-    {
-        // msoArrowheadDiamond
-        nLineType = office::MsoArrowheadStyle::msoArrowheadDiamond;
-    }
-    else if (sLineName.equals(rtl::OUString::createFromAscii("Circle")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("msArrowOvalEnd")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("Dimension Lines")) )
-    {
-        // msoArrowheadOval
-        nLineType = office::MsoArrowheadStyle::msoArrowheadOval;
-    }
-    else if (sLineName.equals(rtl::OUString::createFromAscii("Arrow concave")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("msArrowStealthEnd")))
-    {
-        // msoArrowheadStealth
-        nLineType = office::MsoArrowheadStyle::msoArrowheadStealth;
-    }
-    else if (sLineName.equals(rtl::OUString::createFromAscii("Rounded short Arrow")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("Rounded large Arrow")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("Symmetric Arrow")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("msArrowOpenEnd")) ||
-             sLineName.equals(rtl::OUString::createFromAscii("Line Arrow")))
-    {
-        // msoArrowheadOpen
-        nLineType = office::MsoArrowheadStyle::msoArrowheadOpen;
-    }
-    else
-    {
-        // msoArrowheadNone
-        nLineType = office::MsoArrowheadStyle::msoArrowheadNone;
-    }
-    return nLineType;
-}
-
-rtl::OUString 
-ScVbaLineFormat::convertArrowheadStyleToLineStartEndName( sal_Int32 nArrowheadStyle ) throw (uno::RuntimeException)
-{
-    switch( nArrowheadStyle )
-    {
-        case office::MsoArrowheadStyle::msoArrowheadNone:
-            return rtl::OUString(rtl::OUString::createFromAscii( "" ) );
-        case office::MsoArrowheadStyle::msoArrowheadStealth:
-            return rtl::OUString::createFromAscii( "Arrow concave" );
-        case office::MsoArrowheadStyle::msoArrowheadOpen:
-            return rtl::OUString::createFromAscii("Line Arrow" );
-        case office::MsoArrowheadStyle::msoArrowheadOval:
-            return  rtl::OUString::createFromAscii("Circle" );
-        case office::MsoArrowheadStyle::msoArrowheadDiamond:
-            return rtl::OUString::createFromAscii( "Square 45" );
-        case office::MsoArrowheadStyle::msoArrowheadTriangle:
-            return rtl::OUString::createFromAscii( "Arrow" );
-        default:
-            throw uno::RuntimeException( rtl::OUString::createFromAscii("Invalid Arrow Style!"), uno::Reference< uno::XInterface >() );
-    }
-}
-
-// Attributes
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getBeginArrowheadStyle() throw (uno::RuntimeException)
-{
-    sal_Int32 nLineType = office::MsoArrowheadStyle::msoArrowheadNone;
-    rtl::OUString sLineName;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStartName" ) ) >>= sLineName;
-    if( ( sLineName.getLength() > 7 ) && ( sLineName.indexOf( rtl::OUString::createFromAscii( "msArray" ) ) ) != -1 )
-    {
-        sal_Int32 nIndex = sLineName.indexOf( rtl::OUString::createFromAscii(" ") );
-        rtl::OUString sName = sLineName.copy( 0, nIndex );
-        //sal_Int32 nSize = sLineName.copy( nIndex + 1 ).toInt32();
-        nLineType = convertLineStartEndNameToArrowheadStyle( sName );
-    }
-    else
-    {
-        nLineType = convertLineStartEndNameToArrowheadStyle( sLineName );
-    }
-    return nLineType;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setBeginArrowheadStyle( sal_Int32 _beginarrowheadstyle ) throw (uno::RuntimeException)
-{
-    rtl::OUString sArrayName = convertArrowheadStyleToLineStartEndName( _beginarrowheadstyle );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStartName" ), uno::makeAny( sArrayName ) );
-}
-
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getBeginArrowheadLength() throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setBeginArrowheadLength( sal_Int32 /*_beginarrowheadlength*/ ) throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getBeginArrowheadWidth() throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setBeginArrowheadWidth( sal_Int32 /*_beginarrowheadwidth*/ ) throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getEndArrowheadStylel() throw (uno::RuntimeException)
-{
-    return 0;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setEndArrowheadStylel( sal_Int32 /*_endarrowheadstylel*/ ) throw (uno::RuntimeException)
-{
-}
-
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getEndArrowheadLength() throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setEndArrowheadLength( sal_Int32 /*_endarrowheadlength*/ ) throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getEndArrowheadWidth() throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setEndArrowheadWidth( sal_Int32 /*_endarrowheadwidth*/ ) throw (uno::RuntimeException)
-{
-    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
-}
-
-double SAL_CALL 
-ScVbaLineFormat::getWeight() throw (uno::RuntimeException)
-{
-    sal_Int32 nLineWidth=0;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineWidth") ) >>= nLineWidth;
-    double dLineWidth = Millimeter::getInPoints( nLineWidth );
-    return dLineWidth;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setWeight( double _weight ) throw (uno::RuntimeException)
-{
-    if( _weight < 0 )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parameter: Must be positv."), uno::Reference< uno::XInterface >() );
-    if( _weight == 0 )
-        _weight = 0.5;
-    m_nLineWeight = _weight;
-    Millimeter aMillimeter;
-    aMillimeter.setInPoints( _weight );
-        
-    sal_Int32 nLineWidth = static_cast<sal_Int32>( aMillimeter.getInHundredthsOfOneMillimeter() );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineWidth" ), uno::makeAny( nLineWidth ) );
-    setDashStyle( m_nLineDashStyle );
-}
-
-sal_Bool SAL_CALL 
-ScVbaLineFormat::getVisible() throw (uno::RuntimeException)
-{
-    drawing::LineStyle aLineStyle;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ) ) >>= aLineStyle;
-    if( aLineStyle == drawing::LineStyle_NONE )
-    {
-        return sal_False;
-    }
-    return sal_True;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setVisible( sal_Bool _visible ) throw (uno::RuntimeException)
-{
-    drawing::LineStyle aLineStyle;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ) ) >>= aLineStyle;
-    if( !_visible )
-    {
-        aLineStyle = drawing::LineStyle_NONE;
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( aLineStyle ) );
-    }
-    else
-    {
-        if( aLineStyle == drawing::LineStyle_NONE )
-        {
-            setDashStyle( m_nLineDashStyle );
-        }
-    }
-}
-
-double SAL_CALL 
-ScVbaLineFormat::getTransparency() throw (uno::RuntimeException)
-{
-    sal_Int16 nTransparency = 0;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineTransparence" ) ) >>= nTransparency;
-    double fTransparency = static_cast<double>( nTransparency );
-    return fTransparency / 100;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setTransparency( double _transparency ) throw (uno::RuntimeException)
-{
-    sal_Int16 nTransparency = static_cast<sal_Int16>( _transparency * 100 );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineTransparence" ), uno::makeAny( nTransparency ) );
-}
-
-sal_Int16 SAL_CALL 
-ScVbaLineFormat::getStyle() throw (uno::RuntimeException)
-{
-    //OpenOffice.org only supports one LineStyle (other than the DashStyles)
-    //Therefore we can only return the SingleLine
-    return 1;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setStyle( sal_Int16 /*_style */) throw (uno::RuntimeException)
-{
-    //OpenOffice.org only supports one LineStyle (other than the DashStyles)
-    //Therefore we do not set the LineStyle, because it maybe is already set
-    //to Dashed or Single Line. Setting the 'Visible' or 'DashStyle' properties
-    //will be done with the according methods.
-}
-
-sal_Int32 SAL_CALL 
-ScVbaLineFormat::getDashStyle() throw (uno::RuntimeException)
-{
-    drawing::LineStyle eLineStyle;
-    //LineStyle integer in Xray
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ) ) >>= eLineStyle;
-    if( eLineStyle == drawing::LineStyle_SOLID )
-        m_nLineDashStyle = office::MsoLineDashStyle::msoLineSolid;
-    else
-    {
-        drawing::LineDash aLineDash;
-        m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineDash" ) ) >>= aLineDash;
-        if( aLineDash.Dots == 0 )
-        {
-            //LineDash
-            //LineLongDash
-            m_nLineDashStyle = office::MsoLineDashStyle::msoLineDash;
-            if( aLineDash.Distance > 0 && ( aLineDash.DashLen / aLineDash.Distance > 1 ) )
-            {
-                m_nLineDashStyle = office::MsoLineDashStyle::msoLineLongDash;
-            }
-        }
-        else if( aLineDash.Dots == 1 )
-        {
-            // LineDashDot
-            // LineLongDashDot
-            // LineSquareDot
-            // LineRoundDot ! not supported
-            m_nLineDashStyle = office::MsoLineDashStyle::msoLineDashDot;
-            if( aLineDash.Dashes == 0 )
-            {
-                m_nLineDashStyle = office::MsoLineDashStyle::msoLineSquareDot;
-            }
-            else
-            {
-                if( aLineDash.Distance > 0 && ( aLineDash.DashLen / aLineDash.Distance > 1 ) )
-                {
-                    m_nLineDashStyle = office::MsoLineDashStyle::msoLineLongDashDot;
-                }
-            }
-        }
-        else if( aLineDash.Dots == 2 )
-        {
-            // LineDashDotDot
-            m_nLineDashStyle = office::MsoLineDashStyle::msoLineDashDotDot;
-        }
-    }
-
-    return m_nLineDashStyle;
-}
-
-void SAL_CALL 
-ScVbaLineFormat::setDashStyle( sal_Int32 _dashstyle ) throw (uno::RuntimeException)
-{
-    m_nLineDashStyle = _dashstyle;
-    if( _dashstyle == office::MsoLineDashStyle::msoLineSolid )
-    {
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( drawing::LineStyle_SOLID  ));
-    }
-    else
-    {
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( drawing::LineStyle_DASH ) );
-        drawing::LineDash  pLineDash;
-        Millimeter aMillimeter( m_nLineWeight );
-        sal_Int32 nPixel = static_cast< sal_Int32 >( aMillimeter.getInHundredthsOfOneMillimeter() );
-        switch( _dashstyle )
-        {
-        case office::MsoLineDashStyle::msoLineDashDot:
-            pLineDash.Dots = 1;
-            pLineDash.DotLen = nPixel;
-            pLineDash.Dashes = 1;
-            pLineDash.DashLen = 5 * nPixel;
-            pLineDash.Distance = 4 * nPixel;
-            break;
-        case office::MsoLineDashStyle::msoLineLongDashDot:
-            pLineDash.Dots = 1;
-            pLineDash.DotLen = nPixel;
-            pLineDash.Dashes = 1;
-            pLineDash.DashLen = 10 * nPixel;
-            pLineDash.Distance = 4 * nPixel;
-            break;
-        case office::MsoLineDashStyle::msoLineDash:
-            pLineDash.Dots = 0;
-            pLineDash.DotLen = 0;
-            pLineDash.Dashes = 1;
-            pLineDash.DashLen = 6 * nPixel;
-            pLineDash.Distance = 4 * nPixel;
-            break;
-        case office::MsoLineDashStyle::msoLineDashDotDot:
-            pLineDash.Dots = 2;
-            pLineDash.DotLen = nPixel;
-            pLineDash.Dashes = 1;
-            pLineDash.DashLen = 10 * nPixel;
-            pLineDash.Distance = 3 * nPixel;
-            break;
-        case office::MsoLineDashStyle::msoLineLongDash:
-            pLineDash.Dots = 0;
-            pLineDash.DotLen = 0;
-            pLineDash.Dashes = 1;
-            pLineDash.DashLen = 10 * nPixel;
-            pLineDash.Distance = 4 * nPixel;
-            break;
-        case office::MsoLineDashStyle::msoLineSquareDot:
-            pLineDash.Dots = 1;
-            pLineDash.DotLen = nPixel;
-            pLineDash.Dashes = 0;
-            pLineDash.DashLen = 0;
-            pLineDash.Distance = nPixel;
-            break;
-        case office::MsoLineDashStyle::msoLineRoundDot:
-            pLineDash.Dots = 1;
-            pLineDash.DotLen = nPixel;
-            pLineDash.Dashes = 0;
-            pLineDash.DashLen = 0;
-            pLineDash.Distance = nPixel;
-            break;
-        default:
-            throw uno::RuntimeException( rtl::OUString::createFromAscii("this MsoLineDashStyle is not supported."), uno::Reference< uno::XInterface >() );
-        }
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineDash" ), uno::makeAny( pLineDash ) );
-    }
-}
-
-// Methods
-uno::Reference< msforms::XColorFormat > SAL_CALL
-ScVbaLineFormat::BackColor() throw (uno::RuntimeException)
-{
-    return uno::Reference< msforms::XColorFormat >( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ::ColorFormatType::LINEFORMAT_BACKCOLOR ) );
-}
-
-uno::Reference< msforms::XColorFormat > SAL_CALL
-ScVbaLineFormat::ForeColor() throw (uno::RuntimeException)
-{
-    return uno::Reference< msforms::XColorFormat >( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ::ColorFormatType::LINEFORMAT_FORECOLOR ) );
-}
-
-
-rtl::OUString& 
-ScVbaLineFormat::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaLineFormat") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaLineFormat::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.LineFormat" ) );
-    }
-    return aServiceNames;
-}
-
-
diff --git a/sc/source/ui/vba/vbalineformat.hxx b/sc/source/ui/vba/vbalineformat.hxx
index 95ab0bd..e69de29 100644
--- a/sc/source/ui/vba/vbalineformat.hxx
+++ b/sc/source/ui/vba/vbalineformat.hxx
@@ -1,82 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_XLINEFORMAT_HXX
-#define SC_VBA_XLINEFORMAT_HXX
-
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <ooo/vba/msforms/XLineFormat.hpp>
-#include "vbahelperinterface.hxx"
-
-typedef InheritedHelperInterfaceImpl1< ov::msforms::XLineFormat > ScVbaLineFormat_BASE;
-
-class ScVbaLineFormat : public ScVbaLineFormat_BASE
-{
-private:
-    css::uno::Reference< css::drawing::XShape > m_xShape;
-    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
-    sal_Int32 m_nLineDashStyle;
-    double m_nLineWeight;
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    sal_Int32 convertLineStartEndNameToArrowheadStyle( rtl::OUString sLineName );
-    rtl::OUString convertArrowheadStyleToLineStartEndName( sal_Int32 nArrowheadStyle ) throw (css::uno::RuntimeException);
-    sal_Int32 calculateArrowheadSize();
-public:
-    ScVbaLineFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape > xShape );
-
-    // Attributes
-    virtual sal_Int32 SAL_CALL getBeginArrowheadStyle() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setBeginArrowheadStyle( sal_Int32 _beginarrowheadstyle ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getBeginArrowheadLength() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setBeginArrowheadLength( sal_Int32 _beginarrowheadlength ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getBeginArrowheadWidth() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setBeginArrowheadWidth( sal_Int32 _beginarrowheadwidth ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getEndArrowheadStylel() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setEndArrowheadStylel( sal_Int32 _endarrowheadstylel ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getEndArrowheadLength() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setEndArrowheadLength( sal_Int32 _endarrowheadlength ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getEndArrowheadWidth() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setEndArrowheadWidth( sal_Int32 _endarrowheadwidth ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getWeight() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setWeight( double _weight ) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getTransparency() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setTransparency( double _transparency ) throw (css::uno::RuntimeException);
-    virtual sal_Int16 SAL_CALL getStyle() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setStyle( sal_Int16 _style ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getDashStyle() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setDashStyle( sal_Int32 _dashstyle ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL BackColor() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL ForeColor() throw (css::uno::RuntimeException);
-};
-
-#endif//SC_VBA_XLINEFORMAT_HXX
diff --git a/sc/source/ui/vba/vbalistbox.cxx b/sc/source/ui/vba/vbalistbox.cxx
index e9354e8..e69de29 100644
--- a/sc/source/ui/vba/vbalistbox.cxx
+++ b/sc/source/ui/vba/vbalistbox.cxx
@@ -1,286 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/form/validation/XValidatableFormComponent.hpp>
-
-#include "vbalistbox.hxx"
-#include "vbapropvalue.hxx"
-#include <vector>
-#include <comphelper/anytostring.hxx>
-#include <com/sun/star/script/ArrayWrapper.hpp>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-const static rtl::OUString TEXT( RTL_CONSTASCII_USTRINGPARAM("Text") );
-const static rtl::OUString SELECTEDITEMS( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") );
-const static rtl::OUString ITEMS( RTL_CONSTASCII_USTRINGPARAM("StringItemList") );
-
-
-ScVbaListBox::ScVbaListBox( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< css::uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ListBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-    mpListHelper.reset( new ListControlHelper( m_xProps ) );
-}
-
-// Attributes
-void SAL_CALL 
-ScVbaListBox::setListIndex( const uno::Any& _value ) throw (uno::RuntimeException)
-{
-    sal_Int32 nIndex = 0;
-    _value >>= nIndex;
-    Selected( nIndex );
-}
-
-uno::Any SAL_CALL 
-ScVbaListBox::getListIndex() throw (uno::RuntimeException)
-{
-    uno::Sequence< sal_Int16 > sSelection;
-    m_xProps->getPropertyValue( SELECTEDITEMS ) >>= sSelection;
-    if ( sSelection.getLength() == 0 )
-        return uno::Any( sal_Int32( -1 ) );
-    return uno::Any( sSelection[ 0 ] );
-}
-
-uno::Any SAL_CALL 
-ScVbaListBox::getValue() throw (uno::RuntimeException)
-{
-    uno::Sequence< sal_Int16 > sSelection;
-    uno::Sequence< rtl::OUString > sItems;
-    m_xProps->getPropertyValue( SELECTEDITEMS ) >>= sSelection;
-    m_xProps->getPropertyValue( ITEMS ) >>= sItems;
-    if( getMultiSelect() )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Attribute use invalid." ), uno::Reference< uno::XInterface >() );
-    uno::Any aRet;
-    if ( sSelection.getLength() )
-        aRet = uno::makeAny( sItems[ sSelection[ 0 ] ] ); 
-    return aRet;
-}
-
-void SAL_CALL 
-ScVbaListBox::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
-{
-    if( getMultiSelect() )
-    {	
-        throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Attribute use invalid." ), uno::Reference< uno::XInterface >() );
-    }
-    rtl::OUString sValue = getAnyAsString( _value );
-    uno::Sequence< rtl::OUString > sList;
-    m_xProps->getPropertyValue( ITEMS ) >>= sList;
-    uno::Sequence< sal_Int16 > nList;
-    sal_Int16 nLength = static_cast<sal_Int16>( sList.getLength() );
-    sal_Int16 nValue = -1;
-    sal_Int16 i = 0;
-    for( i = 0; i < nLength; i++ )
-    {
-        if( sList[i].equals( sValue ) )
-        {
-            nValue = i; 
-            break;
-        }
-    }
-    if( nValue == -1 )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Attribute use invalid." ), uno::Reference< uno::XInterface >() );
-
-    uno::Sequence< sal_Int16 > nSelectedIndices(1);
-    nSelectedIndices[ 0 ] = nValue;
-    m_xProps->setPropertyValue( SELECTEDITEMS, uno::makeAny( nSelectedIndices ) ); 
-    m_xProps->setPropertyValue( TEXT, uno::makeAny( sValue ) ); 
-}
-
-::rtl::OUString SAL_CALL 
-ScVbaListBox::getText() throw (uno::RuntimeException)
-{
-    rtl::OUString result;
-    getValue() >>= result;
-    return result;
-}
-
-void SAL_CALL 
-ScVbaListBox::setText( const ::rtl::OUString& _text ) throw (uno::RuntimeException)
-{
-    setValue( uno::makeAny( _text ) ); // seems the same
-}
-
-sal_Bool SAL_CALL 
-ScVbaListBox::getMultiSelect() throw (css::uno::RuntimeException)
-{
-    sal_Bool bMultiSelect = sal_False;
-    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiSelection" ) ) ) >>= bMultiSelect;
-    return bMultiSelect;
-}
-
-void SAL_CALL 
-ScVbaListBox::setMultiSelect( sal_Bool _multiselect ) throw (css::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiSelection" ) ), uno::makeAny( _multiselect ) );
-}
-
-css::uno::Any SAL_CALL 
-ScVbaListBox::Selected( sal_Int32 index ) throw (css::uno::RuntimeException)
-{
-    uno::Sequence< rtl::OUString > sList;
-    m_xProps->getPropertyValue( ITEMS ) >>= sList;
-    sal_Int16 nLength = static_cast< sal_Int16 >( sList.getLength() );
-    // no choice but to do a horror cast as internally
-    // the indices are but sal_Int16 
-    sal_Int16 nIndex = static_cast< sal_Int16 >( index );
-    if( nIndex < 0 || nIndex >= nLength )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Error Number." ), uno::Reference< uno::XInterface >() );
-    m_nIndex = nIndex;
-    return uno::makeAny( uno::Reference< XPropValue > ( new ScVbaPropValue( this ) ) );
-}
-
-// Methods
-void SAL_CALL 
-ScVbaListBox::AddItem( const uno::Any& pvargItem, const uno::Any& pvargIndex ) throw (uno::RuntimeException)
-{
-    mpListHelper->AddItem( pvargItem, pvargIndex );
-        }
-
-void SAL_CALL 
-ScVbaListBox::removeItem( const uno::Any& index ) throw (uno::RuntimeException)
-{
-    mpListHelper->removeItem( index );
-}
-
-void SAL_CALL 
-ScVbaListBox::Clear(  ) throw (uno::RuntimeException)
-{
-    mpListHelper->Clear();
-}
-
-// this is called when something like the following vba code is used
-// to set the selected state of particular entries in the Listbox
-// ListBox1.Selected( 3 ) = false
-//PropListener
-void 
-ScVbaListBox::setValueEvent( const uno::Any& value )
-{
-    sal_Bool bValue = sal_False;
-    if( !(value >>= bValue) )
-        throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Invalid type\n. need boolean." ), uno::Reference< uno::XInterface >() );
-    uno::Sequence< sal_Int16 > nList;
-    m_xProps->getPropertyValue( SELECTEDITEMS ) >>= nList;
-    sal_Int16 nLength = static_cast<sal_Int16>( nList.getLength() );
-    sal_Int16 nIndex = m_nIndex;
-    for( sal_Int16 i = 0; i < nLength; i++ )
-    {
-        if( nList[i] == nIndex )
-        {
-            if( bValue )
-                return;
-            else
-            {
-                for( ; i < nLength - 1; i++ )
-                {
-                    nList[i] = nList[i + 1];
-                }
-                nList.realloc( nLength - 1 );
-                //m_xProps->setPropertyValue( sSourceName, uno::makeAny( nList ) );
-        m_xProps->setPropertyValue( SELECTEDITEMS, uno::makeAny( nList ) );
-                return;
-            }
-        }
-    }
-    if( bValue )
-    {
-        if( getMultiSelect() )
-        {
-            nList.realloc( nLength + 1 );
-            nList[nLength] = nIndex;
-        }
-        else
-        {
-            nList.realloc( 1 );
-            nList[0] = nIndex;
-        }
-        m_xProps->setPropertyValue( sSourceName, uno::makeAny( nList ) );
-    }
-}
-
-// this is called when something like the following vba code is used
-// to determine the selected state of particular entries in the Listbox
-// msgbox ListBox1.Selected( 3 )
-
-css::uno::Any 
-ScVbaListBox::getValueEvent()
-{
-    uno::Sequence< sal_Int16 > nList;
-    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "SelectedItems" ) ) ) >>= nList;
-    sal_Int32 nLength = nList.getLength();
-    sal_Int32 nIndex = m_nIndex;
-    
-    for( sal_Int32 i = 0; i < nLength; i++ )
-    {
-        if( nList[i] == nIndex )
-            return uno::makeAny( sal_True );
-    }
-
-    return uno::makeAny( sal_False );
-}
-
-void SAL_CALL
-ScVbaListBox::setRowSource( const rtl::OUString& _rowsource ) throw (uno::RuntimeException)
-{
-    ScVbaControl::setRowSource( _rowsource );
-    mpListHelper->setRowSource( _rowsource );
-}
-
-sal_Int32 SAL_CALL
-ScVbaListBox::getListCount() throw (uno::RuntimeException)
-{
-    return mpListHelper->getListCount();
-}
-
-uno::Any SAL_CALL 
-ScVbaListBox::List( const ::uno::Any& pvargIndex, const uno::Any& pvarColumn ) throw (uno::RuntimeException)
-{
-    return mpListHelper->List( pvargIndex, pvarColumn );
-}
-
-rtl::OUString& 
-ScVbaListBox::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaListBox") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaListBox::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ScVbaListBox" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbalistbox.hxx b/sc/source/ui/vba/vbalistbox.hxx
index d18935f..e69de29 100644
--- a/sc/source/ui/vba/vbalistbox.hxx
+++ b/sc/source/ui/vba/vbalistbox.hxx
@@ -1,87 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_LISTBOX_HXX
-#define SC_VBA_LISTBOX_HXX
-#include <cppuhelper/implbase2.hxx>
-#include <com/sun/star/uno/XComponentContext.hpp>
-#include <com/sun/star/script/XDefaultProperty.hpp>
-#include <ooo/vba/msforms/XListBox.hpp>
-#include <com/sun/star/beans/PropertyAttribute.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbapropvalue.hxx"
-#include "vbalistcontrolhelper.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper2<ScVbaControl, ov::msforms::XListBox, css::script::XDefaultProperty > ListBoxImpl_BASE;
-class ScVbaListBox : public ListBoxImpl_BASE
-    ,public PropListener
-{		
-    std::auto_ptr< ListControlHelper > mpListHelper;
-    rtl::OUString sSourceName; 
-    rtl::OUString msDftPropName;
-
-    sal_Int16 m_nIndex;
-    
-public:
-    ScVbaListBox( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
-
-    // Attributes
-    virtual css::uno::Any SAL_CALL getListIndex() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setListIndex( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getListCount() throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getMultiSelect() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMultiSelect( sal_Bool _multiselect ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL Selected( ::sal_Int32 index ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual void SAL_CALL AddItem( const css::uno::Any& pvargItem, const css::uno::Any& pvargIndex ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL removeItem( const css::uno::Any& index ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Clear(  ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL List( const css::uno::Any& pvargIndex, const css::uno::Any& pvarColumn ) throw (css::uno::RuntimeException);
-    // XControl
-    virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
-
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-    
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();    
-
-    //PropListener
-    virtual void setValueEvent( const css::uno::Any& value );
-    virtual css::uno::Any getValueEvent();
-
-
-};
-
-#endif //
diff --git a/sc/source/ui/vba/vbalistcontrolhelper.cxx b/sc/source/ui/vba/vbalistcontrolhelper.cxx
index 75196ab..e69de29 100644
--- a/sc/source/ui/vba/vbalistcontrolhelper.cxx
+++ b/sc/source/ui/vba/vbalistcontrolhelper.cxx
@@ -1,145 +0,0 @@
-#include <vbalistcontrolhelper.hxx>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-const static rtl::OUString ITEMS( RTL_CONSTASCII_USTRINGPARAM("StringItemList") );
-
-void SAL_CALL 
-ListControlHelper::AddItem( const uno::Any& pvargItem, const uno::Any& pvargIndex ) throw (uno::RuntimeException)
-{
-    if ( pvargItem.hasValue()  )
-    {
-        uno::Sequence< rtl::OUString > sList;
-        m_xProps->getPropertyValue( ITEMS ) >>= sList;
-
-        sal_Int32 nIndex = sList.getLength();
-
-        if ( pvargIndex.hasValue() )
-            pvargIndex >>= nIndex;
-
-        rtl::OUString sString = getAnyAsString( pvargItem );
-
-        // if no index specified or item is to be appended to end of 
-        // list just realloc the array and set the last item
-        if ( nIndex  == sList.getLength() )
-        {
-            sal_Int32 nOldSize = sList.getLength();
-            sList.realloc( nOldSize + 1 );
-            sList[ nOldSize ] = sString; 
-        }
-        else
-        {
-            // just copy those elements above the one to be inserted
-            std::vector< rtl::OUString > sVec;
-            // reserve just the amount we need to copy
-            sVec.reserve( sList.getLength() - nIndex );
-
-            // point at first element to copy
-            rtl::OUString* pString = sList.getArray() + nIndex;
-            const rtl::OUString* pEndString = sList.getArray() + sList.getLength();
-            // insert the new element
-            sVec.push_back( sString );
-            // copy elements	
-            for ( ; pString != pEndString; ++pString )
-                sVec.push_back( *pString );
-        
-            sList.realloc(  sList.getLength() + 1 );
-
-            // point at first element to be overwritten
-            pString = sList.getArray() + nIndex;
-            pEndString = sList.getArray() + sList.getLength();
-            std::vector< rtl::OUString >::iterator it = sVec.begin();
-            for ( ; pString != pEndString; ++pString, ++it)
-                *pString = *it;	
-            //
-        }
-
-        m_xProps->setPropertyValue( ITEMS, uno::makeAny( sList ) );
-        
-    }
-}
-
-void SAL_CALL 
-ListControlHelper::removeItem( const uno::Any& index ) throw (uno::RuntimeException)
-{
-    sal_Int32 nIndex = 0;
-    // for int index
-    if ( index >>= nIndex  )
-    {
-        uno::Sequence< rtl::OUString > sList;
-        m_xProps->getPropertyValue( ITEMS ) >>= sList;
-        if( nIndex < 0 || nIndex > ( sList.getLength() - 1 ) )
-            throw uno::RuntimeException( rtl::OUString::createFromAscii( "Invalid index" ), uno::Reference< uno::XInterface > () );
-        if( sList.hasElements() )
-        {
-            if( sList.getLength() == 1 )
-            {
-                Clear();
-                return;
-            }
-            for( sal_Int32 i = nIndex; i < ( sList.getLength()-1 ); i++ )
-            {
-                sList[i] = sList[i+1];
-            }
-            sList.realloc(  sList.getLength() - 1 );
-        }
-
-        m_xProps->setPropertyValue( ITEMS, uno::makeAny( sList ) );
-    }
-}
-
-void SAL_CALL 
-ListControlHelper::Clear(  ) throw (uno::RuntimeException)
-{
-    // urk, setValue doesn't seem to work !!
-    //setValue( uno::makeAny( sal_Int16() ) );
-    m_xProps->setPropertyValue( ITEMS, uno::makeAny( uno::Sequence< rtl::OUString >() ) );
-}
-
-void SAL_CALL
-ListControlHelper::setRowSource( const rtl::OUString& _rowsource ) throw (uno::RuntimeException)
-{
-    if ( _rowsource.getLength() == 0 )
-        Clear();
-}
-
-sal_Int32 SAL_CALL
-ListControlHelper::getListCount() throw (uno::RuntimeException)
-{
-    uno::Sequence< rtl::OUString > sList;
-    m_xProps->getPropertyValue( ITEMS ) >>= sList;
-    return sList.getLength();
-}
-
-uno::Any SAL_CALL 
-ListControlHelper::List( const ::uno::Any& pvargIndex, const uno::Any& pvarColumn ) throw (uno::RuntimeException)
-{
-    uno::Sequence< rtl::OUString > sList;
-    m_xProps->getPropertyValue( ITEMS ) >>= sList;
-    sal_Int16 nLength = static_cast< sal_Int16 >( sList.getLength() );
-    uno::Any aRet;
-    if ( pvargIndex.hasValue() )
-    {
-        sal_Int16 nIndex = -1;
-        pvargIndex >>= nIndex;
-        if( nIndex < 0 || nIndex >= nLength )
-            throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Bad row Index" ), uno::Reference< uno::XInterface >() );       
-        aRet <<= sList[ nIndex ];
-    }
-    else if ( pvarColumn.hasValue() ) // pvarColumn on its own would be bad
-            throw uno::RuntimeException( rtl::OUString::createFromAscii(
-                    "Bad column Index" ), uno::Reference< uno::XInterface >() );       
-    else // List() ( e.g. no args )
-    {
-        uno::Sequence< uno::Sequence< rtl::OUString > > sReturnArray( nLength );
-        for ( sal_Int32 i = 0; i < nLength; ++i )
-        {
-            sReturnArray[ i ].realloc( 10 );
-            sReturnArray[ i ][ 0 ] = sList[ i ];
-        }        
-        aRet = uno::makeAny( sReturnArray );
-    }
-    return aRet;
-}
diff --git a/sc/source/ui/vba/vbalistcontrolhelper.hxx b/sc/source/ui/vba/vbalistcontrolhelper.hxx
index aa455c2..e69de29 100644
--- a/sc/source/ui/vba/vbalistcontrolhelper.hxx
+++ b/sc/source/ui/vba/vbalistcontrolhelper.hxx
@@ -1,20 +0,0 @@
-#ifndef SC_VBA_LISTCONTROLHELPER
-#define SC_VBA_LISTCONTROLHELPER
-
-#include "vbahelper.hxx"
-
-class ListControlHelper
-{
-    css::uno::Reference< css::beans::XPropertySet > m_xProps;
-
-public:
-    ListControlHelper( const css::uno::Reference< css::beans::XPropertySet >& rxControl ) : m_xProps( rxControl ){}
-    virtual ~ListControlHelper() {}
-    virtual void SAL_CALL AddItem( const css::uno::Any& pvargItem, const css::uno::Any& pvargIndex ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL removeItem( const css::uno::Any& index ) throw (css::uno::RuntimeException);   
-        virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getListCount() throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL List( const css::uno::Any& pvargIndex, const css::uno::Any& pvarColumn ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Clear(  ) throw (css::uno::RuntimeException);
-};
-#endif
diff --git a/sc/source/ui/vba/vbamultipage.cxx b/sc/source/ui/vba/vbamultipage.cxx
index b6c64c7..e69de29 100644
--- a/sc/source/ui/vba/vbamultipage.cxx
+++ b/sc/source/ui/vba/vbamultipage.cxx
@@ -1,124 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbamultipage.hxx"
-#include <ooo/vba/XCollection.hpp>
-#include "vbapages.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-// uno servicename com.sun.star.awt.UnoControlProgressBarMode
-const rtl::OUString SVALUE( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") );
-const rtl::OUString SVALUEMAX( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") );
-const rtl::OUString SSTEP( RTL_CONSTASCII_USTRINGPARAM("Step") );
-
-typedef cppu::WeakImplHelper1< container::XIndexAccess > PagesImpl_Base;
-class PagesImpl : public PagesImpl_Base
-{
-    sal_Int32 mnPages;
-public:
-    PagesImpl( sal_Int32 nPages ) : mnPages( nPages ) {}
-    virtual ::sal_Int32 SAL_CALL getCount() throw (uno::RuntimeException) { return mnPages; }
-    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, ::uno::RuntimeException)
-    {
-        if ( Index < 0 || Index > mnPages )
-            throw lang::IndexOutOfBoundsException();
-        return uno::makeAny( uno::Reference< uno::XInterface >() );
-    }
-    // XElementAccess
-    virtual uno::Type SAL_CALL getElementType() throw (uno::RuntimeException)
-    {
-        // no Pages object yet #FIXME
-        //return msforms::XPage::static_type(0);
-        return uno::XInterface::static_type(0);
-    }
-    virtual ::sal_Bool SAL_CALL hasElements( ) throw (uno::RuntimeException)
-    {
-        return ( mnPages > 0 );
-    }
-};
-uno::Reference< container::XIndexAccess > 
-ScVbaMultiPage::getPages( sal_Int32 nPages )
-{
-    return new PagesImpl( nPages );
-}
-
-ScVbaMultiPage::ScVbaMultiPage( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, const uno::Reference< uno::XInterface >& xDialog ) : MultiPageImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-    mxDialogProps.set( xDialog, uno::UNO_QUERY_THROW );
-    // set dialog step to value of multipage pseudo model
-    setValue(getValue());
-}
-
-// Attributes
-sal_Int32 SAL_CALL 
-ScVbaMultiPage::getValue() throw (css::uno::RuntimeException)
-{
-    sal_Int32 nValue = 0;
-    m_xProps->getPropertyValue( SVALUE ) >>= nValue;
-    return nValue;
-}
-
-void SAL_CALL 
-ScVbaMultiPage::setValue( const sal_Int32 _value ) throw (::com::sun::star::uno::RuntimeException)
-{
-    // track change in dialog ( dialog value is 1 based, 0 is a special value )
-    m_xProps->setPropertyValue( SVALUE, uno::makeAny( _value ) );
-    mxDialogProps->setPropertyValue( SSTEP, uno::makeAny( _value + 1) );
-}
-
-
-rtl::OUString& 
-ScVbaMultiPage::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaMultiPage") );
-    return sImplName;
-}
-
-uno::Any SAL_CALL 
-ScVbaMultiPage::Pages( const uno::Any& index ) throw (uno::RuntimeException)
-{
-    sal_Int32 nValue = 0;
-    m_xProps->getPropertyValue( SVALUEMAX ) >>= nValue;
-    uno::Reference< XCollection > xColl( new ScVbaPages( this, mxContext, getPages( nValue ) ) );
-    if ( !index.hasValue() )
-        return uno::makeAny( xColl );
-    return xColl->Item( uno::makeAny( index ), uno::Any() );
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaMultiPage::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.MultiPage" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbamultipage.hxx b/sc/source/ui/vba/vbamultipage.hxx
index 24f8e22..e69de29 100644
--- a/sc/source/ui/vba/vbamultipage.hxx
+++ b/sc/source/ui/vba/vbamultipage.hxx
@@ -1,57 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_MULTIPAGE_HXX
-#define SC_VBA_MULTIPAGE_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XMultiPage.hpp>
-#include <com/sun/star/container/XIndexAccess.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-//#include <cppuhelper/implbase2.hxx>
-#include <cppuhelper/implbase1.hxx>
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XMultiPage > MultiPageImpl_BASE;
-
-class ScVbaMultiPage : public MultiPageImpl_BASE
-{
-    css::uno::Reference< css::container::XIndexAccess > getPages( sal_Int32 nPages );
-    css::uno::Reference< css::beans::XPropertySet > mxDialogProps;
-public:
-    ScVbaMultiPage( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper, const css::uno::Reference< css::uno::XInterface >& xDialog );
-   // Attributes
-    virtual sal_Int32 SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( sal_Int32 _value ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL Pages( const css::uno::Any& index ) throw (css::uno::RuntimeException);
-
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-};
-#endif //SC_VBA_LABEL_HXX
diff --git a/sc/source/ui/vba/vbaname.cxx b/sc/source/ui/vba/vbaname.cxx
index 00a3c0f..e0ee8b7 100644
--- a/sc/source/ui/vba/vbaname.cxx
+++ b/sc/source/ui/vba/vbaname.cxx
@@ -24,7 +24,7 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 
 #include <com/sun/star/table/XCellRange.hpp>
 #include <com/sun/star/sheet/XCellRangeAddressable.hpp>
@@ -61,7 +61,8 @@ ScVbaName::~ScVbaName()
 css::uno::Reference< ov::excel::XWorksheet >
 ScVbaName::getWorkSheet() throw (css::uno::RuntimeException)
 {
-    return ScVbaGlobals::getGlobalsImpl( mxContext )->getActiveSheet();
+    uno::Reference< excel::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+    return xApplication->getActiveSheet();
 }
 
 ::rtl::OUString
@@ -231,7 +232,7 @@ ScVbaName::setRefersToR1C1Local( const ::rtl::OUString & rRefersTo ) throw (css:
 css::uno::Reference< ov::excel::XRange >
 ScVbaName::getRefersToRange() throw (css::uno::RuntimeException)
 {
-    uno::Reference< ov::excel::XRange > xRange = ScVbaRange::getRangeObjectForName( mxContext, mxNamedRange->getName(), getDocShell( mxModel ), formula::FormulaGrammar::CONV_XL_R1C1 );
+    uno::Reference< ov::excel::XRange > xRange = ScVbaRange::getRangeObjectForName( mxContext, mxNamedRange->getName(), excel::getDocShell( mxModel ), formula::FormulaGrammar::CONV_XL_R1C1 );
     return xRange;
 }
 
diff --git a/sc/source/ui/vba/vbaname.hxx b/sc/source/ui/vba/vbaname.hxx
index a3912ef..eaa3bce 100644
--- a/sc/source/ui/vba/vbaname.hxx
+++ b/sc/source/ui/vba/vbaname.hxx
@@ -31,7 +31,9 @@
 #include <com/sun/star/sheet/XNamedRange.hpp>
 #include <com/sun/star/sheet/XNamedRanges.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+
+class ScDocument;
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XName > NameImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbanames.cxx b/sc/source/ui/vba/vbanames.cxx
index baff8fb..8de48a7 100644
--- a/sc/source/ui/vba/vbanames.cxx
+++ b/sc/source/ui/vba/vbanames.cxx
@@ -24,7 +24,7 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 
 #include <com/sun/star/table/XCellRange.hpp>
 #include <com/sun/star/sheet/XCellRangeAddressable.hpp>
@@ -78,7 +78,7 @@ ScDocument *
 ScVbaNames::getScDocument()
 {
     uno::Reference< frame::XModel > xModel( getModel() , uno::UNO_QUERY_THROW );
-    ScTabViewShell * pTabViewShell = getBestViewShell( xModel );
+    ScTabViewShell * pTabViewShell = excel::getBestViewShell( xModel );
     if ( !pTabViewShell )
         throw uno::RuntimeException( rtl::OUString::createFromAscii("No ViewShell available"), uno::Reference< uno::XInterface >() );
     ScViewData* pViewData = pTabViewShell->GetViewData();
diff --git a/sc/source/ui/vba/vbanames.hxx b/sc/source/ui/vba/vbanames.hxx
index c3a4c80..e34a0f1 100644
--- a/sc/source/ui/vba/vbanames.hxx
+++ b/sc/source/ui/vba/vbanames.hxx
@@ -31,7 +31,10 @@
 #include <ooo/vba/XCollection.hpp>
 #include <com/sun/star/container/XEnumerationAccess.hpp>
 #include <com/sun/star/sheet/XNamedRanges.hpp>
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
+
+class ScDocument;
+class ScDocShell;
 
 typedef CollTestImplHelper< ov::excel::XNames > ScVbaNames_BASE;
 
diff --git a/sc/source/ui/vba/vbaoleobject.cxx b/sc/source/ui/vba/vbaoleobject.cxx
index e4fe9cf..2580c0b 100644
--- a/sc/source/ui/vba/vbaoleobject.cxx
+++ b/sc/source/ui/vba/vbaoleobject.cxx
@@ -30,6 +30,7 @@
 #include <com/sun/star/view/XControlAccess.hpp>
 #include <com/sun/star/container/XChild.hpp>
 #include <com/sun/star/drawing/XShape.hpp>
+#include <ooo/vba/XControlProvider.hpp>
 
 #include "vbaoleobject.hxx"
 
@@ -58,8 +59,9 @@ ScVbaOLEObject::ScVbaOLEObject( const uno::Reference< XHelperInterface >& xParen
     xChild.set( xChild->getParent(), uno::UNO_QUERY_THROW );
     xChild.set( xChild->getParent(), uno::UNO_QUERY_THROW );
     css::uno::Reference< css::frame::XModel > xModel( xChild->getParent(), uno::UNO_QUERY_THROW );
-    css::uno::Reference< css::view::XControlAccess > xControlAccess( xModel->getCurrentController(), css::uno::UNO_QUERY_THROW );
-    m_xWindowPeer = xControlAccess->getControl( xControlModel )->getPeer();
+    uno::Reference<lang::XMultiComponentFactory > xServiceManager( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< XControlProvider > xControlProvider( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.ControlProvider" ) ), mxContext ), uno::UNO_QUERY_THROW );
+    m_xControl.set( xControlProvider->createControl(  xControlShape, xModel ) );
 }
 
 uno::Reference< uno::XInterface > SAL_CALL 
@@ -71,98 +73,76 @@ ScVbaOLEObject::getObject() throw (uno::RuntimeException)
 sal_Bool SAL_CALL 
 ScVbaOLEObject::getEnabled() throw (uno::RuntimeException)
 {
-    uno::Reference< css::awt::XWindow2 > xWindow2( m_xWindowPeer, css::uno::UNO_QUERY_THROW );
-    return xWindow2->isEnabled();
+    return m_xControl->getEnabled();
 }
 
 void SAL_CALL 
 ScVbaOLEObject::setEnabled( sal_Bool _enabled ) throw (uno::RuntimeException)
 {
-    uno::Reference< css::awt::XWindow2 > xWindow2( m_xWindowPeer, css::uno::UNO_QUERY_THROW );
-    xWindow2->setEnable( _enabled );
+    m_xControl->setEnabled( _enabled );
 }
 
 sal_Bool SAL_CALL 
 ScVbaOLEObject::getVisible() throw (uno::RuntimeException)
 {
-    uno::Reference< css::awt::XWindow2 > xWindow2( m_xWindowPeer, css::uno::UNO_QUERY_THROW );
-    return xWindow2->isVisible();
+    OSL_TRACE("OleObject %s returning visible %s", rtl::OUStringToOString( m_xControl->getName(), RTL_TEXTENCODING_UTF8 ).getStr(), m_xControl->getVisible() ? "true" : "false" );
+    return m_xControl->getVisible();
 }
 
 void SAL_CALL 
 ScVbaOLEObject::setVisible( sal_Bool _visible ) throw (uno::RuntimeException)
 {
-    uno::Reference< css::awt::XWindow2 > xWindow2( m_xWindowPeer, css::uno::UNO_QUERY_THROW );
-    xWindow2->setVisible( _visible );
+    OSL_TRACE("OleObject %s set visible %s", rtl::OUStringToOString( m_xControl->getName(), RTL_TEXTENCODING_UTF8 ).getStr(), _visible ? "true" : "false" );
+    m_xControl->setVisible( _visible );
 }
 
 double SAL_CALL 
 ScVbaOLEObject::getLeft() throw (uno::RuntimeException)
 {
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    return mm2pt( xShape->getPosition().X / 100 );
+    return m_xControl->getLeft();
 }
 
 void SAL_CALL 
 ScVbaOLEObject::setLeft( double _left ) throw (uno::RuntimeException)
 {
-    awt::Point oldPosition;
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    oldPosition = xShape->getPosition();
-    oldPosition.X = pt2mm( _left ) * 100;
-    xShape->setPosition( oldPosition );
+    m_xControl->setLeft( _left );
 
 }
 
 double SAL_CALL 
 ScVbaOLEObject::getTop() throw (uno::RuntimeException)
 {
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    return mm2pt( xShape->getPosition().Y / 100 );
+    return m_xControl->getTop();
 }
 
 void SAL_CALL 
 ScVbaOLEObject::setTop( double _top ) throw (uno::RuntimeException)
 {
-    awt::Point oldPosition;
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    oldPosition = xShape->getPosition();
-    oldPosition.Y = pt2mm( _top ) * 100;;
-    xShape->setPosition( oldPosition );
+    m_xControl->setTop( _top );
 }
 
 double SAL_CALL 
 ScVbaOLEObject::getHeight() throw (uno::RuntimeException)
 {
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    return mm2pt( xShape->getSize().Height / 100 );//1pt = 1/72in
+    return m_xControl->getHeight();
 }
 
 void SAL_CALL 
 ScVbaOLEObject::setHeight( double _height ) throw (uno::RuntimeException)
 {
-    awt::Size oldSize;
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    oldSize = xShape->getSize();
-    oldSize.Height = pt2mm( _height ) * 100;
-    xShape->setSize( oldSize );
+    m_xControl->setHeight( _height );
 }
 
 double SAL_CALL 
 ScVbaOLEObject::getWidth() throw (uno::RuntimeException)
 {
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    return mm2pt ( xShape->getSize().Width / 100 );
+    return m_xControl->getWidth();
 }
 
 void SAL_CALL 
 ScVbaOLEObject::setWidth( double _width ) throw (uno::RuntimeException)
 {
-    awt::Size oldSize;
-    uno::Reference< drawing::XShape > xShape( m_xControlShape, uno::UNO_QUERY_THROW );
-    oldSize = xShape->getSize();
-    oldSize.Width = pt2mm( _width ) * 100;
-    xShape->setSize( oldSize );
+    m_xControl->setWidth( _width );
 }
 rtl::OUString& 
 ScVbaOLEObject::getServiceImplName()
diff --git a/sc/source/ui/vba/vbaoleobject.hxx b/sc/source/ui/vba/vbaoleobject.hxx
index 31aef46..8cc6613 100644
--- a/sc/source/ui/vba/vbaoleobject.hxx
+++ b/sc/source/ui/vba/vbaoleobject.hxx
@@ -29,20 +29,20 @@
 
 #include <cppuhelper/implbase1.hxx>
 #include <com/sun/star/drawing/XControlShape.hpp>
-#include <com/sun/star/awt/XWindowPeer.hpp>
 #include <ooo/vba/excel/XOLEObject.hpp>
+#include <ooo/vba/msforms/XControl.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XOLEObject > OLEObjectImpl_BASE;
 
 class ScVbaOLEObject : public OLEObjectImpl_BASE
 {
-    css::uno::Reference< css::awt::XWindowPeer > m_xWindowPeer;
 protected:
     css::uno::Reference< css::drawing::XControlShape > m_xControlShape;
     virtual rtl::OUString& getServiceImplName();
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    css::uno::Reference< ov::msforms::XControl> m_xControl;
 public:
     ScVbaOLEObject( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,
             css::uno::Reference< css::drawing::XControlShape > xControlShape );
diff --git a/sc/source/ui/vba/vbaoleobjects.hxx b/sc/source/ui/vba/vbaoleobjects.hxx
index 64de17e..daf0572 100644
--- a/sc/source/ui/vba/vbaoleobjects.hxx
+++ b/sc/source/ui/vba/vbaoleobjects.hxx
@@ -30,8 +30,8 @@
 #include <cppuhelper/implbase1.hxx>
 #include <ooo/vba/excel/XOLEObjects.hpp>
 
-#include "vbacollectionimpl.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
+#include "excelvbahelper.hxx"
 
 typedef CollTestImplHelper< ov::excel::XOLEObjects > OLEObjectsImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbaoutline.hxx b/sc/source/ui/vba/vbaoutline.hxx
index cc02f62..6b542c8 100644
--- a/sc/source/ui/vba/vbaoutline.hxx
+++ b/sc/source/ui/vba/vbaoutline.hxx
@@ -31,7 +31,7 @@
 #include <cppuhelper/implbase1.hxx>
 #include <ooo/vba/excel/XOutline.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XOutline > ScVbaOutline_BASE;
 
diff --git a/sc/source/ui/vba/vbapagebreak.cxx b/sc/source/ui/vba/vbapagebreak.cxx
index 3a03e84..35b81e4 100644
--- a/sc/source/ui/vba/vbapagebreak.cxx
+++ b/sc/source/ui/vba/vbapagebreak.cxx
@@ -136,3 +136,36 @@ ScVbaHPageBreak::getServiceNames()
     return aServiceNames;
 }
 
+template class ScVbaPageBreak< excel::XVPageBreak >;
+
+/* class ScVbaVPageBreak */
+ScVbaVPageBreak::ScVbaVPageBreak( const css::uno::Reference< ov::XHelperInterface >& xParent,
+                                  const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                                  css::uno::Reference< css::beans::XPropertySet >& xProps,
+                                  css::sheet::TablePageBreakData aTablePageBreakData ) throw ( css::uno::RuntimeException )
+:   ScVbaVPageBreak_BASE( xParent, xContext, xProps, aTablePageBreakData )
+{
+}
+
+ScVbaVPageBreak::~ScVbaVPageBreak()
+{
+}
+
+rtl::OUString&
+ScVbaVPageBreak::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaVPageBreak") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaVPageBreak::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.excel.VPageBreak" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sc/source/ui/vba/vbapagebreak.hxx b/sc/source/ui/vba/vbapagebreak.hxx
index 6269f5d..4b5754a 100644
--- a/sc/source/ui/vba/vbapagebreak.hxx
+++ b/sc/source/ui/vba/vbapagebreak.hxx
@@ -30,12 +30,13 @@
 #include <cppuhelper/implbase1.hxx>
 #include <ooo/vba/excel/XPageBreak.hpp>
 #include <ooo/vba/excel/XHPageBreak.hpp>
+#include <ooo/vba/excel/XVPageBreak.hpp>
 #include <ooo/vba/excel/XRange.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/script/BasicErrorException.hpp>
 #include <com/sun/star/sheet/TablePageBreakData.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 template< typename Ifc1 >
 class ScVbaPageBreak : public InheritedHelperInterfaceImpl1< Ifc1 >
@@ -81,4 +82,22 @@ public:
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
 };
 
+//VPageBreak
+typedef ScVbaPageBreak < ov::excel::XVPageBreak > ScVbaVPageBreak_BASE;
+
+class ScVbaVPageBreak :  public ScVbaVPageBreak_BASE
+{
+public:
+    ScVbaVPageBreak( const css::uno::Reference< ov::XHelperInterface >& xParent,
+                     const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                     css::uno::Reference< css::beans::XPropertySet >& xProps,
+                     css::sheet::TablePageBreakData aTablePageBreakData) throw (css::uno::RuntimeException);
+
+    virtual ~ScVbaVPageBreak();
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
 #endif
diff --git a/sc/source/ui/vba/vbapagebreaks.cxx b/sc/source/ui/vba/vbapagebreaks.cxx
index 22333c2..f70286c 100644
--- a/sc/source/ui/vba/vbapagebreaks.cxx
+++ b/sc/source/ui/vba/vbapagebreaks.cxx
@@ -87,8 +87,8 @@ public:
     virtual uno::Any SAL_CALL getByIndex( sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException);
     virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
     {
-        //if( m_bColumn )
-            // return excel::XVPageBreak::static_type(0);
+        if( m_bColumn )
+             return excel::XVPageBreak::static_type(0);
         return  excel::XHPageBreak::static_type(0);
     }
     virtual sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
@@ -134,8 +134,8 @@ uno::Any SAL_CALL RangePageBreaks::getByIndex( sal_Int32 Index ) throw (lang::In
         if( (nPos < xIndexAccess->getCount()) && (nPos > -1) )
         {
             uno::Reference< beans::XPropertySet > xRowColPropertySet( xIndexAccess->getByIndex(nPos), uno::UNO_QUERY_THROW );
-            //if( m_bColumn )
-            //	return uno::makeAny( uno::Reference< excel::XVPageBreak >( new ScVbaVPageBreak( mxParent, mxContext, xRowColPropertySet, aTablePageBreakData) ));
+            if( m_bColumn )
+                return uno::makeAny( uno::Reference< excel::XVPageBreak >( new ScVbaVPageBreak( mxParent, mxContext, xRowColPropertySet, aTablePageBreakData) ));
             return uno::makeAny( uno::Reference< excel::XHPageBreak >( new ScVbaHPageBreak( mxParent, mxContext, xRowColPropertySet, aTablePageBreakData) ));
         }
     }
@@ -184,8 +184,8 @@ uno::Any RangePageBreaks::Add( const css::uno::Any& Before ) throw ( css::script
     sheet::TablePageBreakData aTablePageBreakData;
     aTablePageBreakData.ManualBreak = sal_True;
     aTablePageBreakData.Position = nAPIRowColIndex;
-    //if( m_bColumn )
-    //	return uno::makeAny( uno::Reference< excel::XVPageBreak >( new ScVbaVPageBreak( mxParent, mxContext, xRowColPropertySet, aTablePageBreakData) ));
+    if( m_bColumn )
+        return uno::makeAny( uno::Reference< excel::XVPageBreak >( new ScVbaVPageBreak( mxParent, mxContext, xRowColPropertySet, aTablePageBreakData) ));
     return uno::makeAny( uno::Reference< excel::XHPageBreak >( new ScVbaHPageBreak( mxParent, mxContext, xRowColPropertySet, aTablePageBreakData) ));
 }
 
@@ -264,3 +264,63 @@ ScVbaHPageBreaks::getServiceNames()
     return aServiceNames;
 }
 
+//VPageBreak
+ScVbaVPageBreaks::ScVbaVPageBreaks( const uno::Reference< XHelperInterface >& xParent,
+                                    const uno::Reference< uno::XComponentContext >& xContext,
+                                    uno::Reference< sheet::XSheetPageBreak >& xSheetPageBreak ) throw ( uno::RuntimeException )
+:   ScVbaVPageBreaks_BASE( xParent, xContext, new RangePageBreaks( xParent, xContext, xSheetPageBreak, sal_True ) ),
+    mxSheetPageBreak( xSheetPageBreak )
+{
+}
+
+ScVbaVPageBreaks::~ScVbaVPageBreaks()
+{
+}
+
+uno::Any SAL_CALL
+ScVbaVPageBreaks::Add( const uno::Any& Before ) throw ( script::BasicErrorException, uno::RuntimeException )
+{
+    RangePageBreaks* pPageBreaks = dynamic_cast< RangePageBreaks* >( m_xIndexAccess.get() );
+    if( pPageBreaks )
+    {
+        return pPageBreaks->Add( Before );
+    }
+    return uno::Any();
+}
+
+uno::Reference< container::XEnumeration >
+ScVbaVPageBreaks::createEnumeration() throw ( uno::RuntimeException )
+{
+    return new RangePageBreaksEnumWrapper( m_xIndexAccess );
+}
+
+uno::Any
+ScVbaVPageBreaks::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource; // its already a pagebreak object
+}
+
+uno::Type
+ScVbaVPageBreaks::getElementType() throw ( uno::RuntimeException )
+{
+    return excel::XVPageBreak::static_type( 0 );
+}
+
+rtl::OUString&
+ScVbaVPageBreaks::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM( "ScVbaVPageBreaks" ) );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaVPageBreaks::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.excel.VPageBreaks" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sc/source/ui/vba/vbapagebreaks.hxx b/sc/source/ui/vba/vbapagebreaks.hxx
index f2a8c61..4f54163 100644
--- a/sc/source/ui/vba/vbapagebreaks.hxx
+++ b/sc/source/ui/vba/vbapagebreaks.hxx
@@ -30,6 +30,8 @@
 #include <cppuhelper/implbase1.hxx>
 #include <ooo/vba/excel/XHPageBreaks.hpp>
 #include <ooo/vba/excel/XHPageBreak.hpp>
+#include <ooo/vba/excel/XVPageBreaks.hpp>
+#include <ooo/vba/excel/XVPageBreak.hpp>
 #include <ooo/vba/excel/XRange.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/script/BasicErrorException.hpp>
@@ -38,8 +40,8 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/container/XIndexAccess.hpp>
 #include <com/sun/star/table/XColumnRowRange.hpp>
-#include "vbahelperinterface.hxx"
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbacollectionimpl.hxx>
 
 typedef CollTestImplHelper< ov::excel::XHPageBreaks > ScVbaHPageBreaks_BASE;
 
@@ -65,4 +67,31 @@ public:
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
 };
 
+//VPageBreaks
+typedef CollTestImplHelper< ov::excel::XVPageBreaks > ScVbaVPageBreaks_BASE;
+
+class ScVbaVPageBreaks : public ScVbaVPageBreaks_BASE
+{
+    css::uno::Reference< css::sheet::XSheetPageBreak > mxSheetPageBreak;
+
+public:
+    ScVbaVPageBreaks( const css::uno::Reference< ov::XHelperInterface >& xParent,
+                      const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                      css::uno::Reference< css::sheet::XSheetPageBreak >& xSheetPageBreak ) throw ( css::uno::RuntimeException );
+
+    virtual ~ScVbaVPageBreaks();
+
+    // XVPageBreaks
+    virtual css::uno::Any SAL_CALL Add( const css::uno::Any& Before ) throw ( css::script::BasicErrorException, css::uno::RuntimeException );
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw ( css::uno::RuntimeException );
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw ( css::uno::RuntimeException );
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
 #endif
diff --git a/sc/source/ui/vba/vbapages.cxx b/sc/source/ui/vba/vbapages.cxx
index b60d130..e69de29 100644
--- a/sc/source/ui/vba/vbapages.cxx
+++ b/sc/source/ui/vba/vbapages.cxx
@@ -1,73 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbapages.hxx"
-
-using namespace ::ooo::vba;
-using namespace ::com::sun::star;
-using namespace ::vos;
-
-ScVbaPages::ScVbaPages( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xPages ) throw( lang::IllegalArgumentException ) : ScVbaPages_BASE( xParent, xContext, xPages )
-{
-}
-
-uno::Type SAL_CALL 
-ScVbaPages::getElementType() throw (uno::RuntimeException)
-{
-    // return msforms::XPage::static_type(0); 
-    return uno::XInterface::static_type(0); 
-}
-
-uno::Any 
-ScVbaPages::createCollectionObject( const css::uno::Any& aSource )
-{
-    return aSource;
-}
-
-rtl::OUString& 
-ScVbaPages::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaPages") );
-    return sImplName;
-}
-
-uno::Reference< container::XEnumeration > SAL_CALL 
-ScVbaPages::createEnumeration() throw (uno::RuntimeException)
-{
-    return uno::Reference< container::XEnumeration >();
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaPages::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.Pages" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbapages.hxx b/sc/source/ui/vba/vbapages.hxx
index 2d709f2..e69de29 100644
--- a/sc/source/ui/vba/vbapages.hxx
+++ b/sc/source/ui/vba/vbapages.hxx
@@ -1,56 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_PAGES_HXX
-#define SC_VBA_PAGES_HXX
-
-#include <ooo/vba/office/MsoShapeType.hpp>
-#include <com/sun/star/lang/XEventListener.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <ooo/vba/msforms/XPages.hpp>
-#include <cppuhelper/implbase2.hxx>
-#include <cppuhelper/implbase1.hxx>
-
-#include "vbacollectionimpl.hxx"
-typedef CollTestImplHelper< 
-ov::msforms::XPages > ScVbaPages_BASE;
-
-class ScVbaPages : public ScVbaPages_BASE
-{
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-public:
-    ScVbaPages( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xPages ) throw ( css::lang::IllegalArgumentException );
-    virtual ~ScVbaPages() {}
-        // XEnumerationAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
-     // ScVbaPages_BASE
-     virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
-
-};
-#endif//SC_VBA_SHAPE_HXX
diff --git a/sc/source/ui/vba/vbapagesetup.cxx b/sc/source/ui/vba/vbapagesetup.cxx
index fce5b1c..bdcc0d0 100644
--- a/sc/source/ui/vba/vbapagesetup.cxx
+++ b/sc/source/ui/vba/vbapagesetup.cxx
@@ -28,6 +28,7 @@
 #include "cellsuno.hxx"
 #include "convuno.hxx"
 #include "rangelst.hxx"
+#include "excelvbahelper.hxx"
 #include <com/sun/star/sheet/XPrintAreas.hpp>
 #include <com/sun/star/sheet/XHeaderFooterContent.hpp>
 #include <com/sun/star/text/XText.hpp>
@@ -49,10 +50,10 @@ ScVbaPageSetup::ScVbaPageSetup(const uno::Reference< XHelperInterface >& xParent
                 const uno::Reference< uno::XComponentContext >& xContext,
                 const uno::Reference< sheet::XSpreadsheet >& xSheet,
                 const uno::Reference< frame::XModel >& xModel) throw (uno::RuntimeException):
-           ScVbaPageSetup_BASE( xParent, xContext ),
-        mxSheet( xSheet ), mxModel( xModel )
+	ScVbaPageSetup_BASE( xParent, xContext ), mxSheet( xSheet )
 {
     // query for current page style
+    mxModel.set( xModel, uno::UNO_QUERY_THROW );
     uno::Reference< beans::XPropertySet > xSheetProps( mxSheet, uno::UNO_QUERY_THROW );
     uno::Any aValue = xSheetProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "PageStyle" )));
     rtl::OUString aStyleName;
@@ -62,6 +63,8 @@ ScVbaPageSetup::ScVbaPageSetup(const uno::Reference< XHelperInterface >& xParent
     uno::Reference< container::XNameAccess > xStyleFamilies = xStyleFamiliesSup->getStyleFamilies();
     uno::Reference< container::XNameAccess > xPageStyle( xStyleFamilies->getByName(rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyles"))), uno::UNO_QUERY_THROW );
     mxPageProps.set( xPageStyle->getByName(aStyleName), uno::UNO_QUERY_THROW );
+    mnOrientLandscape = excel::XlPageOrientation::xlLandscape;
+    mnOrientPortrait = excel::XlPageOrientation::xlPortrait;
 }		
 
 rtl::OUString SAL_CALL ScVbaPageSetup::getPrintArea() throw (css::uno::RuntimeException)
@@ -82,7 +85,7 @@ rtl::OUString SAL_CALL ScVbaPageSetup::getPrintArea() throw (css::uno::RuntimeEx
             ScUnoConversion::FillScRange( aRange, aSeq[i] );
             aRangeList.Append( aRange );
         }
-        ScDocument* pDoc = getDocShell( mxModel )->GetDocument();
+        ScDocument* pDoc = excel::getDocShell( mxModel )->GetDocument();
         aRangeList.Format( aPrintArea, nFlags, pDoc, formula::FormulaGrammar::CONV_XL_A1, ','  );
     }
     
@@ -103,7 +106,7 @@ void SAL_CALL ScVbaPageSetup::setPrintArea( const rtl::OUString& rAreas ) throw
     {
         ScRangeList aCellRanges;
         ScRange aRange;
-        if( getScRangeListForAddress( rAreas, getDocShell( mxModel ) , aRange, aCellRanges ) ) 
+        if( getScRangeListForAddress( rAreas, excel::getDocShell( mxModel ) , aRange, aCellRanges ) )
         {
             uno::Sequence< table::CellRangeAddress > aSeq( aCellRanges.Count() );
             USHORT i=0;
@@ -118,290 +121,24 @@ void SAL_CALL ScVbaPageSetup::setPrintArea( const rtl::OUString& rAreas ) throw
     }
 }
 
-double SAL_CALL ScVbaPageSetup::getTopMargin() throw (css::uno::RuntimeException)
-{
-    sal_Bool headerOn = sal_False;
-    sal_Int32 topMargin = 0;
-    sal_Int32 headerHeight = 0;
-
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")));
-        aValue >>= headerOn;
-
-        aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")));
-        aValue >>= topMargin;
-
-        if( headerOn )
-        {
-            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight")));
-            aValue >>= headerHeight;
-            topMargin += headerHeight;
-        }
-    }
-    catch( uno::Exception& )
-    {
-    }
-    
-    return Millimeter::getInPoints( topMargin );
-}
-
-void SAL_CALL ScVbaPageSetup::setTopMargin( double margin ) throw (css::uno::RuntimeException)
-{
-    sal_Int32 topMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
-    sal_Bool headerOn = sal_False;
-    sal_Int32 headerHeight = 0;
-
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")));
-        aValue >>= headerOn;
-        
-        if( headerOn )
-        {
-            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight")));
-            aValue >>= headerHeight;
-            topMargin -= headerHeight;
-        }
-
-        aValue <<= topMargin;
-        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")), aValue );
-    }
-    catch( uno::Exception& )
-    {
-    }
-}
-
-double SAL_CALL ScVbaPageSetup::getBottomMargin() throw (css::uno::RuntimeException)
-{
-    sal_Bool footerOn = sal_False;
-    sal_Int32 bottomMargin = 0;
-    sal_Int32 footerHeight = 0;
-
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")));
-        aValue >>= footerOn;
-
-        aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")));
-        aValue >>= bottomMargin;
-
-        if( footerOn )
-        {
-            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight")));
-            aValue >>= footerHeight;
-            bottomMargin += footerHeight;
-        }
-    }
-    catch( uno::Exception& )
-    {
-    }
-    
-    return Millimeter::getInPoints( bottomMargin );
-}
-
-void SAL_CALL ScVbaPageSetup::setBottomMargin( double margin ) throw (css::uno::RuntimeException)
-{
-    sal_Int32 bottomMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
-    sal_Bool footerOn = sal_False;
-    sal_Int32 footerHeight = 0;
-
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")));
-        aValue >>= footerOn;
-        
-        if( footerOn )
-        {
-            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight")));
-            aValue >>= footerHeight;
-            bottomMargin -= footerHeight;
-        }
-
-        aValue <<= bottomMargin;
-        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")), aValue );
-    }
-    catch( uno::Exception& )
-    {
-    }
-}
-
-double SAL_CALL ScVbaPageSetup::getRightMargin() throw (css::uno::RuntimeException)
-{
-    sal_Int32 rightMargin = 0;
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin")));
-        aValue >>= rightMargin;
-    }
-    catch( uno::Exception& )
-    {
-    }
-    
-    return Millimeter::getInPoints( rightMargin );;
-}
-
-void SAL_CALL ScVbaPageSetup::setRightMargin( double margin ) throw (css::uno::RuntimeException)
-{
-    sal_Int32 rightMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
-    try
-    {
-        uno::Any aValue;
-        aValue <<= rightMargin;
-        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin")), aValue );
-    }
-    catch( uno::Exception& )
-    {
-    }
-
-}
-
-double SAL_CALL ScVbaPageSetup::getLeftMargin() throw (css::uno::RuntimeException)
-{
-    sal_Int32 leftMargin = 0;
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin")));
-        aValue >>= leftMargin;
-    }
-    catch( uno::Exception& )
-    {
-    }
-    
-    return Millimeter::getInPoints( leftMargin );;
-}
-
-void SAL_CALL ScVbaPageSetup::setLeftMargin( double margin ) throw (css::uno::RuntimeException)
-{
-    sal_Int32 leftMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
-    try
-    {
-        uno::Any aValue;
-        aValue <<= leftMargin;
-        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin")), aValue );
-    }
-    catch( uno::Exception& )
-    {
-    }
-}
-
 double SAL_CALL ScVbaPageSetup::getHeaderMargin() throw (css::uno::RuntimeException)
 {
-    sal_Int32 headerMargin = 0;
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")));
-        aValue >>= headerMargin;
-    }
-    catch( uno::Exception& )
-    {
-    }
-    
-    return Millimeter::getInPoints( headerMargin );;
+    return VbaPageSetupBase::getHeaderMargin();
 }
 
 void SAL_CALL ScVbaPageSetup::setHeaderMargin( double margin ) throw (css::uno::RuntimeException)
 {
-    sal_Int32 headerMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
-    try
-    {
-        uno::Any aValue;
-        aValue <<= headerMargin;
-        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")), aValue );
-    }
-    catch( uno::Exception& )
-    {
-    }
+    VbaPageSetupBase::setHeaderMargin( margin );
 }
 
 double SAL_CALL ScVbaPageSetup::getFooterMargin() throw (css::uno::RuntimeException)
 {
-    sal_Int32 footerMargin = 0;
-    try
-    {
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")));
-        aValue >>= footerMargin;
-    }
-    catch( uno::Exception& )
-    {
-    }
-    
-    return Millimeter::getInPoints( footerMargin );;
+    return VbaPageSetupBase::getFooterMargin();
 }
 
 void SAL_CALL ScVbaPageSetup::setFooterMargin( double margin ) throw (css::uno::RuntimeException)
 {
-    sal_Int32 footerMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
-    try
-    {
-        uno::Any aValue;
-        aValue <<= footerMargin;
-        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")), aValue );
-    }
-    catch( uno::Exception& )
-    {
-    }
-}
-
-sal_Int32 SAL_CALL ScVbaPageSetup::getOrientation() throw (css::uno::RuntimeException)
-{
-    sal_Int32 orientation = excel::XlPageOrientation::xlPortrait;
-    try
-    {
-        sal_Bool isLandscape = sal_False;
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("IsLandscape")));
-        aValue >>= isLandscape;
-
-        if( isLandscape )
-        {
-            orientation = excel::XlPageOrientation::xlLandscape;
-        }
-    }
-    catch( uno::Exception& )
-    {
-    }
-    return orientation;
-}
-
-void SAL_CALL ScVbaPageSetup::setOrientation( sal_Int32 orientation ) throw (css::uno::RuntimeException)
-{
-    if( ( orientation != excel::XlPageOrientation::xlPortrait ) &&
-        ( orientation != excel::XlPageOrientation::xlLandscape ) )
-    {
-        DebugHelper::exception(SbERR_BAD_PARAMETER, rtl::OUString() );
-    }
-
-    try
-    {
-        sal_Bool isLandscape = sal_False;
-        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("IsLandscape")));
-        aValue >>= isLandscape;
-
-        sal_Bool switchOrientation = sal_False;
-        if(( isLandscape && orientation != excel::XlPageOrientation::xlLandscape ) || 
-            ( !isLandscape && orientation != excel::XlPageOrientation::xlPortrait ))
-        {
-            switchOrientation = sal_True;
-        }
-
-        if( switchOrientation )
-        {
-            aValue <<= !isLandscape;
-            uno::Any aHeight = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Height")));
-            uno::Any aWidth = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Width")));
-            mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("IsLandscape")), aValue );
-            mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Width")),  aHeight );
-            mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Height")), aWidth );
-        }
-
-        if( isLandscape )
-        {
-            orientation = excel::XlPageOrientation::xlLandscape;
-        }
-    }
-    catch( uno::Exception& )
-    {
-    }
+    VbaPageSetupBase::setFooterMargin( margin );
 }
 
 uno::Any SAL_CALL ScVbaPageSetup::getFitToPagesTall() throw (css::uno::RuntimeException)
diff --git a/sc/source/ui/vba/vbapagesetup.hxx b/sc/source/ui/vba/vbapagesetup.hxx
index 74b4cb9..c7a28cb 100644
--- a/sc/source/ui/vba/vbapagesetup.hxx
+++ b/sc/source/ui/vba/vbapagesetup.hxx
@@ -32,39 +32,28 @@
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/sheet/XSpreadsheet.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbapagesetupbase.hxx>
 
-typedef InheritedHelperInterfaceImpl1< ov::excel::XPageSetup > ScVbaPageSetup_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaPageSetupBase, ov::excel::XPageSetup > ScVbaPageSetup_BASE;
 
 class ScVbaPageSetup :  public ScVbaPageSetup_BASE 
 {
     css::uno::Reference< css::sheet::XSpreadsheet > mxSheet;
-    css::uno::Reference< css::beans::XPropertySet > mxPageProps;
-    css::uno::Reference< css::frame::XModel > mxModel;
 public:
     ScVbaPageSetup( const css::uno::Reference< ov::XHelperInterface >& xParent, 
                     const css::uno::Reference< css::uno::XComponentContext >& xContext,
                     const css::uno::Reference< css::sheet::XSpreadsheet>& xSheet,
-                    const css::uno::Reference< css::frame::XModel >& xModlel) throw (css::uno::RuntimeException); 
+                    const css::uno::Reference< css::frame::XModel >& xModel) throw (css::uno::RuntimeException);
     virtual ~ScVbaPageSetup(){}
     
     // Attribute
     virtual rtl::OUString SAL_CALL getPrintArea() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setPrintArea( const rtl::OUString& rAreas ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getTopMargin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setTopMargin( double margin ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getBottomMargin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setBottomMargin( double margin ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getRightMargin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setRightMargin( double margin ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getLeftMargin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setLeftMargin( double margin ) throw (css::uno::RuntimeException);
     virtual double SAL_CALL getHeaderMargin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setHeaderMargin( double margin ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getFooterMargin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setFooterMargin( double margin ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getOrientation() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setOrientation( sal_Int32 orientation ) throw (css::uno::RuntimeException);
+    void SAL_CALL setHeaderMargin( double margin ) throw (css::uno::RuntimeException);
+    double SAL_CALL getFooterMargin() throw (css::uno::RuntimeException);
+    void SAL_CALL setFooterMargin( double margin ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getFitToPagesTall() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setFitToPagesTall( const css::uno::Any& fitToPagesTall ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getFitToPagesWide() throw (css::uno::RuntimeException);
diff --git a/sc/source/ui/vba/vbapalette.cxx b/sc/source/ui/vba/vbapalette.cxx
index 05efa5c..aaf288c 100644
--- a/sc/source/ui/vba/vbapalette.cxx
+++ b/sc/source/ui/vba/vbapalette.cxx
@@ -89,7 +89,7 @@ ScVbaPalette::getDefaultPalette()
 }
 
 uno::Reference< container::XIndexAccess >
-ScVbaPalette::getPalette()
+ScVbaPalette::getPalette() const
 {
     uno::Reference< container::XIndexAccess > xIndex;
     uno::Reference< beans::XPropertySet > xProps;
diff --git a/sc/source/ui/vba/vbapalette.hxx b/sc/source/ui/vba/vbapalette.hxx
index 2ef0190..eadc4ba 100644
--- a/sc/source/ui/vba/vbapalette.hxx
+++ b/sc/source/ui/vba/vbapalette.hxx
@@ -27,7 +27,7 @@
 #ifndef SC_VBAPALETTE_HXX
 #define SC_VBAPALETTE_HXX
 
-#include "vbahelper.hxx"
+#include "excelvbahelper.hxx"
 #include <document.hxx>
 #include <com/sun/star/container/XIndexAccess.hpp>
 
@@ -39,7 +39,7 @@ public:
     ScVbaPalette(  SfxObjectShell* pShell = NULL ) : m_pShell( pShell ){}
     // if no palette available e.g. because the document doesn't have a 
     // palette defined then a default palette will be returned.
-    css::uno::Reference< css::container::XIndexAccess > getPalette();
+    css::uno::Reference< css::container::XIndexAccess > getPalette() const;
     static css::uno::Reference< css::container::XIndexAccess > getDefaultPalette();
 };
 
diff --git a/sc/source/ui/vba/vbapane.hxx b/sc/source/ui/vba/vbapane.hxx
index 0e1443a..0fa1d49 100644
--- a/sc/source/ui/vba/vbapane.hxx
+++ b/sc/source/ui/vba/vbapane.hxx
@@ -31,7 +31,7 @@
 #include<com/sun/star/sheet/XViewPane.hpp>
 #include<ooo/vba/excel/XPane.hpp>
 
-#include"vbahelper.hxx"
+#include"excelvbahelper.hxx"
 
 typedef cppu::WeakImplHelper1< ov::excel::XPane > PaneImpl_Base;
 
diff --git a/sc/source/ui/vba/vbapictureformat.cxx b/sc/source/ui/vba/vbapictureformat.cxx
index df1e678..e69de29 100644
--- a/sc/source/ui/vba/vbapictureformat.cxx
+++ b/sc/source/ui/vba/vbapictureformat.cxx
@@ -1,144 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbapictureformat.hxx"
-
-using namespace ooo::vba;
-using namespace com::sun::star;
-
-ScVbaPictureFormat::ScVbaPictureFormat( const css::uno::Reference< ov::XHelperInterface >& xParent,
-    const css::uno::Reference< css::uno::XComponentContext >& xContext,
-    uno::Reference< drawing::XShape > xShape ) 
-    throw( lang::IllegalArgumentException ) : ScVbaPictureFormat_BASE( xParent, xContext ), m_xShape( xShape )
-{
-    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
-}
-
-void
-ScVbaPictureFormat::checkParameterRangeInDouble( double nRange, double nMin, double nMax ) throw (css::uno::RuntimeException)
-{
-    if( nRange < nMin )
-    {
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parameter out of range, value is too small.") , uno::Reference< uno::XInterface >() );
-    }
-    if( nRange > nMax )
-    {
-        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parameter out of range, value is too high.") , uno::Reference< uno::XInterface >() );
-    }
-}
-
-// Attributes
-double SAL_CALL 
-ScVbaPictureFormat::getBrightness() throw (uno::RuntimeException)
-{
-    sal_Int16 nLuminance = 0;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("AdjustLuminance") ) >>= nLuminance;
-    double fBrightness = static_cast< double >( nLuminance );
-    fBrightness = ( fBrightness +100 ) / 200;
-    return fBrightness; 
-}
-
-void SAL_CALL 
-ScVbaPictureFormat::setBrightness( double _brightness ) throw (uno::RuntimeException)
-{
-    checkParameterRangeInDouble( _brightness, 0.0, 1.0 );
-    double fLuminance = _brightness * 200 - 100;
-    sal_Int16 nLuminance = static_cast< sal_Int16 >( fLuminance );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("AdjustLuminance"), uno::makeAny( nLuminance ) ); 
-}
-
-double SAL_CALL 
-ScVbaPictureFormat::getContrast() throw (uno::RuntimeException)
-{
-    sal_Int16 nContrast = 0;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("AdjustContrast") ) >>= nContrast;
-    double fContrast = static_cast< double >( nContrast );
-    fContrast = ( fContrast + 100 ) / 200;
-    return fContrast;
-}
-
-void SAL_CALL 
-ScVbaPictureFormat::setContrast( double _contrast ) throw (uno::RuntimeException)
-{
-    checkParameterRangeInDouble( _contrast, 0.0, 1.0 );
-    double fContrast = _contrast * 200 - 100;
-    sal_Int16 nContrast = static_cast< sal_Int16 >( fContrast );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("AdjustContrast"), uno::makeAny( nContrast ) );
-}
-
-
-// Methods
-void SAL_CALL 
-ScVbaPictureFormat::IncrementBrightness( double increment ) throw (uno::RuntimeException)
-{
-    double fBrightness = getBrightness();
-    fBrightness += increment;
-    if( fBrightness < 0 )
-    {
-        fBrightness = 0.0;
-    }
-    if( fBrightness > 1 )
-    {
-        fBrightness = 1;
-    }
-    setBrightness( fBrightness );
-}
-
-void SAL_CALL 
-ScVbaPictureFormat::IncrementContrast( double increment ) throw (uno::RuntimeException)
-{
-    double nContrast = getContrast();
-    nContrast += increment;
-    if( increment < 0 )
-    {
-        increment = 0.0;
-    }
-    if( increment > 1 )
-    {
-        increment = 1.0;
-    }
-    setContrast( nContrast );
-}
-
-
-rtl::OUString&
-ScVbaPictureFormat::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaPictureFormat") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString >
-ScVbaPictureFormat::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.PictureFormat" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbapictureformat.hxx b/sc/source/ui/vba/vbapictureformat.hxx
index 46b1ae3..e69de29 100644
--- a/sc/source/ui/vba/vbapictureformat.hxx
+++ b/sc/source/ui/vba/vbapictureformat.hxx
@@ -1,61 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_PICTUREFORMAT_HXX
-#define SC_VBA_PICTUREFORMAT_HXX
-
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <ooo/vba/msforms/XPictureFormat.hpp>
-#include "vbahelperinterface.hxx"
-
-typedef InheritedHelperInterfaceImpl1< ov::msforms::XPictureFormat > ScVbaPictureFormat_BASE;
-
-class ScVbaPictureFormat : public ScVbaPictureFormat_BASE
-{
-private:
-    css::uno::Reference< css::drawing::XShape > m_xShape;
-    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-private:
-    void checkParameterRangeInDouble( double nRange, double nMin, double nMax ) throw (css::uno::RuntimeException);
-public:
-    ScVbaPictureFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, css::uno::Reference< css::drawing::XShape > xShape ) throw( css::lang::IllegalArgumentException );
-
-    // Attributes
-    virtual double SAL_CALL getBrightness() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setBrightness( double _brightness ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getContrast() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setContrast( double _contrast ) throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual void SAL_CALL IncrementBrightness( double increment ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL IncrementContrast( double increment ) throw (css::uno::RuntimeException);
-};
-
-#endif//SC_VBA_PICTUREFORMAT_HXX
diff --git a/sc/source/ui/vba/vbapivotcache.hxx b/sc/source/ui/vba/vbapivotcache.hxx
index 7aacfed..cd3d86c 100644
--- a/sc/source/ui/vba/vbapivotcache.hxx
+++ b/sc/source/ui/vba/vbapivotcache.hxx
@@ -31,7 +31,7 @@
 #include <com/sun/star/sheet/XDataPilotTable.hpp>
 
 #include <ooo/vba/excel/XPivotCache.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1<ov::excel::XPivotCache > PivotCacheImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbapivottable.hxx b/sc/source/ui/vba/vbapivottable.hxx
index 0081d51..4758ffb 100644
--- a/sc/source/ui/vba/vbapivottable.hxx
+++ b/sc/source/ui/vba/vbapivottable.hxx
@@ -30,8 +30,8 @@
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <com/sun/star/sheet/XDataPilotTable.hpp>
 #include <ooo/vba/excel/XPivotTable.hpp>
-#include "vbahelper.hxx"
-#include "vbahelperinterface.hxx"
+#include "excelvbahelper.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XPivotTable >  PivotTableImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbapivottables.hxx b/sc/source/ui/vba/vbapivottables.hxx
index 264dba4..3c4833a 100644
--- a/sc/source/ui/vba/vbapivottables.hxx
+++ b/sc/source/ui/vba/vbapivottables.hxx
@@ -33,9 +33,9 @@
 #include <com/sun/star/container/XEnumerationAccess.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
  
-#include "vbahelper.hxx"
-#include "vbahelperinterface.hxx"
-#include "vbacollectionimpl.hxx"
+#include "excelvbahelper.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbacollectionimpl.hxx>
 
 
 typedef CollTestImplHelper< ov::excel::XPivotTables > ScVbaPivotTables_BASE;
diff --git a/sc/source/ui/vba/vbaprogressbar.cxx b/sc/source/ui/vba/vbaprogressbar.cxx
index 88ee92d..e69de29 100644
--- a/sc/source/ui/vba/vbaprogressbar.cxx
+++ b/sc/source/ui/vba/vbaprogressbar.cxx
@@ -1,70 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbaprogressbar.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-// uno servicename com.sun.star.awt.UnoControlProgressBarMode
-const rtl::OUString SVALUE( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") );
-
-ScVbaProgressBar::ScVbaProgressBar( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ProgressBarImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-uno::Any SAL_CALL 
-ScVbaProgressBar::getValue() throw (css::uno::RuntimeException)
-{
-    return m_xProps->getPropertyValue( SVALUE );
-}
-
-void SAL_CALL 
-ScVbaProgressBar::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SVALUE,  _value );
-}
-
-rtl::OUString& 
-ScVbaProgressBar::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaProgressBar") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaProgressBar::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Label" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbaprogressbar.hxx b/sc/source/ui/vba/vbaprogressbar.hxx
index b2c0e48..e69de29 100644
--- a/sc/source/ui/vba/vbaprogressbar.hxx
+++ b/sc/source/ui/vba/vbaprogressbar.hxx
@@ -1,51 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_PROGRESSBAR_HXX
-#define SC_VBA_PROGRESSBAR_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XProgressBar.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-#include <cppuhelper/implbase2.hxx>
-
-typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XProgressBar, css::script::XDefaultProperty  > ProgressBarImpl_BASE;
-
-class ScVbaProgressBar : public ProgressBarImpl_BASE
-{
-public:
-    ScVbaProgressBar( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-};
-#endif //SC_VBA_LABEL_HXX
diff --git a/sc/source/ui/vba/vbapropvalue.hxx b/sc/source/ui/vba/vbapropvalue.hxx
index c1a6e30..b578fc3 100644
--- a/sc/source/ui/vba/vbapropvalue.hxx
+++ b/sc/source/ui/vba/vbapropvalue.hxx
@@ -29,7 +29,7 @@
 #include <ooo/vba/XPropValue.hpp>
 #include <cppuhelper/implbase1.hxx>
 
-#include "vbahelper.hxx"
+#include "excelvbahelper.hxx"
 
 typedef ::cppu::WeakImplHelper1< ov::XPropValue > PropValueImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbaradiobutton.cxx b/sc/source/ui/vba/vbaradiobutton.cxx
index 5618939..e69de29 100644
--- a/sc/source/ui/vba/vbaradiobutton.cxx
+++ b/sc/source/ui/vba/vbaradiobutton.cxx
@@ -1,104 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbaradiobutton.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-const static rtl::OUString STATE( RTL_CONSTASCII_USTRINGPARAM("State") );
-ScVbaRadioButton::ScVbaRadioButton( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : RadioButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaRadioButton::getCaption() throw (css::uno::RuntimeException)
-{
-    rtl::OUString Label;
-    m_xProps->getPropertyValue( LABEL ) >>= Label;
-    return Label;
-}
-
-void SAL_CALL 
-ScVbaRadioButton::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
-}
-
-uno::Any SAL_CALL 
-ScVbaRadioButton::getValue() throw (css::uno::RuntimeException)
-{
-    sal_Int16 nValue = -1;
-    m_xProps->getPropertyValue( STATE ) >>= nValue;
-    if( nValue != 0 )
-        nValue = -1;
-//    return uno::makeAny( nValue ); 
-// I must be missing something MSO says value should be -1 if selected, 0 if not
-// selected
-    return uno::makeAny( ( nValue == -1 ) ? sal_True : sal_False ); 
-
-}
-
-void SAL_CALL 
-ScVbaRadioButton::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
-{
-    sal_Int16 nValue = 0;
-    sal_Bool bValue = sal_False;
-    if( _value >>= nValue )
-    {
-        if( nValue == -1)
-        nValue = 1;
-    }
-    else if ( _value >>= bValue )
-    {
-        if ( bValue )
-            nValue = 1;
-    }
-    m_xProps->setPropertyValue( STATE, uno::makeAny( nValue ) );
-}
-
-rtl::OUString& 
-ScVbaRadioButton::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaRadioButton") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaRadioButton::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.RadioButton" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbaradiobutton.hxx b/sc/source/ui/vba/vbaradiobutton.hxx
index 16872be..e69de29 100644
--- a/sc/source/ui/vba/vbaradiobutton.hxx
+++ b/sc/source/ui/vba/vbaradiobutton.hxx
@@ -1,52 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_RADIOBUTTON_HXX
-#define SC_VBA_RADIOBUTTON_HXX
-#include <ooo/vba/msforms/XRadioButton.hpp>
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-#include <cppuhelper/implbase2.hxx>
-
-typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XRadioButton, css::script::XDefaultProperty > RadioButtonImpl_BASE;
-
-class ScVbaRadioButton : public RadioButtonImpl_BASE
-{
-public:
-    ScVbaRadioButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
-   // Attributes
-    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue(const com::sun::star::uno::Any&) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-
-};
-#endif //SC_VBA_RADIOBUTTON_HXX
diff --git a/sc/source/ui/vba/vbarange.cxx b/sc/source/ui/vba/vbarange.cxx
index 8ce0135..a57880e 100644
--- a/sc/source/ui/vba/vbarange.cxx
+++ b/sc/source/ui/vba/vbarange.cxx
@@ -24,7 +24,7 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 
 #include <comphelper/unwrapargs.hxx>
 #include <comphelper/processfactory.hxx>
@@ -146,7 +146,6 @@
 #include "rangelst.hxx"
 #include "convuno.hxx"
 #include "compiler.hxx"
-#include "formula/grammar.hxx"
 #include "attrib.hxx"
 #include "undodat.hxx"
 #include "dbdocfun.hxx"
@@ -159,7 +158,7 @@
 #include "vbaglobals.hxx"
 #include "vbastyle.hxx"
 #include <vector>
-#include <vbacollectionimpl.hxx>
+#include <vbahelper/vbacollectionimpl.hxx>
 // begin test includes
 #include <com/sun/star/sheet/FunctionArgument.hpp>
 // end test includes
@@ -253,7 +252,7 @@ ScCellRangeObj*  ScVbaRange::getCellRangeObj() throw ( uno::RuntimeException )
 SfxItemSet*  ScVbaRange::getCurrentDataSet( ) throw ( uno::RuntimeException )
 {
     ScCellRangeObj* pUnoCellRange = getCellRangeObj();
-    SfxItemSet* pDataSet = ScVbaCellRangeAccess::GetDataSet( pUnoCellRange );
+    SfxItemSet* pDataSet = excel::ScVbaCellRangeAccess::GetDataSet( pUnoCellRange );
     if ( !pDataSet )
         throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Can't access Itemset for range" ) ), uno::Reference< uno::XInterface >() );
     return pDataSet;	
@@ -470,7 +469,7 @@ public:
         if ( pUnoCellRange )
         {
             
-            SfxItemSet* pDataSet = 	ScVbaCellRangeAccess::GetDataSet( pUnoCellRange );
+            SfxItemSet* pDataSet = 	excel::ScVbaCellRangeAccess::GetDataSet( pUnoCellRange );
             SfxItemState eState = pDataSet->GetItemState( ATTR_VALUE_FORMAT, TRUE, NULL);
             // one of the cells in the range is not like the other ;-)
             // so return a zero length format to indicate that
@@ -1976,7 +1975,7 @@ ScVbaRange::Select() throw (uno::RuntimeException)
         // ThisComponent.CurrentController.Frame.getContainerWindow.SetFocus
         try
         {
-            uno::Reference< frame::XController > xController( getCurrentDocument()->getCurrentController(), uno::UNO_QUERY_THROW );
+            uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
             uno::Reference< frame::XFrame > xFrame( xController->getFrame(), uno::UNO_QUERY_THROW );
             uno::Reference< awt::XWindow > xWin( xFrame->getContainerWindow(), uno::UNO_QUERY_THROW );
             xWin->setFocus();
@@ -1996,9 +1995,9 @@ bool cellInRange( const table::CellRangeAddress& rAddr, const sal_Int32& nCol, c
     return false;
 }
 
-void setCursor(  const SCCOL& nCol, const SCROW& nRow, bool bInSel = true )
+void setCursor(  const SCCOL& nCol, const SCROW& nRow, const uno::Reference< frame::XModel >& xModel,  bool bInSel = true )
 {
-    ScTabViewShell* pShell = getCurrentBestViewShell();
+    ScTabViewShell* pShell = excel::getBestViewShell( xModel );
     if ( pShell )
     {
         if ( bInSel )
@@ -2024,11 +2023,19 @@ ScVbaRange::Activate() throw (uno::RuntimeException)
     RangeHelper thisRange( xCellRange );
     uno::Reference< sheet::XCellRangeAddressable > xThisRangeAddress = thisRange.getCellRangeAddressable();
     table::CellRangeAddress thisRangeAddress = xThisRangeAddress->getRangeAddress();
-    
+        uno::Reference< frame::XModel > xModel;
+        ScDocShell* pShell = getScDocShell();
+
+        if ( pShell )
+            xModel = pShell->GetModel();
+
+        if ( !xModel.is() )
+            throw uno::RuntimeException();
+
     // get current selection
-    uno::Reference< sheet::XCellRangeAddressable > xRange( getCurrentDocument()->getCurrentSelection(), ::uno::UNO_QUERY);
+    uno::Reference< sheet::XCellRangeAddressable > xRange( xModel->getCurrentSelection(), ::uno::UNO_QUERY);
 
-    uno::Reference< sheet::XSheetCellRanges > xRanges( getCurrentDocument()->getCurrentSelection(), ::uno::UNO_QUERY);
+    uno::Reference< sheet::XSheetCellRanges > xRanges( xModel->getCurrentSelection(), ::uno::UNO_QUERY);
 
     if ( xRanges.is() )
     {
@@ -2037,7 +2044,7 @@ ScVbaRange::Activate() throw (uno::RuntimeException)
         {
             if ( cellInRange( nAddrs[index], thisRangeAddress.StartColumn, thisRangeAddress.StartRow ) )
             {
-                setCursor( static_cast< SCCOL >( thisRangeAddress.StartColumn ), static_cast< SCROW >( thisRangeAddress.StartRow ) );
+                setCursor( static_cast< SCCOL >( thisRangeAddress.StartColumn ), static_cast< SCROW >( thisRangeAddress.StartRow ), xModel );
                 return;
             }
             
@@ -2045,7 +2052,7 @@ ScVbaRange::Activate() throw (uno::RuntimeException)
     }	
 
     if ( xRange.is() && cellInRange( xRange->getRangeAddress(), thisRangeAddress.StartColumn, thisRangeAddress.StartRow ) )
-        setCursor( static_cast< SCCOL >( thisRangeAddress.StartColumn ), static_cast< SCROW >( thisRangeAddress.StartRow ) );
+        setCursor( static_cast< SCCOL >( thisRangeAddress.StartColumn ), static_cast< SCROW >( thisRangeAddress.StartRow ), xModel );
     else
     {
         // if this range is multi cell select the range other
@@ -2053,7 +2060,7 @@ ScVbaRange::Activate() throw (uno::RuntimeException)
         if ( isSingleCellRange() ) 
             // This top-leftmost cell of this Range is not in the current
             // selection so just select this range
-            setCursor( static_cast< SCCOL >( thisRangeAddress.StartColumn ), static_cast< SCROW >( thisRangeAddress.StartRow ), false  );
+            setCursor( static_cast< SCCOL >( thisRangeAddress.StartColumn ), static_cast< SCROW >( thisRangeAddress.StartRow ), xModel, false  );
         else
             Select();
     }
@@ -2208,8 +2215,9 @@ ScVbaRange::Copy(const ::uno::Any& Destination) throw (uno::RuntimeException)
     }
     else
     {
+        uno::Reference< frame::XModel > xModel = getModelFromRange( mxRange );
         Select();
-        implnCopy();
+        excel::implnCopy( xModel );
     }
 }
 
@@ -2232,8 +2240,9 @@ ScVbaRange::Cut(const ::uno::Any& Destination) throw (uno::RuntimeException)
         xMover->moveRange( xDestination->getCellAddress(), xSource->getRangeAddress() );
     }
     {
+        uno::Reference< frame::XModel > xModel = getModelFromRange( mxRange );
         Select();
-        implnCut();
+        excel::implnCut( xModel );
     }
 }
                                                                                                                              
@@ -2541,9 +2550,12 @@ ScVbaRange::PasteSpecial( const uno::Any& Paste, const uno::Any& Operation, cons
 {
     if ( m_Areas->getCount() > 1 )
         throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("That command cannot be used on multiple selections" ) ), uno::Reference< uno::XInterface >() );
-    uno::Reference< view::XSelectionSupplier > xSelection( getCurrentDocument()->getCurrentController(), uno::UNO_QUERY_THROW );
+        ScDocShell* pShell = getScDocShell();
+
+        uno::Reference< frame::XModel > xModel( ( pShell ? pShell->GetModel() : NULL ), uno::UNO_QUERY_THROW );
+    uno::Reference< view::XSelectionSupplier > xSelection( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
     // save old selection
-    uno::Reference< uno::XInterface > xSel(  getCurrentDocument()->getCurrentSelection() );
+    uno::Reference< uno::XInterface > xSel( xModel->getCurrentSelection() );
     // select this range
     xSelection->select( uno::makeAny( mxRange ) );
     // set up defaults	
@@ -2563,7 +2575,7 @@ ScVbaRange::PasteSpecial( const uno::Any& Paste, const uno::Any& Operation, cons
 
     USHORT nFlags = getPasteFlags(nPaste);
     USHORT nFormulaBits = getPasteFormulaBits(nOperation);
-    implnPasteSpecial(nFlags,nFormulaBits,bSkipBlanks,bTranspose);
+    excel::implnPasteSpecial(pShell->GetModel(), nFlags,nFormulaBits,bSkipBlanks,bTranspose);
     // restore selection
     xSelection->select( uno::makeAny( xSel ) );
 }
@@ -3232,13 +3244,15 @@ ScVbaRange::End( ::sal_Int32 Direction )  throw (uno::RuntimeException)
     
     // Save ActiveCell pos ( to restore later )
     uno::Any aDft;
-    rtl::OUString sActiveCell =	ScVbaGlobals::getGlobalsImpl(
-                       mxContext )->getApplication()->getActiveCell()->Address(aDft, aDft, aDft, aDft, aDft );
+    uno::Reference< excel::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+    rtl::OUString sActiveCell = xApplication->getActiveCell()->Address(aDft, aDft, aDft, aDft, aDft );
 
     // position current cell upper left of this range
     Cells( uno::makeAny( (sal_Int32) 1 ), uno::makeAny( (sal_Int32) 1 ) )->Select();
 
-    SfxViewFrame* pViewFrame = getCurrentViewFrame();
+        uno::Reference< frame::XModel > xModel = getModelFromRange( mxRange );
+
+    SfxViewFrame* pViewFrame = excel::getViewFrame( xModel );
     if ( pViewFrame )
     {
         SfxAllItemSet aArgs( SFX_APP()->GetPool() );
@@ -3274,18 +3288,17 @@ ScVbaRange::End( ::sal_Int32 Direction )  throw (uno::RuntimeException)
     }
 
     // result is the ActiveCell		
-    rtl::OUString sMoved =	ScVbaGlobals::getGlobalsImpl(
-                       mxContext )->getApplication()->getActiveCell()->Address(aDft, aDft, aDft, aDft, aDft );
+    rtl::OUString sMoved =	xApplication->getActiveCell()->Address(aDft, aDft, aDft, aDft, aDft );
 
     // restore old ActiveCell		
     uno::Any aVoid;
-    uno::Reference< excel::XRange > xOldActiveCell( ScVbaGlobals::getGlobalsImpl(
-        mxContext )->getActiveSheet()->Range( uno::makeAny( sActiveCell ), aVoid ), uno::UNO_QUERY_THROW );
+
+    uno::Reference< excel::XRange > xOldActiveCell( xApplication->getActiveSheet()->Range( uno::makeAny( sActiveCell ), aVoid ), uno::UNO_QUERY_THROW );
     xOldActiveCell->Select();
 
     uno::Reference< excel::XRange > resultCell;
-    resultCell.set( ScVbaGlobals::getGlobalsImpl(
-        mxContext )->getActiveSheet()->Range( uno::makeAny( sMoved ), aVoid ), uno::UNO_QUERY_THROW );
+
+    resultCell.set( xApplication->getActiveSheet()->Range( uno::makeAny( sMoved ), aVoid ), uno::UNO_QUERY_THROW );
 
     // return result
     
@@ -3318,7 +3331,6 @@ ScVbaRange::characters( const uno::Any& Start, const uno::Any& Length ) throw (u
  void SAL_CALL 
 ScVbaRange::Delete( const uno::Any& Shift ) throw (uno::RuntimeException)
 {
-    
     if ( m_Areas->getCount() > 1 )
     {
         sal_Int32 nItems = m_Areas->getCount();
@@ -3330,6 +3342,8 @@ ScVbaRange::Delete( const uno::Any& Shift ) throw (uno::RuntimeException)
         return;
     }
     sheet::CellDeleteMode mode = sheet::CellDeleteMode_NONE ; 
+    RangeHelper thisRange( mxRange );
+    table::CellRangeAddress thisAddress = thisRange.getCellRangeAddressable()->getRangeAddress();
     if ( Shift.hasValue() )		
     {
         sal_Int32 nShift = 0;
@@ -3347,13 +3361,17 @@ ScVbaRange::Delete( const uno::Any& Shift ) throw (uno::RuntimeException)
         }
     }
     else
-        if ( getRow() >  getColumn() )
+        {
+        bool bFullRow = ( thisAddress.StartColumn == 0 && thisAddress.EndColumn == MAXCOL );
+            sal_Int32 nCols = thisAddress.EndColumn - thisAddress.StartColumn;
+            sal_Int32 nRows = thisAddress.EndRow - thisAddress.StartRow;
+        if ( mbIsRows || bFullRow || ( nCols >=  nRows ) )
             mode = sheet::CellDeleteMode_UP;
         else
             mode = sheet::CellDeleteMode_LEFT;
-    RangeHelper thisRange( mxRange );
+    }
     uno::Reference< sheet::XCellRangeMovement > xCellRangeMove( thisRange.getSpreadSheet(), uno::UNO_QUERY_THROW );
-    xCellRangeMove->removeRange( thisRange.getCellRangeAddressable()->getRangeAddress(), mode ); 
+    xCellRangeMove->removeRange( thisAddress, mode );
     
 }
 
@@ -3391,7 +3409,7 @@ ScVbaRange::createEnumeration() throw (uno::RuntimeException)
 ::rtl::OUString SAL_CALL 
 ScVbaRange::getDefaultMethodName(  ) throw (uno::RuntimeException)
 {
-    const static rtl::OUString sName( RTL_CONSTASCII_USTRINGPARAM("Cells") );
+    const static rtl::OUString sName( RTL_CONSTASCII_USTRINGPARAM("Item") );
     return sName;
 }
 
@@ -3748,7 +3766,7 @@ ScVbaRange::setPageBreak( const uno::Any& _pagebreak) throw (uno::RuntimeExcepti
         uno::Reference< frame::XModel > xModel = pShell->GetModel();
         if ( xModel.is() )
         {
-            ScTabViewShell* pViewShell = getBestViewShell( xModel );
+            ScTabViewShell* pViewShell = excel::getBestViewShell( xModel );
             if ( nPageBreak == excel::XlPageBreak::xlPageBreakManual )
                 pViewShell->InsertPageBreak( bColumn, TRUE, &aAddr);
             else if ( nPageBreak == excel::XlPageBreak::xlPageBreakNone )
@@ -3878,7 +3896,7 @@ ScVbaRange::ApplicationRange( const uno::Reference< uno::XComponentContext >& xC
     if ( Cell1.hasValue() && !Cell2.hasValue() && sRangeName.getLength() )
     {
         const static rtl::OUString sNamedRanges( RTL_CONSTASCII_USTRINGPARAM("NamedRanges"));
-        uno::Reference< beans::XPropertySet > xPropSet( getCurrentDocument(), uno::UNO_QUERY_THROW );
+        uno::Reference< beans::XPropertySet > xPropSet( getCurrentExcelDoc(xContext), uno::UNO_QUERY_THROW );
         
         uno::Reference< container::XNameAccess > xNamed( xPropSet->getPropertyValue( sNamedRanges ), uno::UNO_QUERY_THROW );
         uno::Reference< sheet::XCellRangeReferrer > xReferrer;
@@ -3901,7 +3919,7 @@ ScVbaRange::ApplicationRange( const uno::Reference< uno::XComponentContext >& xC
             }
         }
     }
-    uno::Reference< sheet::XSpreadsheetView > xView( getCurrentDocument()->getCurrentController(), uno::UNO_QUERY );
+    uno::Reference< sheet::XSpreadsheetView > xView( getCurrentExcelDoc(xContext)->getCurrentController(), uno::UNO_QUERY );
     uno::Reference< table::XCellRange > xSheetRange( xView->getActiveSheet(), uno::UNO_QUERY_THROW ); 
     ScVbaRange* pRange = new ScVbaRange( uno::Reference< XHelperInterface >(), xContext, xSheetRange );
     uno::Reference< excel::XRange > xVbSheetRange( pRange );
@@ -4348,8 +4366,10 @@ ScVbaRange::AutoFilter( const uno::Any& Field, const uno::Any& Criteria1, const
 }
 
 void SAL_CALL 
-ScVbaRange::Insert( const uno::Any& Shift, const uno::Any& /*CopyOrigin*/ ) throw (uno::RuntimeException)
+ScVbaRange::Insert( const uno::Any& Shift, const uno::Any& CopyOrigin ) throw (uno::RuntimeException)
 {
+    sal_Bool bCopyOrigin = sal_True;
+    CopyOrigin >>= bCopyOrigin;
     // It appears ( from the web ) that the undocumented CopyOrigin
     // param should contain member of enum XlInsertFormatOrigin
     // which can have values xlFormatFromLeftOrAbove or xlFormatFromRightOrBelow
@@ -4381,8 +4401,17 @@ ScVbaRange::Insert( const uno::Any& Shift, const uno::Any& /*CopyOrigin*/ ) thro
             mode = sheet::CellInsertMode_RIGHT;
     }
     RangeHelper thisRange( mxRange );
+    table::CellRangeAddress thisAddress = thisRange.getCellRangeAddressable()->getRangeAddress();
     uno::Reference< sheet::XCellRangeMovement > xCellRangeMove( thisRange.getSpreadSheet(), uno::UNO_QUERY_THROW );	
-    xCellRangeMove->insertCells( thisRange.getCellRangeAddressable()->getRangeAddress(), mode );
+    xCellRangeMove->insertCells( thisAddress, mode );
+    if ( bCopyOrigin )
+    {
+        // After the insert ( this range ) actually has moved
+        ScRange aRange( static_cast< SCCOL >( thisAddress.StartColumn ), static_cast< SCROW >( thisAddress.StartRow ), static_cast< SCTAB >( thisAddress.Sheet ), static_cast< SCCOL >( thisAddress.EndColumn ), static_cast< SCROW >( thisAddress.EndRow ), static_cast< SCTAB >( thisAddress.Sheet ) );
+	uno::Reference< table::XCellRange > xRange( new ScCellRangeObj( getDocShellFromRange( mxRange ) , aRange ) );
+        uno::Reference< excel::XRange > xVbaRange( new ScVbaRange( getParent(), mxContext, xRange, mbIsRows, mbIsColumns ) );
+        xVbaRange->PasteSpecial( uno::Any(), uno::Any(), uno::Any(), uno::Any() );
+    }
 }
 
 void SAL_CALL
@@ -4717,7 +4746,7 @@ ScVbaRange::PrintOut( const uno::Any& From, const uno::Any& To, const uno::Any&
         {
             xPrintAreas->setPrintAreas( printAreas );
             uno::Reference< frame::XModel > xModel = pShell->GetModel();
-            PrintOutHelper( From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, xModel, sal_True );
+            PrintOutHelper( excel::getBestViewShell( xModel ), From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, sal_True );
         }
     }
 }
@@ -5031,6 +5060,7 @@ ScVbaRange::getStyle() throw (uno::RuntimeException)
     }
     uno::Reference< beans::XPropertySet > xProps( mxRange, uno::UNO_QUERY_THROW );
     rtl::OUString sStyleName;
+    xProps->getPropertyValue(CELLSTYLE) >>= sStyleName;
     ScDocShell* pShell = getScDocShell();
     uno::Reference< frame::XModel > xModel( pShell->GetModel() ); 
     uno::Reference< excel::XStyle > xStyle = new ScVbaStyle( this, mxContext,  sStyleName, xModel );
diff --git a/sc/source/ui/vba/vbarange.hxx b/sc/source/ui/vba/vbarange.hxx
index dda2d90..7655bd5 100644
--- a/sc/source/ui/vba/vbarange.hxx
+++ b/sc/source/ui/vba/vbarange.hxx
@@ -50,12 +50,15 @@
 #include <com/sun/star/sheet/XSpreadsheet.hpp>
 #include <com/sun/star/sheet/XSheetCellRangeContainer.hpp>
 
-//#include "vbahelperinterface.hxx"
+//#include <vbahelper/vbahelperinterface.hxx>
 #include "vbaformat.hxx"
+#include <formula/grammar.hxx>
 
 class ScTableSheetsObj;
 class ScCellRangesBase;
 class ScCellRangeObj;
+class ScDocShell;
+class ScDocument;
 
 //typedef InheritedHelperInterfaceImpl1< ov::excel::XRange >  ScVbaRange_BASE;
 typedef ScVbaFormat< ov::excel::XRange > ScVbaRange_BASE;
diff --git a/sc/source/ui/vba/vbascrollbar.cxx b/sc/source/ui/vba/vbascrollbar.cxx
index de823f2..e69de29 100644
--- a/sc/source/ui/vba/vbascrollbar.cxx
+++ b/sc/source/ui/vba/vbascrollbar.cxx
@@ -1,131 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbascrollbar.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LARGECHANGE( RTL_CONSTASCII_USTRINGPARAM("BlockIncrement") );
-const static rtl::OUString SMALLCHANGE( RTL_CONSTASCII_USTRINGPARAM("LineIncrement") );
-const static rtl::OUString ORIENTATION( RTL_CONSTASCII_USTRINGPARAM("Orientation") );
-const static rtl::OUString SCROLLVALUE( RTL_CONSTASCII_USTRINGPARAM("ScrollValue") );
-const static rtl::OUString SCROLLMAX( RTL_CONSTASCII_USTRINGPARAM("ScrollValueMax") );
-const static rtl::OUString SCROLLMIN( RTL_CONSTASCII_USTRINGPARAM("ScrollValueMin") );
-
-ScVbaScrollBar::ScVbaScrollBar(  const css::uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ScrollBarImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-uno::Any SAL_CALL 
-ScVbaScrollBar::getValue() throw (css::uno::RuntimeException)
-{
-    return  m_xProps->getPropertyValue( SCROLLVALUE );
-}
-
-void SAL_CALL 
-ScVbaScrollBar::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SCROLLVALUE, _value );
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaScrollBar::getMax() throw (uno::RuntimeException)
-{
-    sal_Int32 nMax = 0;
-    m_xProps->getPropertyValue( SCROLLMAX ) >>= nMax;
-    return nMax;
-}
-
-void SAL_CALL 
-ScVbaScrollBar::setMax( sal_Int32 nVal ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SCROLLMAX, uno::makeAny( nVal ) ); 
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaScrollBar::getMin() throw (uno::RuntimeException)
-{
-    sal_Int32 nVal = 0;
-    m_xProps->getPropertyValue( SCROLLMIN ) >>= nVal;
-    return nVal;
-}
-
-void SAL_CALL 
-ScVbaScrollBar::setMin( sal_Int32 nVal ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SCROLLMIN, uno::makeAny( nVal ) ); 
-}
-
-void SAL_CALL 
-ScVbaScrollBar::setLargeChange( ::sal_Int32 _largechange ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LARGECHANGE, uno::makeAny( _largechange ) );
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaScrollBar::getLargeChange() throw (uno::RuntimeException)
-{
-    sal_Int32 nVal = 0;
-    m_xProps->getPropertyValue( LARGECHANGE ) >>= nVal;
-    return nVal;
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaScrollBar::getSmallChange() throw (uno::RuntimeException)
-{
-    sal_Int32 nSmallChange = 0;
-    m_xProps->getPropertyValue( SMALLCHANGE ) >>= nSmallChange;
-    return nSmallChange;
-}
-
-void SAL_CALL 
-ScVbaScrollBar::setSmallChange( ::sal_Int32 _smallchange ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SMALLCHANGE, uno::makeAny( _smallchange ) );
-}
-
-rtl::OUString& 
-ScVbaScrollBar::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaScrollBar") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaScrollBar::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Frame" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbascrollbar.hxx b/sc/source/ui/vba/vbascrollbar.hxx
index e4aae32..e69de29 100644
--- a/sc/source/ui/vba/vbascrollbar.hxx
+++ b/sc/source/ui/vba/vbascrollbar.hxx
@@ -1,58 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_SCROLLBAR_HXX
-#define SC_VBA_SCROLLBAR_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XScrollBar.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XScrollBar > ScrollBarImpl_BASE;
-
-class ScVbaScrollBar : public ScrollBarImpl_BASE
-{
-public:
-    ScVbaScrollBar( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getMax() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMax( ::sal_Int32 _max ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getMin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMin( ::sal_Int32 _min ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getLargeChange() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setLargeChange( ::sal_Int32 _largechange ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getSmallChange() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setSmallChange( ::sal_Int32 _smallchange ) throw (css::uno::RuntimeException);
-
-
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_LABEL_HXX
diff --git a/sc/source/ui/vba/vbaseriescollection.hxx b/sc/source/ui/vba/vbaseriescollection.hxx
index ade718a..7d27b98 100644
--- a/sc/source/ui/vba/vbaseriescollection.hxx
+++ b/sc/source/ui/vba/vbaseriescollection.hxx
@@ -28,9 +28,9 @@
 #define SC_VBA_SERIESCOLLECTION_HXX
 
 #include <ooo/vba/excel/XSeriesCollection.hpp>
-#include "vbahelperinterface.hxx"
-#include "vbacollectionimpl.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbacollectionimpl.hxx>
+#include "excelvbahelper.hxx"
 
 
 typedef CollTestImplHelper< ov::excel::XSeriesCollection > SeriesCollection_BASE;
diff --git a/sc/source/ui/vba/vbashape.cxx b/sc/source/ui/vba/vbashape.cxx
index 405e115..e69de29 100644
--- a/sc/source/ui/vba/vbashape.cxx
+++ b/sc/source/ui/vba/vbashape.cxx
@@ -1,477 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include<ooo/vba/office/MsoZOrderCmd.hpp>
-#include<ooo/vba/office/MsoScaleFrom.hpp>
-#include<com/sun/star/container/XNamed.hpp>
-#include<com/sun/star/drawing/ConnectorType.hpp>
-#include <com/sun/star/lang/XEventListener.hpp>
-#include<com/sun/star/drawing/XDrawPagesSupplier.hpp>
-#include<com/sun/star/drawing/XDrawPages.hpp>
-
-#include <vos/mutex.hxx>
-#include <vcl/svapp.hxx>
-#include <svx/unopage.hxx>
-#include <svx/unoshape.hxx>
-
-#include "vbashape.hxx"
-#include "vbatextframe.hxx"
-#include "vbalineformat.hxx"
-#include "vbafillformat.hxx"
-#include "vbapictureformat.hxx"
-
-using namespace ::ooo::vba;
-using namespace ::com::sun::star;
-using namespace ::vos;
-
-ScVbaShape::ScVbaShape( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape >& xShape, const uno::Reference< drawing::XShapes >& xShapes, sal_Int32 nType ) throw( lang::IllegalArgumentException ) : ScVbaShape_BASE( xParent, xContext ), m_xShape( xShape ), m_xShapes( xShapes ), m_nType( nType )
-{
-    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
-    addListeners();
-}
-
-ScVbaShape::ScVbaShape( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape >& xShape ) throw( lang::IllegalArgumentException ) : ScVbaShape_BASE( uno::Reference< XHelperInterface >(), xContext ), m_xShape( xShape )
-{
-    // add listener
-    addListeners();
-}
-
-ScVbaShape::~ScVbaShape()
-{ 
-    // dtor must never ever throw
-    try
-    {
-        removeShapeListener();
-        removeShapesListener();
-    }
-    catch( uno::Exception& )
-    {
-    }    
-}
-
-void SAL_CALL 
-ScVbaShape::disposing( const lang::EventObject& rEventObject ) throw( uno::RuntimeException )
-{
-    uno::Reference< drawing::XShapes > xShapes( rEventObject.Source, uno::UNO_QUERY );
-    uno::Reference< drawing::XShape > xShape( rEventObject.Source, uno::UNO_QUERY );
-    if ( xShapes.is() )
-        removeShapesListener();
-    if ( xShape.is() )
-        removeShapeListener();
-}
-
-
-void ScVbaShape::addListeners()
-{
-    uno::Reference< lang::XComponent > xComponent( m_xShape, uno::UNO_QUERY );
-    if ( xComponent.is() )
-        xComponent->addEventListener( this );
-
-    xComponent.set( m_xShapes, uno::UNO_QUERY );
-    if ( xComponent.is() )
-        xComponent->addEventListener( this );
-}
-
-void
-ScVbaShape::removeShapeListener() throw( uno::RuntimeException )
-{
-    if( m_xShape.is() )
-    {
-        uno::Reference< lang::XComponent > xComponent( m_xShape, uno::UNO_QUERY_THROW );
-        xComponent->removeEventListener( this );
-    }
-    m_xShape = NULL;
-    m_xPropertySet = NULL;
-}
-
-void
-ScVbaShape::removeShapesListener() throw( uno::RuntimeException )
-{
-    if( m_xShapes.is() )
-    {
-        uno::Reference< lang::XComponent > xComponent( m_xShapes, uno::UNO_QUERY_THROW );
-        xComponent->removeEventListener( this );
-    }
-    m_xShapes = NULL;
-}
-
-sal_Int32 
-ScVbaShape::getType( const css::uno::Reference< drawing::XShape > xShape ) throw (uno::RuntimeException)
-{
-    rtl::OUString sShapeType;
-    uno::Reference< drawing::XShapeDescriptor > xShapeDescriptor( xShape, uno::UNO_QUERY_THROW );
-    sShapeType = xShapeDescriptor->getShapeType();
-    // office::MsoShapeType::msoDiagram to "com.sun.star.drawing.GroupShape"
-    if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.GroupShape" ) ) )
-        return office::MsoShapeType::msoGroup;
-    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.GraphicObjectShape" ) ) )
-        return office::MsoShapeType::msoPicture;
-    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.ControlShape" ) ) )
-        return office::MsoShapeType::msoOLEControlObject;
-    // OOo don't support office::MsoShapeType::msoComment as a Shape.
-    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.OLE2Shape" ) ) )
-        return office::MsoShapeType::msoChart;
-    // Art characters office::MsoShapeType::msoTextEffect, in OOo corresponding to "com.sun.star.drawing.CustomShape"
-    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.ConnectorShape" ) ) )
-    {
-        enum drawing::ConnectorType connectorType;
-        uno::Reference< beans::XPropertySet > xPropertySet( xShape, uno::UNO_QUERY_THROW );
-        xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("EdgeKind")) >>= connectorType;
-        if( connectorType == drawing::ConnectorType_CURVE )
-            return office::MsoShapeType::msoFreeform;
-        else if( connectorType == drawing::ConnectorType_LINE )
-            return office::MsoShapeType::msoLine;
-        else 
-            return office::MsoShapeType::msoAutoShape;
-    }
-    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.LineShape" ) ) )
-        return office::MsoShapeType::msoLine;
-    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.CustomShape" ) ) ||
-            sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.RectangleShape") ) )
-        return office::MsoShapeType::msoAutoShape;
-    else
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "the shape type do not be surppored: " ) + sShapeType, uno::Reference< uno::XInterface >() );
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaShape::getName() throw (uno::RuntimeException)
-{
-    rtl::OUString sName;
-    uno::Reference< container::XNamed > xNamed( m_xShape, uno::UNO_QUERY_THROW );
-    sName = xNamed->getName();
-    return sName;
-}
-
-void SAL_CALL 
-ScVbaShape::setName( const rtl::OUString& _name ) throw (uno::RuntimeException)
-{
-    uno::Reference< container::XNamed > xNamed( m_xShape, uno::UNO_QUERY_THROW );
-    xNamed->setName( _name );
-}
-
-double SAL_CALL 
-ScVbaShape::getHeight() throw (uno::RuntimeException)
-{
-    return Millimeter::getInPoints( m_xShape->getSize().Height );
-}
-
-void SAL_CALL 
-ScVbaShape::setHeight( double _height ) throw (uno::RuntimeException)
-{
-    awt::Size aSize( m_xShape->getSize() );
-    aSize.Height = Millimeter::getInHundredthsOfOneMillimeter( _height );
-    m_xShape->setSize( aSize );
-}
-
-double SAL_CALL 
-ScVbaShape::getWidth() throw (uno::RuntimeException)
-{
-    return Millimeter::getInPoints( m_xShape->getSize().Width );
-}
-
-void SAL_CALL 
-ScVbaShape::setWidth( double _width ) throw (uno::RuntimeException)
-{
-    awt::Size aSize( m_xShape->getSize() );
-    aSize.Width = Millimeter::getInHundredthsOfOneMillimeter( _width );
-    m_xShape->setSize( aSize );
-}
-
-double SAL_CALL 
-ScVbaShape::getLeft() throw (uno::RuntimeException)
-{
-    return Millimeter::getInPoints( m_xShape->getPosition().X );
-}
-
-void SAL_CALL 
-ScVbaShape::setLeft( double _left ) throw (uno::RuntimeException)
-{
-    awt::Point oldPosition;
-    oldPosition = m_xShape->getPosition();
-    oldPosition.X = Millimeter::getInHundredthsOfOneMillimeter( _left );
-    m_xShape->setPosition( oldPosition );
-}
-
-double SAL_CALL 
-ScVbaShape::getTop() throw (uno::RuntimeException)
-{
-    return Millimeter::getInPoints( m_xShape->getPosition().Y );
-}
-
-void SAL_CALL 
-ScVbaShape::setTop( double _top ) throw (uno::RuntimeException)
-{
-    awt::Point oldPosition;
-    oldPosition = m_xShape->getPosition();
-    oldPosition.Y = Millimeter::getInHundredthsOfOneMillimeter( _top );
-    m_xShape->setPosition( oldPosition );
-}
-
-sal_Bool SAL_CALL 
-ScVbaShape::getVisible() throw (uno::RuntimeException)
-{
-    //UNO Shapes are always visible
-    return sal_True;
-}
-
-void SAL_CALL 
-ScVbaShape::setVisible( sal_Bool /*_visible*/ ) throw (uno::RuntimeException)
-{
-    //UNO Shapes are always visible
-}
-
-sal_Int32 SAL_CALL 
-ScVbaShape::getZOrderPosition() throw (uno::RuntimeException)
-{
-    sal_Int32 nZOrderPosition = 0;
-    uno::Any aZOrderPosition =  m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ) );
-    aZOrderPosition >>= nZOrderPosition;
-    return nZOrderPosition + 1;
-}
-
-sal_Int32 SAL_CALL 
-ScVbaShape::getType() throw (uno::RuntimeException)
-{
-    return m_nType;
-}
-
-double SAL_CALL 
-ScVbaShape::getRotation() throw (uno::RuntimeException)
-{
-    double dRotation = 0;
-    sal_Int32 nRotation = 0;
-    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "RotateAngle" ) ) >>= nRotation;
-    dRotation = static_cast< double >( nRotation /100 );
-    return dRotation;
-}
-
-void SAL_CALL 
-ScVbaShape::setRotation( double _rotation ) throw (uno::RuntimeException)
-{
-    sal_Int32 nRotation = static_cast < sal_Int32 > ( _rotation * 100 );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "RotateAngle" ), uno::makeAny( nRotation ) );
-}
-
-uno::Reference< msforms::XLineFormat > SAL_CALL 
-ScVbaShape::getLine() throw (uno::RuntimeException)
-{
-    // TODO should ongly return line
-    return uno::Reference< msforms::XLineFormat >( new ScVbaLineFormat( this, mxContext, m_xShape ) );
-}
-
-uno::Reference< msforms::XFillFormat > SAL_CALL
-ScVbaShape::getFill() throw (uno::RuntimeException)
-{
-    return uno::Reference< msforms::XFillFormat >( new ScVbaFillFormat( this, mxContext, m_xShape ) );
-}
-
-uno::Reference<  msforms::XPictureFormat > SAL_CALL
-ScVbaShape::getPictureFormat() throw (uno::RuntimeException)
-{
-    return uno::Reference< msforms::XPictureFormat >( new ScVbaPictureFormat( this, mxContext, m_xShape ) );
-}
-
-// Methods
-uno::Reference< excel::XTextFrame > SAL_CALL 
-ScVbaShape::TextFrame() throw (uno::RuntimeException)
-{
-    return uno::Reference< excel::XTextFrame >(new ScVbaTextFrame( getParent(), mxContext, m_xShape ) );
-}
-
-void SAL_CALL 
-ScVbaShape::Delete() throw (uno::RuntimeException)
-{
-    OGuard aGuard( Application::GetSolarMutex() );
-    m_xShapes->remove( m_xShape );
-}
-
-void SAL_CALL 
-ScVbaShape::ZOrder( sal_Int32 ZOrderCmd ) throw (uno::RuntimeException)
-{
-    sal_Int32 nOrderPositon;
-    uno::Any aOrderPostion = m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ) );
-    aOrderPostion >>= nOrderPositon;
-    switch( ZOrderCmd )
-    {
-    case office::MsoZOrderCmd::msoBringToFront:
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( SAL_MAX_INT32 ) );
-        break;
-    case office::MsoZOrderCmd::msoSendToBack:
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( (sal_Int32)0 ) );
-        break;
-    case office::MsoZOrderCmd::msoBringForward:
-        nOrderPositon += 1;
-        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( nOrderPositon ) );
-        break;
-    case office::MsoZOrderCmd::msoSendBackward:
-        if( nOrderPositon > 0 )
-        {
-            nOrderPositon -= 1;
-            m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( nOrderPositon ) );
-        }
-        break;
-    // below two commands use with Writer for text and image object.
-    case office::MsoZOrderCmd::msoBringInFrontOfText:
-    case office::MsoZOrderCmd::msoSendBehindText:
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "This ZOrderCmd is not implemented, it is use with writer." ), uno::Reference< uno::XInterface >() );
-    default:
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "Invalid Parameter." ), uno::Reference< uno::XInterface >() );
-    }
-}
-
-void SAL_CALL 
-ScVbaShape::IncrementRotation( double Increment ) throw (uno::RuntimeException)
-{
-    double nCurrentRotation = getRotation();
-    nCurrentRotation += Increment;
-    setRotation(nCurrentRotation);
-}
-
-void SAL_CALL 
-ScVbaShape::IncrementLeft( double Increment ) throw (uno::RuntimeException)
-{
-    double nCurrentLeft = getLeft();
-    nCurrentLeft += Increment;
-    setLeft(nCurrentLeft);
-}
-
-void SAL_CALL 
-ScVbaShape::IncrementTop( double Increment ) throw (uno::RuntimeException)
-{
-    double nCurrentTop = getTop();
-    nCurrentTop += Increment;
-    setTop(nCurrentTop);
-}
-
-void SAL_CALL 
-ScVbaShape::ScaleHeight( double Factor, sal_Bool /*RelativeToOriginalSize*/, sal_Int32 Scale ) throw (uno::RuntimeException)
-{
-    double nHeight = getHeight();
-    double nNewHeight = nHeight * Factor;
-    if( Scale == office::MsoScaleFrom::msoScaleFromTopLeft )
-    {
-        setHeight(nNewHeight);
-    }
-    else if( Scale == office::MsoScaleFrom::msoScaleFromBottomRight )
-    {
-        double nDeltaHeight = nNewHeight - nHeight;
-        double nNewTop = getTop() - nDeltaHeight;
-        setTop(nNewTop);
-        setHeight(nNewHeight);
-    }
-    else if( Scale == office::MsoScaleFrom::msoScaleFromMiddle )
-    {
-        double nDeltaHeight = (nNewHeight - nHeight) / 2;
-        double nNewTop = getTop() - nDeltaHeight;
-        setTop(nNewTop);
-        setHeight(nNewHeight);
-    }
-    else
-    {
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "ScaleHeight.Scale wrong value is given." ) , uno::Reference< uno::XInterface >() );
-    }
-}
-
-void SAL_CALL 
-ScVbaShape::ScaleWidth( double Factor, sal_Bool /*RelativeToOriginalSize*/, sal_Int32 Scale ) throw (uno::RuntimeException)
-{
-    double nWidth = getWidth();
-    double nNewWidth = nWidth * Factor;
-    if( Scale == office::MsoScaleFrom::msoScaleFromTopLeft )
-    {
-        setWidth(nNewWidth);
-    }
-    else if( Scale == office::MsoScaleFrom::msoScaleFromBottomRight )
-    {
-        double nDeltaWidth = nNewWidth - nWidth;
-        double nNewLeft = getLeft() - nDeltaWidth;
-        setLeft(nNewLeft);
-        setWidth(nNewWidth);
-    }
-    else if( Scale == office::MsoScaleFrom::msoScaleFromMiddle )
-    {
-        double nDeltaWidth = (nNewWidth - nWidth) / 2;
-        double nNewLeft = getLeft() - nDeltaWidth;
-        setLeft(nNewLeft);
-        setWidth(nNewWidth);
-    }
-    else
-    {
-        throw uno::RuntimeException( rtl::OUString::createFromAscii( "ScaleHeight.Scale wrong value is given." ) , uno::Reference< uno::XInterface >() );
-    }
-}
-
-void SAL_CALL
-ScVbaShape::Select( const uno::Any& /*Replace*/ ) throw ( uno::RuntimeException )
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    uno::Reference< view::XSelectionSupplier > xSelectSupp( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    xSelectSupp->select( uno::makeAny( m_xShape ) );
-}
-
-// This method should not be part of Shape, what we reall need to do is...
-// dynamically create the appropriate objects e.g. TextBox, Oval, Picture etc. 
-// ( e.g. the ones that really do have ShapeRange as an attribute )
-#include "vbashaperange.hxx"
-
-uno::Any SAL_CALL 
-ScVbaShape::ShapeRange( const uno::Any& index ) throw ( uno::RuntimeException )
-{
-    // perhaps we should store a reference to the Shapes Collection 
-    // in this class
-    // but anyway this method should not even be in this class
-    // #TODO not sure what the parent of the Shapes collection should be
-    
-    XNamedObjectCollectionHelper< drawing::XShape >::XNamedVec aVec;
-    aVec.push_back( m_xShape );
-    uno::Reference< container::XIndexAccess > xIndexAccess( new XNamedObjectCollectionHelper< drawing::XShape >( aVec ) );
-    uno::Reference< container::XChild > xChild( m_xShape, uno::UNO_QUERY_THROW );	
-    // #FIXME for want of a better parent, setting this
-    uno::Reference< msforms::XShapeRange > xShapeRange( new ScVbaShapeRange( mxParent, mxContext, xIndexAccess,  uno::Reference< drawing::XDrawPage >( xChild->getParent(), uno::UNO_QUERY_THROW ) ) );
-    if ( index.hasValue() )
-        return xShapeRange->Item( index, uno::Any() );
-    return uno::makeAny( xShapeRange );
-}
-
-rtl::OUString& 
-ScVbaShape::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaShape") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaShape::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.Shape" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbashape.hxx b/sc/source/ui/vba/vbashape.hxx
index 26d86ab..e69de29 100644
--- a/sc/source/ui/vba/vbashape.hxx
+++ b/sc/source/ui/vba/vbashape.hxx
@@ -1,105 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_SHAPE_HXX
-#define SC_VBA_SHAPE_HXX
-
-#include <ooo/vba/office/MsoShapeType.hpp>
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/drawing/XShapes.hpp>
-#include <com/sun/star/lang/XEventListener.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <ooo/vba/msforms/XShape.hpp>
-#include <ooo/vba/msforms/XLineFormat.hpp>
-#include <cppuhelper/implbase2.hxx>
-
-#include "vbahelperinterface.hxx"
-
-typedef  ::cppu::WeakImplHelper2< ov::msforms::XShape, css::lang::XEventListener > ListeningShape;
-
-typedef InheritedHelperInterfaceImpl< ListeningShape > ScVbaShape_BASE;
-
-class ScVbaShape : public ScVbaShape_BASE
-{
-friend class ConcreteXShapeHelper; // perhaps an accessor would be better
-private:
-protected:
-    css::uno::Reference< css::drawing::XShape > m_xShape;
-    css::uno::Reference< css::drawing::XShapes > m_xShapes;
-    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
-    sal_Int32 m_nType;
-    css::uno::Any m_aRange;
-    virtual void addListeners();
-    virtual void removeShapeListener() throw( css::uno::RuntimeException );
-    virtual void removeShapesListener() throw( css::uno::RuntimeException );
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-public:
-    ScVbaShape( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape, const css::uno::Reference< css::drawing::XShapes >& xShapes, sal_Int32 nType ) throw ( css::lang::IllegalArgumentException );
-    ScVbaShape( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape ) throw ( css::lang::IllegalArgumentException );
-    virtual ~ScVbaShape();
-    css::uno::Any getRange() { return m_aRange; };
-    void setRange( css::uno::Any aRange ) { m_aRange = aRange; };
-
-    static sal_Int32 getType( const css::uno::Reference< css::drawing::XShape > xShape ) throw (css::uno::RuntimeException);
-
-    // Attributes
-    virtual rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setName( const rtl::OUString& _name ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getHeight() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setHeight( double _height ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getWidth() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setWidth( double _width ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getLeft() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setLeft( double _left ) throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getTop() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setTop( double _top ) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getZOrderPosition() throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException);
-    virtual double SAL_CALL getRotation() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setRotation( double _rotation ) throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XLineFormat > SAL_CALL getLine() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XFillFormat > SAL_CALL getFill() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XPictureFormat > SAL_CALL getPictureFormat() throw (css::uno::RuntimeException);
-
-    // Methods
-    virtual css::uno::Reference< ov::excel::XTextFrame > SAL_CALL TextFrame(  ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Delete() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL ZOrder( sal_Int32 ZOrderCmd ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL IncrementRotation( double Increment ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL IncrementLeft( double Increment ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL IncrementTop( double Increment ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL ScaleHeight( double Factor, sal_Bool RelativeToOriginalSize, sal_Int32 Scale ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL ScaleWidth( double Factor, sal_Bool RelativeToOriginalSize, sal_Int32 Scale ) throw (css::uno::RuntimeException);
-    // Replace??
-    virtual void SAL_CALL Select( const css::uno::Any& Replace ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL ShapeRange( const css::uno::Any& index ) throw ( css::uno::RuntimeException );
-    // XEventListener
-    virtual void SAL_CALL disposing( const css::lang::EventObject& rEventObject ) throw( css::uno::RuntimeException );
-};
-#endif//SC_VBA_SHAPE_HXX
diff --git a/sc/source/ui/vba/vbashaperange.cxx b/sc/source/ui/vba/vbashaperange.cxx
index bb7655b..e69de29 100644
--- a/sc/source/ui/vba/vbashaperange.cxx
+++ b/sc/source/ui/vba/vbashaperange.cxx
@@ -1,167 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/drawing/XShapeGrouper.hpp>
-#include <com/sun/star/drawing/XDrawPage.hpp>
-
-#include "vbashaperange.hxx"
-#include "vbashape.hxx"
-
-using namespace ::ooo::vba;
-using namespace ::com::sun::star;
-
-class VbShapeRangeEnumHelper : public EnumerationHelper_BASE
-{
-        uno::Reference< XCollection > m_xParent;
-        uno::Reference<container::XIndexAccess > m_xIndexAccess;
-        sal_Int32 nIndex;
-public:
-    VbShapeRangeEnumHelper( const uno::Reference< XCollection >& xParent,  const uno::Reference< container::XIndexAccess >& xIndexAccess ) : m_xParent( xParent ), m_xIndexAccess( xIndexAccess ), nIndex( 0 ) {}
-        virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
-        {
-                return ( nIndex < m_xIndexAccess->getCount() );
-        }
-        virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
-        {
-                ScVbaShapeRange* pCollectionImpl = dynamic_cast< ScVbaShapeRange* >(m_xParent.get());
-                if ( pCollectionImpl && hasMoreElements() )
-                    return pCollectionImpl->createCollectionObject(  m_xIndexAccess->getByIndex( nIndex++ ) );
-                throw container::NoSuchElementException();
-        }
-
-};
-
-ScVbaShapeRange::ScVbaShapeRange( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xShapes, const uno::Reference< drawing::XDrawPage >& xDrawPage ) : ScVbaShapeRange_BASE( xParent, xContext, xShapes ), m_xDrawPage( xDrawPage ), m_nShapeGroupCount(0)
-{
-}
-
-// Methods
-void SAL_CALL 
-ScVbaShapeRange::Select(  ) throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    uno::Reference< view::XSelectionSupplier > xSelectSupp( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    xSelectSupp->select( uno::makeAny( getShapes() ) );
-}
-
-uno::Reference< msforms::XShape > SAL_CALL 
-ScVbaShapeRange::Group() throw (uno::RuntimeException)
-{
-    uno::Reference< drawing::XShapeGrouper > xShapeGrouper( m_xDrawPage, uno::UNO_QUERY_THROW );
-    uno::Reference< drawing::XShapeGroup > xShapeGroup( xShapeGrouper->group( getShapes() ), uno::UNO_QUERY_THROW );
-    uno::Reference< drawing::XShape > xShape( xShapeGroup, uno::UNO_QUERY_THROW );
-    return uno::Reference< msforms::XShape >( new ScVbaShape( getParent(), mxContext, xShape, getShapes(), office::MsoShapeType::msoGroup ) );
-}
-
-uno::Reference< drawing::XShapes > 
-ScVbaShapeRange::getShapes() throw (uno::RuntimeException)
-{
-    if ( !m_xShapes.is() )
-    {
-        uno::Reference< lang::XMultiServiceFactory > xMSF( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-        m_xShapes.set( xMSF->createInstance( rtl::OUString::createFromAscii( "com.sun.star.drawing.ShapeCollection" ) ), uno::UNO_QUERY_THROW );
-        sal_Int32 nLen = m_xIndexAccess->getCount();
-        for ( sal_Int32 index = 0; index < nLen; ++index )
-            m_xShapes->add( uno::Reference< drawing::XShape >( m_xIndexAccess->getByIndex( index ), uno::UNO_QUERY_THROW ) );
-
-    }
-    return m_xShapes;
-}
-
-
-void SAL_CALL 
-ScVbaShapeRange::IncrementRotation( double Increment ) throw (uno::RuntimeException)
-{
-    sal_Int32 nLen = getCount();
-    for ( sal_Int32 index = 1; index <= nLen; ++index )
-    {
-        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
-        xShape->IncrementRotation( Increment );
-    }
-}
-
-void SAL_CALL 
-ScVbaShapeRange::IncrementLeft( double Increment ) throw (uno::RuntimeException)
-{
-    sal_Int32 nLen = getCount();
-    for ( sal_Int32 index = 1; index <= nLen; ++index )
-    {
-        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
-        xShape->IncrementLeft( Increment );
-    }
-}
-
-void SAL_CALL 
-ScVbaShapeRange::IncrementTop( double Increment ) throw (uno::RuntimeException)
-{
-    sal_Int32 nLen = getCount();
-    for ( sal_Int32 index = 1; index <= nLen; ++index )
-    {
-        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
-        xShape->IncrementTop( Increment );
-    }
-}
-
-uno::Type SAL_CALL
-ScVbaShapeRange::getElementType() throw (uno::RuntimeException)
-{
-    return msforms::XShape::static_type(0);
-}
-
-uno::Reference< container::XEnumeration > SAL_CALL 
-ScVbaShapeRange::createEnumeration() throw (uno::RuntimeException)
-{
-    return new VbShapeRangeEnumHelper( this, m_xIndexAccess );
-}
-
-uno::Any
-ScVbaShapeRange:: createCollectionObject( const css::uno::Any& aSource )
-{
-    uno::Reference< drawing::XShape > xShape( aSource, uno::UNO_QUERY_THROW );
-    // #TODO  #FIXME Shape parent should always be the sheet the shapes belong 
-    // to 
-    uno::Reference< msforms::XShape > xVbShape( new ScVbaShape( uno::Reference< XHelperInterface >(), mxContext, xShape, getShapes(), ScVbaShape::getType( xShape ) ) ); 
-        return uno::makeAny( xVbShape );
-}
-
-rtl::OUString& 
-ScVbaShapeRange::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaShapeRange") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaShapeRange::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.ShapeRange" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbashaperange.hxx b/sc/source/ui/vba/vbashaperange.hxx
index 60d4ac3..e69de29 100644
--- a/sc/source/ui/vba/vbashaperange.hxx
+++ b/sc/source/ui/vba/vbashaperange.hxx
@@ -1,63 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_SHAPERANGE_HXX
-#define SC_VBA_SHAPERANGE_HXX
-
-#include <com/sun/star/drawing/XShapes.hpp>
-#include <ooo/vba/msforms/XShapeRange.hpp>
-
-#include "vbacollectionimpl.hxx"
-
-typedef CollTestImplHelper< ov::msforms::XShapeRange > ScVbaShapeRange_BASE;
-
-class ScVbaShapeRange : public ScVbaShapeRange_BASE
-{
-private:
-    css::uno::Reference< css::drawing::XDrawPage > m_xDrawPage;
-    css::uno::Reference< css::drawing::XShapes > m_xShapes;
-    sal_Int32 m_nShapeGroupCount;
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    css::uno::Reference< css::drawing::XShapes > getShapes() throw (css::uno::RuntimeException) ;
-public:
-    ScVbaShapeRange( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xShapes, const css::uno::Reference< css::drawing::XDrawPage>& xDrawShape );
-
-    // Methods
-    virtual void SAL_CALL Select(  ) throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ::ooo::vba::msforms::XShape > SAL_CALL Group() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL IncrementRotation( double Increment ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL IncrementLeft( double Increment ) throw (css::uno::RuntimeException) ;
-    virtual void SAL_CALL IncrementTop( double Increment ) throw (css::uno::RuntimeException);
-    //XEnumerationAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException); 
-    // ScVbaCollectionBaseImpl
-    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
-};
-
-#endif//SC_VBA_SHAPERANGE_HXX
diff --git a/sc/source/ui/vba/vbashapes.cxx b/sc/source/ui/vba/vbashapes.cxx
index efc6116..e69de29 100644
--- a/sc/source/ui/vba/vbashapes.cxx
+++ b/sc/source/ui/vba/vbashapes.cxx
@@ -1,391 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/container/XNamed.hpp>
-#include <com/sun/star/view/XSelectionSupplier.hpp>
-#include <com/sun/star/text/WrapTextMode.hpp>
-#include <ooo/vba/msforms/XShapeRange.hpp>
-#include <ooo/vba/office/MsoAutoShapeType.hpp>
-
-#include "vbashapes.hxx"
-#include "vbashape.hxx"
-#include "vbashaperange.hxx"
-
-using namespace ::ooo::vba;
-using namespace ::com::sun::star;
-
-class VbShapeEnumHelper : public EnumerationHelper_BASE
-{
-        uno::Reference<msforms::XShapes > m_xParent;
-        uno::Reference<container::XIndexAccess > m_xIndexAccess;
-        sal_Int32 nIndex;
-public:
-    VbShapeEnumHelper( const uno::Reference< msforms::XShapes >& xParent,  const uno::Reference< container::XIndexAccess >& xIndexAccess ) : m_xParent( xParent ), m_xIndexAccess( xIndexAccess ), nIndex( 0 ) {}
-        virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
-        {
-                return ( nIndex < m_xIndexAccess->getCount() );
-        }
-        virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
-        {
-                ScVbaShapes* pShapes = dynamic_cast< ScVbaShapes* >(m_xParent.get());
-                if ( pShapes && hasMoreElements() )
-                    return pShapes->createCollectionObject(  m_xIndexAccess->getByIndex( nIndex++ ) );
-                throw container::NoSuchElementException();
-        }
-
-};
-
-void ScVbaShapes::initBaseCollection()
-{
-    if ( m_xNameAccess.is() ) // already has NameAccess
-        return;
-    // no NameAccess then use ShapeCollectionHelper
-    XNamedObjectCollectionHelper< drawing::XShape >::XNamedVec mShapes;
-    sal_Int32 nLen = m_xIndexAccess->getCount();
-    mShapes.reserve( nLen );
-    for ( sal_Int32 index=0; index<nLen; ++index )
-        mShapes.push_back( uno::Reference< drawing::XShape >( m_xIndexAccess->getByIndex( index ) , uno::UNO_QUERY ) );
-    uno::Reference< container::XIndexAccess > xShapes( new XNamedObjectCollectionHelper< drawing::XShape >( mShapes ) );
-    m_xIndexAccess.set( xShapes, uno::UNO_QUERY );
-    m_xNameAccess.set( xShapes, uno::UNO_QUERY );
-}
-
-ScVbaShapes::ScVbaShapes( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess > xShapes ): ScVbaShapes_BASE( xParent, xContext, xShapes ), m_nNewShapeCount(0)
-{
-    m_xShapes.set( xShapes, uno::UNO_QUERY_THROW );
-    m_xDrawPage.set( xShapes, uno::UNO_QUERY_THROW ); 
-    initBaseCollection();
-}
-
-uno::Reference< container::XEnumeration >
-ScVbaShapes::createEnumeration() throw (uno::RuntimeException)
-{
-    return new VbShapeEnumHelper( this,  m_xIndexAccess );
-}
-
-uno::Any
-ScVbaShapes::createCollectionObject( const css::uno::Any& aSource )
-{
-    if( aSource.hasValue() )
-    {
-        uno::Reference< drawing::XShape > xShape( aSource, uno::UNO_QUERY_THROW );
-        return uno::makeAny( uno::Reference< msforms::XShape >( new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, ScVbaShape::getType( xShape ) ) ) );
-    }
-    return uno::Any();
-}
-
-uno::Type
-ScVbaShapes::getElementType() throw (uno::RuntimeException)
-{
-    return ooo::vba::msforms::XShape::static_type(0);
-}
-rtl::OUString& 
-ScVbaShapes::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaShapes") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaShapes::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.Shapes" ) );
-    }
-    return aServiceNames;
-}
-
-css::uno::Reference< css::container::XIndexAccess > 
-ScVbaShapes::getShapesByArrayIndices( const uno::Any& Index  ) throw (uno::RuntimeException)
-{
-    if ( Index.getValueTypeClass() != uno::TypeClass_SEQUENCE )
-        throw uno::RuntimeException();
-    
-    uno::Reference< script::XTypeConverter > xConverter = getTypeConverter(mxContext);
-    uno::Any aConverted;
-    aConverted = xConverter->convertTo( Index, getCppuType((uno::Sequence< uno::Any >*)0) );
-
-    uno::Sequence< uno::Any > sIndices;
-    aConverted >>= sIndices;
-    XNamedObjectCollectionHelper< drawing::XShape >::XNamedVec mShapes;
-    sal_Int32 nElems = sIndices.getLength();
-    for( sal_Int32 index = 0; index < nElems; ++index )
-    {
-        uno::Reference< drawing::XShape > xShape;
-        if ( sIndices[ index ].getValueTypeClass() == uno::TypeClass_STRING )
-        {
-            rtl::OUString sName;
-            sIndices[ index ] >>= sName;
-            xShape.set( m_xNameAccess->getByName( sName ), uno::UNO_QUERY );
-        }
-        else
-        {
-            sal_Int32 nIndex = 0;
-            sIndices[ index ] >>= nIndex;
-            // adjust for 1 based mso indexing
-            xShape.set( m_xIndexAccess->getByIndex( nIndex - 1 ), uno::UNO_QUERY );		
-            
-        }
-        // populate map with drawing::XShapes
-        if ( xShape.is() )
-            mShapes.push_back( xShape );
-    }  
-    uno::Reference< container::XIndexAccess > xIndexAccess( new XNamedObjectCollectionHelper< drawing::XShape >( mShapes ) );
-    return xIndexAccess;
-}
-
-uno::Any SAL_CALL 
-ScVbaShapes::Item( const uno::Any& Index, const uno::Any& Index2 ) throw (uno::RuntimeException)
-{
-    // I don't think we need to support Array of indices for shapes	
-/*
-    if ( Index.getValueTypeClass() == uno::TypeClass_SEQUENCE )
-    {
-        uno::Reference< container::XIndexAccess > xIndexAccess( getShapesByArrayIndices( Index ) );
-        // return new collection instance
-        uno::Reference< XCollection > xShapesCollection(  new ScVbaShapes( this->getParent(), mxContext, xIndexAccess ) );
-        return uno::makeAny( xShapesCollection );
-    }
-*/
-    return 	ScVbaShapes_BASE::Item( Index, Index2 );
-}
-
-uno::Reference< msforms::XShapeRange > SAL_CALL 
-ScVbaShapes::Range( const uno::Any& shapes ) throw (css::uno::RuntimeException)
-{
-    // shapes, can be an index or an array of indices
-    uno::Reference< container::XIndexAccess > xShapes;
-    if ( shapes.getValueTypeClass() == uno::TypeClass_SEQUENCE )
-        xShapes = getShapesByArrayIndices( shapes );
-    else
-    {
-        // wrap single index into a sequence
-        uno::Sequence< uno::Any > sIndices(1);
-        sIndices[ 0 ] = shapes;
-        uno::Any aIndex;
-        aIndex <<= sIndices;
-        xShapes = getShapesByArrayIndices( aIndex );
-    }
-    return new ScVbaShapeRange(  getParent(), mxContext, xShapes, m_xDrawPage );
-}
-
-void SAL_CALL 
-ScVbaShapes::SelectAll() throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    uno::Reference< view::XSelectionSupplier > xSelectSupp( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    try
-    {
-        xSelectSupp->select( uno::makeAny( m_xShapes ) );
-    }
-    // viewuno.cxx ScTabViewObj::select will throw IllegalArgumentException
-    // if one of the shapes is no 'markable' e.g. a button 
-    // the method still works
-    catch( lang::IllegalArgumentException& )
-    {
-    }
-}
-
-uno::Reference< drawing::XShape > 
-ScVbaShapes::createShape( rtl::OUString service ) throw (css::uno::RuntimeException)
-{
-    uno::Reference< lang::XMultiServiceFactory > xMSF( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    uno::Reference< drawing::XShape > xShape( xMSF->createInstance( service ), uno::UNO_QUERY_THROW );
-    return xShape;
-}
-
-uno::Any 
-ScVbaShapes::AddRectangle( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, uno::Any aRange ) throw (css::uno::RuntimeException)
-{
-    rtl::OUString sCreateShapeName( rtl::OUString::createFromAscii( "com.sun.star.drawing.RectangleShape" ) );
-    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( startX );
-    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( startY );
-    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( nLineWidth );
-    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( nLineHeight );
-
-    uno::Reference< drawing::XShape > xShape( createShape( sCreateShapeName ), uno::UNO_QUERY_THROW );
-    m_xShapes->add( xShape );
-
-    rtl::OUString sName = createName( rtl::OUString::createFromAscii( "Rectangle" ) );
-    setDefaultShapeProperties( xShape );
-    setShape_NameProperty( xShape, sName );
-
-    awt::Point aMovePositionIfRange(0, 0);
-    awt::Point position;
-    position.X = nXPos - aMovePositionIfRange.X;
-    position.Y = nYPos - aMovePositionIfRange.Y;
-    xShape->setPosition( position );
-
-    awt::Size size;
-    size.Height = nHeight;
-    size.Width = nWidth;
-    xShape->setSize( size );
-
-    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, ScVbaShape::getType( xShape ) );
-    pScVbaShape->setRange( aRange ); 
-    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
-}
-
-uno::Any 
-ScVbaShapes::AddEllipse( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, uno::Any aRange ) throw (css::uno::RuntimeException)
-{
-    rtl::OUString sCreateShapeName( rtl::OUString::createFromAscii( "com.sun.star.drawing.EllipseShape" ) );
-    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( startX );
-    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( startY );
-    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( nLineWidth );
-    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( nLineHeight );
-
-    uno::Reference< drawing::XShape > xShape( createShape( sCreateShapeName ), uno::UNO_QUERY_THROW );
-    m_xShapes->add( xShape );
-
-    awt::Point aMovePositionIfRange( 0, 0 );
-    //TODO helperapi using a writer document
-    /*
-    XDocument xDocument = (XDocument)getParent();
-    if (AnyConverter.isVoid(_aRange))
-    {
-        _aRange = xDocument.Range(new Integer(0), new Integer(1));
-        // Top&Left in Word is Top&Left of the paper and not the writeable area.
-        aMovePositionIfRange = calculateTopLeftMargin((HelperInterfaceAdaptor)xDocument);
-    }
-
-    setShape_AnchorTypeAndRangeProperty(xShape, _aRange);
-    */
-    rtl::OUString name = createName( rtl::OUString::createFromAscii( "Oval" ));
-    setDefaultShapeProperties(xShape);
-    setShape_NameProperty(xShape, name);
-
-    awt::Point position;
-    position.X = nXPos - aMovePositionIfRange.X;
-    position.Y = nYPos - aMovePositionIfRange.Y;
-    xShape->setPosition(position);
-
-    awt::Size size;
-    size.Height = nHeight;
-    size.Width = nWidth;
-    xShape->setSize(size);
-
-    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, ScVbaShape::getType( xShape ) );
-    pScVbaShape->setRange( aRange ); 
-    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
-}
-
-//helpeapi calc
-uno::Any SAL_CALL
-ScVbaShapes::AddLine( sal_Int32 StartX, sal_Int32 StartY, sal_Int32 endX, sal_Int32 endY ) throw (uno::RuntimeException)
-{
-    sal_Int32 nLineWidth = endX - StartX;
-    sal_Int32 nLineHeight = endY - StartY;
-
-    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( nLineHeight );
-    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( nLineWidth );
-    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( StartX );
-    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( StartY );
-    
-    uno::Reference< drawing::XShape > xShape( createShape( rtl::OUString::createFromAscii("com.sun.star.drawing.LineShape") ), uno::UNO_QUERY_THROW );
-    m_xShapes->add( xShape );
-
-    awt::Point aMovePositionIfRange( 0, 0 );
-    
-    rtl::OUString name = createName( rtl::OUString::createFromAscii( "Line" ) );
-    setDefaultShapeProperties(xShape);
-    setShape_NameProperty(xShape, name);
-
-    awt::Point position;
-    position.X = nXPos - aMovePositionIfRange.X;
-    position.Y = nYPos - aMovePositionIfRange.Y;
-    xShape->setPosition(position);
-
-    awt::Size size;
-    size.Height = nHeight;
-    size.Width = nWidth;
-    xShape->setSize(size);
-
-    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, ScVbaShape::getType( xShape ) );
-    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
-}
-
-uno::Any SAL_CALL
-ScVbaShapes::AddShape( sal_Int32 _nType, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (uno::RuntimeException)
-{
-    uno::Any _aAnchor;
-    if (_nType == office::MsoAutoShapeType::msoShapeRectangle)
-    {
-        return AddRectangle(_nLeft, _nTop, _nWidth, _nHeight, _aAnchor);
-    }
-    else if (_nType == office::MsoAutoShapeType::msoShapeOval)
-    {
-        return AddEllipse(_nLeft, _nTop, _nWidth, _nHeight, _aAnchor);
-    }
-    return uno::Any();
-}
-
-void
-ScVbaShapes::setDefaultShapeProperties( uno::Reference< drawing::XShape > xShape ) throw (uno::RuntimeException)
-{
-    uno::Reference< beans::XPropertySet > xPropertySet( xShape, uno::UNO_QUERY_THROW );
-    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillStyle" ), uno::makeAny( rtl::OUString::createFromAscii( "SOLID" ) ) );
-    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillColor"), uno::makeAny( sal_Int32(0xFFFFFF) )  );
-    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextWordWrap"), uno::makeAny( text::WrapTextMode_THROUGHT )  );
-    //not find in OOo2.3
-    //xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "Opaque"), uno::makeAny( sal_True )  );
-}
-
-void
-ScVbaShapes::setShape_NameProperty( uno::Reference< css::drawing::XShape > xShape, rtl::OUString sName )
-{
-    uno::Reference< beans::XPropertySet > xPropertySet( xShape, uno::UNO_QUERY_THROW );
-    try
-    {
-        xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "Name" ), uno::makeAny( sName ) );
-    }
-    catch( script::BasicErrorException e )
-    {
-    }
-}
-
-rtl::OUString
-ScVbaShapes::createName( rtl::OUString sName )
-{
-    sal_Int32 nActNumber = 1 + m_nNewShapeCount;
-    m_nNewShapeCount++; 
-    sName += rtl::OUString::valueOf( nActNumber );
-    return sName;
-}
-
-#if 0
-//TODO helperapi using a writer document
-awt::Point
-calculateTopLeftMargin( uno::Reference< XHelperInterface > xDocument )
-{
-    awt::Point aPoint( 0, 0 );
-    uno::Reference< frame::XModel > xModel( xDocument, uno::UNO_QUERY_THROW );
-    return awt::Point();
-}
-#endif
diff --git a/sc/source/ui/vba/vbashapes.hxx b/sc/source/ui/vba/vbashapes.hxx
index 5c6f68f..e69de29 100644
--- a/sc/source/ui/vba/vbashapes.hxx
+++ b/sc/source/ui/vba/vbashapes.hxx
@@ -1,77 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_SHAPES_HXX
-#define SC_VBA_SHAPES_HXX
-
-#include <com/sun/star/drawing/XShapes.hpp>
-#include <com/sun/star/drawing/XDrawPage.hpp>
-#include <com/sun/star/container/XIndexAccess.hpp>
-#include <ooo/vba/msforms/XShapes.hpp>
-
-#include "vbahelperinterface.hxx"
-
-#include "vbacollectionimpl.hxx"
-
-typedef CollTestImplHelper< ov::msforms::XShapes > ScVbaShapes_BASE;
-
-class ScVbaShapes : public ScVbaShapes_BASE
-{
-private: 
-    css::uno::Reference< css::drawing::XShapes > m_xShapes;
-    css::uno::Reference< css::drawing::XDrawPage > m_xDrawPage;
-    sal_Int32 m_nNewShapeCount;
-    void initBaseCollection();
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    virtual css::uno::Reference< css::container::XIndexAccess > getShapesByArrayIndices( const css::uno::Any& Index ) throw (css::uno::RuntimeException);
-    css::uno::Reference< css::drawing::XShape > createShape( rtl::OUString service ) throw (css::uno::RuntimeException);
-    css::uno::Any AddRectangle( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, css::uno::Any aRange ) throw (css::uno::RuntimeException);
-    css::uno::Any AddEllipse( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, css::uno::Any aRange ) throw (css::uno::RuntimeException);
-    rtl::OUString createName( rtl::OUString sName );
-    //TODO helperapi using a writer document
-    //css::awt::Point calculateTopLeftMargin( css::uno::Reference< ov::XHelperInterface > xDocument );
-    
-public:
-    ScVbaShapes( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess > xShapes );
-    static void setDefaultShapeProperties( css::uno::Reference< css::drawing::XShape > xShape ) throw (css::uno::RuntimeException);
-    static void setShape_NameProperty( css::uno::Reference< css::drawing::XShape > xShape, rtl::OUString sName );
-    //XEnumerationAccess
-    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
-
-    virtual void SAL_CALL SelectAll() throw (css::uno::RuntimeException);
-    //helper::calc
-    virtual css::uno::Any SAL_CALL AddLine( sal_Int32 StartX, sal_Int32 StartY, sal_Int32 endX, sal_Int32 endY ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL AddShape( sal_Int32 _nType, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (css::uno::RuntimeException);
-    virtual css::uno::Reference< ov::msforms::XShapeRange > SAL_CALL Range( const css::uno::Any& shapes ) throw (css::uno::RuntimeException);
-    // ScVbaCollectionBaseImpl
-    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
-    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index1, const css::uno::Any& Index2 ) throw (css::uno::RuntimeException);
-};
-
-#endif//SC_VBA_SHAPES_HXX
diff --git a/sc/source/ui/vba/vbaspinbutton.cxx b/sc/source/ui/vba/vbaspinbutton.cxx
index 9a6adb2..e69de29 100644
--- a/sc/source/ui/vba/vbaspinbutton.cxx
+++ b/sc/source/ui/vba/vbaspinbutton.cxx
@@ -1,101 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbaspinbutton.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString ORIENTATION( RTL_CONSTASCII_USTRINGPARAM("Orientation") );
-const static rtl::OUString SPINVALUE( RTL_CONSTASCII_USTRINGPARAM("SpinValue") );
-const static rtl::OUString SPINMAX( RTL_CONSTASCII_USTRINGPARAM("SpinValueMax") );
-const static rtl::OUString SPINMIN( RTL_CONSTASCII_USTRINGPARAM("SpinValueMin") );
-
-ScVbaSpinButton::ScVbaSpinButton(  const css::uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : SpinButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-}
-
-// Attributes
-uno::Any SAL_CALL 
-ScVbaSpinButton::getValue() throw (css::uno::RuntimeException)
-{
-    return  m_xProps->getPropertyValue( SPINVALUE );
-}
-
-void SAL_CALL 
-ScVbaSpinButton::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SPINVALUE, _value );
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaSpinButton::getMax() throw (uno::RuntimeException)
-{
-    sal_Int32 nMax = 0;
-    m_xProps->getPropertyValue( SPINMAX ) >>= nMax;
-    return nMax;
-}
-
-void SAL_CALL 
-ScVbaSpinButton::setMax( sal_Int32 nVal ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SPINMAX, uno::makeAny( nVal ) ); 
-}
-
-::sal_Int32 SAL_CALL 
-ScVbaSpinButton::getMin() throw (uno::RuntimeException)
-{
-    sal_Int32 nVal = 0;
-    m_xProps->getPropertyValue( SPINMIN ) >>= nVal;
-    return nVal;
-}
-
-void SAL_CALL 
-ScVbaSpinButton::setMin( sal_Int32 nVal ) throw (uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( SPINMIN, uno::makeAny( nVal ) ); 
-}
-
-rtl::OUString& 
-ScVbaSpinButton::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaSpinButton") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaSpinButton::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Frame" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbaspinbutton.hxx b/sc/source/ui/vba/vbaspinbutton.hxx
index 4ff3597..e69de29 100644
--- a/sc/source/ui/vba/vbaspinbutton.hxx
+++ b/sc/source/ui/vba/vbaspinbutton.hxx
@@ -1,53 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_SPINBUTTON_HXX
-#define SC_VBA_SPINBUTTON_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XSpinButton.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XSpinButton > SpinButtonImpl_BASE;
-
-class ScVbaSpinButton : public SpinButtonImpl_BASE
-{
-public:
-    ScVbaSpinButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getMax() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMax( ::sal_Int32 _max ) throw (css::uno::RuntimeException);
-    virtual ::sal_Int32 SAL_CALL getMin() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMin( ::sal_Int32 _min ) throw (css::uno::RuntimeException);
-
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_SPINBUTTON_HXX
diff --git a/sc/source/ui/vba/vbastyle.cxx b/sc/source/ui/vba/vbastyle.cxx
index b0bc9e2..e9e6c35 100644
--- a/sc/source/ui/vba/vbastyle.cxx
+++ b/sc/source/ui/vba/vbastyle.cxx
@@ -68,7 +68,7 @@ void ScVbaStyle::initialise() throw ( uno::RuntimeException )
 
 }
 
-ScVbaStyle::ScVbaStyle( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const rtl::OUString& sStyleName, const uno::Reference< frame::XModel >& _xModel ) throw ( script::BasicErrorException, uno::RuntimeException ) :  ScVbaStyle_BASE( xParent, xContext, lcl_getStyleProps( sStyleName, _xModel ), _xModel, false )
+ScVbaStyle::ScVbaStyle( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const rtl::OUString& sStyleName, const uno::Reference< frame::XModel >& _xModel ) throw ( script::BasicErrorException, uno::RuntimeException ) :  ScVbaStyle_BASE( xParent, xContext, lcl_getStyleProps( sStyleName, _xModel ), _xModel, false ), mxModel( _xModel )
 {
     try
     {
@@ -80,7 +80,7 @@ ScVbaStyle::ScVbaStyle( const uno::Reference< ov::XHelperInterface >& xParent, c
     }
 }
 
-ScVbaStyle::ScVbaStyle( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< beans::XPropertySet >& _xPropertySet, const uno::Reference< frame::XModel >& _xModel ) throw ( script::BasicErrorException, uno::RuntimeException ) : ScVbaStyle_BASE( xParent, xContext, _xPropertySet, _xModel, false )
+ScVbaStyle::ScVbaStyle( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< beans::XPropertySet >& _xPropertySet, const uno::Reference< frame::XModel >& _xModel ) throw ( script::BasicErrorException, uno::RuntimeException ) : ScVbaStyle_BASE( xParent, xContext, _xPropertySet, _xModel, false ),  mxModel( _xModel )
 {
     try
     {
diff --git a/sc/source/ui/vba/vbastyles.cxx b/sc/source/ui/vba/vbastyles.cxx
index 32889f0..6b2d799 100644
--- a/sc/source/ui/vba/vbastyles.cxx
+++ b/sc/source/ui/vba/vbastyles.cxx
@@ -26,6 +26,7 @@
  ************************************************************************/
 #include "vbastyles.hxx"
 #include "vbastyle.hxx"
+#include <ooo/vba/excel/XRange.hpp>
 
 using namespace ::ooo::vba;
 using namespace ::com::sun::star;
diff --git a/sc/source/ui/vba/vbastyles.hxx b/sc/source/ui/vba/vbastyles.hxx
index fa7a3fe..c5f0d36 100644
--- a/sc/source/ui/vba/vbastyles.hxx
+++ b/sc/source/ui/vba/vbastyles.hxx
@@ -28,7 +28,7 @@
 #define SC_VBA_STYLES_HXX
 #include <ooo/vba/excel/XStyles.hpp>
 #include <com/sun/star/container/XNameContainer.hpp>
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 
 typedef CollTestImplHelper< ov::excel::XStyles > ScVbaStyles_BASE;
 class ScVbaStyles: public ScVbaStyles_BASE
diff --git a/sc/source/ui/vba/vbatextbox.cxx b/sc/source/ui/vba/vbatextbox.cxx
index 25a56b9..e69de29 100644
--- a/sc/source/ui/vba/vbatextbox.cxx
+++ b/sc/source/ui/vba/vbatextbox.cxx
@@ -1,134 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include <com/sun/star/text/XTextRange.hpp>
-
-#include "vbatextbox.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-
-ScVbaTextBox::ScVbaTextBox( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, bool bDialog ) : TextBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper ), mbDialog( bDialog )
-{
-}
-
-// Attributes
-uno::Any SAL_CALL 
-ScVbaTextBox::getValue() throw (css::uno::RuntimeException)
-{
-    return uno::makeAny( getText() );
-}
-
-void SAL_CALL 
-ScVbaTextBox::setValue( const uno::Any& _value ) throw (css::uno::RuntimeException)
-{
-    rtl::OUString sVal = getAnyAsString( _value );
-    setText( sVal );
-}
-
-//getString() will cause some imfo lose.
-rtl::OUString SAL_CALL 
-ScVbaTextBox::getText() throw (css::uno::RuntimeException)
-{
-    uno::Any aValue;
-    aValue = m_xProps->getPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Text" ) ) );
-    rtl::OUString sString;
-    aValue >>= sString;
-    return sString;
-}
-
-void SAL_CALL 
-ScVbaTextBox::setText( const rtl::OUString& _text ) throw (css::uno::RuntimeException)
-{
-    if ( !mbDialog )
-    {
-    uno::Reference< text::XTextRange > xTextRange( m_xProps, uno::UNO_QUERY_THROW );
-    xTextRange->setString( _text );
-}
-    else
-        m_xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Text") ), uno::makeAny( _text ) ); 
-}
-
-sal_Int32 SAL_CALL 
-ScVbaTextBox::getMaxLength() throw (css::uno::RuntimeException)
-{
-    uno::Any aValue;
-    aValue = m_xProps->getPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MaxTextLen" ) ) );
-    sal_Int32 nMaxLength = 0;
-    aValue >>= nMaxLength;
-    return nMaxLength;
-}
-
-void SAL_CALL 
-ScVbaTextBox::setMaxLength( sal_Int32 _maxlength ) throw (css::uno::RuntimeException)
-{
-    uno::Any aValue( _maxlength );
-    m_xProps->setPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MaxTextLen" ) ), aValue);
-}
-
-sal_Bool SAL_CALL 
-ScVbaTextBox::getMultiline() throw (css::uno::RuntimeException)
-{
-    uno::Any aValue;
-    aValue = m_xProps->getPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiLine" ) ) );
-    sal_Bool bRet = false;
-    aValue >>= bRet;
-    return bRet;
-}
-
-void SAL_CALL 
-ScVbaTextBox::setMultiline( sal_Bool _multiline ) throw (css::uno::RuntimeException)
-{
-    uno::Any aValue( _multiline );
-    m_xProps->setPropertyValue
-            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiLine" ) ), aValue);
-}
-
-rtl::OUString& 
-ScVbaTextBox::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaTextBox") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaTextBox::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.TextBox" ) );
-    }
-    return aServiceNames;
-}
diff --git a/sc/source/ui/vba/vbatextbox.hxx b/sc/source/ui/vba/vbatextbox.hxx
index b43f22a..e69de29 100644
--- a/sc/source/ui/vba/vbatextbox.hxx
+++ b/sc/source/ui/vba/vbatextbox.hxx
@@ -1,54 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_TEXTBOX_HXX
-#define SC_VBA_TEXTBOX_HXX
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XTextBox.hpp>
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XTextBox > TextBoxImpl_BASE;
-
-class ScVbaTextBox : public TextBoxImpl_BASE
-{
-    bool mbDialog;
-public:
-    ScVbaTextBox( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper, bool bDialog = false );
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-    virtual rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setText( const rtl::OUString& _text ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getMaxLength() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMaxLength( sal_Int32 _maxlength ) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getMultiline() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMultiline( sal_Bool _multiline ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif //SC_VBA_TEXTBOX_HXX
diff --git a/sc/source/ui/vba/vbatextboxshape.cxx b/sc/source/ui/vba/vbatextboxshape.cxx
index 18ad6e6..fe240a0 100644
--- a/sc/source/ui/vba/vbatextboxshape.cxx
+++ b/sc/source/ui/vba/vbatextboxshape.cxx
@@ -33,7 +33,7 @@
 using namespace com::sun::star;
 using namespace ooo::vba;
 
-ScVbaTextBoxShape::ScVbaTextBoxShape( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape >& xShape, const uno::Reference< drawing::XShapes >& xShapes, const uno::Reference< frame::XModel >& xModel ) : TextBoxShapeImpl_BASE( uno::Reference< XHelperInterface >(), xContext, xShape, xShapes, ScVbaShape::getType( xShape )  )
+ScVbaTextBoxShape::ScVbaTextBoxShape( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape >& xShape, const uno::Reference< drawing::XShapes >& xShapes, const uno::Reference< frame::XModel >& xModel ) : TextBoxShapeImpl_BASE( uno::Reference< XHelperInterface >(), xContext, xShape, xShapes, xModel, ScVbaShape::getType( xShape )  )
 {
     m_xTextRange.set( xShape , uno::UNO_QUERY_THROW );
     m_xModel.set( xModel );
@@ -54,7 +54,7 @@ ScVbaTextBoxShape::setText( const rtl::OUString& _text ) throw (css::uno::Runtim
 uno::Reference< excel::XCharacters > SAL_CALL 
 ScVbaTextBoxShape::characters( const uno::Any& Start, const uno::Any& Length ) throw (uno::RuntimeException)
 {
-    ScDocShell* pDocShell = getDocShell( m_xModel );
+    ScDocShell* pDocShell = excel::getDocShell( m_xModel );
     ScDocument* pDoc = pDocShell ? pDocShell->GetDocument() : NULL;
 
     if ( !pDoc )
diff --git a/sc/source/ui/vba/vbatextboxshape.hxx b/sc/source/ui/vba/vbatextboxshape.hxx
index 62846d6..e43f8f2 100644
--- a/sc/source/ui/vba/vbatextboxshape.hxx
+++ b/sc/source/ui/vba/vbatextboxshape.hxx
@@ -29,8 +29,8 @@
 #include <cppuhelper/implbase1.hxx>
 #include <com/sun/star/text/XTextRange.hpp>
 #include <ooo/vba/msforms/XTextBoxShape.hpp>
-#include "vbashape.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbashape.hxx>
+#include "excelvbahelper.hxx"
 #include "vbacharacters.hxx"
 
 typedef cppu::ImplInheritanceHelper1< ScVbaShape, ov::msforms::XTextBoxShape > TextBoxShapeImpl_BASE;
diff --git a/sc/source/ui/vba/vbatextframe.cxx b/sc/source/ui/vba/vbatextframe.cxx
index a13fff6..b067775 100644
--- a/sc/source/ui/vba/vbatextframe.cxx
+++ b/sc/source/ui/vba/vbatextframe.cxx
@@ -24,6 +24,7 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
+#include <vbahelper/helperdecl.hxx>
 #include <com/sun/star/drawing/TextFitToSizeType.hpp>
 #include <com/sun/star/text/XText.hpp>
 #include "vbatextframe.hxx"
@@ -32,121 +33,19 @@
 using namespace ::ooo::vba;
 using namespace ::com::sun::star;
 
-ScVbaTextFrame::ScVbaTextFrame( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, uno::Reference< drawing::XShape > xShape ) : ScVbaTextFrame_BASE( xParent, xContext ), m_xShape( xShape )
+ScVbaTextFrame::ScVbaTextFrame( uno::Sequence< uno::Any> const & args, uno::Reference< uno::XComponentContext> const & xContext ) throw ( lang::IllegalArgumentException ) :  ScVbaTextFrame_BASE( getXSomethingFromArgs< XHelperInterface >( args, 0 ), xContext, getXSomethingFromArgs< drawing::XShape >( args, 1, false ) )
 {
-    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
 }
 
-void
-ScVbaTextFrame::setAsMSObehavior()
-{
-    //set property TextWordWrap default as False.
-    // TextFitToSize control the text content. it seems we should set the default as False.
-    // com.sun.star.drawing.TextFitToSizeType.NONE
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextWordWrap" ), uno::makeAny( sal_False ) );
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextFitToSize" ), uno::makeAny( drawing::TextFitToSizeType_NONE ) );
-}
-
-sal_Int32 ScVbaTextFrame::getMargin( rtl::OUString sMarginType )
-{
-    sal_Int32 nMargin = 0;
-    uno::Any aMargin = m_xPropertySet->getPropertyValue( sMarginType );
-    aMargin >>= nMargin;
-    return nMargin;
-}
-
-void ScVbaTextFrame::setMargin( rtl::OUString sMarginType, float fMargin )
-{
-    sal_Int32 nMargin = Millimeter::getInHundredthsOfOneMillimeter( fMargin );
-    m_xPropertySet->setPropertyValue( sMarginType, uno::makeAny( nMargin ) );
-}
-
-// Attributes
-sal_Bool SAL_CALL 
-ScVbaTextFrame::getAutoSize() throw (uno::RuntimeException)
-{
-    // I don't know why, but in OOo, TextAutoGrowHeight is the property control autosize. not TextFitToSize.
-    // TextFitToSize control the text content. 
-    // and in mso, there isnot option TextWordWrap which means auto wrap. the default is False.
-    sal_Bool bAutosize = sal_False;
-    uno::Any aTextAutoGrowHeight = m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "TextAutoGrowHeight" ) );
-    aTextAutoGrowHeight >>= bAutosize;
-    return bAutosize;
-}
-
-void SAL_CALL 
-ScVbaTextFrame::setAutoSize( sal_Bool _autosize ) throw (uno::RuntimeException)
-{
-    setAsMSObehavior();
-    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextAutoGrowHeight" ), uno::makeAny( _autosize ) );
-}
-
-float SAL_CALL 
-ScVbaTextFrame::getMarginBottom() throw (uno::RuntimeException)
-{
-    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextLowerDistance" ) );
-    float fMargin = (float)Millimeter::getInPoints( nMargin );
-    return fMargin;
-}
-
-void SAL_CALL 
-ScVbaTextFrame::setMarginBottom( float _marginbottom ) throw (uno::RuntimeException)
-{
-    setMargin( rtl::OUString::createFromAscii( "TextLowerDistance" ), _marginbottom );
-}
-
-float SAL_CALL 
-ScVbaTextFrame::getMarginTop() throw (uno::RuntimeException)
-{
-    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextUpperDistance" ) );
-    float fMargin = (float)Millimeter::getInPoints( nMargin );
-    return fMargin;
-}
-
-void SAL_CALL 
-ScVbaTextFrame::setMarginTop( float _margintop ) throw (uno::RuntimeException)
-{
-    setMargin( rtl::OUString::createFromAscii( "TextUpperDistance" ), _margintop );
-}
-
-float SAL_CALL 
-ScVbaTextFrame::getMarginLeft() throw (uno::RuntimeException)
-{
-    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextLeftDistance" ) );
-    float fMargin = (float)Millimeter::getInPoints( nMargin );
-    return fMargin;
-}
-
-void SAL_CALL 
-ScVbaTextFrame::setMarginLeft( float _marginleft ) throw (uno::RuntimeException)
-{
-    setMargin( rtl::OUString::createFromAscii( "TextLeftDistance" ), _marginleft );
-}
-
-float SAL_CALL 
-ScVbaTextFrame::getMarginRight() throw (uno::RuntimeException)
-{
-    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextRightDistance" ) );
-    float fMargin = (float)Millimeter::getInPoints( nMargin );
-    return fMargin;
-}
-
-void SAL_CALL 
-ScVbaTextFrame::setMarginRight( float _marginright ) throw (uno::RuntimeException)
-{
-    setMargin( rtl::OUString::createFromAscii( "TextRightDistance" ), _marginright );
-}
-
-
 // Methods
-uno::Reference< ov::excel::XCharacters > SAL_CALL 
+uno::Any SAL_CALL
 ScVbaTextFrame::Characters() throw (uno::RuntimeException)
 {
     uno::Reference< text::XSimpleText > xSimpleText( m_xShape, uno::UNO_QUERY_THROW );
     ScVbaPalette aPalette( SfxObjectShell::Current() );
     uno::Any aStart( sal_Int32( 1 ) );
     uno::Any aLength(sal_Int32( -1 ) );
-    return uno::Reference< ov::excel::XCharacters >( new ScVbaCharacters( this, mxContext, aPalette, xSimpleText, aStart, aLength, sal_True ) );
+    return uno::makeAny( uno::Reference< ov::excel::XCharacters >( new ScVbaCharacters( this, mxContext, aPalette, xSimpleText, aStart, aLength, sal_True ) ) );
 }
 
 rtl::OUString&
@@ -168,3 +67,12 @@ ScVbaTextFrame::getServiceNames()
     return aServiceNames;
 }
 
+namespace textframe
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::vba_service_class_<ScVbaTextFrame, sdecl::with_args<true> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "ScVbaTextFrame",
+    "ooo.vba.excel.TextFrame" );
+}
diff --git a/sc/source/ui/vba/vbatextframe.hxx b/sc/source/ui/vba/vbatextframe.hxx
index e860326..b48cd87 100644
--- a/sc/source/ui/vba/vbatextframe.hxx
+++ b/sc/source/ui/vba/vbatextframe.hxx
@@ -26,45 +26,23 @@
  ************************************************************************/
 #ifndef SC_VBA_TEXTFRAME_HXX
 #define SC_VBA_TEXTFRAME_HXX
-#include <com/sun/star/drawing/XShape.hpp>
-#include <com/sun/star/beans/XPropertySet.hpp>
-#include <ooo/vba/excel/XCharacters.hpp>
 #include <ooo/vba/excel/XTextFrame.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbatextframe.hxx>
 
-#include "vbahelperinterface.hxx"
-#include "vbapalette.hxx"
-
-typedef InheritedHelperInterfaceImpl1< ov::excel::XTextFrame > ScVbaTextFrame_BASE;
+//typedef InheritedHelperInterfaceImpl1< ov::excel::XTextFrame > ScVbaTextFrame_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaTextFrame, ov::excel::XTextFrame > ScVbaTextFrame_BASE;
 
 class ScVbaTextFrame : public ScVbaTextFrame_BASE
 {
-private:
-    css::uno::Reference< ov::excel::XCharacters > m_xCharacters;
-    css::uno::Reference< css::drawing::XShape > m_xShape;
-    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
-protected:
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    virtual void setAsMSObehavior();
-    sal_Int32 getMargin( rtl::OUString sMarginType );
-    void setMargin( rtl::OUString sMarginType, float fMargin );
 public:
-    ScVbaTextFrame( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext , css::uno::Reference< css::drawing::XShape > xShape);
+    ScVbaTextFrame( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext > const& xContext ) throw ( css::lang::IllegalArgumentException );
     virtual ~ScVbaTextFrame() {}
-    // Attributes
-    virtual sal_Bool SAL_CALL getAutoSize() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setAutoSize( sal_Bool _autosize ) throw (css::uno::RuntimeException);
-    virtual float SAL_CALL getMarginBottom() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMarginBottom( float _marginbottom ) throw (css::uno::RuntimeException);
-    virtual float SAL_CALL getMarginTop() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMarginTop( float _margintop ) throw (css::uno::RuntimeException);
-    virtual float SAL_CALL getMarginLeft() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMarginLeft( float _marginleft ) throw (css::uno::RuntimeException);
-    virtual float SAL_CALL getMarginRight() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setMarginRight( float _marginright ) throw (css::uno::RuntimeException);
-
     // Methods
-    virtual css::uno::Reference< ov::excel::XCharacters > SAL_CALL Characters(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Characters(  ) throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
 
 };
 
diff --git a/sc/source/ui/vba/vbatitle.hxx b/sc/source/ui/vba/vbatitle.hxx
index 1a51412..05d1eff 100644
--- a/sc/source/ui/vba/vbatitle.hxx
+++ b/sc/source/ui/vba/vbatitle.hxx
@@ -27,14 +27,15 @@
 #ifndef SC_VBA_TITLE_HXX
 #define SC_VBA_TITLE_HXX
 
-#include "vbahelperinterface.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include "excelvbahelper.hxx"
 #include "vbainterior.hxx"
 #include "vbafont.hxx"
 #include "vbapalette.hxx"
 #include <com/sun/star/drawing/XShape.hpp>
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <ooo/vba/excel/XTitle.hpp>
+#include <ooo/vba/excel/XCharacters.hpp>
 #include <basic/sberrors.hxx>
 #include <memory>
 
diff --git a/sc/source/ui/vba/vbatogglebutton.cxx b/sc/source/ui/vba/vbatogglebutton.cxx
index 09af7f0..e69de29 100644
--- a/sc/source/ui/vba/vbatogglebutton.cxx
+++ b/sc/source/ui/vba/vbatogglebutton.cxx
@@ -1,100 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "vbatogglebutton.hxx"
-#include <vector>
-
-using namespace com::sun::star;
-using namespace ooo::vba;
-
-
-const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
-const static rtl::OUString TOGGLE( RTL_CONSTASCII_USTRINGPARAM("Toggle") );
-const static rtl::OUString STATE( RTL_CONSTASCII_USTRINGPARAM("State") );
-ScVbaToggleButton::ScVbaToggleButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : ToggleButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
-{
-    OSL_TRACE("ScVbaToggleButton(ctor)");
-    m_xProps->setPropertyValue( TOGGLE, uno::makeAny( sal_True ) );
-}
-
-ScVbaToggleButton::~ScVbaToggleButton()
-{
-    OSL_TRACE("~ScVbaToggleButton(dtor)");
-}
-
-// Attributes
-rtl::OUString SAL_CALL 
-ScVbaToggleButton::getCaption() throw (css::uno::RuntimeException)
-{
-    rtl::OUString Label;
-    m_xProps->getPropertyValue( LABEL ) >>= Label;
-    return Label;
-}
-
-void SAL_CALL 
-ScVbaToggleButton::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
-}
-
-uno::Any SAL_CALL 
-ScVbaToggleButton::getValue() throw (uno::RuntimeException)
-{
-    sal_Int16 nState = 0;
-        m_xProps->getPropertyValue( STATE ) >>= nState;
-     return uno::makeAny( nState ? sal_Int16( -1 ) : sal_Int16( 0 ) );
-}
-
-void SAL_CALL 
-ScVbaToggleButton::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
-{
-    sal_Int16 nState = 0;
-    _value >>= nState;
-        OSL_TRACE( "nState - %d", nState );
-    nState = ( nState == -1 ) ?  1 : 0;
-        OSL_TRACE( "nState - %d", nState );
-    m_xProps->setPropertyValue( STATE, uno::makeAny(  nState ) );
-}
-
-rtl::OUString& 
-ScVbaToggleButton::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaToggleButton") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaToggleButton::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ToggleButton" ) );
-    }
-    return aServiceNames;
-}
-
diff --git a/sc/source/ui/vba/vbatogglebutton.hxx b/sc/source/ui/vba/vbatogglebutton.hxx
index 92838a6..e69de29 100644
--- a/sc/source/ui/vba/vbatogglebutton.hxx
+++ b/sc/source/ui/vba/vbatogglebutton.hxx
@@ -1,55 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_TOGGLEBUTTON_HXX
-#define SC_VBA_TOGGLEBUTTON_HXX
-#include <cppuhelper/implbase2.hxx>
-#include <ooo/vba/msforms/XToggleButton.hpp>
-
-#include "vbacontrol.hxx"
-#include "vbahelper.hxx"
-
-typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XToggleButton, css::script::XDefaultProperty  > ToggleButtonImpl_BASE;
-
-class ScVbaToggleButton : public ToggleButtonImpl_BASE
-{
-    rtl::OUString msDftPropName;
-public:
-    ScVbaToggleButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
-    ~ScVbaToggleButton();
-   // Attributes
-    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
-
-    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-    // XDefaultProperty
-    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
-};
-#endif //SC_VBA_TOGGLEBUTTON_HXX
diff --git a/sc/source/ui/vba/vbauserform.cxx b/sc/source/ui/vba/vbauserform.cxx
index e7a889f..e69de29 100644
--- a/sc/source/ui/vba/vbauserform.cxx
+++ b/sc/source/ui/vba/vbauserform.cxx
@@ -1,220 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#include "helperdecl.hxx"
-#include "vbauserform.hxx"
-#include <com/sun/star/awt/XControl.hpp>
-#include <com/sun/star/awt/XControlContainer.hpp>
-#include <com/sun/star/beans/PropertyConcept.hpp>
-#include <basic/sbx.hxx>
-#include <basic/sbstar.hxx>
-#include <basic/sbmeth.hxx>
-#include "unonames.hxx"
-#include "vbacontrols.hxx"
-
-using namespace ::ooo::vba;
-using namespace ::com::sun::star;
-
-// some little notes
-// XDialog implementation has the following interesting bits
-// a Controls property ( which is an array of the container controls )
-//   each item in the controls array is a XControl, where the model is 
-//   basically a property bag
-// additionally the XDialog instance has itself a model
-//     this model has a ControlModels ( array of models ) property
-//     the models in ControlModels can be accessed by name
-// also the XDialog is a XControl ( to access the model above
-
-ScVbaUserForm::ScVbaUserForm( uno::Sequence< uno::Any > const& aArgs, uno::Reference< uno::XComponentContext >const& xContext ) throw ( lang::IllegalArgumentException ) :  ScVbaUserForm_BASE( getXSomethingFromArgs< XHelperInterface >( aArgs, 0 ), xContext, getXSomethingFromArgs< uno::XInterface >( aArgs, 1 ), getXSomethingFromArgs< frame::XModel >( aArgs, 2 ), static_cast< ooo::vba::AbstractGeometryAttributes* >(0) ), m_pDocShell( 0 ), mbDispose( true )
-{
-    m_xDialog.set( m_xControl, uno::UNO_QUERY_THROW );
-    uno::Reference< awt::XControl > xControl( m_xDialog, uno::UNO_QUERY_THROW );
-    m_pDocShell = getDocShell( m_xModel );
-    m_xProps.set( xControl->getModel(), uno::UNO_QUERY_THROW );
-    setGeometryHelper( new UserFormGeometryHelper( xContext, xControl ) );
-}
-
-ScVbaUserForm::~ScVbaUserForm()
-{
-}
-
-void SAL_CALL 
-ScVbaUserForm::Show(  ) throw (uno::RuntimeException)
-{
-    OSL_TRACE("ScVbaUserForm::Show(  )");
-    short aRet = 0;
-    if ( m_xDialog.is() )
-        aRet = m_xDialog->execute();
-    OSL_TRACE("ScVbaUserForm::Show() execute returned %d", aRet);
-    if ( mbDispose )
-    {
-        try
-        {
-            uno::Reference< lang::XComponent > xComp( m_xDialog, uno::UNO_QUERY_THROW );
-            m_xDialog = NULL;
-            xComp->dispose();
-            mbDispose = false; 
-        }
-        catch( uno::Exception& )
-        {
-        }
-    }
-}
-
-rtl::OUString SAL_CALL 
-ScVbaUserForm::getCaption() throw (::com::sun::star::uno::RuntimeException)
-{
-    rtl::OUString sCaption;
-    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ) ) >>= sCaption;
-    return sCaption;
-}
-void
-ScVbaUserForm::setCaption( const ::rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
-{
-    m_xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ), uno::makeAny( _caption ) );
-}
-
-void SAL_CALL 
-ScVbaUserForm::Hide(  ) throw (uno::RuntimeException)
-{
-    mbDispose = false;  // hide not dispose
-    if ( m_xDialog.is() )
-        m_xDialog->endExecute();
-}
-
-void SAL_CALL 
-ScVbaUserForm::RePaint(  ) throw (uno::RuntimeException)
-{
-    // do nothing
-}
-
-void SAL_CALL 
-ScVbaUserForm::UnloadObject(  ) throw (uno::RuntimeException)
-{
-    mbDispose = true;
-    if ( m_xDialog.is() )
-        m_xDialog->endExecute();
-}
-
-rtl::OUString& 
-ScVbaUserForm::getServiceImplName()
-{
-    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaUserForm") );
-    return sImplName;
-}
-
-uno::Sequence< rtl::OUString > 
-ScVbaUserForm::getServiceNames()
-{
-    static uno::Sequence< rtl::OUString > aServiceNames;
-    if ( aServiceNames.getLength() == 0 )
-    {
-        aServiceNames.realloc( 1 );
-        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.UserForm" ) );
-    }
-    return aServiceNames;
-}
-
-uno::Reference< beans::XIntrospectionAccess > SAL_CALL 
-ScVbaUserForm::getIntrospection(  ) throw (uno::RuntimeException)
-{
-    return uno::Reference< beans::XIntrospectionAccess >();
-}
-
-uno::Any SAL_CALL 
-ScVbaUserForm::invoke( const ::rtl::OUString& /*aFunctionName*/, const uno::Sequence< uno::Any >& /*aParams*/, uno::Sequence< ::sal_Int16 >& /*aOutParamIndex*/, uno::Sequence< uno::Any >& /*aOutParam*/ ) throw (lang::IllegalArgumentException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
-{
-    throw uno::RuntimeException(); // unsupported operation
-}
-
-void SAL_CALL 
-ScVbaUserForm::setValue( const ::rtl::OUString& aPropertyName, const uno::Any& aValue ) throw (beans::UnknownPropertyException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
-{
-    uno::Any aObject = getValue( aPropertyName );
-    // The Object *must* support XDefaultProperty here because getValue will
-    // only return properties that are Objects ( e.g. controls )
-    // e.g. Userform1.aControl = something
-    // 'aControl' has to support XDefaultProperty to make sense here
-    uno::Reference< script::XDefaultProperty > xDfltProp( aObject, uno::UNO_QUERY_THROW );
-    rtl::OUString aDfltPropName = xDfltProp->getDefaultPropertyName();
-    uno::Reference< beans::XIntrospectionAccess > xUnoAccess( getIntrospectionAccess( aObject ) );
-    uno::Reference< beans::XPropertySet > xPropSet( xUnoAccess->queryAdapter( ::getCppuType( (const uno::Reference< beans::XPropertySet > *)0 ) ), uno::UNO_QUERY_THROW );
-    xPropSet->setPropertyValue( aDfltPropName, aValue );
-}
-
-uno::Any SAL_CALL 
-ScVbaUserForm::getValue( const ::rtl::OUString& aPropertyName ) throw (beans::UnknownPropertyException, uno::RuntimeException)
-{
-    uno::Reference< awt::XControl > xDialogControl( m_xDialog, uno::UNO_QUERY_THROW );
-    uno::Reference< awt::XControlContainer > xContainer( m_xDialog, uno::UNO_QUERY_THROW );
-    uno::Reference< awt::XControl > xControl = xContainer->getControl( aPropertyName );
-    ScVbaControlFactory aFac( mxContext, xControl, m_xModel );
-        uno::Reference< msforms::XControl > xVBAControl( aFac.createControl( xDialogControl->getModel() ) );
-        ScVbaControl* pControl  = dynamic_cast< ScVbaControl* >( xVBAControl.get() );
-        pControl->setGeometryHelper( new UserFormGeometryHelper( mxContext, xControl ) );
-    return uno::makeAny( xVBAControl );
-}
-
-::sal_Bool SAL_CALL 
-ScVbaUserForm::hasMethod( const ::rtl::OUString& /*aName*/ ) throw (uno::RuntimeException)
-{
-    return sal_False;
-}
-uno::Any SAL_CALL 
-ScVbaUserForm::Controls( const uno::Any& index ) throw (uno::RuntimeException)
-{
-    uno::Reference< awt::XControl > xDialogControl( m_xDialog, uno::UNO_QUERY_THROW );
-    uno::Reference< XCollection > xControls( new ScVbaControls( this, mxContext, xDialogControl ) );
-    if ( index.hasValue() )
-        return uno::makeAny( xControls->Item( index, uno::Any() ) );
-    return uno::makeAny( xControls );
-}
-
-::sal_Bool SAL_CALL 
-ScVbaUserForm::hasProperty( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
-{
-    uno::Reference< awt::XControl > xControl( m_xDialog, uno::UNO_QUERY );
-    OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xControl.is() );
-    if ( xControl.is() )
-    {
-        uno::Reference< container::XNameAccess > xNameAccess( xControl->getModel(), uno::UNO_QUERY_THROW );	
-        sal_Bool bRes =  xNameAccess->hasByName( aName );
-    OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d ---> %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xControl.is(), bRes );
-        return bRes;
-    }
-    return sal_False;
-}
-
-namespace userform
-{
-namespace sdecl = comphelper::service_decl;
-sdecl::vba_service_class_<ScVbaUserForm, sdecl::with_args<true> > serviceImpl;
-extern sdecl::ServiceDecl const serviceDecl(
-    serviceImpl,
-    "ScVbaUserForm",
-    "ooo.vba.excel.UserForm" );
-}
-
diff --git a/sc/source/ui/vba/vbauserform.hxx b/sc/source/ui/vba/vbauserform.hxx
index a75957e..e69de29 100644
--- a/sc/source/ui/vba/vbauserform.hxx
+++ b/sc/source/ui/vba/vbauserform.hxx
@@ -1,70 +0,0 @@
-/*************************************************************************
- *
- * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
- *
- * Copyright 2000, 2010 Oracle and/or its affiliates.
- *
- * OpenOffice.org - a multi-platform office productivity suite
- *
- * This file is part of OpenOffice.org.
- *
- * OpenOffice.org is free software: you can redistribute it and/or modify
- * it under the terms of the GNU Lesser General Public License version 3
- * only, as published by the Free Software Foundation.
- *
- * OpenOffice.org is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU Lesser General Public License version 3 for more details
- * (a copy is included in the LICENSE file that accompanied this code).
- *
- * You should have received a copy of the GNU Lesser General Public License
- * version 3 along with OpenOffice.org.  If not, see
- * <http://www.openoffice.org/license.html>
- * for a copy of the LGPLv3 License.
- *
- ************************************************************************/
-#ifndef SC_VBA_USERFORM_HXX
-#define SC_VBA_USERFORM_HXX
-
-#include <cppuhelper/implbase1.hxx>
-#include <ooo/vba/msforms/XUserForm.hpp>
-#include <com/sun/star/awt/XDialog.hpp>
-#include <com/sun/star/frame/XModel.hpp>
-
-#include "vbahelperinterface.hxx"
-#include "vbacontrol.hxx"
-
-//typedef InheritedHelperInterfaceImpl1< ov::msforms::XUserForm > ScVbaUserForm_BASE;
-typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XUserForm > ScVbaUserForm_BASE;
-
-class ScVbaUserForm : public ScVbaUserForm_BASE
-{
-private:
-    css::uno::Reference< css::awt::XDialog > m_xDialog;
-    ScDocShell* m_pDocShell;
-    bool mbDispose;
-protected:
-public:
-    ScVbaUserForm( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& xContext ) throw ( css::lang::IllegalArgumentException );
-    virtual ~ScVbaUserForm();
-    // XUserForm
-    virtual void SAL_CALL RePaint(  ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Show(  ) throw (css::uno::RuntimeException);
-    // XIntrospection
-    virtual css::uno::Reference< css::beans::XIntrospectionAccess > SAL_CALL getIntrospection(  ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL invoke( const ::rtl::OUString& aFunctionName, const css::uno::Sequence< css::uno::Any >& aParams, css::uno::Sequence< ::sal_Int16 >& aOutParamIndex, css::uno::Sequence< css::uno::Any >& aOutParam ) throw (css::lang::IllegalArgumentException, css::script::CannotConvertException, css::reflection::InvocationTargetException, css::uno::RuntimeException);
-    virtual void SAL_CALL setValue( const ::rtl::OUString& aPropertyName, const css::uno::Any& aValue ) throw (css::beans::UnknownPropertyException, css::script::CannotConvertException, css::reflection::InvocationTargetException, css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL getValue( const ::rtl::OUString& aPropertyName ) throw (css::beans::UnknownPropertyException, css::uno::RuntimeException);
-    virtual ::sal_Bool SAL_CALL hasMethod( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException);
-    virtual ::sal_Bool SAL_CALL hasProperty( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException);
-    virtual ::rtl::OUString SAL_CALL getCaption() throw (::com::sun::star::uno::RuntimeException);
-    virtual void SAL_CALL setCaption( const ::rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException);
-    virtual void SAL_CALL Hide(  ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL UnloadObject(  ) throw (css::uno::RuntimeException);
-    virtual css::uno::Any SAL_CALL Controls( const css::uno::Any& index ) throw (css::uno::RuntimeException);
-    //XHelperInterface
-    virtual rtl::OUString& getServiceImplName();
-    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
-};
-#endif
diff --git a/sc/source/ui/vba/vbavalidation.hxx b/sc/source/ui/vba/vbavalidation.hxx
index 77d5937..b0a230c 100644
--- a/sc/source/ui/vba/vbavalidation.hxx
+++ b/sc/source/ui/vba/vbavalidation.hxx
@@ -30,7 +30,7 @@
 #include <com/sun/star/uno/XComponentContext.hpp>
 #include <ooo/vba/excel/XValidation.hpp>
 #include <com/sun/star/table/XCellRange.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
 
 typedef InheritedHelperInterfaceImpl1<ov::excel::XValidation > ValidationImpl_BASE;
 
diff --git a/sc/source/ui/vba/vbawindow.cxx b/sc/source/ui/vba/vbawindow.cxx
index 48db40e..71959c4 100644
--- a/sc/source/ui/vba/vbawindow.cxx
+++ b/sc/source/ui/vba/vbawindow.cxx
@@ -24,10 +24,11 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 #include "vbawindow.hxx"
 #include "vbaworksheets.hxx"
 #include "vbaworksheet.hxx"
+#include "vbaglobals.hxx"
 #include "vbapane.hxx"
 #include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
 #include <com/sun/star/sheet/XSpreadsheet.hpp>
@@ -54,6 +55,9 @@ using namespace ::com::sun::star;
 using namespace ::ooo::vba;
 using namespace ::ooo::vba::excel::XlWindowState;
 
+// nameExists defined in vbaworksheet.cxx
+bool nameExists( uno::Reference <sheet::XSpreadsheetDocument>& xSpreadDoc, ::rtl::OUString & name, SCTAB& nTab ) throw ( lang::IllegalArgumentException );
+
 typedef  std::hash_map< rtl::OUString,
 SCTAB, ::rtl::OUStringHash,
 ::std::equal_to< ::rtl::OUString > > NameIndexHash;
@@ -115,7 +119,7 @@ public:
         ScDocShell* pDocShell = (ScDocShell*)pModel->GetEmbeddedObject();
         if ( !pDocShell )
             throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Cannot obtain docshell" ) ), uno::Reference< uno::XInterface >() );
-        ScTabViewShell* pViewShell = getBestViewShell( m_xModel );
+        ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
         if ( !pViewShell )
             throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Cannot obtain view shell" ) ), uno::Reference< uno::XInterface >() );
             
@@ -199,14 +203,13 @@ public:
 
 };
 
-ScVbaWindow::ScVbaWindow( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : WindowImpl_BASE( xParent, xContext ), m_xModel( xModel ) 
+ScVbaWindow::ScVbaWindow( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : WindowImpl_BASE( xParent, xContext, xModel )
 {
     init();
 }
 
 ScVbaWindow::ScVbaWindow( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & xContext )  
-        : WindowImpl_BASE( getXSomethingFromArgs< XHelperInterface >( args, 0 ), xContext ),
-          m_xModel( getXSomethingFromArgs< frame::XModel >( args, 1 ) )
+        : WindowImpl_BASE( args, xContext )
 {
     init();
 }
@@ -303,8 +306,7 @@ ScVbaWindow::getCaption() throw (uno::RuntimeException)
         if ( ( nCrudLen + nCrudIndex ) == sTitle.getLength() )
         {
             sTitle = sTitle.copy( 0, nCrudIndex );
-            uno::Reference< ov::XGlobals > xTemp( ScVbaGlobals::getGlobalsImpl( mxContext )); // temporary needed for g++ 3.3.5
-            ScVbaWorkbook workbook( uno::Reference< XHelperInterface >( xTemp->getApplication(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
+            ScVbaWorkbook workbook( uno::Reference< XHelperInterface >( Application(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
             rtl::OUString sName = workbook.getName();
             // rather bizare hack to make sure the name behavior
             // is like XL
@@ -340,7 +342,7 @@ uno::Any SAL_CALL
 ScVbaWindow::getScrollRow() throw (uno::RuntimeException)
 {	
     sal_Int32 nValue = 0;
-    ScTabViewShell* pViewShell = getBestViewShell( m_xModel );	
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
     if ( pViewShell )
     {
         ScSplitPos eWhich = pViewShell->GetViewData()->GetActivePart();
@@ -353,7 +355,7 @@ ScVbaWindow::getScrollRow() throw (uno::RuntimeException)
 void SAL_CALL 
 ScVbaWindow::setScrollRow( const uno::Any& _scrollrow ) throw (uno::RuntimeException)
 {
-    ScTabViewShell* pViewShell = getBestViewShell( m_xModel );	
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
     if ( pViewShell )
     {
         sal_Int32 scrollRow = 0;	
@@ -368,7 +370,7 @@ uno::Any SAL_CALL
 ScVbaWindow::getScrollColumn() throw (uno::RuntimeException)
 {	
     sal_Int32 nValue = 0;
-    ScTabViewShell* pViewShell = getBestViewShell( m_xModel );	
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
     if ( pViewShell )
     {
         ScSplitPos eWhich = pViewShell->GetViewData()->GetActivePart();
@@ -381,7 +383,7 @@ ScVbaWindow::getScrollColumn() throw (uno::RuntimeException)
 void SAL_CALL 
 ScVbaWindow::setScrollColumn( const uno::Any& _scrollcolumn ) throw (uno::RuntimeException)
 {
-    ScTabViewShell* pViewShell = getBestViewShell( m_xModel );	
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
     if ( pViewShell )
     {
         sal_Int32 scrollColumn = 0;	
@@ -396,7 +398,7 @@ uno::Any SAL_CALL
 ScVbaWindow::getWindowState() throw (uno::RuntimeException)
 {	
     sal_Int32 nwindowState = xlNormal;
-    ScTabViewShell* pViewShell = getBestViewShell( m_xModel );	
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
     SfxViewFrame* pViewFrame = pViewShell -> GetViewFrame();
     SfxTopViewFrame *pTop= PTR_CAST( SfxTopViewFrame, pViewFrame -> GetTopViewFrame() );
     if ( pTop )
@@ -418,7 +420,7 @@ ScVbaWindow::setWindowState( const uno::Any& _windowstate ) throw (uno::RuntimeE
 {
     sal_Int32 nwindowState = xlMaximized;
     _windowstate >>= nwindowState;
-    ScTabViewShell* pViewShell = getBestViewShell( m_xModel );	
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
     SfxViewFrame* pViewFrame = pViewShell -> GetViewFrame();
     SfxTopViewFrame *pTop= PTR_CAST( SfxTopViewFrame, pViewFrame -> GetTopViewFrame() );
     if ( pTop )
@@ -441,8 +443,7 @@ ScVbaWindow::setWindowState( const uno::Any& _windowstate ) throw (uno::RuntimeE
 void
 ScVbaWindow::Activate() throw (css::uno::RuntimeException)
 {
-    uno::Reference< ov::XGlobals > xTemp( ScVbaGlobals::getGlobalsImpl( mxContext )); // temporary needed for g++ 3.3.5
-    ScVbaWorkbook workbook( uno::Reference< XHelperInterface >( xTemp->getApplication(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
+    ScVbaWorkbook workbook( uno::Reference< XHelperInterface >( Application(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
 
     workbook.Activate();
 }
@@ -450,8 +451,7 @@ ScVbaWindow::Activate() throw (css::uno::RuntimeException)
 void
 ScVbaWindow::Close( const uno::Any& SaveChanges, const uno::Any& FileName, const uno::Any& RouteWorkBook ) throw (uno::RuntimeException)
 {
-    uno::Reference< ov::XGlobals > xTemp( ScVbaGlobals::getGlobalsImpl( mxContext )); // temporary needed for g++ 3.3.5
-    ScVbaWorkbook workbook( uno::Reference< XHelperInterface >( xTemp->getApplication(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
+    ScVbaWorkbook workbook( uno::Reference< XHelperInterface >( Application(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
     workbook.Close(SaveChanges, FileName, RouteWorkBook );
 }
 
@@ -464,13 +464,15 @@ ScVbaWindow::ActivePane() throw (script::BasicErrorException, uno::RuntimeExcept
 uno::Reference< excel::XRange > SAL_CALL 
 ScVbaWindow::ActiveCell(  ) throw (script::BasicErrorException, uno::RuntimeException)
 {
-    return ScVbaGlobals::getGlobalsImpl( mxContext )->getApplication()->getActiveCell();
+    uno::Reference< excel::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+    return xApplication->getActiveCell();
 }
 
 uno::Any SAL_CALL 
 ScVbaWindow::Selection(  ) throw (script::BasicErrorException, uno::RuntimeException)
 {
-    return ScVbaGlobals::getGlobalsImpl( mxContext )->getApplication()->getSelection();
+    uno::Reference< excel::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+    return xApplication->getSelection();
 }
 
 ::sal_Bool SAL_CALL 
@@ -733,30 +735,25 @@ ScVbaWindow::getZoom() throw (uno::RuntimeException)
 void SAL_CALL 
 ScVbaWindow::setZoom( const uno::Any& _zoom ) throw (uno::RuntimeException)
 {
-    uno::Reference< beans::XPropertySet > xProps( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    rtl::OUString sZoomType( RTL_CONSTASCII_USTRINGPARAM( SC_UNO_ZOOMTYPE ) );
-    sal_Int16 nZoomType = view::DocumentZoomType::PAGE_WIDTH;
-    if( _zoom.getValueTypeClass() == uno::TypeClass_BOOLEAN )
-    {		
-        //zoom type is PAGE_WIDTH_EXACT in helperapi, it seems that there is a issue for this zoom type in current OOo.
-        // so PAGE_WIDTH is used.   	
-        xProps->setPropertyValue(sZoomType, uno::makeAny( nZoomType ));
-    }					
-    else
-    {
-        nZoomType = view::DocumentZoomType::BY_VALUE;
-        rtl::OUString sZoomValue( RTL_CONSTASCII_USTRINGPARAM( SC_UNO_ZOOMVALUE ));
-        sal_Int16 nZoomValue = 100;
-        _zoom >>= nZoomValue;
-        xProps->setPropertyValue( sZoomType, uno::makeAny( nZoomType ));
-        xProps->setPropertyValue( sZoomValue, uno::makeAny( nZoomValue ));
-    }			
+    sal_Int16 nZoom = 100;
+    _zoom >>= nZoom;
+    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( m_xModel, uno::UNO_QUERY_THROW );
+    uno::Reference< excel::XWorksheet > xActiveSheet = ActiveSheet();
+    SCTAB nTab = 0;
+    rtl::OUString sName = xActiveSheet->getName();
+    bool bSheetExists = nameExists (xSpreadDoc, sName, nTab);
+    if ( !bSheetExists )
+        throw uno::RuntimeException();
+    std::vector< SCTAB > vTabs;
+    vTabs.push_back( nTab );
+    excel::implSetZoom( m_xModel, nZoom, vTabs );
 }
 
 uno::Reference< excel::XWorksheet > SAL_CALL 
 ScVbaWindow::ActiveSheet(  ) throw (script::BasicErrorException, uno::RuntimeException)
 {
-    return ScVbaGlobals::getGlobalsImpl(mxContext)->getApplication()->getActiveSheet();
+    uno::Reference< excel::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+    return xApplication->getActiveSheet();
 }
 
 uno::Any SAL_CALL
@@ -784,121 +781,9 @@ ScVbaWindow::setView( const uno::Any& _view) throw (uno::RuntimeException)
         default:
             DebugHelper::exception(SbERR_BAD_PARAMETER, rtl::OUString() );
     }
-    dispatchExecute( m_xModel, nSlot );
-}
-
-sal_Bool SAL_CALL
-ScVbaWindow::getVisible() throw (uno::RuntimeException)
-{
-    sal_Bool bVisible = sal_True;	
-    uno::Reference< frame::XController > xController( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
-    uno::Reference< css::awt::XWindow2 > xWindow2 (xWindow, uno::UNO_QUERY_THROW );
-    if( xWindow2.is() )
-    {
-        bVisible = xWindow2->isVisible();	
-    }
-    return bVisible;
-}
-
-void SAL_CALL
-ScVbaWindow::setVisible(sal_Bool _visible) throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XController > xController( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
-    if( xWindow.is() )
-    {
-        xWindow->setVisible( _visible );	
-    }
-}
-
-css::awt::Rectangle getPosSize( const uno::Reference< frame::XModel >& xModel )
-{
-    css::awt::Rectangle aRect;
-    uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
-    if( xWindow.is() )
-    {
-        aRect = xWindow->getPosSize();
-    }
-    return aRect;
-}
-
-void setPosSize( const uno::Reference< frame::XModel >& xModel, sal_Int32 nValue, USHORT nFlag )
-{
-    uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
-    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
-    if( xWindow.is() )
-    {
-        css::awt::Rectangle aRect = xWindow->getPosSize();
-        switch( nFlag )
-        {
-            case css::awt::PosSize::X:
-                xWindow->setPosSize( nValue, aRect.Y,	0, 0, css::awt::PosSize::X );
-                break;
-            case css::awt::PosSize::Y:
-                xWindow->setPosSize( aRect.X, nValue,	0, 0, css::awt::PosSize::Y );
-                break;
-            case css::awt::PosSize::WIDTH:
-                xWindow->setPosSize( 0, 0,	nValue, aRect.Height, css::awt::PosSize::WIDTH );
-                break;
-            case css::awt::PosSize::HEIGHT:
-                xWindow->setPosSize( 0, 0,	aRect.Width, nValue, css::awt::PosSize::HEIGHT );
-                break;
-            default:
-                break;
-        }
-    }
-}	
-
-sal_Int32 SAL_CALL 
-ScVbaWindow::getHeight() throw (uno::RuntimeException)
-{
-    css::awt::Rectangle aRect = getPosSize(m_xModel);
-    return aRect.Height;
-}
-
-void SAL_CALL 
-ScVbaWindow::setHeight( sal_Int32 _height ) throw (uno::RuntimeException)
-{
-    setPosSize(m_xModel, _height, css::awt::PosSize::HEIGHT);
-}
-
-sal_Int32 SAL_CALL 
-ScVbaWindow::getLeft() throw (uno::RuntimeException)
-{
-    css::awt::Rectangle aRect = getPosSize(m_xModel);
-    return aRect.X;
-}
-
-void SAL_CALL 
-ScVbaWindow::setLeft( sal_Int32 _left ) throw (uno::RuntimeException)
-{
-    setPosSize(m_xModel, _left, css::awt::PosSize::X);
-}
-sal_Int32 SAL_CALL 
-ScVbaWindow::getTop() throw (uno::RuntimeException)
-{
-    css::awt::Rectangle aRect = getPosSize(m_xModel);
-    return aRect.Y;
-}
-
-void SAL_CALL 
-ScVbaWindow::setTop( sal_Int32 _top ) throw (uno::RuntimeException)
-{
-    setPosSize(m_xModel, _top, css::awt::PosSize::Y);
-}
-sal_Int32 SAL_CALL 
-ScVbaWindow::getWidth() throw (uno::RuntimeException)
-{
-    css::awt::Rectangle aRect = getPosSize(m_xModel);
-    return aRect.Width;
-}
-
-void SAL_CALL 
-ScVbaWindow::setWidth( sal_Int32 _width ) throw (uno::RuntimeException)
-{
-    setPosSize(m_xModel, _width, css::awt::PosSize::WIDTH);
+    ScTabViewShell* pViewShell = excel::getBestViewShell( m_xModel );
+    if ( pViewShell )
+        dispatchExecute( pViewShell, nSlot );
 }
 
 sal_Int32 SAL_CALL 
@@ -921,14 +806,14 @@ void SAL_CALL
 ScVbaWindow::PrintOut( const css::uno::Any& From, const css::uno::Any&To, const css::uno::Any& Copies, const css::uno::Any& Preview, const css::uno::Any& ActivePrinter, const css::uno::Any& PrintToFile, const css::uno::Any& Collate, const css::uno::Any& PrToFileName ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
 {
     // need test, print current active sheet	
-    PrintOutHelper( From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, m_xModel, sal_True );
+    PrintOutHelper( excel::getBestViewShell( m_xModel ), From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, sal_True );
 }
 
 void SAL_CALL 
 ScVbaWindow::PrintPreview( const css::uno::Any& EnableChanges ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
 {
     // need test, print preview current active sheet	
-    PrintPreviewHelper( EnableChanges, m_xModel );	
+    PrintPreviewHelper( EnableChanges, excel::getBestViewShell( m_xModel ) );
 }
 
 rtl::OUString& 
diff --git a/sc/source/ui/vba/vbawindow.hxx b/sc/source/ui/vba/vbawindow.hxx
index 6edfb9d..cd4a8c9 100644
--- a/sc/source/ui/vba/vbawindow.hxx
+++ b/sc/source/ui/vba/vbawindow.hxx
@@ -36,15 +36,16 @@
 #include <ooo/vba/excel/XPane.hpp>
 #include <com/sun/star/awt/XDevice.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbawindowbase.hxx>
 #include "vbaworkbook.hxx"
 
-typedef InheritedHelperInterfaceImpl1<ov::excel::XWindow > WindowImpl_BASE;
+//typedef InheritedHelperInterfaceImpl1<ov::excel::XWindow > WindowImpl_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaWindowBase, ov::excel::XWindow > WindowImpl_BASE;
 
 class ScVbaWindow : public WindowImpl_BASE
 {		
 private:		
-    css::uno::Reference< css::frame::XModel > m_xModel;
     css::uno::Reference< css::sheet::XViewPane > m_xViewPane;
     css::uno::Reference< css::sheet::XViewFreezable > m_xViewFreezable;
     css::uno::Reference< css::sheet::XViewSplitable > m_xViewSplitable;
@@ -79,10 +80,6 @@ public:
     virtual void SAL_CALL setDisplayWorkbookTabs( ::sal_Bool _bDisplayWorkbookTabs ) throw (css::uno::RuntimeException);
     virtual ::sal_Bool SAL_CALL getFreezePanes() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setFreezePanes( ::sal_Bool _bFreezePanes ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getHeight() throw (css::uno::RuntimeException) ;
-    virtual void SAL_CALL setHeight( sal_Int32 _height ) throw (css::uno::RuntimeException) ;
-    virtual sal_Int32 SAL_CALL getLeft() throw (css::uno::RuntimeException) ;
-    virtual void SAL_CALL setLeft( sal_Int32 _left ) throw (css::uno::RuntimeException) ;
     virtual ::sal_Bool SAL_CALL getSplit() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setSplit( ::sal_Bool _bSplit ) throw (css::uno::RuntimeException);
     virtual sal_Int32 SAL_CALL getSplitColumn() throw (css::uno::RuntimeException) ;
@@ -97,14 +94,8 @@ public:
     virtual void SAL_CALL setScrollRow( const css::uno::Any& _scrollrow ) throw (css::uno::RuntimeException) ;
     virtual css::uno::Any SAL_CALL getScrollColumn() throw (css::uno::RuntimeException) ;
     virtual void SAL_CALL setScrollColumn( const css::uno::Any& _scrollcolumn ) throw (css::uno::RuntimeException) ;
-    virtual sal_Int32 SAL_CALL getTop() throw (css::uno::RuntimeException) ;
-    virtual void SAL_CALL setTop( sal_Int32 _top ) throw (css::uno::RuntimeException) ;
     virtual css::uno::Any SAL_CALL getView() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setView( const css::uno::Any& _view ) throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
-    virtual sal_Int32 SAL_CALL getWidth() throw (css::uno::RuntimeException) ;
-    virtual void SAL_CALL setWidth( sal_Int32 _width ) throw (css::uno::RuntimeException) ;
     virtual css::uno::Any SAL_CALL getWindowState() throw (css::uno::RuntimeException);
     virtual void SAL_CALL setWindowState( const css::uno::Any& _windowstate ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL getZoom() throw (css::uno::RuntimeException);
diff --git a/sc/source/ui/vba/vbawindows.cxx b/sc/source/ui/vba/vbawindows.cxx
index 9c49dbe..60f793c 100644
--- a/sc/source/ui/vba/vbawindows.cxx
+++ b/sc/source/ui/vba/vbawindows.cxx
@@ -34,6 +34,7 @@
 
 #include <tools/urlobj.hxx>
 #include "vbawindow.hxx"
+#include "vbaglobals.hxx"
 //#include "vbaworkbook.hxx"
 
 using namespace ::com::sun::star;
@@ -44,15 +45,15 @@ sal_Int32, ::rtl::OUStringHash,
 ::std::equal_to< ::rtl::OUString > > NameIndexHash;
 
 
-uno::Reference< XHelperInterface > lcl_createWorkbookHIParent( const uno::Reference< frame::XModel >& xModel, const uno::Reference< uno::XComponentContext >& xContext )
+uno::Reference< XHelperInterface > lcl_createWorkbookHIParent( const uno::Reference< frame::XModel >& xModel, const uno::Reference< uno::XComponentContext >& xContext, const uno::Any& aApplication )
 {
-    return new ScVbaWorkbook( uno::Reference< XHelperInterface >( ScVbaGlobals::getGlobalsImpl( xContext )->getApplication(), uno::UNO_QUERY_THROW ), xContext,  xModel );
+    return new ScVbaWorkbook( uno::Reference< XHelperInterface >( aApplication, uno::UNO_QUERY_THROW ), xContext,  xModel );
 }
 
-uno::Any ComponentToWindow( const uno::Any& aSource, uno::Reference< uno::XComponentContext > & xContext )
+uno::Any ComponentToWindow( const uno::Any& aSource, uno::Reference< uno::XComponentContext > & xContext, const uno::Any& aApplication )
 {
     uno::Reference< frame::XModel > xModel( aSource, uno::UNO_QUERY_THROW );
-    uno::Reference< excel::XWindow > xWin( new ScVbaWindow( lcl_createWorkbookHIParent( xModel, xContext ), xContext,xModel ) );
+    uno::Reference< excel::XWindow > xWin( new ScVbaWindow( lcl_createWorkbookHIParent( xModel, xContext, aApplication ), xContext,xModel ) );
     return uno::makeAny( xWin );
 }
 
@@ -105,12 +106,13 @@ public:
 
 class WindowEnumImpl : public  WindowComponentEnumImpl
 {
+    uno::Any m_aApplication;
 public:
-    WindowEnumImpl(const uno::Reference< uno::XComponentContext >& xContext, const Components& components ):WindowComponentEnumImpl( xContext, components ) {}
-    WindowEnumImpl( const uno::Reference< uno::XComponentContext >& xContext ): WindowComponentEnumImpl( xContext ) {}
+    WindowEnumImpl(const uno::Reference< uno::XComponentContext >& xContext, const Components& components, const uno::Any& aApplication ):WindowComponentEnumImpl( xContext, components ), m_aApplication( aApplication ){}
+    WindowEnumImpl( const uno::Reference< uno::XComponentContext >& xContext,  const uno::Any& aApplication ): WindowComponentEnumImpl( xContext ), m_aApplication( aApplication ) {}
     virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
     {
-        return ComponentToWindow( WindowComponentEnumImpl::nextElement(), m_xContext );
+        return ComponentToWindow( WindowComponentEnumImpl::nextElement(), m_xContext, m_aApplication );
     }
 };
 
@@ -209,16 +211,19 @@ ScVbaWindows::ScVbaWindows( const uno::Reference< ov::XHelperInterface >& xParen
 {
 }
 
+ScVbaWindows::ScVbaWindows( const uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext ) : ScVbaWindows_BASE( xParent, xContext, uno::Reference< container::XIndexAccess > ( new WindowsAccessImpl( xContext ) ) )
+{
+}
 uno::Reference< container::XEnumeration >
 ScVbaWindows::createEnumeration() throw (uno::RuntimeException)
 {
-    return new WindowEnumImpl( mxContext );
+    return new WindowEnumImpl( mxContext, Application() );
 }
 
 uno::Any
 ScVbaWindows::createCollectionObject( const css::uno::Any& aSource )
 {
-    return ComponentToWindow( aSource,  mxContext );
+    return ComponentToWindow( aSource,  mxContext, Application() );
 }
 
 uno::Type 
@@ -227,12 +232,6 @@ ScVbaWindows::getElementType() throw (uno::RuntimeException)
     return excel::XWindows::static_type(0);
 }
 
-uno::Reference< XCollection >
-ScVbaWindows::Windows( const css::uno::Reference< css::uno::XComponentContext >& xContext )
-{
-    uno::Reference< container::XIndexAccess > xIndex( new WindowsAccessImpl( xContext ) );
-    return  new ScVbaWindows( uno::Reference< XHelperInterface >( ScVbaGlobals::getGlobalsImpl( xContext )->getApplication(), uno::UNO_QUERY_THROW ), xContext , xIndex );	
-}
 
 void SAL_CALL 
 ScVbaWindows::Arrange( ::sal_Int32 /*ArrangeStyle*/, const uno::Any& /*ActiveWorkbook*/, const uno::Any& /*SyncHorizontal*/, const uno::Any& /*SyncVertical*/ ) throw (uno::RuntimeException)
diff --git a/sc/source/ui/vba/vbawindows.hxx b/sc/source/ui/vba/vbawindows.hxx
index 6d1f071..276cf3c 100644
--- a/sc/source/ui/vba/vbawindows.hxx
+++ b/sc/source/ui/vba/vbawindows.hxx
@@ -32,8 +32,8 @@
 
 #include <com/sun/star/uno/XComponentContext.hpp>
  
-#include "vbahelper.hxx"
-#include "vbacollectionimpl.hxx"
+#include "excelvbahelper.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 
 
 typedef CollTestImplHelper< ov::excel::XWindows > ScVbaWindows_BASE;
@@ -42,6 +42,7 @@ class ScVbaWindows : public ScVbaWindows_BASE
 {
 public:
     ScVbaWindows( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess );
+    ScVbaWindows( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext );
     virtual ~ScVbaWindows() {}
 
     // XEnumerationAccess
@@ -54,8 +55,6 @@ public:
     // ScVbaCollectionBaseImpl	
     virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource ); 
 
-    static css::uno::Reference< ov::XCollection > Windows(  const css::uno::Reference< css::uno::XComponentContext >& xContext );
-
     // XHelperInterface
     virtual rtl::OUString& getServiceImplName();
     virtual css::uno::Sequence<rtl::OUString> getServiceNames();
diff --git a/sc/source/ui/vba/vbaworkbook.cxx b/sc/source/ui/vba/vbaworkbook.cxx
index 43af828..66a34c4 100644
--- a/sc/source/ui/vba/vbaworkbook.cxx
+++ b/sc/source/ui/vba/vbaworkbook.cxx
@@ -24,7 +24,7 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 #include <tools/urlobj.hxx>
 #include <comphelper/unwrapargs.hxx>
 
@@ -43,12 +43,13 @@
 #include "vbaworkbook.hxx"
 #include "vbawindows.hxx"
 #include "vbastyles.hxx"
-#include "vbahelper.hxx"
+#include "excelvbahelper.hxx"
 #include "vbapalette.hxx"
 #include <osl/file.hxx>
 #include <stdio.h>
 #include "vbanames.hxx"  // Amelia Wang
 #include "nameuno.hxx"
+#include "docoptio.hxx"
 
 // Much of the impl. for the equivalend UNO module is
 // sc/source/ui/unoobj/docuno.cxx, viewuno.cxx
@@ -61,7 +62,7 @@ class ActiveSheet : public ScVbaWorksheet
 protected:
     virtual uno::Reference< frame::XModel > getModel()
     { 	
-        return getCurrentDocument(); 
+        return getCurrentExcelDoc( mxContext );
     }
     virtual uno::Reference< sheet::XSpreadsheet > getSheet()
     { 
@@ -189,7 +190,7 @@ ScVbaWorkbook::init()
     if ( !ColorData.getLength() )
         ResetColors();
 }
-ScVbaWorkbook::ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext) :ScVbaWorkbook_BASE( xParent, xContext ), mxModel(NULL)
+ScVbaWorkbook::ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext) :ScVbaWorkbook_BASE( xParent, xContext )
 {
     //#FIXME this persists the color data per office instance and
     // not per workbook instance, need to hook the data into XModel
@@ -200,58 +201,27 @@ ScVbaWorkbook::ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >
     init();
 }
 
-ScVbaWorkbook::ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, css::uno::Reference< css::frame::XModel > xModel ) : ScVbaWorkbook_BASE( xParent, xContext ),  mxModel( xModel ) 
+ScVbaWorkbook::ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, css::uno::Reference< css::frame::XModel > xModel ) : ScVbaWorkbook_BASE( xParent, xContext, xModel )
 { 
     init();
 }
 
 ScVbaWorkbook::ScVbaWorkbook( uno::Sequence< uno::Any> const & args,
-    uno::Reference< uno::XComponentContext> const & xContext ) : ScVbaWorkbook_BASE( getXSomethingFromArgs< XHelperInterface >( args, 0 ), xContext ),  mxModel( getXSomethingFromArgs< frame::XModel >( args, 1 ) ) 
+    uno::Reference< uno::XComponentContext> const & xContext ) : ScVbaWorkbook_BASE( args, xContext )
 
 {
     init();
 }
 
-::rtl::OUString
-ScVbaWorkbook::getName() throw (uno::RuntimeException)
-{
-    rtl::OUString sName = getModel()->getURL();
-    if ( sName.getLength() )
-    {
-
-        INetURLObject aURL( getModel()->getURL() );
-        ::osl::File::getSystemPathFromFileURL( aURL.GetLastName(), sName );
-    }
-    else
-    {
-        const static rtl::OUString sTitle( RTL_CONSTASCII_USTRINGPARAM("Title" ) );
-        // process "UntitledX - $(PRODUCTNAME)"
-        uno::Reference< frame::XFrame > xFrame( getModel()->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
-        uno::Reference< beans::XPropertySet > xProps( xFrame, uno::UNO_QUERY_THROW );
-        xProps->getPropertyValue(sTitle ) >>= sName;
-        sal_Int32 pos = 0;
-        sName = sName.getToken(0,' ',pos);	
-    }
-    return sName;
-}
-::rtl::OUString
-ScVbaWorkbook::getPath() throw (uno::RuntimeException)
-{
-    INetURLObject aURL( getModel()->getURL() );
-    aURL.CutLastName();
-    return aURL.GetURLPath();
-}
-
-::rtl::OUString
-ScVbaWorkbook::getFullName() throw (uno::RuntimeException)
-{
-    INetURLObject aURL( getModel()->getURL() );
-    return aURL.GetURLPath();
-}
 uno::Reference< excel::XWorksheet >
 ScVbaWorkbook::getActiveSheet() throw (uno::RuntimeException)
 {
-    return new ActiveSheet( this, mxContext );
+    uno::Reference< frame::XModel > xModel( getCurrentExcelDoc( mxContext ) );
+    uno::Reference< sheet::XSpreadsheet > xSheet;
+    uno::Reference< sheet::XSpreadsheetView > xView( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    if ( xView.is() )
+        xSheet = xView->getActiveSheet();
+    return new ScVbaWorksheet( this, mxContext, xSheet, xModel );
 }
 uno::Any SAL_CALL
 ScVbaWorkbook::Sheets( const uno::Any& aIndex ) throw (uno::RuntimeException)
@@ -278,91 +248,19 @@ ScVbaWorkbook::Worksheets( const uno::Any& aIndex ) throw (uno::RuntimeException
 uno::Any SAL_CALL
 ScVbaWorkbook::Windows( const uno::Any& aIndex ) throw (uno::RuntimeException)
 {
-    uno::Reference< XCollection >  xWindows = ScVbaWindows::Windows( mxContext );
+
+    uno::Reference< excel::XWindows >  xWindows( new ScVbaWindows( getParent(), mxContext ) );
     if ( aIndex.getValueTypeClass() == uno::TypeClass_VOID )
         return uno::Any( xWindows );
     return uno::Any( xWindows->Item( aIndex, uno::Any() ) );
 }
-void
-ScVbaWorkbook::Close( const uno::Any &rSaveArg, const uno::Any &rFileArg,
-                      const uno::Any &rRouteArg ) throw (uno::RuntimeException)
-{
-    sal_Bool bSaveChanges = sal_False;
-    rtl::OUString aFileName;
-    sal_Bool bRouteWorkbook = sal_True;
-
-    rSaveArg >>= bSaveChanges;
-    sal_Bool bFileName =  ( rFileArg >>= aFileName );
-    rRouteArg >>= bRouteWorkbook;
-    uno::Reference< frame::XStorable > xStorable( getModel(), uno::UNO_QUERY_THROW );
-    uno::Reference< util::XModifiable > xModifiable( getModel(), uno::UNO_QUERY_THROW );
-
-    if( bSaveChanges )
-    {
-        if( xStorable->isReadonly() )
-        {	
-            throw uno::RuntimeException(::rtl::OUString( 
-                RTL_CONSTASCII_USTRINGPARAM( "Unable to save to a read only file ") ),
-                            uno::Reference< XInterface >() );
-        }
-        if( bFileName )
-            xStorable->storeAsURL( aFileName, uno::Sequence< beans::PropertyValue >(0) ); 
-        else
-            xStorable->store();
-    }	
-    else
-        xModifiable->setModified( false );		
-
-    uno::Reference< util::XCloseable > xCloseable( getModel(), uno::UNO_QUERY );
-
-    if( xCloseable.is() )
-        // use close(boolean DeliverOwnership)
-    
-        // The boolean parameter DeliverOwnership tells objects vetoing the close process that they may
-        // assume ownership if they object the closure by throwing a CloseVetoException
-        // Here we give up ownership. To be on the safe side, catch possible veto exception anyway.
-        xCloseable->close(sal_True);
-    // If close is not supported by this model - try to dispose it.
-    // But if the model disagree with a reset request for the modify state
-    // we shouldn't do so. Otherwhise some strange things can happen.
-    else
-    {
-        uno::Reference< lang::XComponent > xDisposable ( getCurrentDocument(), uno::UNO_QUERY );
-        if ( xDisposable.is() )
-            xDisposable->dispose();
-    }
-}
 
-void
-ScVbaWorkbook::Protect( const uno::Any &aPassword ) throw (uno::RuntimeException)
+void SAL_CALL
+ScVbaWorkbook::Activate() throw (uno::RuntimeException)
 {
-    rtl::OUString rPassword;
-    uno::Reference< util::XProtectable > xProt( getModel(), uno::UNO_QUERY_THROW );
-    SC_VBA_FIXME(("Workbook::Protect stub"));
-    if(  aPassword >>= rPassword )
-        xProt->protect( rPassword );
-    else
-        xProt->protect( rtl::OUString() );
+    VbaDocumentBase::Activate();
 }
 
-void 
-ScVbaWorkbook::Unprotect( const uno::Any &aPassword ) throw (uno::RuntimeException)
-{
-    rtl::OUString rPassword;
-    uno::Reference< util::XProtectable > xProt( getModel(), uno::UNO_QUERY_THROW );
-    if( !getProtectStructure() )
-        throw uno::RuntimeException(::rtl::OUString(
-            RTL_CONSTASCII_USTRINGPARAM( "File is already unprotected" ) ),
-            uno::Reference< XInterface >() );
-    else
-    {
-        if( aPassword >>= rPassword )
-            xProt->unprotect( rPassword );
-        else
-            xProt->unprotect( rtl::OUString() );
-    }
-}
-        
 ::sal_Bool
 ScVbaWorkbook::getProtectStructure() throw (uno::RuntimeException)
 {
@@ -370,26 +268,20 @@ ScVbaWorkbook::getProtectStructure() throw (uno::RuntimeException)
     return xProt->isProtected();
 }
 
-void 
-ScVbaWorkbook::setSaved( sal_Bool bSave ) throw (uno::RuntimeException)
+::sal_Bool SAL_CALL ScVbaWorkbook::getPrecisionAsDisplayed() throw (uno::RuntimeException)
 {
-    uno::Reference< util::XModifiable > xModifiable( getModel(), uno::UNO_QUERY_THROW );
-    xModifiable->setModified( bSave );
+    uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
+    ScDocument* pDoc = excel::getDocShell( xModel )->GetDocument();
+    return pDoc->GetDocOptions().IsCalcAsShown();
 }
 
-sal_Bool
-ScVbaWorkbook::getSaved() throw (uno::RuntimeException)
+void SAL_CALL ScVbaWorkbook::setPrecisionAsDisplayed( sal_Bool _precisionAsDisplayed ) throw (uno::RuntimeException)
 {
-    uno::Reference< util::XModifiable > xModifiable( getModel(), uno::UNO_QUERY_THROW );
-    return xModifiable->isModified();
-}
-
-void
-ScVbaWorkbook::Save() throw (uno::RuntimeException)
-{
-    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(".uno:Save"));
-    uno::Reference< frame::XModel > xModel = getModel();
-    dispatchRequests(xModel,url);
+    uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
+    ScDocument* pDoc = excel::getDocShell( xModel )->GetDocument();
+    ScDocOptions aOpt = pDoc->GetDocOptions();
+    aOpt.SetCalcAsShown( _precisionAsDisplayed );
+    pDoc->SetDocOptions( aOpt );
 }
 
 void
@@ -404,13 +296,6 @@ ScVbaWorkbook::SaveCopyAs( const rtl::OUString& sFileName ) throw ( uno::Runtime
     xStor->storeToURL( aURL, storeProps );
 }
 
-void 
-ScVbaWorkbook::Activate() throw (uno::RuntimeException)
-{
-    uno::Reference< frame::XFrame > xFrame( getModel()->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
-    xFrame->activate();
-}	
-
 css::uno::Any SAL_CALL 
 ScVbaWorkbook::Styles( const::uno::Any& Item ) throw (uno::RuntimeException)
 {
@@ -462,7 +347,7 @@ ScVbaWorkbook::getCodeName() throw (css::uno::RuntimeException)
 {
 #ifdef VBA_OOBUILD_HACK 
     uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
-    ScDocument* pDoc = getDocShell( xModel )->GetDocument();
+    ScDocument* pDoc = excel::getDocShell( xModel )->GetDocument();
     ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
     ScExtDocSettings pExtSettings = pExtOptions->GetDocSettings();
     ::rtl::OUString sGlobCodeName = pExtSettings.maGlobCodeName;
@@ -476,7 +361,7 @@ void SAL_CALL
 ScVbaWorkbook::setCodeName( const ::rtl::OUString& sGlobCodeName ) throw (css::uno::RuntimeException)
 {
     uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
-    ScDocument* pDoc = getDocShell( xModel )->GetDocument();
+    ScDocument* pDoc = excel::getDocShell( xModel )->GetDocument();
     ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
     ScExtDocSettings pExtSettings = pExtOptions->GetDocSettings();
     pExtSettings.maGlobCodeName = sGlobCodeName;
diff --git a/sc/source/ui/vba/vbaworkbook.hxx b/sc/source/ui/vba/vbaworkbook.hxx
index 624555d..27b040f 100644
--- a/sc/source/ui/vba/vbaworkbook.hxx
+++ b/sc/source/ui/vba/vbaworkbook.hxx
@@ -29,21 +29,20 @@
 
 #include <com/sun/star/frame/XModel.hpp>
 #include <ooo/vba/excel/XWorkbook.hpp>
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbadocumentbase.hxx>
 
 class ScModelObj;
 
-typedef InheritedHelperInterfaceImpl1< ov::excel::XWorkbook > ScVbaWorkbook_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaDocumentBase, ov::excel::XWorkbook > ScVbaWorkbook_BASE;
 
 class ScVbaWorkbook : public ScVbaWorkbook_BASE
 {
-    css::uno::Reference< css::frame::XModel > mxModel;
     static css::uno::Sequence< sal_Int32 > ColorData;
     void initColorData( const css::uno::Sequence< sal_Int32 >& sColors );
     void init();
 protected:
 
-    virtual css::uno::Reference< css::frame::XModel >  getModel() { return mxModel; }
     ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext);
 public:
     ScVbaWorkbook( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,
@@ -52,24 +51,15 @@ public:
     virtual ~ScVbaWorkbook() {}
 
     // Attributes
-    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
-    virtual ::rtl::OUString SAL_CALL getPath() throw (css::uno::RuntimeException);
-    virtual ::rtl::OUString SAL_CALL getFullName() throw (css::uno::RuntimeException);
     virtual ::sal_Bool SAL_CALL getProtectStructure() throw (css::uno::RuntimeException);
     virtual css::uno::Reference< ov::excel::XWorksheet > SAL_CALL getActiveSheet() throw (css::uno::RuntimeException);
-    virtual sal_Bool SAL_CALL getSaved() throw (css::uno::RuntimeException);
-    virtual void SAL_CALL setSaved( sal_Bool bSave ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getPrecisionAsDisplayed() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setPrecisionAsDisplayed( sal_Bool _precisionAsDisplayed ) throw (css::uno::RuntimeException);
 
     // Methods
     virtual css::uno::Any SAL_CALL Worksheets( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Sheets( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Windows( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Close( const css::uno::Any &bSaveChanges,
-                                 const css::uno::Any &aFileName,
-                                 const css::uno::Any &bRouteWorkbook ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Protect( const css::uno::Any & aPassword ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Unprotect( const css::uno::Any &aPassword ) throw (css::uno::RuntimeException);
-    virtual void SAL_CALL Save() throw (css::uno::RuntimeException);
     virtual void SAL_CALL Activate() throw (css::uno::RuntimeException);
     // Amelia Wang
     virtual css::uno::Any SAL_CALL Names( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
diff --git a/sc/source/ui/vba/vbaworkbooks.cxx b/sc/source/ui/vba/vbaworkbooks.cxx
index ecad1f1..40a0e63 100644
--- a/sc/source/ui/vba/vbaworkbooks.cxx
+++ b/sc/source/ui/vba/vbaworkbooks.cxx
@@ -53,7 +53,7 @@
 #include "vbaglobals.hxx"
 #include "vbaworkbook.hxx"
 #include "vbaworkbooks.hxx"
-#include "vbahelper.hxx"
+#include <vbahelper/vbahelper.hxx>
 
 #include <hash_map>
 #include <osl/file.hxx>
@@ -62,180 +62,33 @@ using namespace ::com::sun::star;
 
 const sal_Int16 CUSTOM_CHAR = 5;
 
-typedef  std::hash_map< rtl::OUString,
-sal_Int32, ::rtl::OUStringHash,
-::std::equal_to< ::rtl::OUString > > NameIndexHash;
-
-typedef std::vector < uno::Reference< sheet::XSpreadsheetDocument > > WorkBooks;
-
-typedef ::cppu::WeakImplHelper1< container::XEnumeration > SpreadSheetDocEnumImpl_BASE;
-
 static uno::Any
-getWorkbook( uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< sheet::XSpreadsheetDocument > &xDoc )
+getWorkbook( uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< sheet::XSpreadsheetDocument > &xDoc, const uno::Any& aApplication )
 {
     // FIXME: fine as long as ScVbaWorkbook is stateless ...
     uno::Reference< frame::XModel > xModel( xDoc, uno::UNO_QUERY );
     if( !xModel.is() )
         return uno::Any();
     
-    ScVbaWorkbook *pWb = new ScVbaWorkbook(  uno::Reference< XHelperInterface >( ScVbaGlobals::getGlobalsImpl( xContext )->getApplication(), uno::UNO_QUERY_THROW ), xContext, xModel );
+    ScVbaWorkbook *pWb = new ScVbaWorkbook(  uno::Reference< XHelperInterface >( aApplication, uno::UNO_QUERY_THROW ), xContext, xModel );
     return uno::Any( uno::Reference< excel::XWorkbook > (pWb) );
 }
 
-
-// #FIXME clearly this is a candidate for some sort of helper base class as
-// this is a copy of SelectedSheetsEnum ( vbawindow.cxx )
-
-class SpreadSheetDocEnumImpl : public SpreadSheetDocEnumImpl_BASE
-{
-    uno::Reference< uno::XComponentContext > m_xContext;
-    WorkBooks m_books;
-    WorkBooks::const_iterator m_it;
-
-public:
-    SpreadSheetDocEnumImpl( const uno::Reference< uno::XComponentContext >& xContext, const WorkBooks& books ) throw ( uno::RuntimeException ) :  m_xContext( xContext ), m_books( books )
-    {
-        m_it = m_books.begin();
-    }
-    SpreadSheetDocEnumImpl( const uno::Reference< uno::XComponentContext >& xContext ) throw ( uno::RuntimeException ) :  m_xContext( xContext )
-    {
-        uno::Reference< lang::XMultiComponentFactory > xSMgr(
-            m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
-
-        uno::Reference< frame::XDesktop > xDesktop
-            (xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"), m_xContext), uno::UNO_QUERY_THROW );
-        uno::Reference< container::XEnumeration > mxComponents = xDesktop->getComponents()->createEnumeration();
-        while( mxComponents->hasMoreElements() )
-        {
-            uno::Reference< sheet::XSpreadsheetDocument > xNext( mxComponents->nextElement(), uno::UNO_QUERY );
-            if ( xNext.is() )
-                m_books.push_back( xNext );
-        }
-        m_it = m_books.begin();
-    }
-    // XEnumeration
-    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException) 
-    { 
-        return m_it != m_books.end();
-    }
-
-    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException) 
-    { 
-        if ( !hasMoreElements() )
-        {
-            throw container::NoSuchElementException();
-        }
-        return makeAny( *(m_it++) );
-    }
-};
-
 class WorkBookEnumImpl : public EnumerationHelperImpl
 {
+    uno::Any m_aApplication;
 public:
-    WorkBookEnumImpl( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XEnumeration >& xEnumeration ) throw ( uno::RuntimeException ) : EnumerationHelperImpl( xContext, xEnumeration ){}
+    WorkBookEnumImpl( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XEnumeration >& xEnumeration, const uno::Any& aApplication ) throw ( uno::RuntimeException ) : EnumerationHelperImpl( xContext, xEnumeration ), m_aApplication( aApplication ) {}
 
     virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException) 
     { 
         uno::Reference< sheet::XSpreadsheetDocument > xDoc( m_xEnumeration->nextElement(), uno::UNO_QUERY_THROW );
-        return getWorkbook( m_xContext, xDoc );
-    }
-
-};
-
-// #FIXME clearly this is also a candidate for some sort of helper base class as
-// a very similar one is used in vbawindow ( SelectedSheetsEnumAccess )
-// Maybe a template base class that does all of the operations on the hashmap
-// and vector only, and the sub-class does everything else
-// => ctor, createEnumeration & factory method need be defined ( to be called 
-// by getByIndex, getByName )
-typedef ::cppu::WeakImplHelper3< container::XEnumerationAccess 
-    , com::sun::star::container::XIndexAccess
-    , com::sun::star::container::XNameAccess
-    > WorkBooksAccessImpl_BASE;
-
-class WorkBooksAccessImpl : public WorkBooksAccessImpl_BASE
-{
-    uno::Reference< uno::XComponentContext > m_xContext;
-    WorkBooks m_books;
-    NameIndexHash namesToIndices;
-public:	
-    WorkBooksAccessImpl( const uno::Reference< uno::XComponentContext >& xContext ):m_xContext( xContext )
-    {
-        uno::Reference< container::XEnumeration > xEnum = new SpreadSheetDocEnumImpl( m_xContext );
-        sal_Int32 nIndex=0;
-        while( xEnum->hasMoreElements() )
-        {
-            uno::Reference< sheet::XSpreadsheetDocument > xNext( xEnum->nextElement(), uno::UNO_QUERY );
-            if ( xNext.is() )
-            {
-                m_books.push_back( xNext );
-                uno::Reference< frame::XModel > xModel( xNext, uno::UNO_QUERY_THROW ); // that the spreadsheetdocument is a xmodel is a given
-                INetURLObject aURL( xModel->getURL() );
-                namesToIndices[ aURL.GetLastName() ] = nIndex++;
-            }
-        }
-            
-    }
-    
-    //XEnumerationAccess
-    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
-    {
-        return new SpreadSheetDocEnumImpl( m_xContext, m_books ); 
-    }
-    // XIndexAccess
-    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException) 
-    { 
-        return m_books.size();
-    }
-    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw ( lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException) 
-    { 
-        if ( Index < 0 
-            || static_cast< WorkBooks::size_type >(Index) >= m_books.size() ) 
-            throw lang::IndexOutOfBoundsException();
-        return makeAny( m_books[ Index ] ); // returns xspreadsheetdoc
-    }
-
-    //XElementAccess
-    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
-    { 
-        return sheet::XSpreadsheetDocument::static_type(0); 
-    }
-
-    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) 
-    { 
-        return (m_books.size() > 0);
-    }
-
-    //XNameAccess
-    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException) 
-    { 
-        NameIndexHash::const_iterator it = namesToIndices.find( aName );
-        if ( it == namesToIndices.end() )
-            throw container::NoSuchElementException();
-        return makeAny( m_books[ it->second ] );
-        
-    }
-
-    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException) 
-    { 
-        uno::Sequence< ::rtl::OUString > names( namesToIndices.size() );
-        ::rtl::OUString* pString = names.getArray();
-        NameIndexHash::const_iterator it = namesToIndices.begin();
-        NameIndexHash::const_iterator it_end = namesToIndices.end();
-        for ( ; it != it_end; ++it, ++pString )
-            *pString = it->first;	
-        return names;	
-    }
-
-    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException) 
-    { 
-        NameIndexHash::const_iterator it = namesToIndices.find( aName );
-        return (it != namesToIndices.end());
+        return getWorkbook( m_xContext, xDoc, m_aApplication );
     }
 
 };
 
-ScVbaWorkbooks::ScVbaWorkbooks( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< css::uno::XComponentContext >& xContext ) : ScVbaWorkbooks_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( new WorkBooksAccessImpl( xContext ) ) )
+ScVbaWorkbooks::ScVbaWorkbooks( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< css::uno::XComponentContext >& xContext ) : ScVbaWorkbooks_BASE( xParent, xContext, VbaDocumentsBase::EXCEL_DOCUMENT )
 {
 }
 // XEnumerationAccess
@@ -251,46 +104,32 @@ ScVbaWorkbooks::createEnumeration() throw (uno::RuntimeException)
     // the state of this object ( although it should ) would be 
     // safer to create an enumeration based on this objects state
     // rather than one effectively based of the desktop component
-    return new WorkBookEnumImpl( mxContext, uno::Reference< container::XEnumeration >( new SpreadSheetDocEnumImpl(mxContext) ) );
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return new WorkBookEnumImpl( mxContext, xEnumerationAccess->createEnumeration(), Application() );
 }
 
 uno::Any
 ScVbaWorkbooks::createCollectionObject( const css::uno::Any& aSource )
 {
-    uno::Reference< sheet::XSpreadsheetDocument > xDoc( aSource, uno::UNO_QUERY );
-    return getWorkbook( mxContext, xDoc );
+    uno::Reference< sheet::XSpreadsheetDocument > xDoc( aSource, uno::UNO_QUERY_THROW );
+    return getWorkbook( mxContext, xDoc, Application() );
 }
 
 
 uno::Any SAL_CALL
 ScVbaWorkbooks::Add() throw (uno::RuntimeException)
 {
-    uno::Reference< lang::XMultiComponentFactory > xSMgr(
-        mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-
-     uno::Reference< frame::XComponentLoader > xLoader(
-        xSMgr->createInstanceWithContext(
-            ::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"),
-                mxContext), uno::UNO_QUERY_THROW );
-    uno::Reference< lang::XComponent > xComponent = xLoader->loadComponentFromURL(
-                                       rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("private:factory/scalc") ),
-                                       rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("_blank") ), 0, 
-                                       uno::Sequence< beans::PropertyValue >(0) );			   
-    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( xComponent, uno::UNO_QUERY_THROW );
+    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( VbaDocumentsBase::Add() , uno::UNO_QUERY_THROW );
                                                                                                                              
     if( xSpreadDoc.is() )
-        return getWorkbook( mxContext, xSpreadDoc );
+        return getWorkbook( mxContext, xSpreadDoc, Application() );
     return uno::Any();
 }
 
 void
 ScVbaWorkbooks::Close() throw (uno::RuntimeException)
 {
-    uno::Reference< lang::XMultiComponentFactory > xSMgr(
-        mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
-    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:CloseDoc"));
-    dispatchRequests(xModel,url);
+    VbaDocumentsBase::Close();
 }
 
 bool 
@@ -334,24 +173,15 @@ uno::Any
 ScVbaWorkbooks::Open( const rtl::OUString& rFileName, const uno::Any& /*UpdateLinks*/, const uno::Any& ReadOnly, const uno::Any& Format, const uno::Any& /*Password*/, const uno::Any& /*WriteResPassword*/, const uno::Any& /*IgnoreReadOnlyRecommended*/, const uno::Any& /*Origin*/, const uno::Any& Delimiter, const uno::Any& /*Editable*/, const uno::Any& /*Notify*/, const uno::Any& /*Converter*/, const uno::Any& /*AddToMru*/ ) throw (uno::RuntimeException)
 {
     // we need to detect if this is a URL, if not then assume its a file path
-        rtl::OUString aURL;
-        INetURLObject aObj;
+    rtl::OUString aURL;
+    INetURLObject aObj;
     aObj.SetURL( rFileName );
     bool bIsURL = aObj.GetProtocol() != INET_PROT_NOT_VALID;
     if ( bIsURL )
         aURL = rFileName;
     else
         osl::FileBase::getFileURLFromSystemPath( rFileName, aURL );
-    uno::Reference< lang::XMultiComponentFactory > xSMgr(
-        mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
-    uno::Reference< frame::XDesktop > xDesktop
-        (xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop")                    , mxContext),
-        uno::UNO_QUERY_THROW );
-    uno::Reference< frame::XComponentLoader > xLoader(
-        xSMgr->createInstanceWithContext(
-        ::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"),
-        mxContext),
-        uno::UNO_QUERY_THROW );
+
     uno::Sequence< beans::PropertyValue > sProps(0);
     sal_Int32 nIndex = 0;
     
@@ -418,30 +248,20 @@ ScVbaWorkbooks::Open( const rtl::OUString& rFileName, const uno::Any& /*UpdateLi
     else if ( !isSpreadSheetFile( sType ) )
         throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Bad Format")), uno::Reference< uno::XInterface >() );
     
-    if ( ReadOnly.hasValue()  )
-    {
-        sal_Bool bIsReadOnly = sal_False; ReadOnly >>= bIsReadOnly;
-        if ( bIsReadOnly )
-        {
-            static const rtl::OUString sReadOnly( RTL_CONSTASCII_USTRINGPARAM("ReadOnly") );
-            sProps.realloc( sProps.getLength() + 1 );
-            sProps[ nIndex ].Name = sReadOnly;
-            sProps[ nIndex++ ].Value = uno::makeAny( (sal_Bool)sal_True );
-        }
-    }
-
-    uno::Reference< lang::XComponent > xComponent = xLoader->loadComponentFromURL( aURL,
-        rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("_default") ),
-        frame::FrameSearchFlag::CREATE,
-        sProps);
-    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( xComponent, uno::UNO_QUERY_THROW );
-    uno::Any aRet = getWorkbook( mxContext, xSpreadDoc );
+    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( VbaDocumentsBase::Open( rFileName, ReadOnly, sProps ), uno::UNO_QUERY_THROW );
+    uno::Any aRet = getWorkbook( mxContext, xSpreadDoc, Application() );
     uno::Reference< excel::XWorkbook > xWBook( aRet, uno::UNO_QUERY );
     if ( xWBook.is() )
         xWBook->Activate();
     return aRet;
 }
 
+uno::Any
+ScVbaWorkbooks::Open( const rtl::OUString& Filename, const uno::Any& ReadOnly, const uno::Sequence< beans::PropertyValue >& rProps ) throw (css::uno::RuntimeException)
+{
+    return VbaDocumentsBase::Open( Filename, ReadOnly, rProps );
+}
+
 rtl::OUString& 
 ScVbaWorkbooks::getServiceImplName()
 {
diff --git a/sc/source/ui/vba/vbaworkbooks.hxx b/sc/source/ui/vba/vbaworkbooks.hxx
index f0df351..215eda0 100644
--- a/sc/source/ui/vba/vbaworkbooks.hxx
+++ b/sc/source/ui/vba/vbaworkbooks.hxx
@@ -28,21 +28,20 @@
 #define SC_VBA_WORKBOOKS_HXX
 
 
-#include "vbacollectionimpl.hxx"
-#include <ooo/vba/XGlobals.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
 #include <ooo/vba/excel/XWorkbooks.hpp>
 #include <com/sun/star/container/XEnumerationAccess.hpp>
-#include "vbahelper.hxx"
+#include <vbahelper/vbadocumentsbase.hxx>
+#include "excelvbahelper.hxx"
 
 
 class ScModelObj;
 
-typedef CollTestImplHelper< ov::excel::XWorkbooks > ScVbaWorkbooks_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaDocumentsBase, ov::excel::XWorkbooks > ScVbaWorkbooks_BASE;
 
 class ScVbaWorkbooks : public ScVbaWorkbooks_BASE
 {
 private:
-    css::uno::Reference< ov::XGlobals > getGlobals() throw (css::uno::RuntimeException);
     rtl::OUString 	getFileFilterType( const rtl::OUString& rString );
     bool 	isTextFile( const rtl::OUString& rString );
     bool 	isSpreadSheetFile( const rtl::OUString& rString );
@@ -65,6 +64,8 @@ public:
     virtual void SAL_CALL Close(  ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL Open( const ::rtl::OUString& Filename, const css::uno::Any& UpdateLinks, const css::uno::Any& ReadOnly, const css::uno::Any& Format, const css::uno::Any& Password, const css::uno::Any& WriteResPassword, const css::uno::Any& IgnoreReadOnlyRecommended, const css::uno::Any& Origin, const css::uno::Any& Delimiter, const css::uno::Any& Editable, const css::uno::Any& Notify, const css::uno::Any& Converter, const css::uno::Any& AddToMru ) throw (css::uno::RuntimeException);
 
+    // VbaDocumentsBase / XDocumentsBase (to avoid warning C4266 for hiding function on wntmsci)
+    virtual css::uno::Any SAL_CALL Open( const ::rtl::OUString& Filename, const css::uno::Any& ReadOnly, const css::uno::Sequence< css::beans::PropertyValue >& rProps ) throw (css::uno::RuntimeException);
 };
 
 #endif /* SC_VBA_WORKBOOKS_HXX */
diff --git a/sc/source/ui/vba/vbaworksheet.cxx b/sc/source/ui/vba/vbaworksheet.cxx
index 92cded0..d997d8d 100644
--- a/sc/source/ui/vba/vbaworksheet.cxx
+++ b/sc/source/ui/vba/vbaworksheet.cxx
@@ -24,11 +24,12 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#include "helperdecl.hxx"
+#include <vbahelper/helperdecl.hxx>
 #include <cppuhelper/queryinterface.hxx>
 
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/XIntrospectionAccess.hpp>
+#include <com/sun/star/beans/XIntrospection.hpp>
 #include <com/sun/star/container/XNamed.hpp>
 #include <com/sun/star/util/XProtectable.hpp>
 #include <com/sun/star/table/XCellRange.hpp>
@@ -55,6 +56,8 @@
 #include <com/sun/star/drawing/XControlShape.hpp>
 #include <com/sun/star/form/FormComponentType.hpp>
 #include <com/sun/star/form/XFormsSupplier.hpp>
+#include <ooo/vba/excel/XlEnableSelection.hpp>
+#include <ooo/vba/XControlProvider.hpp>
 
 #include <comphelper/processfactory.hxx>
 
@@ -79,10 +82,9 @@
 #include "vbaworksheet.hxx"
 #include "vbachartobjects.hxx"
 #include "vbapivottables.hxx"
-#include "vbacombobox.hxx"
 #include "vbaoleobject.hxx"
 #include "vbaoleobjects.hxx"
-#include "vbashapes.hxx"
+#include <vbahelper/vbashapes.hxx>
 #include "vbapagesetup.hxx"
 #include "vbapagebreaks.hxx"
 
@@ -91,7 +93,7 @@
 #define DOESNOTEXIST -1
 using namespace com::sun::star;
 using namespace ooo::vba;
-static bool
+bool
 nameExists( uno::Reference <sheet::XSpreadsheetDocument>& xSpreadDoc, ::rtl::OUString & name, SCTAB& nTab ) throw ( lang::IllegalArgumentException )
 {
     if (!xSpreadDoc.is())
@@ -254,6 +256,83 @@ ScVbaWorksheet::getIndex() throw (uno::RuntimeException)
     return getSheetID() + 1;
 }
 
+sal_Int32
+ScVbaWorksheet::getEnableSelection() throw (uno::RuntimeException)
+{
+    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( getModel(), uno::UNO_QUERY_THROW );
+    SCTAB nTab = 0;
+    rtl::OUString aSheetName = getName();
+    bool bSheetExists = nameExists (xSpreadDoc, aSheetName, nTab);
+    if ( bSheetExists )
+    {
+        uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
+        ScDocument* pDoc = excel::getDocShell( xModel )->GetDocument();
+        ScTableProtection* pProtect = pDoc->GetTabProtection(nTab);
+        sal_Bool bLockedCells = sal_False;
+        sal_Bool bUnlockedCells = sal_False;
+        if( pProtect )
+        {
+            bLockedCells   = pProtect->isOptionEnabled(ScTableProtection::SELECT_LOCKED_CELLS);
+            bUnlockedCells = pProtect->isOptionEnabled(ScTableProtection::SELECT_UNLOCKED_CELLS);
+        }
+        if( bLockedCells )
+            return excel::XlEnableSelection::xlNoRestrictions;
+        if( bUnlockedCells )
+            return excel::XlEnableSelection::xlUnlockedCells;
+        return excel::XlEnableSelection::xlNoSelection;
+    }
+    else
+        throw uno::RuntimeException(::rtl::OUString(
+                                RTL_CONSTASCII_USTRINGPARAM( "Sheet Name does not exist. ") ),
+                                uno::Reference< XInterface >() );
+    return excel::XlEnableSelection::xlNoSelection;
+}
+
+
+void
+ScVbaWorksheet::setEnableSelection( sal_Int32 nSelection ) throw (uno::RuntimeException)
+{
+    if( (nSelection != excel::XlEnableSelection::xlNoRestrictions) &&
+        (nSelection != excel::XlEnableSelection::xlUnlockedCells) &&
+        (nSelection != excel::XlEnableSelection::xlNoSelection) )
+    {
+        DebugHelper::exception(SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+
+    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( getModel(), uno::UNO_QUERY_THROW );
+    SCTAB nTab = 0;
+    rtl::OUString aSheetName = getName();
+    bool bSheetExists = nameExists (xSpreadDoc, aSheetName, nTab);
+    if ( bSheetExists )
+    {
+        uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
+        ScDocument* pDoc = excel::getDocShell( xModel )->GetDocument();
+        ScTableProtection* pProtect = pDoc->GetTabProtection(nTab);
+        // default is xlNoSelection
+        sal_Bool bLockedCells = sal_False;
+        sal_Bool bUnlockedCells = sal_False;
+        if( nSelection == excel::XlEnableSelection::xlNoRestrictions )
+        {
+            bLockedCells = sal_True;
+            bUnlockedCells = sal_True;
+        }
+        else if( nSelection == excel::XlEnableSelection::xlUnlockedCells )
+        {
+            bUnlockedCells = sal_True;
+        }
+        if( pProtect )
+        {
+            pProtect->setOption( ScTableProtection::SELECT_LOCKED_CELLS, bLockedCells );
+            pProtect->setOption( ScTableProtection::SELECT_UNLOCKED_CELLS, bUnlockedCells );
+        }
+    }
+    else
+        throw uno::RuntimeException(::rtl::OUString(
+                                RTL_CONSTASCII_USTRINGPARAM( "Sheet Name does not exist. ") ),
+                                uno::Reference< XInterface >() );
+
+}
+
 uno::Reference< excel::XRange > 
 ScVbaWorksheet::getUsedRange() throw (uno::RuntimeException)
 {
@@ -289,6 +368,16 @@ ScVbaWorksheet::HPageBreaks( const uno::Any& aIndex ) throw (uno::RuntimeExcepti
    return uno::makeAny( xHPageBreaks );
 }
 
+uno::Any
+ScVbaWorksheet::VPageBreaks( const uno::Any& aIndex ) throw ( uno::RuntimeException )
+{
+    uno::Reference< sheet::XSheetPageBreak > xSheetPageBreak( getSheet(), uno::UNO_QUERY_THROW );
+    uno::Reference< excel::XVPageBreaks > xVPageBreaks( new ScVbaVPageBreaks( this, mxContext, xSheetPageBreak ) );
+    if( aIndex.hasValue() )
+        return xVPageBreaks->Item( aIndex, uno::Any());
+    return uno::makeAny( xVPageBreaks );
+}
+
 sal_Int32 
 ScVbaWorksheet::getStandardWidth() throw (uno::RuntimeException)
 {
@@ -350,11 +439,11 @@ ScVbaWorksheet::Move( const uno::Any& Before, const uno::Any& After ) throw (uno
         uno::Reference<excel::XRange> xRange =  new ScVbaRange( this, mxContext, xRange1);
         if (xRange.is())
             xRange->Select();
-        implnCopy();
+        excel::implnCopy(mxModel);
         uno::Reference<frame::XModel> xModel = openNewDoc(aCurrSheetName);
         if (xModel.is()) 
         {
-            implnPaste();
+            excel::implnPaste(xModel);
             Delete();
         }
         return ;
@@ -388,11 +477,11 @@ ScVbaWorksheet::Copy( const uno::Any& Before, const uno::Any& After ) throw (uno
         uno::Reference<excel::XRange> xRange =  new ScVbaRange( this, mxContext, xRange1);
         if (xRange.is())
             xRange->Select();
-        implnCopy();
+        excel::implnCopy(mxModel);
         uno::Reference<frame::XModel> xModel = openNewDoc(aCurrSheetName);
         if (xModel.is())
         {
-            implnPaste();
+            excel::implnPaste(xModel);
         }
         return;
     }
@@ -421,7 +510,7 @@ ScVbaWorksheet::Paste( const uno::Any& Destination, const uno::Any& /*Link*/ ) t
     uno::Reference<excel::XRange> xRange( Destination, uno::UNO_QUERY );
     if ( xRange.is() )
         xRange->Select();
-    implnPaste();
+    excel::implnPaste( mxModel );
 }
 
 void 
@@ -621,7 +710,7 @@ ScVbaWorksheet::Shapes( const uno::Any& aIndex ) throw (uno::RuntimeException)
     uno::Reference< drawing::XShapes > xShapes( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
     uno::Reference< container::XIndexAccess > xIndexAccess( xShapes, uno::UNO_QUERY_THROW );
 
-   uno::Reference< msforms::XShapes> xVbaShapes( new ScVbaShapes( this, mxContext, xIndexAccess ) );
+   uno::Reference< msforms::XShapes> xVbaShapes( new ScVbaShapes( this, mxContext, xIndexAccess, getModel() ) );
    if ( aIndex.hasValue() )
       return xVbaShapes->Item( aIndex, uno::Any() ); 
    return uno::makeAny( xVbaShapes );
@@ -632,7 +721,7 @@ ScVbaWorksheet::ShowDataForm( ) throw (uno::RuntimeException)
 {
 #ifdef VBA_OOBUILD_HACK 
     uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );
-    ScTabViewShell* pTabViewShell = getBestViewShell( xModel );
+    ScTabViewShell* pTabViewShell = excel::getBestViewShell( xModel );
 
     ScAbstractDialogFactory* pFact = ScAbstractDialogFactory::Create();
     DBG_ASSERT(pFact, "ScAbstractFactory create fail!");//CHINA001
@@ -673,16 +762,18 @@ ScVbaWorksheet::invoke( const ::rtl::OUString& aFunctionName, const uno::Sequenc
 }
 
 void SAL_CALL 
-ScVbaWorksheet::setValue( const ::rtl::OUString& /*aPropertyName*/, const uno::Any& /*aValue*/ ) throw (beans::UnknownPropertyException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
+ScVbaWorksheet::setValue( const ::rtl::OUString& aPropertyName, const uno::Any& aValue ) throw (beans::UnknownPropertyException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
 {
-    throw uno::RuntimeException(); // unsupported operation
+    setDefaultPropByIntrospection( uno::makeAny( getValue( aPropertyName ) ), aValue );
 }
 uno::Any SAL_CALL 
 ScVbaWorksheet::getValue( const ::rtl::OUString& aPropertyName ) throw (beans::UnknownPropertyException, uno::RuntimeException)
 {
     uno::Reference< drawing::XControlShape > xControlShape( getControlShape( aPropertyName ), uno::UNO_QUERY_THROW );
-    ScVbaControlFactory controlFactory( mxContext, xControlShape, getModel() );
-    uno::Reference< msforms::XControl > xControl( controlFactory.createControl( getModel() ) );
+
+    uno::Reference<lang::XMultiComponentFactory > xServiceManager( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< XControlProvider > xControlProvider( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.ControlProvider" ) ), mxContext ), uno::UNO_QUERY_THROW );
+    uno::Reference< msforms::XControl > xControl( xControlProvider->createControl(  xControlShape, getModel() ) );
     return uno::makeAny( xControl );
 }
 
@@ -866,10 +957,9 @@ ScVbaWorksheet::PrintOut( const uno::Any& From, const uno::Any& To, const uno::A
         bSelection = sal_True;
 
     uno::Reference< frame::XModel > xModel( getModel(), uno::UNO_QUERY_THROW );  
-    PrintOutHelper( From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, xModel, bSelection );
+    PrintOutHelper( excel::getBestViewShell( xModel ), From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, bSelection );
 }
 
-
 namespace worksheet
 {
 namespace sdecl = comphelper::service_decl;
diff --git a/sc/source/ui/vba/vbaworksheet.hxx b/sc/source/ui/vba/vbaworksheet.hxx
index 7128279..4f9a470 100644
--- a/sc/source/ui/vba/vbaworksheet.hxx
+++ b/sc/source/ui/vba/vbaworksheet.hxx
@@ -41,9 +41,11 @@
 #include <ooo/vba/excel/XOutline.hpp>
 #include <ooo/vba/excel/XPageSetup.hpp>
 #include <ooo/vba/excel/XHPageBreaks.hpp>
+#include <ooo/vba/excel/XVPageBreaks.hpp>
 #include <ooo/vba/excel/XChartObjects.hpp>
 
-#include "vbahelperinterface.hxx"
+#include <vbahelper/vbahelperinterface.hxx>
+#include "address.hxx"
 
 typedef InheritedHelperInterfaceImpl1< ov::excel::XWorksheet >  WorksheetImpl_BASE;
 
@@ -90,9 +92,12 @@ public:
     virtual css::uno::Reference< ov::excel::XOutline > SAL_CALL Outline( ) throw (css::uno::RuntimeException);
     virtual css::uno::Reference< ov::excel::XPageSetup > SAL_CALL PageSetup( ) throw (css::uno::RuntimeException);
     virtual css::uno::Any SAL_CALL HPageBreaks( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL VPageBreaks( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
     virtual css::uno::Reference< ov::excel::XWorksheet > SAL_CALL getNext() throw (css::uno::RuntimeException);
     virtual css::uno::Reference< ov::excel::XWorksheet > SAL_CALL getPrevious() throw (css::uno::RuntimeException);
      virtual sal_Int16 SAL_CALL getIndex() throw (css::uno::RuntimeException);
+	virtual sal_Int32 SAL_CALL getEnableSelection() throw (css::uno::RuntimeException);
+	virtual void SAL_CALL setEnableSelection( sal_Int32 nSelection ) throw (css::uno::RuntimeException);
 
     // Methods
     virtual void SAL_CALL Activate() throw (css::uno::RuntimeException);
diff --git a/sc/source/ui/vba/vbaworksheets.cxx b/sc/source/ui/vba/vbaworksheets.cxx
index 2bda3ef..d41d0f7 100644
--- a/sc/source/ui/vba/vbaworksheets.cxx
+++ b/sc/source/ui/vba/vbaworksheets.cxx
@@ -206,16 +206,29 @@ ScVbaWorksheets::Add( const uno::Any& Before, const uno::Any& After,
     Count >>= nNewSheets;
     Type >>= nType;
     SCTAB nCount = 0;
-    Before >>= aStringSheet;
-    if (!aStringSheet.getLength())
+
+    uno::Reference< excel::XWorksheet > xBeforeAfterSheet;
+
+    if ( Before.hasValue() )
     {
-        After >>= aStringSheet;
+            if ( Before >>= xBeforeAfterSheet )
+            aStringSheet = xBeforeAfterSheet->getName();
+        else
+            Before >>= aStringSheet;
+    }
+
+    if (!aStringSheet.getLength() && After.hasValue() )
+    {
+            if ( After >>= xBeforeAfterSheet )
+            aStringSheet = xBeforeAfterSheet->getName();
+        else
+            After >>= aStringSheet;
         bBefore = sal_False;
     }
     if (!aStringSheet.getLength())
     {
-        aStringSheet = ScVbaGlobals::getGlobalsImpl( 
-            mxContext )->getApplication()->getActiveWorkbook()->getActiveSheet()->getName();
+        uno::Reference< excel::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+        aStringSheet = xApplication->getActiveWorkbook()->getActiveSheet()->getName();
         bBefore = sal_True;
     }
         nCount = static_cast< SCTAB >( m_xIndexAccess->getCount() );
@@ -249,7 +262,9 @@ ScVbaWorksheets::Add( const uno::Any& Before, const uno::Any& After,
         m_xSheets->insertNewByName(aStringName, nSheetIndex + i);
         result = getItemByStringIndex( aStringName );
     }
-    
+    uno::Reference< excel::XWorksheet > xNewSheet( result, uno::UNO_QUERY );
+    if ( xNewSheet.is() )
+        xNewSheet->Activate();
     return  result;
 }
 
@@ -292,7 +307,7 @@ ScVbaWorksheets::PrintOut( const uno::Any& From, const uno::Any& To, const uno::
         if ( isSelectedSheets() )
             bSelection = sal_True;
 
-    PrintOutHelper( From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, mxModel, bSelection );
+    PrintOutHelper( excel::getBestViewShell( mxModel ), From, To, Copies, Preview, ActivePrinter, PrintToFile, Collate, PrToFileName, bSelection );
 }
 
 uno::Any SAL_CALL 
@@ -333,7 +348,7 @@ ScVbaWorksheets::setVisible( const uno::Any& _visible ) throw (uno::RuntimeExcep
 void SAL_CALL 
 ScVbaWorksheets::Select( const uno::Any& Replace ) throw (uno::RuntimeException)
 {
-    ScTabViewShell* pViewShell = getBestViewShell( mxModel );
+    ScTabViewShell* pViewShell = excel::getBestViewShell( mxModel );
     if ( !pViewShell )
         throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Cannot obtain view shell" ) ), uno::Reference< uno::XInterface >() );
             
diff --git a/sc/source/ui/vba/vbaworksheets.hxx b/sc/source/ui/vba/vbaworksheets.hxx
index 07ed80d..4e5da65 100644
--- a/sc/source/ui/vba/vbaworksheets.hxx
+++ b/sc/source/ui/vba/vbaworksheets.hxx
@@ -33,9 +33,8 @@
 #include <com/sun/star/sheet/XSpreadsheets.hpp>
 #include <com/sun/star/container/XEnumerationAccess.hpp>
 #include <com/sun/star/uno/XComponentContext.hpp>
-#include <ooo/vba/XGlobals.hpp>
  
-#include "vbacollectionimpl.hxx"
+#include <vbahelper/vbacollectionimpl.hxx>
 
 class ScModelObj;
 
diff --git a/sc/source/ui/view/viewdata.cxx b/sc/source/ui/view/viewdata.cxx
index b4ee2bc..790f818 100644
--- a/sc/source/ui/view/viewdata.cxx
+++ b/sc/source/ui/view/viewdata.cxx
@@ -647,68 +647,105 @@ void ScViewData::SetViewShell( ScTabViewShell* pViewSh )
         pView		= NULL;
     }
 }
+void ScViewData::CreateTabData( std::vector< SCTAB >& rvTabs )
+{
+    std::vector< SCTAB >::iterator it_end = rvTabs.end();
+    for ( std::vector< SCTAB >::iterator it = rvTabs.begin(); it != it_end; ++it )
+        if ( !pTabData[*it] )
+            CreateTabData( *it );
+}
 
-void ScViewData::SetZoomType( SvxZoomType eNew, BOOL bAll )
+void ScViewData::SetZoomType( SvxZoomType eNew, std::vector< SCTAB >& tabs )
 {
-    if ( !bAll )
-        CreateSelectedTabData();    // if zoom is set for a table, it must be stored
+    BOOL bAll = ( tabs.size() == 0 );
 
-    for ( SCTAB i = 0; i <= MAXTAB; i++ )
-        if ( pTabData[i] && ( bAll || aMarkData.GetTableSelect(i) ) )
+    if ( !bAll ) // create associated table data
+        CreateTabData( tabs );
+
+    std::vector< SCTAB >::iterator it_end = tabs.end();
+    std::vector< SCTAB >::iterator it = tabs.begin();
+    for ( SCTAB i = ( bAll ? 0 : *it ); ( bAll ? i <= MAXTAB :  it != it_end  ); ++i , ++it )
+    {
+        if ( pTabData[i] )
             pTabData[i]->eZoomType = eNew;
+    }
 
     if ( bAll )
         eDefZoomType = eNew;
 }
 
-void ScViewData::SetZoom( const Fraction& rNewX, const Fraction& rNewY, BOOL bAll )
+void ScViewData::SetZoomType( SvxZoomType eNew, BOOL bAll )
 {
-    if ( !bAll )
-        CreateSelectedTabData();    // if zoom is set for a table, it must be stored
+    std::vector< SCTAB > vTabs; // Empty for all tabs
+    if ( !bAll ) // get selected tabs
+    {
+        SCTAB nTabCount = pDoc->GetTableCount();
+        for (SCTAB i=0; i<nTabCount; i++)
+        {
+            if ( aMarkData.GetTableSelect(i)  )
+                vTabs.push_back( i );
+        }
+    }
+    SetZoomType( eNew, vTabs );
+}
 
+void ScViewData::SetZoom( const Fraction& rNewX, const Fraction& rNewY, std::vector< SCTAB >& tabs )
+{
+    BOOL bAll = ( tabs.size() == 0 );
+    if ( !bAll ) // create associated table data
+        CreateTabData( tabs );
     Fraction aFrac20( 1,5 );
     Fraction aFrac400( 4,1 );
 
     Fraction aValidX = rNewX;
-    if (aValidX<aFrac20) aValidX = aFrac20;
-    if (aValidX>aFrac400) aValidX = aFrac400;
+    if (aValidX<aFrac20)
+        aValidX = aFrac20;
+    if (aValidX>aFrac400)
+        aValidX = aFrac400;
 
     Fraction aValidY = rNewY;
-    if (aValidY<aFrac20) aValidY = aFrac20;
-    if (aValidY>aFrac400) aValidY = aFrac400;
+    if (aValidY<aFrac20)
+        aValidY = aFrac20;
+    if (aValidY>aFrac400)
+        aValidY = aFrac400;
 
-    if ( bPagebreak )
+    std::vector< SCTAB >::iterator it_end = tabs.end();
+    std::vector< SCTAB >::iterator it = tabs.begin();
+
+    for ( SCTAB i = ( bAll ? 0 : *it ); ( bAll ? i <= MAXTAB :  it != it_end  ); ++i , ++it )
     {
-        for ( SCTAB i = 0; i <= MAXTAB; i++ )
-            if ( pTabData[i] && ( bAll || aMarkData.GetTableSelect(i) ) )
+        if ( pTabData[i] )
+        {
+            if ( bPagebreak )
             {
                 pTabData[i]->aPageZoomX = aValidX;
                 pTabData[i]->aPageZoomY = aValidY;
             }
-        if ( bAll )
-        {
-            aDefPageZoomX = aValidX;
-            aDefPageZoomY = aValidY;
-        }
-    }
-    else
-    {
-        for ( SCTAB i = 0; i <= MAXTAB; i++ )
-            if ( pTabData[i] && ( bAll || aMarkData.GetTableSelect(i) ) )
+            else
             {
                 pTabData[i]->aZoomX = aValidX;
                 pTabData[i]->aZoomY = aValidY;
             }
-        if ( bAll )
-        {
-            aDefZoomX = aValidX;
-            aDefZoomY = aValidY;
         }
     }
-
     RefreshZoom();
 }
 
+void ScViewData::SetZoom( const Fraction& rNewX, const Fraction& rNewY, BOOL bAll )
+{
+    std::vector< SCTAB > vTabs;
+    if ( !bAll ) // get selected tabs
+    {
+        SCTAB nTabCount = pDoc->GetTableCount();
+        for (SCTAB i=0; i<nTabCount; i++)
+        {
+            if ( aMarkData.GetTableSelect(i)  )
+                vTabs.push_back( i );
+        }
+    }
+    SetZoom( rNewX, rNewY, vTabs );
+}
+
 void ScViewData::SetShowGrid( bool bShow )
 {
     CreateSelectedTabData();
diff --git a/sc/util/makefile.mk b/sc/util/makefile.mk
index b1ee141..0af97c5 100644
--- a/sc/util/makefile.mk
+++ b/sc/util/makefile.mk
@@ -75,6 +75,7 @@ SHL1IMPLIB= sci
 
 # dynamic libraries
 SHL1STDLIBS=       \
+        $(VBAHELPERLIB) \
     $(BASICLIB)	\
     $(SFXLIB)		\
     $(SVTOOLLIB)	\
@@ -299,6 +300,7 @@ SHL9RPATH=OOO
 .ENDIF
 
 SHL9STDLIBS= \
+        $(VBAHELPERLIB) \
         $(CPPUHELPERLIB) \
         $(VCLLIB) \
         $(CPPULIB) \
@@ -314,6 +316,7 @@ SHL9STDLIBS= \
         $(ISCLIB) \
         $(VCLLIB) \
         $(TKLIB) \
+        $(SVXMSFILTERLIB)		\
         $(FORLIB)
 
 SHL9DEPN=$(SHL1TARGETN) $(SHL8TARGETN)
diff --git a/scp2/source/ooo/file_library_ooo.scp b/scp2/source/ooo/file_library_ooo.scp
index e8ece20..5cb021d 100644
--- a/scp2/source/ooo/file_library_ooo.scp
+++ b/scp2/source/ooo/file_library_ooo.scp
@@ -406,7 +406,42 @@ File gid_File_Lib_Vbaobj
   #endif
 End
 
+File gid_File_Lib_Vbaswobj
+    TXT_FILE_BODY;
+    Styles = (PACKED,UNO_COMPONENT);
+    RegistryID = gid_Starregistry_Services_Rdb;
+    Dir = gid_Dir_Program;
+  #ifdef UNX
+    Name = STRING(CONCAT4(libvbaswobj,DLLPOSTFIX,.uno,UNXSUFFIX));
+  #else
+    Name = STRING(CONCAT4(vbaswobj,DLLPOSTFIX,.uno,.dll));
+  #endif
+End
+
+File gid_File_Lib_Vbamsforms
+    TXT_FILE_BODY;
+    Styles = (PACKED,UNO_COMPONENT);
+    RegistryID = gid_Starregistry_Services_Rdb;
+    Dir = gid_Dir_Program;
+  #ifdef UNX
+    Name = STRING(CONCAT4(libmsforms,DLLPOSTFIX,.uno,UNXSUFFIX));
+  #else
+    Name = STRING(CONCAT4(msforms,DLLPOSTFIX,.uno,.dll));
+  #endif
+End
+
 #endif // VBA_EXTENSION
+File gid_File_Lib_Vbahelper
+    TXT_FILE_BODY;
+    Styles = (PACKED);
+    RegistryID = gid_Starregistry_Services_Rdb;
+    Dir = SCP2_OOO_BIN_DIR;
+  #ifdef UNX
+    Name = STRING(CONCAT3(libvbahelper,DLLPOSTFIX,UNXSUFFIX));
+  #else
+    Name = STRING(CONCAT3(vbahelper,DLLPOSTFIX,.dll));
+  #endif
+End
 #endif // ENABLE_VBA
 
 
diff --git a/sfx2/inc/sfx2/objsh.hxx b/sfx2/inc/sfx2/objsh.hxx
index f9534a6..78b0907 100644
--- a/sfx2/inc/sfx2/objsh.hxx
+++ b/sfx2/inc/sfx2/objsh.hxx
@@ -258,6 +258,7 @@ public:
                                 TYPEINFO();
                                 SFX_DECL_INTERFACE(SFX_INTERFACE_SFXDOCSH)
 
+    static const com::sun::star::uno::Sequence<sal_Int8>& getUnoTunnelId();
     /* Stampit disable/enable cancel button for print jobs
        default = true = enable! */
     void                        Stamp_SetPrintCancelState(sal_Bool bState);
@@ -886,6 +887,7 @@ public:
     virtual	sal_Bool		PutValue( const com::sun::star::uno::Any& rVal, BYTE nMemberId = 0 );
     SfxObjectShell* 		GetObjectShell() const
                             { return pObjSh; }
+
 };
 
 #endif
diff --git a/sfx2/source/doc/objcont.cxx b/sfx2/source/doc/objcont.cxx
index d05ea3e..30f30f7 100644
--- a/sfx2/source/doc/objcont.cxx
+++ b/sfx2/source/doc/objcont.cxx
@@ -1420,31 +1420,35 @@ sal_Bool SfxObjectShell::IsHelpDocument() const
 
 void SfxObjectShell::ResetFromTemplate( const String& rTemplateName, const String& rFileName )
 {
-    uno::Reference<document::XDocumentProperties> xDocProps(getDocProperties());
-    xDocProps->setTemplateURL( ::rtl::OUString() );
-    xDocProps->setTemplateName( ::rtl::OUString() );
-    xDocProps->setTemplateDate( util::DateTime() );
-    xDocProps->resetUserData( ::rtl::OUString() );
+    // only care about reseting this data for openoffice formats otherwise
+    if ( IsOwnStorageFormat_Impl( *GetMedium())  )
+    {
+        uno::Reference<document::XDocumentProperties> xDocProps(getDocProperties());
+        xDocProps->setTemplateURL( ::rtl::OUString() );
+        xDocProps->setTemplateName( ::rtl::OUString() );
+        xDocProps->setTemplateDate( util::DateTime() );
+        xDocProps->resetUserData( ::rtl::OUString() );
 
-    // TODO/REFACTOR:
-    // Title?
+        // TODO/REFACTOR:
+        // Title?
 
-    if( ::utl::LocalFileHelper::IsLocalFile( rFileName ) )
-    {
-        String aFoundName;
-        if( SFX_APP()->Get_Impl()->GetDocumentTemplates()->GetFull( String(), rTemplateName, aFoundName ) )
+        if( ::utl::LocalFileHelper::IsLocalFile( rFileName ) )
         {
-            INetURLObject aObj( rFileName );
-            xDocProps->setTemplateURL( aObj.GetMainURL(INetURLObject::DECODE_TO_IURI) );
-            xDocProps->setTemplateName( rTemplateName );
+            String aFoundName;
+            if( SFX_APP()->Get_Impl()->GetDocumentTemplates()->GetFull( String(), rTemplateName, aFoundName ) )
+            {
+                INetURLObject aObj( rFileName );
+                xDocProps->setTemplateURL( aObj.GetMainURL(INetURLObject::DECODE_TO_IURI) );
+                xDocProps->setTemplateName( rTemplateName );
 
-            ::DateTime now;
-            xDocProps->setTemplateDate( util::DateTime(
-                now.Get100Sec(), now.GetSec(), now.GetMin(),
-                now.GetHour(), now.GetDay(), now.GetMonth(),
-                now.GetYear() ) );
+                ::DateTime now;
+                xDocProps->setTemplateDate( util::DateTime(
+                    now.Get100Sec(), now.GetSec(), now.GetMin(),
+                    now.GetHour(), now.GetDay(), now.GetMonth(),
+                    now.GetYear() ) );
 
-            SetQueryLoadTemplate( sal_True );
+                SetQueryLoadTemplate( sal_True );
+            }
         }
     }
 }
diff --git a/sfx2/source/doc/objserv.cxx b/sfx2/source/doc/objserv.cxx
index 85d1802..464d4cd 100644
--- a/sfx2/source/doc/objserv.cxx
+++ b/sfx2/source/doc/objserv.cxx
@@ -1509,3 +1509,19 @@ void SfxObjectShell::SignScriptingContent()
     ImplSign( TRUE );
 }
 
+// static
+const uno::Sequence<sal_Int8>& SfxObjectShell::getUnoTunnelId()
+{
+    static uno::Sequence<sal_Int8> * pSeq = 0;
+    if( !pSeq )
+    {
+        osl::Guard< osl::Mutex > aGuard( osl::Mutex::getGlobalMutex() );
+        if( !pSeq )
+        {
+            static uno::Sequence< sal_Int8 > aSeq( 16 );
+            rtl_createUuid( (sal_uInt8*)aSeq.getArray(), 0, sal_True );
+            pSeq = &aSeq;
+        }
+    }
+    return *pSeq;
+}
diff --git a/solenv/inc/libs.mk b/solenv/inc/libs.mk
index 58adb55..86152b7 100644
--- a/solenv/inc/libs.mk
+++ b/solenv/inc/libs.mk
@@ -183,6 +183,7 @@ SAXLIB=-lsax$(DLLPOSTFIX)
 MAILLIB=-lmail
 DOCMGRLIB=-ldmg$(DLLPOSTFIX)
 BASICLIB=-lsb$(DLLPOSTFIX)
+VBAHELPERLIB=-lvbahelper$(DLLPOSTFIX)
 DBTOOLSLIB=-ldbtools$(DLLPOSTFIX)
 HM2LIBSH=-lhmwrpdll
 HM2LIBST=-lhmwrap
@@ -424,6 +425,7 @@ SAXLIB=isax.lib
 MAILLIB=mail.lib
 DOCMGRLIB=docmgr.lib
 BASICLIB=basic.lib
+VBAHELPERLIB=vbahelper.lib
 TKTLIB=tkt.lib
 SJLIB=sj.lib
 SVXCORELIB=isvxcore.lib
diff --git a/svx/inc/svx/msvbahelper.hxx b/svx/inc/svx/msvbahelper.hxx
new file mode 100644
index 0000000..b1db442
--- /dev/null
+++ b/svx/inc/svx/msvbahelper.hxx
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef _MSVBAHELPER_HXX
+#define _MSVBAHELPER_HXX
+
+#include <sfx2/objsh.hxx>
+#include "svx/svxdllapi.h"
+
+namespace ooo { namespace vba
+{
+    class SVX_DLLPUBLIC VBAMacroResolvedInfo
+    {
+        SfxObjectShell* mpDocContext;
+        bool mbFound;
+        String msResolvedMacro;
+        public:
+        VBAMacroResolvedInfo() : mpDocContext(NULL), mbFound( false ){}
+        void SetResolved( bool bRes ) { mbFound = bRes; }
+        bool IsResolved() { return mbFound; }
+        void SetMacroDocContext(SfxObjectShell* pShell )  { mpDocContext = pShell; }
+        SfxObjectShell* MacroDocContext() { return mpDocContext; }
+        String ResolvedMacro() { return msResolvedMacro; }
+        void SetResolvedMacro(const String& sMacro ) { msResolvedMacro = sMacro; }
+    };
+
+    SVX_DLLPUBLIC String makeMacroURL( const String& sMacroName );
+    SVX_DLLPUBLIC  VBAMacroResolvedInfo resolveVBAMacro( SfxObjectShell* pShell, const rtl::OUString& sMod, bool bSearchGlobalTemplates = false );
+    SVX_DLLPUBLIC sal_Bool executeMacro( SfxObjectShell* pShell, const String& sMacroName, com::sun::star::uno::Sequence< com::sun::star::uno::Any >& aArgs, com::sun::star::uno::Any& aRet, const com::sun::star::uno::Any& aCaller );
+} }
+
+#endif
diff --git a/svx/prj/d.lst b/svx/prj/d.lst
index 7edc2fb..acbb689 100644
--- a/svx/prj/d.lst
+++ b/svx/prj/d.lst
@@ -658,5 +658,6 @@ mkdir: %_DEST%\inc%_EXT%\svx\sdr\table
 ..\inc\svx\selectioncontroller.hxx %_DEST%\inc%_EXT%\svx\selectioncontroller.hxx
 ..\inc\svx\helperhittest3d.hxx %_DEST%\inc%_EXT%\svx\helperhittest3d.hxx
 ..\inc\svx\optimprove.hxx %_DEST%\inc%_EXT%\svx\optimprove.hxx
+..\inc\svx\msvbahelper.hxx %_DEST%\inc%_EXT%\svx\msvbahelper.hxx
 
 ..\%__SRC%\bin\*-layout.zip %_DEST%\pck%_EXT%\*.*
diff --git a/svx/source/msfilter/makefile.mk b/svx/source/msfilter/makefile.mk
index 29a8a3d..7bb6e1e 100644
--- a/svx/source/msfilter/makefile.mk
+++ b/svx/source/msfilter/makefile.mk
@@ -50,7 +50,8 @@ LIB1OBJFILES= \
     $(SLO)$/svxmsbas.obj	\
     $(SLO)$/msocximex.obj	\
     $(SLO)$/mscodec.obj		\
-    $(SLO)$/msfiltertracer.obj
+    $(SLO)$/msfiltertracer.obj \
+    $(SLO)$/msvbahelper.obj\
 
 LIB2TARGET= $(SLB)$/$(TARGET)-core.lib
 LIB2OBJFILES= \
@@ -66,7 +67,8 @@ EXCEPTIONSFILES= \
     $(SLO)$/msocximex.obj	\
     $(SLO)$/msoleexp.obj	\
     $(SLO)$/svxmsbas.obj	\
-    $(SLO)$/msfiltertracer.obj
+    $(SLO)$/msfiltertracer.obj \
+    $(SLO)$/msvbahelper.obj\
 
 .INCLUDE :  target.mk
 
diff --git a/svx/source/msfilter/msvbahelper.cxx b/svx/source/msfilter/msvbahelper.cxx
new file mode 100644
index 0000000..5b24af6
--- /dev/null
+++ b/svx/source/msfilter/msvbahelper.cxx
@@ -0,0 +1,384 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#include "precompiled_svx.hxx"
+#include <svx/msvbahelper.hxx>
+#include <basic/sbx.hxx>
+#include <basic/sbstar.hxx>
+#include <basic/basmgr.hxx>
+#include <basic/sbmod.hxx>
+#include <basic/sbmeth.hxx>
+#include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+#include <com/sun/star/document/XDocumentProperties.hpp>
+#include <com/sun/star/document/XDocumentInfoSupplier.hpp>
+#include <tools/urlobj.hxx>
+#include <osl/file.hxx>
+
+using namespace ::com::sun::star;
+
+const static rtl::OUString sUrlPart0 = rtl::OUString::createFromAscii( "vnd.sun.star.script:");
+const static rtl::OUString sUrlPart1 = rtl::OUString::createFromAscii( "?language=Basic&location=document");
+
+namespace ooo { namespace vba {
+
+String makeMacroURL( const String& sMacroName )
+{
+    return sUrlPart0.concat( sMacroName ).concat( sUrlPart1 ) ;
+}
+
+SfxObjectShell* findShellForUrl( const rtl::OUString& sMacroURLOrPath )
+{
+    SfxObjectShell* pFoundShell=NULL;
+    SfxObjectShell* pShell = SfxObjectShell::GetFirst();
+    INetURLObject aObj;
+    aObj.SetURL( sMacroURLOrPath );
+    bool bIsURL = aObj.GetProtocol() != INET_PROT_NOT_VALID;
+    rtl::OUString aURL;
+    if ( bIsURL )
+        aURL = sMacroURLOrPath;
+    else
+    {
+        osl::FileBase::getFileURLFromSystemPath( sMacroURLOrPath, aURL );
+        aObj.SetURL( aURL );
+    }
+    OSL_TRACE("Trying to find shell for url %s", rtl::OUStringToOString( aURL, RTL_TEXTENCODING_UTF8 ).getStr() );
+    while ( pShell )
+    {
+
+        uno::Reference< frame::XModel > xModel = pShell->GetModel();
+        // are we searching for a template? if so we have to cater for the
+        // fact that in openoffice a document opened from a template is always
+        // a new document :/
+        if ( xModel.is() )
+        {
+            OSL_TRACE("shell 0x%x has model with url %s and we look for %s", pShell
+                , rtl::OUStringToOString( xModel->getURL(), RTL_TEXTENCODING_UTF8 ).getStr()
+                , rtl::OUStringToOString( aURL, RTL_TEXTENCODING_UTF8 ).getStr()
+            );
+            if ( sMacroURLOrPath.endsWithIgnoreAsciiCaseAsciiL( ".dot", 4 ) )
+            {
+                uno::Reference< document::XDocumentInfoSupplier > xDocInfoSupp( xModel, uno::UNO_QUERY );
+                if( xDocInfoSupp.is() )
+                {
+                    uno::Reference< document::XDocumentPropertiesSupplier > xDocPropSupp( xDocInfoSupp->getDocumentInfo(), uno::UNO_QUERY_THROW );
+                    uno::Reference< document::XDocumentProperties > xDocProps( xDocPropSupp->getDocumentProperties(), uno::UNO_QUERY_THROW );
+                    rtl::OUString sCurrName = xDocProps->getTemplateName();
+                    if( sMacroURLOrPath.lastIndexOf( sCurrName ) >= 0 )
+                    {
+                        pFoundShell = pShell;
+                        break;
+                    }
+                }
+            }
+            else
+            {
+                if ( aURL.equals( xModel->getURL() ) )
+                {
+                    pFoundShell = pShell;
+                    break;
+                }
+            }
+        }
+        pShell = SfxObjectShell::GetNext( *pShell );
+    }
+    return pFoundShell;
+}
+
+// sMod can be empty ( but we really need the library to search in )
+// if sMod is empty and a macro is found then sMod is updated
+bool hasMacro( SfxObjectShell* pShell, const String& sLibrary, String& sMod, const String& sMacro )
+{
+    bool bFound = false;
+    if ( sLibrary.Len() && sMacro.Len() )
+    {
+        OSL_TRACE("** Searching for %s.%s in library %s"
+            ,rtl::OUStringToOString( sMod, RTL_TEXTENCODING_UTF8 ).getStr()
+            ,rtl::OUStringToOString( sMacro, RTL_TEXTENCODING_UTF8 ).getStr()
+            ,rtl::OUStringToOString( sLibrary, RTL_TEXTENCODING_UTF8 ).getStr() );
+        BasicManager* pBasicMgr = pShell-> GetBasicManager();
+        if ( pBasicMgr )
+        {
+            StarBASIC* pBasic = pBasicMgr->GetLib( sLibrary );
+            if ( !pBasic )
+            {
+                USHORT nId = pBasicMgr->GetLibId( sLibrary );
+                pBasicMgr->LoadLib( nId );
+                pBasic = pBasicMgr->GetLib( sLibrary );
+            }
+            if ( pBasic )
+            {
+                if ( sMod.Len() ) // we wish to find the macro is a specific module
+                {
+                    SbModule* pModule = pBasic->FindModule( sMod );
+                    if ( pModule )
+                    {
+                        SbxArray* pMethods = pModule->GetMethods();
+                        if ( pMethods )
+                        {
+                            SbMethod* pMethod = static_cast< SbMethod* >( pMethods->Find( sMacro, SbxCLASS_METHOD ) );
+                            if ( pMethod )
+                              bFound = true;
+                        }
+                    }
+                }
+                else if( SbMethod* pMethod = dynamic_cast< SbMethod* >( pBasic->Find( sMacro, SbxCLASS_METHOD ) ) )
+                {
+                    if( SbModule* pModule = pMethod->GetModule() )
+                    {
+                        sMod = pModule->GetName();
+                        bFound = true;
+                    }
+                }
+            }
+        }
+    }
+    return bFound;
+}
+void parseMacro( const rtl::OUString& sMacro, String& sContainer, String& sModule, String& sProcedure )
+{
+    sal_Int32 nMacroDot = sMacro.lastIndexOf( '.' );
+
+    if ( nMacroDot != -1 )
+    {
+        sProcedure = sMacro.copy( nMacroDot + 1 );
+
+        sal_Int32 nContainerDot = sMacro.lastIndexOf( '.',  nMacroDot - 1 );
+        if ( nContainerDot != -1 )
+        {
+            sModule = sMacro.copy( nContainerDot + 1, nMacroDot - nContainerDot - 1 );
+            sContainer = sMacro.copy( 0, nContainerDot );
+        }
+        else
+            sModule = sMacro.copy( 0, nMacroDot );
+    }
+    else
+       sProcedure = sMacro;
+}
+
+VBAMacroResolvedInfo resolveVBAMacro( SfxObjectShell* pShell, const rtl::OUString& MacroName, bool bSearchGlobalTemplates )
+{
+    VBAMacroResolvedInfo aRes;
+    if ( !pShell )
+        return aRes;
+    aRes.SetMacroDocContext( pShell );
+    // parse the macro name
+    sal_Int32 nDocSepIndex = MacroName.indexOfAsciiL( "!", 1 );
+    String sMacroUrl = MacroName;
+
+    String sContainer;
+    String sModule;
+    String sProcedure;
+
+    if( nDocSepIndex > 0 )
+    {
+        // macro specified by document name
+        // find document shell for document name and call ourselves
+        // recursively
+
+        // assume for now that the document name is *this* document
+        String sDocUrlOrPath = MacroName.copy( 0, nDocSepIndex );
+        sMacroUrl = MacroName.copy( nDocSepIndex + 1 );
+        OSL_TRACE("doc search, current shell is 0x%x", pShell );
+        SfxObjectShell* pFoundShell = findShellForUrl( sDocUrlOrPath );
+        OSL_TRACE("doc search, after find, found shell is 0x%x", pFoundShell );
+        aRes = resolveVBAMacro( pFoundShell, sMacroUrl );
+    }
+    else
+    {
+        // macro is contained in 'this' document ( or code imported from a template
+        // where that template is a global template or perhaps the template this
+        // document is created from )
+
+        // macro format = Container.Module.Procedure
+        parseMacro( MacroName, sContainer, sModule, sProcedure );
+        uno::Reference< lang::XMultiServiceFactory> xSF( pShell->GetModel(), uno::UNO_QUERY);
+        uno::Reference< container::XNameContainer > xPrjNameCache;
+        if ( xSF.is() )
+            xPrjNameCache.set( xSF->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.VBAProjectNameProvider" ) ) ), uno::UNO_QUERY );
+
+        std::vector< rtl::OUString > sSearchList;
+
+        if ( sContainer.Len() > 0 )
+        {
+            // get the Project associated with the Container
+            if ( xPrjNameCache.is() )
+            {
+                if ( xPrjNameCache->hasByName( sContainer ) )
+                {
+                    rtl::OUString sProject;
+                    xPrjNameCache->getByName( sContainer ) >>= sProject;
+                    sContainer = sProject;
+                }
+            }
+            sSearchList.push_back( sContainer ); // First Lib to search
+        }
+        else
+        {
+            // Ok, if we have no Container specified then we need to search them in order, this document, template this document created from, global templates,
+            // get the name of Project/Library for 'this' document
+            rtl::OUString sThisProject;
+            BasicManager* pBasicMgr = pShell-> GetBasicManager();
+            if ( pBasicMgr )
+            {
+                if ( pBasicMgr->GetName().Len() )
+                   sThisProject = pBasicMgr->GetName();
+                else // cater for the case where VBA is not enabled
+                   sThisProject = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Standard") );
+            }
+            sSearchList.push_back( sThisProject ); // First Lib to search
+            if ( xPrjNameCache.is() )
+            {
+                // is this document created from a template?
+                uno::Reference< document::XDocumentInfoSupplier > xDocInfoSupp( pShell->GetModel(), uno::UNO_QUERY_THROW );
+                uno::Reference< document::XDocumentPropertiesSupplier > xDocPropSupp( xDocInfoSupp->getDocumentInfo(), uno::UNO_QUERY_THROW );
+                uno::Reference< document::XDocumentProperties > xDocProps( xDocPropSupp->getDocumentProperties(), uno::UNO_QUERY_THROW );
+
+                rtl::OUString sCreatedFrom = xDocProps->getTemplateURL();
+                if ( sCreatedFrom.getLength() )
+                {
+                    INetURLObject aObj;
+                    aObj.SetURL( sCreatedFrom );
+                    bool bIsURL = aObj.GetProtocol() != INET_PROT_NOT_VALID;
+                    rtl::OUString aURL;
+                    if ( bIsURL )
+                        aURL = sCreatedFrom;
+                    else
+                    {
+                        osl::FileBase::getFileURLFromSystemPath( sCreatedFrom, aURL );
+                        aObj.SetURL( aURL );
+                    }
+                    sCreatedFrom =  aObj.GetLastName();
+                }
+
+                sal_Int32 nIndex =  sCreatedFrom.lastIndexOf( '.' );
+                if ( nIndex != -1 )
+                    sCreatedFrom = sCreatedFrom.copy( 0, nIndex );
+
+                rtl::OUString sPrj;
+                if ( sCreatedFrom.getLength() && xPrjNameCache->hasByName( sCreatedFrom ) )
+                {
+                    xPrjNameCache->getByName( sCreatedFrom ) >>= sPrj;
+                    // Make sure we don't double up with this project
+                    if ( !sPrj.equals( sThisProject ) )
+                        sSearchList.push_back( sPrj );
+                }
+
+                // get list of global template Names
+                uno::Sequence< rtl::OUString > sTemplateNames = xPrjNameCache->getElementNames();
+                sal_Int32 nLen = sTemplateNames.getLength();
+                for ( sal_Int32 index = 0; ( bSearchGlobalTemplates && index < nLen ); ++index )
+                {
+
+                    if ( !sCreatedFrom.equals( sTemplateNames[ index ] ) )
+                    {
+                        if ( xPrjNameCache->hasByName( sTemplateNames[ index ] ) )
+                        {
+                            xPrjNameCache->getByName( sTemplateNames[ index ] ) >>= sPrj;
+                            // Make sure we don't double up with this project
+                            if ( !sPrj.equals( sThisProject ) )
+                                sSearchList.push_back( sPrj );
+                        }
+                    }
+
+                }
+            }
+        }
+        std::vector< rtl::OUString >::iterator it_end = sSearchList.end();
+        for ( std::vector< rtl::OUString >::iterator it = sSearchList.begin(); it != it_end; ++it )
+        {
+            bool bRes = hasMacro( pShell, *it, sModule, sProcedure );
+            if ( bRes )
+            {
+                aRes.SetResolved( true );
+                aRes.SetMacroDocContext( pShell );
+                sContainer = *it;
+                break;
+            }
+        }
+    }
+    aRes.SetResolvedMacro( sProcedure.Insert( '.', 0 ).Insert( sModule, 0).Insert( '.', 0 ).Insert( sContainer, 0 ) );
+
+    return aRes;
+}
+
+// Treat the args as possible inouts ( convertion at bottom of method )
+sal_Bool executeMacro( SfxObjectShell* pShell, const String& sMacroName, uno::Sequence< uno::Any >& aArgs, uno::Any& /*aRet*/, const uno::Any& aCaller )
+{
+    sal_Bool bRes = sal_False;
+    if ( !pShell )
+        return bRes;
+    rtl::OUString sUrl = makeMacroURL( sMacroName );
+
+    uno::Sequence< sal_Int16 > aOutArgsIndex;
+    uno::Sequence< uno::Any > aOutArgs;
+
+    try
+    {
+        uno::Reference< script::provider::XScriptProvider > xScriptProvider;
+        uno::Reference< script::provider::XScriptProviderSupplier > xSPS( pShell->GetModel(), uno::UNO_QUERY_THROW );
+
+        xScriptProvider.set( xSPS->getScriptProvider(), uno::UNO_QUERY_THROW );
+
+        uno::Reference< script::provider::XScript > xScript( xScriptProvider->getScript( sUrl ), uno::UNO_QUERY_THROW );
+
+        if ( aCaller.hasValue() )
+        {
+            uno::Reference< beans::XPropertySet > xProps( xScript, uno::UNO_QUERY );
+            if ( xProps.is() )
+            {
+                uno::Sequence< uno::Any > aCallerHack(1);
+                aCallerHack[ 0 ] = aCaller;
+                xProps->setPropertyValue( rtl::OUString::createFromAscii( "Caller" ), uno::makeAny( aCallerHack ) );
+            }
+        }
+
+
+        xScript->invoke( aArgs, aOutArgsIndex, aOutArgs  );
+
+        sal_Int32 nLen = aOutArgs.getLength();
+        // convert any out params to seem like they were inouts
+        if ( nLen )
+        {
+            for ( sal_Int32 index=0; index < nLen; ++index )
+            {
+                sal_Int32 nOutIndex = aOutArgsIndex[ index ];
+                aArgs[ nOutIndex ] = aOutArgs[ index ];
+           }
+        }
+
+        bRes = sal_True;
+    }
+    catch ( uno::Exception& e )
+    {
+       bRes = sal_False;
+    }
+    return bRes;
+}
+} } // vba // ooo
diff --git a/sw/inc/unocoll.hxx b/sw/inc/unocoll.hxx
index c32cd1c..3311d26 100644
--- a/sw/inc/unocoll.hxx
+++ b/sw/inc/unocoll.hxx
@@ -40,6 +40,7 @@
 #include <cppuhelper/implbase4.hxx>	// helper for implementations
 #include <IMark.hxx>
 #include <unobaseclass.hxx>
+#include "swdllapi.h"
 /***************************************************
  ***************************************************
  *
@@ -281,7 +282,7 @@ cppu::WeakImplHelper3
     ::com::sun::star::lang::XServiceInfo
 >
 SwCollectionBaseClass;
-class SwXTextTables : public SwCollectionBaseClass,
+class SW_DLLPUBLIC SwXTextTables : public SwCollectionBaseClass,
     public SwUnoCollection
 {
 protected:
diff --git a/sw/inc/unomap.hxx b/sw/inc/unomap.hxx
index 41b9016..da0ac1c 100644
--- a/sw/inc/unomap.hxx
+++ b/sw/inc/unomap.hxx
@@ -248,6 +248,7 @@
 #define WID_DOC_LOCK_UPDATES                    1016
 #define WID_DOC_HAS_VALID_SIGNATURES            1017
 #define WID_DOC_BUILDID							1024
+#define WID_DOC_ISTEMPLATEID						1025
 // --> OD 2006-03-21 #b6375613#
 #define WID_APPLY_WORKAROUND_FOR_B6375613       1070
 // <--
@@ -292,6 +293,7 @@
 
 #define WID_LAYOUT_SIZE                         1104
 #define WID_DOC_DIALOG_LIBRARIES                1105
+#define WID_DOC_VBA_DOCOBJ                      1106
 
 
 //AutoText
diff --git a/sw/inc/unoprnms.hxx b/sw/inc/unoprnms.hxx
index be477ae..812c15e 100644
--- a/sw/inc/unoprnms.hxx
+++ b/sw/inc/unoprnms.hxx
@@ -805,7 +805,9 @@ enum SwPropNameIds
 /* 0737 */  UNO_NAME_DESCRIPTION,
 // <--
 /* 0738 */  UNO_NAME_META,       // #i91565#
-/* 0739 */  SW_PROPNAME_END
+/* 0739 */  UNO_NAME_IS_TEMPLATE,
+/* 0740 */  UNO_NAME_VBA_DOCOBJ,
+/* 0741 */  SW_PROPNAME_END
 };
 
 
diff --git a/sw/inc/unotbl.hxx b/sw/inc/unotbl.hxx
index 88ed15c..ee03119 100644
--- a/sw/inc/unotbl.hxx
+++ b/sw/inc/unotbl.hxx
@@ -211,14 +211,13 @@ typedef cppu::WeakImplHelper3<
                                 ::com::sun::star::lang::XServiceInfo,
                                 ::com::sun::star::beans::XPropertySet
                             > SwXTextTableCursor_Base;
-class SwXTextTableCursor : public SwXTextTableCursor_Base
+class SW_DLLPUBLIC SwXTextTableCursor : public SwXTextTableCursor_Base
     ,public SwClient
     ,public OTextCursorHelper
 {
     SwDepend 				aCrsrDepend;
     const SfxItemPropertySet*   m_pPropSet;
 
-    SwFrmFmt* 		GetFrmFmt() const { return (SwFrmFmt*)GetRegisteredIn(); }
     //	SwUnoCrsr* 		GetCrsr() const { return (SwUnoCrsr*)aCrsrDepend.GetRegisteredIn(); }
 
 protected:
@@ -268,6 +267,7 @@ public:
 
     const SwUnoCrsr*			GetCrsr() const;
     SwUnoCrsr*					GetCrsr();
+    SwFrmFmt* 		GetFrmFmt() const { return (SwFrmFmt*)GetRegisteredIn(); }
 };
 
 /*-----------------11.12.97 09:38-------------------
diff --git a/sw/prj/build.lst b/sw/prj/build.lst
index e98c022..758bf51 100644
--- a/sw/prj/build.lst
+++ b/sw/prj/build.lst
@@ -1,4 +1,4 @@
-sw	sw	:    l10n connectivity OOo:writerperfect OOo:lotuswordpro svx stoc uui writerfilter NULL
+sw	sw	:    l10n connectivity OOo:writerperfect OOo:lotuswordpro svx stoc uui writerfilter vbahelper NULL
 sw	sw										usr1	-	all	sw_mkout NULL
 sw	sw\inc									nmake		-	all	sw_inc NULL
 sw	sw\uiconfig\layout									nmake	-	all	sw_layout NULL
@@ -33,6 +33,7 @@ sw      sw\source\ui\smartmenu                                          nmake
 sw      sw\source\ui\table                                              nmake   -       all     sw_table sw_inc NULL
 sw	sw\source\ui\uiview						nmake	-	all	sw_uivw sw_sdi sw_inc NULL
 sw	sw\source\ui\uno						nmake	-	all	sw_uiuno sw_sdi sw_inc NULL
+sw	sw\source\ui\vba						nmake	-	all	sw_vba sw_inc NULL
 sw	sw\source\ui\utlui						nmake	-	all	sw_utlui sw_inc NULL
 sw	sw\source\ui\web						nmake	-	all	sw_web sw_uinc sw_sdi sw_inc NULL
 sw	sw\source\ui\wrtsh						nmake	-	all	sw_wrtsh sw_inc NULL
@@ -69,7 +70,7 @@ sw      sw\source\filter\writer             nmake   -       all     sw_wrtr sw_i
 sw      sw\source\filter\ww1                nmake   -       all     sw_ww1 sw_inc NULL
 sw      sw\source\filter\ww8                nmake   -       all     sw_ww8 sw_inc NULL
 sw      sw\source\filter\xml                nmake   -       all     sw_xml sw_inc NULL
-sw      sw\source\ui                        nmake   -       all     sw_ui sw_app sw_cctrl sw_chrdl sw_conf sw_dbui sw_dchdl sw_dcvw sw_dlg sw_envlp sw_fldui sw_fmtui sw_frmdl sw_globd sw_index sw_ling sw_misc sw_rbbar sw_shell sw_table sw_uiuno sw_uivw sw_utlui sw_web sw_wrtsh sw_smartmenu NULL
+sw      sw\source\ui                        nmake   -       all     sw_ui sw_app sw_cctrl sw_chrdl sw_conf sw_dbui sw_dchdl sw_dcvw sw_dlg sw_envlp sw_fldui sw_fmtui sw_frmdl sw_globd sw_index sw_ling sw_misc sw_rbbar sw_shell sw_table sw_uiuno sw_uivw sw_utlui sw_web sw_wrtsh sw_smartmenu sw_vba NULL
 sw      sw\source\core                      nmake   -       all     sw_core sw_attr sw_bast sw_crsr sw_dcnd sw_doc sw_draw sw_edit sw_excpt sw_fld sw_frmed sw_grph sw_layo sw_ole sw_para sw_sw3io sw_swg sw_text sw_tox sw_txtnd sw_uco sw_undo sw_view sw_acc sw_objpos sw_NumberTree sw_tablecore NULL
 sw      sw\source\filter                    nmake   -       all     sw_flt sw_ascii sw_bsflt sw_html sw_rtf sw_wrtr sw_ww1 sw_ww8 sw_xml NULL
 sw      sw\util                             nmake   -       all     sw_util sw_core sw_flt sw_sdi sw_ui NULL
diff --git a/sw/prj/d.lst b/sw/prj/d.lst
index 09c417c..958771d 100644
--- a/sw/prj/d.lst
+++ b/sw/prj/d.lst
@@ -63,6 +63,7 @@ mkdir: %_DEST%\xml%_EXT%\uiconfig\modules\swreport\statusbar
 ..\%__SRC%\bin\swd?????.dll %_DEST%\bin%_EXT%\swd?????.dll
 ..\%__SRC%\bin\swui?????.dll %_DEST%\bin%_EXT%\swui?????.dll
 ..\%__SRC%\bin\msword?????.dll %_DEST%\bin%_EXT%\msword?????.dll
+..\%__SRC%\bin\vbaswobj*.dll %_DEST%\bin%_EXT%\vbaswobj*.dll
 ..\%__SRC%\bin\sw*.res %_DEST%\bin%_EXT%\sw*.res
 ..\%__SRC%\lib\lib*.* %_DEST%\lib%_EXT%\lib*.*
 
diff --git a/sw/source/ui/vba/makefile.mk b/sw/source/ui/vba/makefile.mk
new file mode 100644
index 0000000..6b0300d
--- /dev/null
+++ b/sw/source/ui/vba/makefile.mk
@@ -0,0 +1,110 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: makefile.mk,v $
+#
+# $Revision: 1.6 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+
+PRJ=..$/..$/..
+
+PRJNAME=sw
+TARGET=vbaswobj
+ENABLE_EXCEPTIONS=TRUE
+
+# --- Settings -----------------------------------------------------
+
+.INCLUDE :  settings.mk
+DLLPRE =
+
+.IF "$(ENABLE_VBA)"!="YES"
+dummy:
+        @echo "not building vba..."
+.ENDIF
+
+INCPRE=$(INCCOM)$/$(TARGET)
+CDEFS+=-DVBA_OOBUILD_HACK
+# ------------------------------------------------------------------
+
+SLOFILES= \
+        $(SLO)$/vbaglobals.obj \
+        $(SLO)$/vbaapplication.obj \
+        $(SLO)$/vbadocument.obj \
+        $(SLO)$/vbawindow.obj \
+        $(SLO)$/vbasystem.obj \
+        $(SLO)$/vbarangehelper.obj \
+        $(SLO)$/vbarange.obj \
+        $(SLO)$/vbabookmark.obj \
+        $(SLO)$/vbabookmarks.obj \
+        $(SLO)$/vbavariable.obj \
+        $(SLO)$/vbavariables.obj \
+        $(SLO)$/vbaview.obj \
+        $(SLO)$/wordvbahelper.obj \
+                $(SLO)$/service.obj \
+                $(SLO)$/vbadocumentproperties.obj \
+                $(SLO)$/vbapane.obj \
+                $(SLO)$/vbapanes.obj \
+                $(SLO)$/vbaoptions.obj \
+                $(SLO)$/vbaselection.obj \
+				$(SLO)$/vbatemplate.obj \
+                $(SLO)$/vbaparagraphformat.obj \
+                $(SLO)$/vbaautotextentry.obj \
+                $(SLO)$/vbaparagraph.obj \
+                $(SLO)$/vbafind.obj \
+                $(SLO)$/vbareplacement.obj \
+                $(SLO)$/vbastyle.obj \
+                $(SLO)$/vbastyles.obj \
+                $(SLO)$/vbafont.obj \
+                $(SLO)$/vbapalette.obj \
+                $(SLO)$/vbainformationhelper.obj \
+                $(SLO)$/vbatable.obj \
+                $(SLO)$/vbatables.obj \
+                $(SLO)$/vbafield.obj \
+                $(SLO)$/vbaborders.obj \
+                $(SLO)$/vbadocuments.obj \
+                $(SLO)$/vbaheaderfooter.obj \
+                $(SLO)$/vbaheaderfooterhelper.obj \
+                $(SLO)$/vbaaddin.obj \
+                $(SLO)$/vbaaddins.obj \
+                $(SLO)$/vbadialogs.obj \
+                $(SLO)$/vbadialog.obj \
+                $(SLO)$/vbawrapformat.obj \
+                $(SLO)$/vbapagesetup.obj \
+                $(SLO)$/vbasection.obj \
+                $(SLO)$/vbasections.obj \
+
+# --- Targets ------------------------------------------------------
+
+.INCLUDE :	target.mk
+
+ALLTAR : \
+        $(MISC)$/$(TARGET).don \
+
+$(SLOFILES) : $(MISC)$/$(TARGET).don
+
+$(MISC)$/$(TARGET).don : $(SOLARBINDIR)$/oovbaapi.rdb
+        +$(CPPUMAKER) -O$(INCCOM)$/$(TARGET) -BUCR $(SOLARBINDIR)$/oovbaapi.rdb -X$(SOLARBINDIR)$/types.rdb && echo > $@
+        echo $@
diff --git a/sw/source/ui/vba/service.cxx b/sw/source/ui/vba/service.cxx
new file mode 100644
index 0000000..20b93a4
--- /dev/null
+++ b/sw/source/ui/vba/service.cxx
@@ -0,0 +1,87 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: service.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "cppuhelper/implementationentry.hxx"
+#include "com/sun/star/lang/XMultiServiceFactory.hpp"
+#include "com/sun/star/registry/XRegistryKey.hpp"
+#include "comphelper/servicedecl.hxx"
+
+// =============================================================================
+// component exports
+// =============================================================================
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::uno;
+
+namespace sdecl = comphelper::service_decl;
+
+namespace globals
+{
+extern sdecl::ServiceDecl const serviceDecl;
+}
+
+namespace document
+{
+extern sdecl::ServiceDecl const serviceDecl;
+}
+
+namespace wrapformat
+{
+extern sdecl::ServiceDecl const serviceDecl;
+}
+
+extern "C"
+{
+    void SAL_CALL component_getImplementationEnvironment(
+        const sal_Char ** ppEnvTypeName, uno_Environment ** /*ppEnv*/ )
+    {
+        OSL_TRACE("In component_getImplementationEnv");
+        *ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+    }
+
+    sal_Bool SAL_CALL component_writeInfo(
+        lang::XMultiServiceFactory * pServiceManager, registry::XRegistryKey * pRegistryKey )
+    {
+        OSL_TRACE("In component_writeInfo");
+
+    // Component registration
+        return component_writeInfoHelper( pServiceManager, pRegistryKey,
+        globals::serviceDecl, document::serviceDecl, wrapformat::serviceDecl  );
+    }
+
+    void * SAL_CALL component_getFactory(
+        const sal_Char * pImplName, lang::XMultiServiceFactory * pServiceManager,
+        registry::XRegistryKey * pRegistryKey )
+    {
+        OSL_TRACE("In component_getFactory for %s", pImplName );
+    void* pRet =  component_getFactoryHelper(
+            pImplName, pServiceManager, pRegistryKey, globals::serviceDecl, document::serviceDecl, wrapformat::serviceDecl );
+    OSL_TRACE("Ret is 0x%x", pRet);
+    return pRet;
+    }
+}
diff --git a/sw/source/ui/vba/vbaaddin.cxx b/sw/source/ui/vba/vbaaddin.cxx
new file mode 100644
index 0000000..3c75d4a
--- /dev/null
+++ b/sw/source/ui/vba/vbaaddin.cxx
@@ -0,0 +1,106 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaaddin.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include <tools/urlobj.hxx>
+#include <osl/file.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaAddin::SwVbaAddin( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const rtl::OUString& rFileURL, sal_Bool bAutoload ) throw ( uno::RuntimeException ) :
+    SwVbaAddin_BASE( rParent, rContext ), msFileURL( rFileURL ), mbAutoload( bAutoload ), mbInstalled( bAutoload )
+{
+}
+
+SwVbaAddin::~SwVbaAddin()
+{
+}
+
+::rtl::OUString SAL_CALL SwVbaAddin::getName() throw (uno::RuntimeException)
+{
+    rtl::OUString sName;
+    INetURLObject aURL( msFileURL );
+    ::osl::File::getSystemPathFromFileURL( aURL.GetLastName(), sName );
+    return sName;
+}
+
+void SAL_CALL
+SwVbaAddin::setName( const rtl::OUString& ) throw ( css::uno::RuntimeException )
+{
+    throw uno::RuntimeException( rtl::OUString(
+            RTL_CONSTASCII_USTRINGPARAM(" Fail to set name")), uno::Reference< uno::XInterface >() );
+}
+
+::rtl::OUString SAL_CALL SwVbaAddin::getPath() throw (uno::RuntimeException)
+{
+    INetURLObject aURL( msFileURL );
+    aURL.CutLastName();
+    return aURL.GetURLPath();
+}
+
+::sal_Bool SAL_CALL SwVbaAddin::getAutoload() throw (uno::RuntimeException)
+{
+    return mbAutoload;
+}
+
+::sal_Bool SAL_CALL SwVbaAddin::getInstalled() throw (uno::RuntimeException)
+{
+    return mbInstalled;
+}
+
+void SAL_CALL SwVbaAddin::setInstalled( ::sal_Bool _installed ) throw (uno::RuntimeException)
+{
+    if( _installed != mbInstalled )
+    {
+        mbInstalled = _installed;
+        // TODO: should call AutoExec and AutoExit etc.
+    }
+}
+
+rtl::OUString&
+SwVbaAddin::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaAddin") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaAddin::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Addin" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaaddin.hxx b/sw/source/ui/vba/vbaaddin.hxx
new file mode 100644
index 0000000..753d958
--- /dev/null
+++ b/sw/source/ui/vba/vbaaddin.hxx
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_ADDIN_HXX
+#define SW_VBA_ADDIN_HXX
+
+#include <ooo/vba/word/XAddin.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XAddin > SwVbaAddin_BASE;
+
+class SwVbaAddin : public SwVbaAddin_BASE
+{
+private:
+    rtl::OUString msFileURL;
+    sal_Bool mbAutoload;
+    sal_Bool mbInstalled;
+
+public:
+    SwVbaAddin( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const rtl::OUString& rFileURL, sal_Bool bAutoload ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaAddin();
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setName( const rtl::OUString& _name ) throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getPath() throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoload() throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getInstalled() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setInstalled( ::sal_Bool _installed ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_ADDIN_HXX */
diff --git a/sw/source/ui/vba/vbaaddins.cxx b/sw/source/ui/vba/vbaaddins.cxx
new file mode 100644
index 0000000..8d84600
--- /dev/null
+++ b/sw/source/ui/vba/vbaaddins.cxx
@@ -0,0 +1,110 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaaddins.hxx"
+#include "vbaaddin.hxx"
+#include <cppuhelper/implbase3.hxx>
+#include <svtools/pathoptions.hxx>
+#include <com/sun/star/lang/XMultiComponentFactory.hpp>
+#include <com/sun/star/ucb/XSimpleFileAccess.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+uno::Reference< container::XIndexAccess > lcl_getAddinCollection( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext )
+{
+    XNamedObjectCollectionHelper< word::XAddin >::XNamedVec maAddins;
+
+    // first get the autoload addins in the directory STARTUP
+    uno::Reference< lang::XMultiComponentFactory > xMCF( xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< ucb::XSimpleFileAccess > xSFA( xMCF->createInstanceWithContext( rtl::OUString::createFromAscii( "com.sun.star.ucb.SimpleFileAccess" ), xContext), uno::UNO_QUERY_THROW );
+    SvtPathOptions aPathOpt;
+    // FIXME: temporary the STARTUP path is located in $OO/basic3.1/program/addin
+    String aAddinPath = aPathOpt.GetAddinPath();
+    OSL_TRACE("lcl_getAddinCollection: %s", rtl::OUStringToOString( aAddinPath, RTL_TEXTENCODING_UTF8 ).getStr() );
+    if( xSFA->isFolder( aAddinPath ) )
+    {
+        uno::Sequence< rtl::OUString > sEntries = xSFA->getFolderContents( aAddinPath, sal_False );
+        sal_Int32 nEntry = sEntries.getLength();
+        for( sal_Int32 index = 0; index < nEntry; ++index )
+        {
+            rtl::OUString sUrl = sEntries[ index ];
+            if( !xSFA->isFolder( sUrl ) && sUrl.endsWithIgnoreAsciiCaseAsciiL( ".dot", 4 ) )
+            {
+                maAddins.push_back( uno::Reference< word::XAddin >( new SwVbaAddin( xParent, xContext, sUrl, sal_True ) ) );
+            }
+        }
+    }
+
+    // TODO: second get the customize addins in the org.openoffice.Office.Writer/GlobalTemplateList
+
+    uno::Reference< container::XIndexAccess > xAddinsAccess( new XNamedObjectCollectionHelper< word::XAddin >( maAddins ) );
+    return xAddinsAccess;
+}
+
+SwVbaAddins::SwVbaAddins( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext ) throw (uno::RuntimeException): SwVbaAddins_BASE( xParent, xContext, lcl_getAddinCollection( xParent,xContext ) )
+{
+}
+// XEnumerationAccess
+uno::Type
+SwVbaAddins::getElementType() throw (uno::RuntimeException)
+{
+    return word::XAddin::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaAddins::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return xEnumerationAccess->createEnumeration();
+}
+
+uno::Any
+SwVbaAddins::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource;
+}
+
+rtl::OUString&
+SwVbaAddins::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaAddins") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaAddins::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Addins") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbaaddins.hxx b/sw/source/ui/vba/vbaaddins.hxx
new file mode 100644
index 0000000..a78b3a6
--- /dev/null
+++ b/sw/source/ui/vba/vbaaddins.hxx
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_ADDINS_HXX
+#define SW_VBA_ADDINS_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XAddins.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef CollTestImplHelper< ooo::vba::word::XAddins > SwVbaAddins_BASE;
+
+class SwVbaAddins : public SwVbaAddins_BASE
+{
+public:
+    SwVbaAddins( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext ) throw (css::uno::RuntimeException);
+    virtual ~SwVbaAddins() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaAddins_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_ADDINS_HXX */
diff --git a/sw/source/ui/vba/vbaapplication.cxx b/sw/source/ui/vba/vbaapplication.cxx
new file mode 100644
index 0000000..1ad6539
--- /dev/null
+++ b/sw/source/ui/vba/vbaapplication.cxx
@@ -0,0 +1,206 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaapplication.cxx,v $
+ * $Revision: 1.7 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <stdio.h>
+#include "vbaapplication.hxx"
+#include "vbadocument.hxx"
+#include <osl/file.hxx>
+#include <vbahelper/vbahelper.hxx>
+#include "vbawindow.hxx"
+#include "vbasystem.hxx"
+#include "vbaoptions.hxx"
+#include "vbaselection.hxx"
+#include "vbadocuments.hxx"
+#include "vbaaddins.hxx"
+#include "vbadialogs.hxx"
+#include <ooo/vba/word/WdEnableCancelKey.hpp>
+#include <svx/acorrcfg.hxx>
+#include "wordvbahelper.hxx"
+#include <docsh.hxx>
+
+using namespace ::ooo;
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::UNO_QUERY_THROW;
+using ::com::sun::star::uno::UNO_QUERY;
+using ::rtl::OUString;
+
+// Enable our own join detection for Intersection and Union
+// should be more efficient than using ScRangeList::Join ( because
+// we already are testing the same things )
+
+#define OWN_JOIN 1
+
+// #TODO is this defined somewhere else?
+#if ( defined UNX ) || ( defined OS2 ) //unix
+#define FILE_PATH_SEPERATOR "/"
+#else // windows
+#define FILE_PATH_SEPERATOR "\\"
+#endif
+
+#define EXCELVERSION "11.0"
+
+uno::Any sbxToUnoValue( SbxVariable* pVar );
+
+SwVbaApplication::SwVbaApplication( uno::Reference<uno::XComponentContext >& xContext ): SwVbaApplication_BASE( xContext )
+{
+}
+
+SwVbaApplication::~SwVbaApplication()
+{
+}
+
+SfxObjectShell* SwVbaApplication::GetDocShell( const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException)
+{
+    return static_cast< SfxObjectShell* >( word::getDocShell( xModel ) );
+}
+
+rtl::OUString SAL_CALL
+SwVbaApplication::getName() throw (uno::RuntimeException)
+{
+    static rtl::OUString appName( RTL_CONSTASCII_USTRINGPARAM("Microsoft Word" ) );
+    return appName;
+}
+
+uno::Reference< word::XDocument > SAL_CALL
+SwVbaApplication::getActiveDocument() throw (uno::RuntimeException)
+{
+    return new SwVbaDocument( this, mxContext, getCurrentDocument() );
+}
+
+uno::Reference< word::XWindow > SAL_CALL
+SwVbaApplication::getActiveWindow() throw (uno::RuntimeException)
+{
+    // #FIXME sofar can't determine Parent
+    return new SwVbaWindow( uno::Reference< XHelperInterface >(), mxContext, getCurrentDocument() );
+}
+
+uno::Reference<word::XSystem > SAL_CALL
+SwVbaApplication::getSystem() throw (uno::RuntimeException)
+{
+    return uno::Reference< word::XSystem >( new SwVbaSystem( mxContext ) );
+}
+
+uno::Reference<word::XOptions > SAL_CALL
+SwVbaApplication::getOptions() throw (uno::RuntimeException)
+{
+    return uno::Reference< word::XOptions >( new SwVbaOptions( mxContext ) );
+}
+
+uno::Any SAL_CALL
+SwVbaApplication::CommandBars( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    return VbaApplicationBase::CommandBars( aIndex );
+}
+
+uno::Reference< word::XSelection > SAL_CALL
+SwVbaApplication::getSelection() throw (uno::RuntimeException)
+{
+    return new SwVbaSelection( this, mxContext, getCurrentDocument() );
+}
+
+uno::Any SAL_CALL
+SwVbaApplication::Documents( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaDocuments( this, mxContext ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaApplication::Addins( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    static uno::Reference< XCollection > xCol( new SwVbaAddins( this, mxContext ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaApplication::Dialogs( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< word::XDialogs > xCol( new SwVbaDialogs( this, mxContext, getCurrentDocument() ));
+    if ( index.hasValue() )
+        return xCol->Item( index );
+    return uno::makeAny( xCol );
+}
+
+sal_Bool SAL_CALL SwVbaApplication::getDisplayAutoCompleteTips() throw (css::uno::RuntimeException)
+{
+    return SvxAutoCorrCfg::Get()->IsAutoTextTip();
+}
+
+void SAL_CALL SwVbaApplication::setDisplayAutoCompleteTips( sal_Bool _displayAutoCompleteTips ) throw (css::uno::RuntimeException)
+{
+    SvxAutoCorrCfg::Get()->SetAutoTextTip( _displayAutoCompleteTips );
+}
+
+sal_Int32 SAL_CALL SwVbaApplication::getEnableCancelKey() throw (css::uno::RuntimeException)
+{
+    // the default value is wdCancelInterrupt in Word
+    return word::WdEnableCancelKey::wdCancelInterrupt;
+}
+
+void SAL_CALL SwVbaApplication::setEnableCancelKey( sal_Int32/* _enableCancelKey */) throw (css::uno::RuntimeException)
+{
+    // seems not supported in Writer
+}
+
+float SAL_CALL SwVbaApplication::CentimetersToPoints( float _Centimeters ) throw (uno::RuntimeException)
+{
+    return VbaApplicationBase::CentimetersToPoints( _Centimeters );
+}
+
+uno::Reference< frame::XModel >
+SwVbaApplication::getCurrentDocument() throw (css::uno::RuntimeException)
+{
+    return getCurrentWordDoc( mxContext );
+}
+
+rtl::OUString&
+SwVbaApplication::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaApplication") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaApplication::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Application" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaapplication.hxx b/sw/source/ui/vba/vbaapplication.hxx
new file mode 100644
index 0000000..c563cf9
--- /dev/null
+++ b/sw/source/ui/vba/vbaapplication.hxx
@@ -0,0 +1,77 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaapplication.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_APPLICATION_HXX
+#define SW_VBA_APPLICATION_HXX
+
+#include <ooo/vba/word/XApplication.hpp>
+#include <ooo/vba/word/XDocument.hpp>
+#include <ooo/vba/word/XWindow.hpp>
+#include <ooo/vba/word/XSystem.hpp>
+#include <ooo/vba/word/XOptions.hpp>
+#include <ooo/vba/word/XSelection.hpp>
+#include <ooo/vba/word/XAddins.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbaapplicationbase.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+//typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XApplication > SwVbaApplication_BASE;
+typedef cppu::ImplInheritanceHelper1< VbaApplicationBase, ooo::vba::word::XApplication > SwVbaApplication_BASE;
+
+class SwVbaApplication : public SwVbaApplication_BASE
+{
+public:
+    SwVbaApplication( css::uno::Reference< css::uno::XComponentContext >& m_xContext );
+    virtual ~SwVbaApplication();
+
+    virtual SfxObjectShell* GetDocShell( const css::uno::Reference< css::frame::XModel >& xModel ) throw (css::uno::RuntimeException);
+
+    // XApplication
+    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XSystem > SAL_CALL getSystem() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::word::XDocument > SAL_CALL getActiveDocument() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::word::XWindow > SAL_CALL getActiveWindow() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XOptions > SAL_CALL getOptions() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XSelection > SAL_CALL getSelection() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL CommandBars( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Documents( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Addins( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Dialogs( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getDisplayAutoCompleteTips() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDisplayAutoCompleteTips( sal_Bool _displayAutoCompleteTips ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getEnableCancelKey() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEnableCancelKey( sal_Int32 _enableCancelKey ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL CentimetersToPoints( float _Centimeters ) throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+protected:
+    virtual css::uno::Reference< css::frame::XModel > getCurrentDocument() throw (css::uno::RuntimeException);
+};
+#endif /* SW_VBA_APPLICATION_HXX */
diff --git a/sw/source/ui/vba/vbaautotextentry.cxx b/sw/source/ui/vba/vbaautotextentry.cxx
new file mode 100644
index 0000000..5d604f4
--- /dev/null
+++ b/sw/source/ui/vba/vbaautotextentry.cxx
@@ -0,0 +1,129 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaautotextentry.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbarange.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaAutoTextEntry::SwVbaAutoTextEntry( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< text::XAutoTextEntry >& xEntry ) throw ( uno::RuntimeException ) :
+    SwVbaAutoTextEntry_BASE( rParent, rContext ), mxEntry( xEntry )
+{
+}
+
+SwVbaAutoTextEntry::~SwVbaAutoTextEntry()
+{
+}
+
+uno::Reference< word::XRange > SAL_CALL SwVbaAutoTextEntry::Insert( const uno::Reference< word::XRange >& _where, const uno::Any& /*_richtext*/ ) throw ( uno::RuntimeException )
+{
+    SwVbaRange* pWhere = dynamic_cast<SwVbaRange*>( _where.get() );
+    if( pWhere )
+    {
+        uno::Reference< text::XTextRange > xTextRange = pWhere->getXTextRange();
+        xTextRange->setString( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("x") ) ); // set marker
+        uno::Reference< text::XTextRange > xEndMarker = xTextRange->getEnd();
+        xEndMarker->setString( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("x") ) ); // set marker
+        uno::Reference< text::XText > xText = pWhere->getXText();
+        mxEntry->applyTo( xEndMarker->getStart() );
+        uno::Reference< text::XTextCursor > xTC = xText->createTextCursorByRange( xTextRange->getStart() );
+        xTC->goRight( 1, sal_True );
+        xTC->setString( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("") ) ); // remove marker
+        xEndMarker->setString( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("") ) ); // remove marker
+        xTC->gotoRange( xEndMarker, sal_True );
+        pWhere->setXTextCursor( xTC );
+    }
+    return uno::Reference< word::XRange >( pWhere );
+}
+
+rtl::OUString&
+SwVbaAutoTextEntry::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaAutoTextEntry") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaAutoTextEntry::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.AutoTextEntry" ) );
+    }
+    return aServiceNames;
+}
+
+
+SwVbaAutoTextEntries::SwVbaAutoTextEntries( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< ::com::sun::star::uno::XComponentContext > & xContext, const uno::Reference< container::XIndexAccess >& xIndexAccess ) throw (uno::RuntimeException) : SwVbaAutoTextEntries_BASE( xParent, xContext, xIndexAccess ), mxAutoTextEntryAccess( xIndexAccess )
+{
+}
+
+// XEnumerationAccess
+uno::Type
+SwVbaAutoTextEntries::getElementType() throw (uno::RuntimeException)
+{
+    return word::XAutoTextEntry::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaAutoTextEntries::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return xEnumerationAccess->createEnumeration();
+}
+
+uno::Any
+SwVbaAutoTextEntries::createCollectionObject( const css::uno::Any& aSource )
+{
+    uno::Reference< text::XAutoTextEntry > xEntry( aSource, uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< word::XAutoTextEntry >( new SwVbaAutoTextEntry( this, mxContext, xEntry ) ) );
+}
+
+rtl::OUString&
+SwVbaAutoTextEntries::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaAutoTextEntries") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaAutoTextEntries::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.AutoTextEntries") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbaautotextentry.hxx b/sw/source/ui/vba/vbaautotextentry.hxx
new file mode 100644
index 0000000..f86f5a4
--- /dev/null
+++ b/sw/source/ui/vba/vbaautotextentry.hxx
@@ -0,0 +1,83 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_AUTOTEXTENTRY_HXX
+#define SW_VBA_AUTOTEXTENTRY_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XAutoTextEntries.hpp>
+#include <ooo/vba/word/XAutoTextEntry.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/word/XRange.hpp>
+#include <com/sun/star/text/XAutoTextEntry.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XAutoTextEntry > SwVbaAutoTextEntry_BASE;
+
+class SwVbaAutoTextEntry : public SwVbaAutoTextEntry_BASE
+{
+private:
+    css::uno::Reference< css::text::XAutoTextEntry > mxEntry;
+
+public:
+    SwVbaAutoTextEntry( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XAutoTextEntry >& xEntry ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaAutoTextEntry();
+
+    // XAutoTextEntry
+    virtual css::uno::Reference< ooo::vba::word::XRange > SAL_CALL Insert( const css::uno::Reference< ooo::vba::word::XRange >& _where, const css::uno::Any& _richtext ) throw ( css::uno::RuntimeException );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+
+/* class SwVbaAutoTextEntries */
+typedef CollTestImplHelper< ooo::vba::word::XAutoTextEntries > SwVbaAutoTextEntries_BASE;
+
+class SwVbaAutoTextEntries : public SwVbaAutoTextEntries_BASE
+{
+private:
+    css::uno::Reference< css::container::XIndexAccess > mxAutoTextEntryAccess;
+
+public:
+    SwVbaAutoTextEntries( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) throw (css::uno::RuntimeException);
+    virtual ~SwVbaAutoTextEntries() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaAutoTextEntries_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_AUTOTEXTENTRY_HXX */
diff --git a/sw/source/ui/vba/vbabookmark.cxx b/sw/source/ui/vba/vbabookmark.cxx
new file mode 100644
index 0000000..3b3cc0b
--- /dev/null
+++ b/sw/source/ui/vba/vbabookmark.cxx
@@ -0,0 +1,111 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbabookmark.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XTextContent.hpp>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include "vbarange.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaBookmark::SwVbaBookmark( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext,
+    const css::uno::Reference< frame::XModel >& rModel, const rtl::OUString& rName ) throw ( css::uno::RuntimeException ) :
+    SwVbaBookmark_BASE( rParent, rContext ), mxModel( rModel ), maName( rName ), mbValid( sal_True )
+{
+    uno::Reference< text::XBookmarksSupplier > xBookmarksSupplier( mxModel, uno::UNO_QUERY_THROW );
+    mxBookmark.set( xBookmarksSupplier->getBookmarks()->getByName( maName ), uno::UNO_QUERY_THROW );
+}
+
+SwVbaBookmark::~SwVbaBookmark()
+{
+}
+
+void SwVbaBookmark::checkVality() throw ( uno::RuntimeException )
+{
+    if( !mbValid )
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("The bookmark is not valid" ) ), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL SwVbaBookmark::Delete() throw ( uno::RuntimeException )
+{
+    checkVality();
+    uno::Reference< text::XTextDocument > xTextDocument( mxModel, uno::UNO_QUERY_THROW );
+    xTextDocument->getText()->removeTextContent( mxBookmark );
+    mbValid = sal_False;
+}
+
+void SAL_CALL SwVbaBookmark::Select() throw ( uno::RuntimeException )
+{
+    checkVality();
+    uno::Reference< text::XTextViewCursorSupplier > xViewCursorSupplier( mxModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    xViewCursorSupplier->getViewCursor()->gotoRange( mxBookmark->getAnchor(),sal_False );
+}
+
+rtl::OUString SAL_CALL SwVbaBookmark::getName() throw ( uno::RuntimeException )
+{
+    return maName;
+}
+
+void SAL_CALL SwVbaBookmark::setName( const rtl::OUString& _name ) throw ( uno::RuntimeException )
+{
+    uno::Reference< container::XNamed > xNamed( mxBookmark, uno::UNO_QUERY_THROW );
+    xNamed->setName( _name );
+}
+
+uno::Any SAL_CALL SwVbaBookmark::Range() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextContent > xTextContent( mxBookmark, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextDocument > xTextDocument( mxModel, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextRange > xTextRange( xTextContent->getAnchor(), uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< word::XRange>(  new SwVbaRange( this, mxContext, xTextDocument, xTextRange->getStart(), xTextRange->getEnd(), xTextRange->getText() ) ) );
+}
+
+rtl::OUString&
+SwVbaBookmark::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaBookmark") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaBookmark::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Bookmark" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbabookmark.hxx b/sw/source/ui/vba/vbabookmark.hxx
new file mode 100644
index 0000000..76220ab
--- /dev/null
+++ b/sw/source/ui/vba/vbabookmark.hxx
@@ -0,0 +1,68 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_BOOKMARK_HXX
+#define SW_VBA_BOOKMARK_HXX
+
+#include <ooo/vba/word/XBookmark.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/text/XBookmarksSupplier.hpp>
+#include <com/sun/star/text/XTextContent.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XBookmark > SwVbaBookmark_BASE;
+
+class SwVbaBookmark : public SwVbaBookmark_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::text::XTextContent > mxBookmark;
+    rtl::OUString maName;
+    sal_Bool mbValid;
+
+private:
+    void checkVality() throw ( css::uno::RuntimeException );
+
+public:
+    SwVbaBookmark( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext,
+        const css::uno::Reference< css::frame::XModel >& rModel, const rtl::OUString& rName ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaBookmark();
+
+   // Methods
+    virtual rtl::OUString SAL_CALL getName() throw ( css::uno::RuntimeException );
+    virtual void SAL_CALL setName( const rtl::OUString& ) throw ( css::uno::RuntimeException );
+    virtual void SAL_CALL Delete() throw ( css::uno::RuntimeException );
+    virtual void SAL_CALL Select() throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL Range() throw ( css::uno::RuntimeException );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_BOOKMARK_HXX */
diff --git a/sw/source/ui/vba/vbabookmarks.cxx b/sw/source/ui/vba/vbabookmarks.cxx
new file mode 100644
index 0000000..f54460f
--- /dev/null
+++ b/sw/source/ui/vba/vbabookmarks.cxx
@@ -0,0 +1,240 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbabookmarks.hxx"
+#include "vbabookmark.hxx"
+#include <com/sun/star/container/XNamed.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include <ooo/vba/word/WdBookmarkSortBy.hpp>
+#include "vbarange.hxx"
+#include "wordvbahelper.hxx"
+#include <cppuhelper/implbase2.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+class BookmarksEnumeration : public EnumerationHelperImpl
+{
+    uno::Reference< frame::XModel > mxModel;
+    uno::WeakReference< XHelperInterface > mxParent;
+public:
+    BookmarksEnumeration( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XEnumeration >& xEnumeration,  const uno::Reference< frame::XModel >& xModel  ) throw ( uno::RuntimeException ) : EnumerationHelperImpl( xContext, xEnumeration ), mxModel( xModel ), mxParent( xParent ) {}
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        uno::Reference< container::XNamed > xNamed( m_xEnumeration->nextElement(), uno::UNO_QUERY_THROW );
+        rtl::OUString aName = xNamed->getName();
+        return uno::makeAny( uno::Reference< word::XBookmark > ( new SwVbaBookmark( mxParent, m_xContext, mxModel, aName ) ) );
+    }
+
+};
+
+// Bookmarks use case-insensitive name lookup in MS Word.
+typedef ::cppu::WeakImplHelper2< container::XNameAccess, container::XIndexAccess > BookmarkCollectionHelper_BASE;
+class BookmarkCollectionHelper : public BookmarkCollectionHelper_BASE
+{
+private:
+    uno::Reference< container::XNameAccess > mxNameAccess;
+    uno::Reference< container::XIndexAccess > mxIndexAccess;
+    uno::Any cachePos;
+public:
+    BookmarkCollectionHelper( const uno::Reference< container::XIndexAccess >& xIndexAccess ) throw (uno::RuntimeException) : mxIndexAccess( xIndexAccess )
+    {
+        mxNameAccess.set( mxIndexAccess, uno::UNO_QUERY_THROW );
+    }
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return  mxIndexAccess->getElementType(); }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) { return mxIndexAccess->hasElements(); }
+    // XNameAcess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasByName(aName) )
+            throw container::NoSuchElementException();
+        return cachePos;
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        return mxNameAccess->getElementNames();
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        if( mxNameAccess->hasByName( aName ) )
+        {
+            cachePos = mxNameAccess->getByName( aName );
+            return sal_True;
+        }
+        else
+        {
+            for( sal_Int32 nIndex = 0; nIndex < mxIndexAccess->getCount(); nIndex++ )
+            {
+                uno::Reference< container::XNamed > xNamed( mxIndexAccess->getByIndex( nIndex ), uno::UNO_QUERY_THROW );
+                rtl::OUString aBookmarkName = xNamed->getName();
+                if( aName.equalsIgnoreAsciiCase( aBookmarkName ) )
+                {
+                    cachePos <<= xNamed;
+                    return sal_True;
+                }
+            }
+        }
+        return sal_False;
+    }
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return mxIndexAccess->getCount();
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        return mxIndexAccess->getByIndex( Index );
+    }
+};
+
+SwVbaBookmarks::SwVbaBookmarks( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< ::com::sun::star::uno::XComponentContext > & xContext, const uno::Reference< container::XIndexAccess >& xBookmarks, const uno::Reference< frame::XModel >& xModel ): SwVbaBookmarks_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( new BookmarkCollectionHelper( xBookmarks ) ) ), mxModel( xModel )
+{
+    mxBookmarksSupplier.set( mxModel, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextDocument > xDocument( mxModel, uno::UNO_QUERY_THROW );
+    // use view cursor to insert bookmark, or it will fail if insert bookmark in table
+    // mxText = xDocument->getText();
+    mxText = word::getXTextViewCursor( mxModel )->getText();
+}
+// XEnumerationAccess
+uno::Type
+SwVbaBookmarks::getElementType() throw (uno::RuntimeException)
+{
+    return word::XBookmark::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaBookmarks::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return new BookmarksEnumeration( getParent(), mxContext,xEnumAccess->createEnumeration(), mxModel );
+}
+
+uno::Any
+SwVbaBookmarks::createCollectionObject( const css::uno::Any& aSource )
+{
+    uno::Reference< container::XNamed > xNamed( aSource, uno::UNO_QUERY_THROW );
+    rtl::OUString aName = xNamed->getName();
+    return uno::makeAny( uno::Reference< word::XBookmark > ( new SwVbaBookmark( getParent(), mxContext, mxModel, aName ) ) );
+}
+
+void SwVbaBookmarks::removeBookmarkByName( const rtl::OUString& rName ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XTextContent > xBookmark( m_xNameAccess->getByName( rName ), uno::UNO_QUERY_THROW );
+    mxText->removeTextContent( xBookmark );
+}
+
+void SwVbaBookmarks::addBookmarkByName( const rtl::OUString& rName, const uno::Reference< text::XTextRange >& rTextRange ) throw (uno::RuntimeException)
+{
+    uno::Reference< lang::XMultiServiceFactory > xDocMSF( mxModel, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextContent > xBookmark( xDocMSF->createInstance(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Bookmark")) ), uno::UNO_QUERY_THROW );
+    uno::Reference< container::XNamed > xNamed( xBookmark, uno::UNO_QUERY_THROW );
+    xNamed->setName( rName );
+    mxText->insertTextContent( rTextRange, xBookmark, sal_False );
+}
+
+uno::Any SAL_CALL
+SwVbaBookmarks::Add( const rtl::OUString& rName, const uno::Any& rRange ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XTextRange > xTextRange;
+    uno::Reference< word::XRange > xRange;
+    if( rRange >>= xRange )
+    {
+        SwVbaRange* pRange = dynamic_cast< SwVbaRange* >( xRange.get() );
+        if( pRange )
+            xTextRange = pRange->getXTextRange();
+    }
+    else
+    {
+        // FIXME: insert the bookmark into current view cursor
+        xTextRange.set( word::getXTextViewCursor( mxModel ), uno::UNO_QUERY_THROW );
+    }
+
+    // remove the exist bookmark
+    // rtl::OUString aName = rName.toAsciiLowerCase();
+    rtl::OUString aName = rName;
+    if( m_xNameAccess->hasByName( aName ) )
+        removeBookmarkByName( aName );
+
+    addBookmarkByName( aName, xTextRange );
+
+    return uno::makeAny( uno::Reference< word::XBookmark >( new SwVbaBookmark( getParent(), mxContext, mxModel, aName ) ) );
+}
+
+sal_Int32 SAL_CALL
+SwVbaBookmarks::getDefaultSorting() throw (css::uno::RuntimeException)
+{
+    return word::WdBookmarkSortBy::wdSortByName;
+}
+
+void SAL_CALL
+SwVbaBookmarks::setDefaultSorting( sal_Int32/* _type*/ ) throw (css::uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+sal_Bool SAL_CALL
+SwVbaBookmarks::getShowHidden() throw (css::uno::RuntimeException)
+{
+    return sal_True;
+}
+
+void SAL_CALL
+SwVbaBookmarks::setShowHidden( sal_Bool /*_hidden*/ ) throw (css::uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+sal_Bool SAL_CALL
+SwVbaBookmarks::Exists( const rtl::OUString& rName ) throw (css::uno::RuntimeException)
+{
+    sal_Bool bExist = m_xNameAccess->hasByName( rName );
+    return bExist;
+}
+
+rtl::OUString&
+SwVbaBookmarks::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaBookmarks") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaBookmarks::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Bookmarks") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbabookmarks.hxx b/sw/source/ui/vba/vbabookmarks.hxx
new file mode 100644
index 0000000..f9bbc18
--- /dev/null
+++ b/sw/source/ui/vba/vbabookmarks.hxx
@@ -0,0 +1,78 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_BOOKMARKS_HXX
+#define SW_VBA_BOOKMARKS_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XBookmarks.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XBookmarksSupplier.hpp>
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/text/XText.hpp>
+
+typedef CollTestImplHelper< ooo::vba::word::XBookmarks > SwVbaBookmarks_BASE;
+
+class SwVbaBookmarks : public SwVbaBookmarks_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::text::XBookmarksSupplier > mxBookmarksSupplier;
+    css::uno::Reference< css::text::XText > mxText;
+
+private:
+    void removeBookmarkByName( const rtl::OUString& rName ) throw (css::uno::RuntimeException);
+    void addBookmarkByName( const rtl::OUString& rName, const css::uno::Reference< css::text::XTextRange >& rTextRange ) throw (css::uno::RuntimeException);
+
+public:
+    SwVbaBookmarks( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::container::XIndexAccess >& xBookmarks, const css::uno::Reference< css::frame::XModel >& xModel );
+    virtual ~SwVbaBookmarks() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaBookmarks_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+
+    // XBookmarks
+    virtual sal_Int32 SAL_CALL getDefaultSorting() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDefaultSorting( sal_Int32 _type ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getShowHidden() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setShowHidden( sal_Bool _hidden ) throw (css::uno::RuntimeException);
+
+    virtual css::uno::Any SAL_CALL Add( const rtl::OUString& rName, const css::uno::Any& rRange ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL Exists( const rtl::OUString& rName ) throw (css::uno::RuntimeException);
+};
+
+#endif /* SW_VBA_BOOKMARKS_HXX */
diff --git a/sw/source/ui/vba/vbaborders.cxx b/sw/source/ui/vba/vbaborders.cxx
new file mode 100644
index 0000000..e02c64b
--- /dev/null
+++ b/sw/source/ui/vba/vbaborders.cxx
@@ -0,0 +1,381 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaborders.cxx,v $
+ * $Revision: 1.6 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaborders.hxx"
+#include <ooo/vba/word/XBorder.hpp>
+#include <ooo/vba/word/WdBorderType.hpp>
+#include <ooo/vba/word/WdLineStyle.hpp>
+#include <cppuhelper/implbase3.hxx>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/table/TableBorder.hpp>
+#include <com/sun/star/table/ShadowFormat.hpp>
+#include <com/sun/star/table/ShadowLocation.hpp>
+#include "vbapalette.hxx"
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+
+typedef ::cppu::WeakImplHelper1<container::XIndexAccess > RangeBorders_Base;
+typedef InheritedHelperInterfaceImpl1<word::XBorder > SwVbaBorder_Base;
+
+// #TODO sort these indexes to match the order in which Word iterates over the
+// borders, the enumeration will match the order in this list
+static const sal_Int16 supportedIndexTable[] = { word::WdBorderType::wdBorderBottom, word::WdBorderType::wdBorderDiagonalDown, word::WdBorderType::wdBorderDiagonalUp, word::WdBorderType::wdBorderHorizontal, word::WdBorderType::wdBorderLeft, word::WdBorderType::wdBorderRight, word::WdBorderType::wdBorderTop, word::WdBorderType::wdBorderVertical };
+
+const static rtl::OUString sTableBorder( RTL_CONSTASCII_USTRINGPARAM("TableBorder") );
+
+//  Equiv widths in in 1/100 mm
+const static sal_Int32 OOLineThin = 35;
+const static sal_Int32 OOLineMedium = 88;
+const static sal_Int32 OOLineThick = 141;
+const static sal_Int32 OOLineHairline = 2;
+
+class SwVbaBorder : public SwVbaBorder_Base
+{
+private:
+    uno::Reference< beans::XPropertySet > m_xProps;
+    sal_Int32 m_LineType;
+    VbaPalette m_Palette;
+    bool setBorderLine( table::BorderLine& rBorderLine )
+    {
+        table::TableBorder aTableBorder;
+        m_xProps->getPropertyValue( sTableBorder ) >>= aTableBorder;
+
+        switch ( m_LineType )
+        {
+            case word::WdBorderType::wdBorderLeft:
+                aTableBorder.IsLeftLineValid = sal_True;
+                aTableBorder.LeftLine= rBorderLine;
+                break;
+            case word::WdBorderType::wdBorderTop:
+                aTableBorder.IsTopLineValid = sal_True;
+                aTableBorder.TopLine = rBorderLine;
+                break;
+
+            case word::WdBorderType::wdBorderBottom:
+                aTableBorder.IsBottomLineValid = sal_True;
+                aTableBorder.BottomLine = rBorderLine;
+                break;
+            case word::WdBorderType::wdBorderRight:
+                aTableBorder.IsRightLineValid = sal_True;
+                aTableBorder.RightLine = rBorderLine;
+                break;
+            case word::WdBorderType::wdBorderVertical:
+                aTableBorder.IsVerticalLineValid = sal_True;
+                aTableBorder.VerticalLine = rBorderLine;
+                break;
+            case word::WdBorderType::wdBorderHorizontal:
+                aTableBorder.IsHorizontalLineValid = sal_True;
+                aTableBorder.HorizontalLine = rBorderLine;
+                break;
+            case word::WdBorderType::wdBorderDiagonalDown:
+            case word::WdBorderType::wdBorderDiagonalUp:
+                // #TODO have to ignore at the momement, would be
+                // nice to investigate what we can do here
+                break;
+            default:
+                    return false;
+        }
+        m_xProps->setPropertyValue( sTableBorder, uno::makeAny(aTableBorder) );
+        return true;
+    }
+
+    bool getBorderLine( table::BorderLine& rBorderLine )
+    {
+        table::TableBorder aTableBorder;
+        m_xProps->getPropertyValue( sTableBorder ) >>= aTableBorder;
+        switch ( m_LineType )
+        {
+            case word::WdBorderType::wdBorderLeft:
+                if ( aTableBorder.IsLeftLineValid )
+                    rBorderLine = aTableBorder.LeftLine;
+                break;
+            case word::WdBorderType::wdBorderTop:
+                if ( aTableBorder.IsTopLineValid )
+                    rBorderLine = aTableBorder.TopLine;
+                break;
+            case word::WdBorderType::wdBorderBottom:
+                if ( aTableBorder.IsBottomLineValid )
+                    rBorderLine = aTableBorder.BottomLine;
+                break;
+            case word::WdBorderType::wdBorderRight:
+                if ( aTableBorder.IsRightLineValid )
+                    rBorderLine = aTableBorder.RightLine;
+                break;
+            case word::WdBorderType::wdBorderVertical:
+                if ( aTableBorder.IsVerticalLineValid )
+                    rBorderLine = aTableBorder.VerticalLine;
+                break;
+            case word::WdBorderType::wdBorderHorizontal:
+                if ( aTableBorder.IsHorizontalLineValid )
+                    rBorderLine = aTableBorder.HorizontalLine;
+                break;
+
+            case word::WdBorderType::wdBorderDiagonalDown:
+            case word::WdBorderType::wdBorderDiagonalUp:
+                // #TODO have to ignore at the momement, would be
+                // nice to investigate what we can do here
+                break;
+            default:
+                    return false;
+        }
+        return true;
+    }
+    SwVbaBorder(); // no impl
+protected:
+    virtual rtl::OUString& getServiceImplName()
+    {
+        static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaBorder") );
+    return sImplName;
+    }
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames()
+    {
+        static uno::Sequence< rtl::OUString > aServiceNames;
+        if ( aServiceNames.getLength() == 0 )
+        {
+            aServiceNames.realloc( 1 );
+            aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Border" ) );
+        }
+        return aServiceNames;
+    }
+public:
+    SwVbaBorder( const uno::Reference< beans::XPropertySet > & xProps, const uno::Reference< uno::XComponentContext >& xContext, sal_Int32 lineType, VbaPalette& rPalette) : SwVbaBorder_Base( uno::Reference< XHelperInterface >( xProps, uno::UNO_QUERY ), xContext ), m_xProps( xProps ), m_LineType( lineType ), m_Palette( rPalette ) {}
+
+    uno::Any SAL_CALL getLineStyle() throw (uno::RuntimeException)
+    {
+        sal_Int32 nLineStyle = word::WdLineStyle::wdLineStyleNone;
+        table::BorderLine aBorderLine;
+        if ( getBorderLine( aBorderLine ) )
+        {
+            if( aBorderLine.InnerLineWidth !=0 && aBorderLine.OuterLineWidth !=0 )
+            {
+                nLineStyle = word::WdLineStyle::wdLineStyleDouble;
+            }
+            else if( aBorderLine.InnerLineWidth !=0 || aBorderLine.OuterLineWidth !=0 )
+            {
+                nLineStyle = word::WdLineStyle::wdLineStyleSingle;
+            }
+            else
+            {
+                nLineStyle = word::WdLineStyle::wdLineStyleNone;
+            }
+        }
+        return uno::makeAny( nLineStyle );
+    }
+    void SAL_CALL setLineStyle( const uno::Any& _linestyle ) throw (uno::RuntimeException)
+    {
+        // Urk no choice but to silently ignore we don't support this attribute
+        // #TODO would be nice to support the word line styles
+        sal_Int32 nLineStyle = 0;
+        _linestyle >>= nLineStyle;
+        table::BorderLine aBorderLine;
+        if ( getBorderLine( aBorderLine ) )
+        {
+            switch ( nLineStyle )
+            {
+                case word::WdLineStyle::wdLineStyleNone:
+                {
+                    aBorderLine.InnerLineWidth = 0;
+                    aBorderLine.OuterLineWidth = 0;
+                    break;
+                }
+                case word::WdLineStyle::wdLineStyleDashDot:
+                case word::WdLineStyle::wdLineStyleDashDotDot:
+                case word::WdLineStyle::wdLineStyleDashDotStroked:
+                case word::WdLineStyle::wdLineStyleDashLargeGap:
+                case word::WdLineStyle::wdLineStyleDashSmallGap:
+                case word::WdLineStyle::wdLineStyleDot:
+                case word::WdLineStyle::wdLineStyleDouble:
+                case word::WdLineStyle::wdLineStyleDoubleWavy:
+                case word::WdLineStyle::wdLineStyleEmboss3D:
+                case word::WdLineStyle::wdLineStyleEngrave3D:
+                case word::WdLineStyle::wdLineStyleInset:
+                case word::WdLineStyle::wdLineStyleOutset:
+                case word::WdLineStyle::wdLineStyleSingle:
+                case word::WdLineStyle::wdLineStyleSingleWavy:
+                case word::WdLineStyle::wdLineStyleThickThinLargeGap:
+                case word::WdLineStyle::wdLineStyleThickThinMedGap:
+                case word::WdLineStyle::wdLineStyleThickThinSmallGap:
+                case word::WdLineStyle::wdLineStyleThinThickLargeGap:
+                case word::WdLineStyle::wdLineStyleThinThickMedGap:
+                case word::WdLineStyle::wdLineStyleThinThickSmallGap:
+                case word::WdLineStyle::wdLineStyleThinThickThinLargeGap:
+                case word::WdLineStyle::wdLineStyleThinThickThinMedGap:
+                case word::WdLineStyle::wdLineStyleThinThickThinSmallGap:
+                case word::WdLineStyle::wdLineStyleTriple:
+                {
+                    aBorderLine.InnerLineWidth = 0;
+                    aBorderLine.OuterLineWidth = OOLineHairline;
+                    break;
+                }
+                default:
+                    throw uno::RuntimeException( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "Bad param" ) ), uno::Reference< uno::XInterface >() );
+            }
+            setBorderLine( aBorderLine );
+        }
+        else
+            throw uno::RuntimeException( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "Method failed" ) ), uno::Reference< uno::XInterface >() );
+    }
+};
+
+class RangeBorders : public RangeBorders_Base
+{
+private:
+    uno::Reference< table::XCellRange > m_xRange;
+    uno::Reference< uno::XComponentContext > m_xContext;
+    VbaPalette m_Palette;
+    sal_Int32 getTableIndex( sal_Int32 nConst )
+    {
+        // hokay return position of the index in the table
+        sal_Int32 nIndexes = getCount();
+        sal_Int32 realIndex = 0;
+        const sal_Int16* pTableEntry = supportedIndexTable;
+        for ( ; realIndex < nIndexes; ++realIndex, ++pTableEntry )
+        {
+            if ( *pTableEntry == nConst )
+                return realIndex;
+        }
+        return getCount(); // error condition
+    }
+public:
+    RangeBorders(  const uno::Reference< table::XCellRange >& xRange,  const uno::Reference< uno::XComponentContext > & xContext, VbaPalette& rPalette ) : m_xRange( xRange ), m_xContext( xContext ), m_Palette( rPalette )
+    {
+    }
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return sizeof( supportedIndexTable ) / sizeof( supportedIndexTable[0] );
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+
+        sal_Int32 nIndex = getTableIndex( Index );
+        if ( nIndex >= 0 && nIndex < getCount() )
+        {
+            uno::Reference< beans::XPropertySet > xProps( m_xRange, uno::UNO_QUERY_THROW );
+            return uno::makeAny( uno::Reference< word::XBorder >( new SwVbaBorder( xProps, m_xContext, supportedIndexTable[ nIndex ], m_Palette )) );
+        }
+        throw lang::IndexOutOfBoundsException();
+    }
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return  word::XBorder::static_type(0);
+    }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return sal_True;
+    }
+};
+
+uno::Reference< container::XIndexAccess >
+rangeToBorderIndexAccess( const uno::Reference< table::XCellRange >& xRange,  const uno::Reference< uno::XComponentContext > & xContext, VbaPalette& rPalette )
+{
+    return new RangeBorders( xRange, xContext, rPalette );
+}
+
+class RangeBorderEnumWrapper : public EnumerationHelper_BASE
+{
+    uno::Reference<container::XIndexAccess > m_xIndexAccess;
+    sal_Int32 nIndex;
+public:
+    RangeBorderEnumWrapper( const uno::Reference< container::XIndexAccess >& xIndexAccess ) : m_xIndexAccess( xIndexAccess ), nIndex( 0 ) {}
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return ( nIndex < m_xIndexAccess->getCount() );
+    }
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( nIndex < m_xIndexAccess->getCount() )
+            return m_xIndexAccess->getByIndex( nIndex++ );
+        throw container::NoSuchElementException();
+    }
+};
+
+// for Table borders
+SwVbaBorders::SwVbaBorders( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< table::XCellRange >& xRange, VbaPalette& rPalette  ):  SwVbaBorders_BASE( xParent, xContext, rangeToBorderIndexAccess( xRange ,xContext, rPalette ) )
+{
+    m_xProps.set( xRange, uno::UNO_QUERY_THROW );
+}
+
+uno::Reference< container::XEnumeration >
+SwVbaBorders::createEnumeration() throw (uno::RuntimeException)
+{
+    return new RangeBorderEnumWrapper( m_xIndexAccess );
+}
+
+uno::Any
+SwVbaBorders::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource; // its already a Border object
+}
+
+uno::Type
+SwVbaBorders::getElementType() throw (uno::RuntimeException)
+{
+    return word::XBorders::static_type(0);
+}
+
+uno::Any
+SwVbaBorders::getItemByIntIndex( const sal_Int32 nIndex )  throw (uno::RuntimeException)
+{
+    return createCollectionObject( m_xIndexAccess->getByIndex( nIndex ) );
+}
+
+sal_Bool SAL_CALL SwVbaBorders::getShadow() throw (uno::RuntimeException)
+{
+    table::ShadowFormat aShadowFormat;
+    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ShadowFormat") ) ) >>= aShadowFormat;
+    return ( aShadowFormat.Location != table::ShadowLocation_NONE );
+}
+
+void SAL_CALL SwVbaBorders::setShadow( sal_Bool /*_shadow*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+rtl::OUString&
+SwVbaBorders::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaBorders") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaBorders::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Borders" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaborders.hxx b/sw/source/ui/vba/vbaborders.hxx
new file mode 100644
index 0000000..93944d2
--- /dev/null
+++ b/sw/source/ui/vba/vbaborders.hxx
@@ -0,0 +1,65 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaborders.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_BORDERS_HXX
+#define SW_VBA_BORDERS_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/word/XBorders.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/table/XCellRange.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
+
+typedef CollTestImplHelper< ov::word::XBorders > SwVbaBorders_BASE;
+class VbaPalette;
+class SwVbaBorders : public SwVbaBorders_BASE
+{
+    // XEnumerationAccess
+    virtual css::uno::Any getItemByIntIndex( const sal_Int32 nIndex ) throw (css::uno::RuntimeException);
+    css::uno::Reference< css::beans::XPropertySet > m_xProps;
+public:
+    SwVbaBorders( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::table::XCellRange >& xRange, VbaPalette& rPalette );
+    virtual ~SwVbaBorders() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+    virtual sal_Bool SAL_CALL getShadow() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setShadow( sal_Bool _shadow ) throw (css::uno::RuntimeException);
+
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif //SW_VBA_BORDERS_HXX
diff --git a/sw/source/ui/vba/vbadialog.cxx b/sw/source/ui/vba/vbadialog.cxx
new file mode 100644
index 0000000..4e54b7a
--- /dev/null
+++ b/sw/source/ui/vba/vbadialog.cxx
@@ -0,0 +1,81 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialog.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbadialog.hxx"
+#include <ooo/vba/word/WdWordDialog.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+struct WordDialogTable
+{
+    sal_Int32 wdDialog;
+    const sal_Char* ooDialog;
+};
+
+static const WordDialogTable aWordDialogTable[] =
+{
+    { word::WdWordDialog::wdDialogFileNew, ".uno:NewDoc" },
+    { word::WdWordDialog::wdDialogFileOpen, ".uno:Open" },
+    { word::WdWordDialog::wdDialogFilePrint, ".uno:Print" },
+    { word::WdWordDialog::wdDialogFileSaveAs, ".uno:SaveAs" },
+    { 0, 0 }
+};
+
+rtl::OUString
+SwVbaDialog::mapIndexToName( sal_Int32 nIndex )
+{
+    for( const WordDialogTable* pTable = aWordDialogTable; pTable != NULL; pTable++ )
+    {
+        if( nIndex == pTable->wdDialog )
+        {
+            return rtl::OUString::createFromAscii( pTable->ooDialog );
+        }
+    }
+    return rtl::OUString();
+}
+
+rtl::OUString&
+SwVbaDialog::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaDialog") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaDialog::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Dialog" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbadialog.hxx b/sw/source/ui/vba/vbadialog.hxx
new file mode 100644
index 0000000..9a9f68d
--- /dev/null
+++ b/sw/source/ui/vba/vbadialog.hxx
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialog.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_DIALOG_HXX
+#define SW_VBA_DIALOG_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/word/XDialog.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbadialogbase.hxx>
+
+typedef cppu::ImplInheritanceHelper1< VbaDialogBase, ov::word::XDialog > SwVbaDialog_BASE;
+
+class SwVbaDialog : public SwVbaDialog_BASE
+{
+public:
+    SwVbaDialog( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, const css::uno::Reference< css::frame::XModel >& xModel, sal_Int32 nIndex ):SwVbaDialog_BASE( xParent, xContext, xModel, nIndex ) {}
+    virtual ~SwVbaDialog() {}
+
+    // Methods
+    virtual rtl::OUString mapIndexToName( sal_Int32 nIndex );
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_DIALOG_HXX */
diff --git a/sw/source/ui/vba/vbadialogs.cxx b/sw/source/ui/vba/vbadialogs.cxx
new file mode 100644
index 0000000..2fbc5b4
--- /dev/null
+++ b/sw/source/ui/vba/vbadialogs.cxx
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialogs.cxx,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <ooo/vba/word/XDialog.hpp>
+#include "vbadialogs.hxx"
+#include "vbadialog.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+uno::Any
+SwVbaDialogs::Item( const uno::Any &aItem ) throw (uno::RuntimeException)
+{
+    sal_Int32 nIndex = 0;
+    aItem >>= nIndex;
+    uno::Reference< word::XDialog > aDialog( new SwVbaDialog( uno::Reference< XHelperInterface >( Application(),uno::UNO_QUERY_THROW ), mxContext, m_xModel, nIndex ) );
+    return uno::Any( aDialog );
+}
+
+rtl::OUString&
+SwVbaDialogs::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaDialogs") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaDialogs::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Dialogs" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbadialogs.hxx b/sw/source/ui/vba/vbadialogs.hxx
new file mode 100644
index 0000000..c99ba1e
--- /dev/null
+++ b/sw/source/ui/vba/vbadialogs.hxx
@@ -0,0 +1,56 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialogs.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_DIALOGS_HXX
+#define SW_VBA_DIALOGS_HXX
+
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <ooo/vba/word/XDialogs.hpp>
+#include <ooo/vba/XCollection.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbadialogsbase.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+typedef cppu::ImplInheritanceHelper1< VbaDialogsBase, ov::word::XDialogs > SwVbaDialogs_BASE;
+
+class SwVbaDialogs : public SwVbaDialogs_BASE
+{
+public:
+    SwVbaDialogs( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > &xContext, const css::uno::Reference< css::frame::XModel >& xModel ): SwVbaDialogs_BASE( xParent, xContext, xModel ) {}
+    virtual ~SwVbaDialogs() {}
+
+    // XCollection
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_DIALOGS_HXX */
diff --git a/sw/source/ui/vba/vbadocument.cxx b/sw/source/ui/vba/vbadocument.cxx
new file mode 100644
index 0000000..613fc6f
--- /dev/null
+++ b/sw/source/ui/vba/vbadocument.cxx
@@ -0,0 +1,383 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadocument.cxx,v $
+ * $Revision: 1.7 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbadocument.hxx"
+#include "vbarange.hxx"
+#include "vbarangehelper.hxx"
+#include "vbadocumentproperties.hxx"
+#include "vbabookmarks.hxx"
+#include "vbavariables.hxx"
+#include <com/sun/star/text/XBookmarksSupplier.hpp>
+#include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+#include <com/sun/star/document/XDocumentInfoSupplier.hpp>
+#include <com/sun/star/document/XDocumentProperties.hpp>
+#include <com/sun/star/drawing/XDrawPageSupplier.hpp>
+#include <com/sun/star/drawing/XControlShape.hpp>
+#include <com/sun/star/drawing/XControlShape.hpp>
+#include <com/sun/star/form/XFormsSupplier.hpp>
+#include <ooo/vba/XControlProvider.hpp>
+
+#include <vbahelper/helperdecl.hxx>
+#include <wordvbahelper.hxx>
+#include <docsh.hxx>
+#include "vbatemplate.hxx"
+#include "vbaparagraph.hxx"
+#include "vbastyles.hxx"
+#include "vbatables.hxx"
+#include "vbafield.hxx"
+#include "vbapagesetup.hxx"
+#include "vbasections.hxx"
+#include <vbahelper/vbashapes.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaDocument::SwVbaDocument( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, uno::Reference< frame::XModel > xModel ): SwVbaDocument_BASE( xParent, xContext, xModel )
+{
+    Initialize();
+}
+SwVbaDocument::SwVbaDocument( uno::Sequence< uno::Any > const& aArgs, uno::Reference< uno::XComponentContext >const& xContext ) : SwVbaDocument_BASE( aArgs, xContext )
+{
+    Initialize();
+}
+
+SwVbaDocument::~SwVbaDocument()
+{
+}
+
+void SwVbaDocument::Initialize()
+{
+    mxTextDocument.set( getModel(), uno::UNO_QUERY_THROW );
+}
+
+uno::Reference< word::XRange > SAL_CALL
+SwVbaDocument::getContent() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xStart = mxTextDocument->getText()->getStart();
+    uno::Reference< text::XTextRange > xEnd;
+    return uno::Reference< word::XRange >( new SwVbaRange( this, mxContext, mxTextDocument, xStart, xEnd, sal_True ) );
+}
+
+uno::Reference< word::XRange > SAL_CALL
+SwVbaDocument::Range( const uno::Any& rStart, const uno::Any& rEnd ) throw ( uno::RuntimeException )
+{
+    if( !rStart.hasValue() && !rEnd.hasValue() )
+        return getContent();
+
+    sal_Int32 nStart = 0;
+    sal_Int32 nEnd = 0;
+    rStart >>= nStart;
+    rEnd >>= nEnd;
+    nStart--;
+    nEnd--;
+
+    uno::Reference< text::XTextRange > xStart;
+    uno::Reference< text::XTextRange > xEnd;
+    if( nStart != -1 || nEnd != -1 )
+    {
+        if( nStart == -1 )
+            xStart = mxTextDocument->getText()->getStart();
+        else
+            xStart = SwVbaRangeHelper::getRangeByPosition( mxTextDocument->getText(), nStart );
+
+        if( nEnd == -1 )
+            xEnd = mxTextDocument->getText()->getEnd();
+        else
+            xEnd = SwVbaRangeHelper::getRangeByPosition( mxTextDocument->getText(), nEnd );
+    }
+
+    if( !xStart.is() && !xEnd.is() )
+    {
+        try
+        {
+            // FIXME
+            xStart = mxTextDocument->getText()->getStart();
+            xEnd = mxTextDocument->getText()->getEnd();
+        }
+        catch( uno::Exception )
+        {
+            DebugHelper::exception(SbERR_METHOD_FAILED, rtl::OUString());
+        }
+    }
+    return uno::Reference< word::XRange >( new SwVbaRange( this, mxContext, mxTextDocument, xStart, xEnd ) );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::BuiltInDocumentProperties( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaBuiltinDocumentProperties( mxParent, mxContext, getModel() ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::CustomDocumentProperties( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaCustomDocumentProperties( mxParent, mxContext, getModel() ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Bookmarks( const uno::Any& rIndex ) throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XBookmarksSupplier > xBookmarksSupplier( getModel(),uno::UNO_QUERY_THROW );
+    uno::Reference<container::XIndexAccess > xBookmarks( xBookmarksSupplier->getBookmarks(), uno::UNO_QUERY_THROW );
+    uno::Reference< XCollection > xBookmarksVba( new SwVbaBookmarks( this, mxContext, xBookmarks, getModel() ) );
+    if (  rIndex.getValueTypeClass() == uno::TypeClass_VOID )
+        return uno::makeAny( xBookmarksVba );
+
+    return uno::Any( xBookmarksVba->Item( rIndex, uno::Any() ) );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Variables( const uno::Any& rIndex ) throw ( uno::RuntimeException )
+{
+    uno::Reference< document::XDocumentPropertiesSupplier > xDocumentPropertiesSupplier( getModel(),uno::UNO_QUERY_THROW );
+    uno::Reference< document::XDocumentProperties > xDocumentProperties =  xDocumentPropertiesSupplier->getDocumentProperties();
+    uno::Reference< beans::XPropertyAccess > xUserDefined( xDocumentProperties->getUserDefinedProperties(), uno::UNO_QUERY_THROW );
+
+    uno::Reference< XCollection > xVariables( new SwVbaVariables( this, mxContext, xUserDefined ) );
+    if (  rIndex.getValueTypeClass() == uno::TypeClass_VOID )
+        return uno::makeAny( xVariables );
+
+    return uno::Any( xVariables->Item( rIndex, uno::Any() ) );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Paragraphs( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaParagraphs( mxParent, mxContext, mxTextDocument ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Styles( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaStyles( mxParent, mxContext, getModel() ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Fields( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaFields( mxParent, mxContext, getModel() ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Shapes( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< drawing::XDrawPageSupplier > xDrawPageSupplier( getModel(), uno::UNO_QUERY_THROW );
+    //uno::Reference< drawing::XShapes > xShapes( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
+    uno::Reference< container::XIndexAccess > xIndexAccess( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XModel > xModel( mxTextDocument, uno::UNO_QUERY_THROW );
+    uno::Reference< XCollection > xCol( new ScVbaShapes( this, mxContext, xIndexAccess, xModel ) );
+
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Sections( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaSections( mxParent, mxContext, getModel() ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::PageSetup( ) throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xPageProps( word::getCurrentPageStyle( mxModel ), uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< word::XPageSetup >( new SwVbaPageSetup( this, mxContext, mxModel, xPageProps ) ) );
+}
+
+rtl::OUString&
+SwVbaDocument::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaDocument") );
+    return sImplName;
+}
+uno::Any SAL_CALL
+SwVbaDocument::getAttachedTemplate() throw (uno::RuntimeException)
+{
+    uno::Reference< word::XTemplate > xTemplate;
+    uno::Reference< document::XDocumentInfoSupplier > xDocInfoSupp( getModel(), uno::UNO_QUERY_THROW );
+    uno::Reference< document::XDocumentPropertiesSupplier > xDocPropSupp( xDocInfoSupp->getDocumentInfo(), uno::UNO_QUERY_THROW );
+    uno::Reference< document::XDocumentProperties > xDocProps( xDocPropSupp->getDocumentProperties(), uno::UNO_QUERY_THROW );
+    rtl::OUString sTemplateName = xDocProps->getTemplateName();
+
+    xTemplate = new SwVbaTemplate( this, mxContext, getModel(), sTemplateName );
+    return uno::makeAny( xTemplate );
+}
+
+void SAL_CALL
+SwVbaDocument::setAttachedTemplate( const css::uno::Any& /*_attachedtemplate*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException();
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::Tables( const css::uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel( mxTextDocument, uno::UNO_QUERY_THROW );
+    uno::Reference< XCollection > xColl( new SwVbaTables( mxParent, mxContext, xModel ) );
+
+    if ( aIndex.hasValue() )
+        return xColl->Item( aIndex, uno::Any() );
+    return uno::makeAny( xColl );
+}
+
+void SAL_CALL SwVbaDocument::Activate() throw (uno::RuntimeException)
+{
+    VbaDocumentBase::Activate();
+}
+
+uno::Any
+SwVbaDocument::getControlShape( const ::rtl::OUString& sName )
+{
+    uno::Reference< drawing::XDrawPageSupplier > xDrawPageSupplier( mxTextDocument, uno::UNO_QUERY_THROW );
+    uno::Reference< container::XIndexAccess > xIndexAccess( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
+
+    sal_Int32 nCount = xIndexAccess->getCount();
+    for( int index = 0; index < nCount; index++ )
+    {
+        uno::Any aUnoObj =  xIndexAccess->getByIndex( index );
+        // It seems there are some drawing objects that can not query into Control shapes?
+        uno::Reference< drawing::XControlShape > xControlShape( aUnoObj, uno::UNO_QUERY );
+        if( xControlShape.is() )
+        {
+	    uno::Reference< container::XNamed > xNamed( xControlShape->getControl(), uno::UNO_QUERY_THROW );
+            if( sName.equals( xNamed->getName() ))
+            {
+                return aUnoObj;
+            }
+        }
+    }
+    return uno::Any();
+}
+
+uno::Reference< beans::XIntrospectionAccess > SAL_CALL
+SwVbaDocument::getIntrospection(  ) throw (uno::RuntimeException)
+{
+    return uno::Reference< beans::XIntrospectionAccess >();
+}
+
+uno::Any SAL_CALL
+SwVbaDocument::invoke( const ::rtl::OUString& aFunctionName, const uno::Sequence< uno::Any >& /*aParams*/, uno::Sequence< ::sal_Int16 >& /*aOutParamIndex*/, uno::Sequence< uno::Any >& /*aOutParam*/ ) throw (lang::IllegalArgumentException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
+{
+    OSL_TRACE("** SwVbaDocument::invoke( %s ), will barf",
+        rtl::OUStringToOString( aFunctionName, RTL_TEXTENCODING_UTF8 ).getStr() );
+
+    throw uno::RuntimeException(); // unsupported operation
+}
+
+void SAL_CALL
+SwVbaDocument::setValue( const ::rtl::OUString& /*aPropertyName*/, const uno::Any& /*aValue*/ ) throw (beans::UnknownPropertyException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
+{
+    throw uno::RuntimeException(); // unsupported operation
+}
+uno::Any SAL_CALL
+SwVbaDocument::getValue( const ::rtl::OUString& aPropertyName ) throw (beans::UnknownPropertyException, uno::RuntimeException)
+{
+    uno::Reference< drawing::XControlShape > xControlShape( getControlShape( aPropertyName ), uno::UNO_QUERY_THROW );
+
+    uno::Reference<lang::XMultiComponentFactory > xServiceManager( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< XControlProvider > xControlProvider( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.ControlProvider" ) ), mxContext ), uno::UNO_QUERY_THROW );
+    uno::Reference< msforms::XControl > xControl( xControlProvider->createControl(  xControlShape, getModel() ) );
+    return uno::makeAny( xControl );
+}
+
+::sal_Bool SAL_CALL
+SwVbaDocument::hasMethod( const ::rtl::OUString& /*aName*/ ) throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+::sal_Bool SAL_CALL
+SwVbaDocument::hasProperty( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+{
+    uno::Reference< container::XNameAccess > xFormControls( getFormControls() );
+    if ( xFormControls.is() )
+        return xFormControls->hasByName( aName );
+    return sal_False;
+}
+
+uno::Reference< container::XNameAccess >
+SwVbaDocument::getFormControls()
+{
+    uno::Reference< container::XNameAccess > xFormControls;
+    try
+    {
+        uno::Reference< drawing::XDrawPageSupplier > xDrawPageSupplier( mxTextDocument, uno::UNO_QUERY_THROW );
+        uno::Reference< form::XFormsSupplier >  xFormSupplier( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
+            uno::Reference< container::XIndexAccess > xIndexAccess( xFormSupplier->getForms(), uno::UNO_QUERY_THROW );
+        // get the www-standard container ( maybe we should access the
+        // 'www-standard' by name rather than index, this seems an
+        // implementation detail
+        xFormControls.set( xIndexAccess->getByIndex(0), uno::UNO_QUERY_THROW );
+    }
+    catch( uno::Exception& )
+    {
+    }
+    return xFormControls;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaDocument::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Document" ) );
+    }
+    return aServiceNames;
+}
+
+namespace document
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::vba_service_class_<SwVbaDocument, sdecl::with_args<true> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "SwVbaDocument",
+    "ooo.vba.word.Document" );
+}
diff --git a/sw/source/ui/vba/vbadocument.hxx b/sw/source/ui/vba/vbadocument.hxx
new file mode 100644
index 0000000..29ab576
--- /dev/null
+++ b/sw/source/ui/vba/vbadocument.hxx
@@ -0,0 +1,83 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadocument.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_DOCUMENT_HXX
+#define SW_VBA_DOCUMENT_HXX
+
+#include <ooo/vba/word/XDocument.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbadocumentbase.hxx>
+#include <com/sun/star/text/XTextDocument.hpp>
+
+typedef cppu::ImplInheritanceHelper1< VbaDocumentBase, ooo::vba::word::XDocument > SwVbaDocument_BASE;
+
+class SwVbaDocument : public SwVbaDocument_BASE
+{
+private:
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+
+    void Initialize();
+    css::uno::Any getControlShape( const rtl::OUString& sName );
+    css::uno::Reference< css::container::XNameAccess > getFormControls();
+
+public:
+    SwVbaDocument( const css::uno::Reference< ooo::vba::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& m_xContext, css::uno::Reference< css::frame::XModel > xModel );
+    SwVbaDocument(  css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& xContext );
+    virtual ~SwVbaDocument();
+
+    // XDocument
+    virtual css::uno::Reference< ooo::vba::word::XRange > SAL_CALL getContent() throw ( css::uno::RuntimeException );
+    virtual css::uno::Reference< ooo::vba::word::XRange > SAL_CALL Range( const css::uno::Any& rStart, const css::uno::Any& rEnd ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL BuiltInDocumentProperties( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL CustomDocumentProperties( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Bookmarks( const css::uno::Any& rIndex ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL Variables( const css::uno::Any& rIndex ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL getAttachedTemplate() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAttachedTemplate( const css::uno::Any& _attachedtemplate ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Paragraphs( const css::uno::Any& rIndex ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL Styles( const css::uno::Any& rIndex ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL Tables( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Fields( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Shapes( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Sections( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Activate() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL PageSetup() throw (css::uno::RuntimeException);
+    // XInvocation
+    virtual css::uno::Reference< css::beans::XIntrospectionAccess > SAL_CALL getIntrospection(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL invoke( const ::rtl::OUString& aFunctionName, const css::uno::Sequence< css::uno::Any >& aParams, css::uno::Sequence< ::sal_Int16 >& aOutParamIndex, css::uno::Sequence< css::uno::Any >& aOutParam ) throw (css::lang::IllegalArgumentException, css::script::CannotConvertException, css::reflection::InvocationTargetException, css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const ::rtl::OUString& aPropertyName, const css::uno::Any& aValue ) throw (css::beans::UnknownPropertyException, css::script::CannotConvertException, css::reflection::InvocationTargetException, css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getValue( const ::rtl::OUString& aPropertyName ) throw (css::beans::UnknownPropertyException, css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL hasMethod( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL hasProperty( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_DOCUMENT_HXX */
diff --git a/sw/source/ui/vba/vbadocumentproperties.cxx b/sw/source/ui/vba/vbadocumentproperties.cxx
new file mode 100644
index 0000000..ecdad35
--- /dev/null
+++ b/sw/source/ui/vba/vbadocumentproperties.cxx
@@ -0,0 +1,767 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadocument.cxx,v $
+ * $Revision: 1.7 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbadocumentproperties.hxx"
+#include <cppuhelper/implbase1.hxx>
+#include <cppuhelper/implbase3.hxx>
+#include <com/sun/star/document/XDocumentInfoSupplier.hpp>
+#include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+#include <com/sun/star/beans/NamedValue.hpp>
+#include <com/sun/star/beans/XPropertyContainer.hpp>
+#include <ooo/vba/word/WdBuiltInProperty.hpp>
+#include <ooo/vba/office/MsoDocProperties.hpp>
+#include <memory>
+#include <boost/shared_ptr.hpp>
+#include "wordvbahelper.hxx"
+#include "fesh.hxx"
+#include "docsh.hxx"
+using namespace ::ooo::vba;
+using namespace css;
+
+sal_Int8 lcl_toMSOPropType( const uno::Type& aType ) throw ( lang::IllegalArgumentException )
+{
+    sal_Int16 msoType = office::MsoDocProperties::msoPropertyTypeString;
+
+    switch ( aType.getTypeClass() )
+    {
+        case uno::TypeClass_BOOLEAN:
+            msoType =  office::MsoDocProperties::msoPropertyTypeBoolean;
+            break;
+        case uno::TypeClass_FLOAT:
+            msoType =  office::MsoDocProperties::msoPropertyTypeFloat;
+            break;
+        case uno::TypeClass_STRUCT: // Assume date
+            msoType =  office::MsoDocProperties::msoPropertyTypeDate;
+            break;
+        case  uno::TypeClass_BYTE:
+        case  uno::TypeClass_SHORT:
+        case  uno::TypeClass_LONG:
+        case  uno::TypeClass_HYPER:
+            msoType =  office::MsoDocProperties::msoPropertyTypeNumber;
+            break;
+        default:
+            throw lang::IllegalArgumentException();
+    }
+    return msoType;
+}
+
+class PropertGetSetHelper
+{
+protected:
+    uno::Reference< frame::XModel > m_xModel;
+    uno::Reference< beans::XPropertySet > mxProps;
+public:
+    PropertGetSetHelper( const uno::Reference< frame::XModel >& xModel ):m_xModel( xModel )
+    {
+        uno::Reference< document::XDocumentInfoSupplier > xDocInfoSupp( m_xModel, uno::UNO_QUERY_THROW );
+        mxProps.set( xDocInfoSupp->getDocumentInfo(), uno::UNO_QUERY_THROW );
+    }
+    virtual ~PropertGetSetHelper() {}
+    virtual uno::Any getPropertyValue( const rtl::OUString& rPropName ) = 0;
+    virtual void setPropertyValue( const rtl::OUString& rPropName, const uno::Any& aValue ) = 0;
+    virtual uno::Reference< beans::XPropertySet > getUnoProperties() { return mxProps; }
+
+};
+
+class BuiltinPropertyGetSetHelper : public PropertGetSetHelper
+{
+public:
+    BuiltinPropertyGetSetHelper( const uno::Reference< frame::XModel >& xModel ) :PropertGetSetHelper( xModel )
+    {
+    }
+    virtual uno::Any getPropertyValue( const rtl::OUString& rPropName )
+    {
+        if ( rPropName.equals( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("EditingDuration" ) ) ) )
+        {
+            sal_Int32 nSecs = 0;
+            mxProps->getPropertyValue( rPropName ) >>= nSecs;
+            return uno::makeAny( nSecs/60 ); // minutes
+        }
+        return mxProps->getPropertyValue( rPropName );
+    }
+    virtual void setPropertyValue( const rtl::OUString& rPropName, const uno::Any& aValue )
+    {
+        mxProps->setPropertyValue( rPropName, aValue );
+    }
+};
+
+class CustomPropertyGetSetHelper : public BuiltinPropertyGetSetHelper
+{
+public:
+    CustomPropertyGetSetHelper( const uno::Reference< frame::XModel >& xModel ) :BuiltinPropertyGetSetHelper( xModel )
+    {
+        uno::Reference< document::XDocumentPropertiesSupplier > xDocPropSupp( mxProps, uno::UNO_QUERY_THROW );
+        uno::Reference< document::XDocumentProperties > xDocProp( xDocPropSupp->getDocumentProperties(), uno::UNO_QUERY_THROW );
+        mxProps.set( xDocProp->getUserDefinedProperties(), uno::UNO_QUERY_THROW );
+    }
+};
+class StatisticPropertyGetSetHelper : public PropertGetSetHelper
+{
+    SwDocShell* mpDocShell;
+    uno::Reference< beans::XPropertySet > mxModelProps;
+public:
+    StatisticPropertyGetSetHelper( const uno::Reference< frame::XModel >& xModel ) :PropertGetSetHelper( xModel ) , mpDocShell( NULL )
+    {
+            mxModelProps.set( m_xModel, uno::UNO_QUERY_THROW );
+            mpDocShell = word::getDocShell( xModel );
+    }
+    virtual uno::Any getPropertyValue( const rtl::OUString& rPropName )
+    {
+        uno::Sequence< beans::NamedValue > stats;
+        try
+        {
+            // Characters, ParagraphCount & WordCount are available from
+            // the model ( and addtionally these also update the statics object )
+            //return mxProps->getPropertyValue( rPropName );
+            return mxModelProps->getPropertyValue( rPropName );
+        }
+        catch( uno::Exception& )
+        {
+            OSL_TRACE("Got exception");
+        }
+        uno::Any aReturn;
+        if ( rPropName.equals( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LineCount")) ) ) // special processing needed
+        {
+            if ( mpDocShell )
+            {
+                SwFEShell* pFEShell = mpDocShell->GetFEShell();
+                if(pFEShell)
+                {
+                    aReturn <<= pFEShell->GetLineCount(FALSE);
+                }
+            }
+        }
+        else
+        {
+            mxModelProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParagraphCount") ) ) >>= stats;
+            mxProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("DocumentStatistic") ) ) >>= stats;
+
+            sal_Int32 nLen = stats.getLength();
+            bool bFound = false;
+            for ( sal_Int32 index = 0; index < nLen && !bFound ; ++index )
+            {
+                if ( rPropName.equals( stats[ index ].Name ) )
+                {
+                    aReturn = stats[ index ].Value;
+                    bFound = true;
+                }
+            }
+            if ( !bFound )
+                throw uno::RuntimeException(); // bad Property
+        }
+        return aReturn;
+    }
+
+    virtual void setPropertyValue( const rtl::OUString& rPropName, const uno::Any& aValue )
+    {
+
+        uno::Sequence< beans::NamedValue > stats;
+        mxProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("DocumentStatistic") ) ) >>= stats;
+
+        sal_Int32 nLen = stats.getLength();
+        for ( sal_Int32 index = 0; index < nLen; ++index )
+        {
+            if ( rPropName.equals( stats[ index ].Name ) )
+            {
+                stats[ index ].Value = aValue;
+                mxProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("DocumentStatistic") ), uno::makeAny( stats ) );
+                break;
+            }
+        }
+    }
+};
+
+class DocPropInfo
+{
+public:
+    rtl::OUString msMSODesc;
+    rtl::OUString msOOOPropName;
+    boost::shared_ptr< PropertGetSetHelper > mpPropGetSetHelper;
+
+    static DocPropInfo createDocPropInfo( const rtl::OUString& sDesc, const rtl::OUString& sPropName, boost::shared_ptr< PropertGetSetHelper >& rHelper )
+    {
+        return createDocPropInfo( rtl::OUStringToOString( sDesc, RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString( sPropName, RTL_TEXTENCODING_UTF8 ).getStr(), rHelper );
+    }
+
+    static DocPropInfo createDocPropInfo( const sal_Char* sDesc, const sal_Char* sPropName, boost::shared_ptr< PropertGetSetHelper >& rHelper )
+    {
+        DocPropInfo aItem;
+        aItem.msMSODesc = rtl::OUString::createFromAscii( sDesc );
+        aItem.msOOOPropName = rtl::OUString::createFromAscii( sPropName );
+        aItem.mpPropGetSetHelper = rHelper;
+        return aItem;
+    }
+    uno::Any getValue()
+    {
+        if ( mpPropGetSetHelper.get() )
+            return mpPropGetSetHelper->getPropertyValue( msOOOPropName );
+        return uno::Any();
+    }
+    void setValue( const uno::Any& rValue )
+    {
+        if ( mpPropGetSetHelper.get() )
+            mpPropGetSetHelper->setPropertyValue( msOOOPropName, rValue );
+    }
+    uno::Reference< beans::XPropertySet > getUnoProperties()
+    {
+
+        uno::Reference< beans::XPropertySet > xProps;
+        if ( mpPropGetSetHelper.get() )
+            return mpPropGetSetHelper->getUnoProperties();
+        return xProps;
+    }
+};
+
+
+typedef std::hash_map< sal_Int32, DocPropInfo > MSOIndexToOODocPropInfo;
+
+class BuiltInIndexHelper
+{
+    MSOIndexToOODocPropInfo m_docPropInfoMap;
+    BuiltInIndexHelper();
+public:
+    BuiltInIndexHelper( const uno::Reference< frame::XModel >& xModel )
+    {
+        boost::shared_ptr< PropertGetSetHelper > aStandardHelper( new BuiltinPropertyGetSetHelper( xModel ) );
+        boost::shared_ptr< PropertGetSetHelper > aUsingStatsHelper( new StatisticPropertyGetSetHelper( xModel ) );
+
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyTitle ] = DocPropInfo::createDocPropInfo( "Title", "Title", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertySubject ] = DocPropInfo::createDocPropInfo( "Subject", "Subject", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyAuthor ] = DocPropInfo::createDocPropInfo( "Author", "Author", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyKeywords ] = DocPropInfo::createDocPropInfo( "Keywords", "Keywords", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyComments ] = DocPropInfo::createDocPropInfo( "Comments", "Description", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyTemplate ] = DocPropInfo::createDocPropInfo( "Template", "Template", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyLastAuthor ] = DocPropInfo::createDocPropInfo( "Last author", "ModifiedBy", aStandardHelper ); // doesn't seem to exist - throw or return nothing ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyRevision ] = DocPropInfo::createDocPropInfo( "Revision number", "EditingCycles", aStandardHelper ); // doesn't seem to exist - throw or return nothing ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyAppName ] = DocPropInfo::createDocPropInfo( "Application name", "Generator", aStandardHelper ); // doesn't seem to exist - throw or return nothing ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyTimeLastPrinted ] = DocPropInfo::createDocPropInfo( "Last print date", "PrintDate", aStandardHelper ); // doesn't seem to exist - throw or return nothing ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyTimeCreated ] = DocPropInfo::createDocPropInfo( "Creation date", "CreationDate", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyTimeLastSaved ] = DocPropInfo::createDocPropInfo( "Last save time", "ModifyDate", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyVBATotalEdit ] = DocPropInfo::createDocPropInfo( "Total editing time", "EditingDuration", aStandardHelper ); // Not sure if this is correct
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyPages ] = DocPropInfo::createDocPropInfo( "Number of pages", "PageCount", aUsingStatsHelper ); // special handling required ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyWords ] = DocPropInfo::createDocPropInfo( "Number of words", "WordCount", aUsingStatsHelper ); // special handling require ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyCharacters ] = DocPropInfo::createDocPropInfo( "Number of characters", "CharacterCount", aUsingStatsHelper ); // special handling required ?
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertySecurity ] = DocPropInfo::createDocPropInfo( "Security", "", aStandardHelper ); // doesn't seem to exist
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyCategory ] = DocPropInfo::createDocPropInfo( "Category", "Category", aStandardHelper ); // hacked in
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyFormat ] = DocPropInfo::createDocPropInfo( "Format", "", aStandardHelper ); // doesn't seem to exist
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyManager ] = DocPropInfo::createDocPropInfo( "Manager", "Manager", aStandardHelper ); // hacked in
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyCompany ] = DocPropInfo::createDocPropInfo( "Company", "Company", aStandardHelper ); // hacked in
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyBytes ] = DocPropInfo::createDocPropInfo( "Number of bytes", "", aStandardHelper ); // doesn't seem to exist - size on disk exists ( for an already saved document ) perhaps it will do ( or we need something else )
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyLines ] = DocPropInfo::createDocPropInfo( "Number of lines", "LineCount", aUsingStatsHelper ); // special handling
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyParas ] = DocPropInfo::createDocPropInfo( "Number of paragraphs", "ParagraphCount", aUsingStatsHelper ); // special handling
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertySlides ] = DocPropInfo::createDocPropInfo( "Number of slides", "" , aStandardHelper ); // doesn't seem to exist
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyNotes ] = DocPropInfo::createDocPropInfo( "Number of notes", "", aStandardHelper ); // doesn't seem to exist
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyHiddenSlides ] = DocPropInfo::createDocPropInfo("Number of hidden Slides", "", aStandardHelper  ); // doesn't seem to exist
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyMMClips ] = DocPropInfo::createDocPropInfo( "Number of multimedia clips", "", aStandardHelper ); // doesn't seem to exist
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyHyperlinkBase ] = DocPropInfo::createDocPropInfo( "Hyperlink base", "AutoloadURL", aStandardHelper );
+        m_docPropInfoMap[ word::WdBuiltInProperty::wdPropertyCharsWSpaces ] = DocPropInfo::createDocPropInfo( "Number of characters (with spaces)", "", aStandardHelper ); // doesn't seem to be supported
+    }
+
+    MSOIndexToOODocPropInfo& getDocPropInfoMap() { return m_docPropInfoMap; }
+};
+
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::XDocumentProperty > SwVbaDocumentProperty_BASE;
+
+class SwVbaBuiltInDocumentProperty : public SwVbaDocumentProperty_BASE
+{
+protected:
+    DocPropInfo mPropInfo;
+public:
+    SwVbaBuiltInDocumentProperty(  const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const DocPropInfo& rInfo );
+    // XDocumentProperty
+    virtual void SAL_CALL Delete(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getName(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setName( const ::rtl::OUString& Name ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual ::sal_Int8 SAL_CALL getType(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setType( ::sal_Int8 Type ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getLinkToContent(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setLinkToContent( ::sal_Bool LinkToContent ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual uno::Any SAL_CALL getValue(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setValue( const uno::Any& Value ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getLinkSource(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setLinkSource( const rtl::OUString& LinkSource ) throw (script::BasicErrorException, uno::RuntimeException);
+    //XDefaultProperty
+    virtual ::rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (uno::RuntimeException) { return rtl::OUString::createFromAscii("Value"); }
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+class SwVbaCustomDocumentProperty : public SwVbaBuiltInDocumentProperty
+{
+public:
+
+    SwVbaCustomDocumentProperty(  const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const DocPropInfo& rInfo );
+
+    virtual ::sal_Bool SAL_CALL getLinkToContent(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setLinkToContent( ::sal_Bool LinkToContent ) throw (script::BasicErrorException, uno::RuntimeException);
+
+    virtual rtl::OUString SAL_CALL getLinkSource(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setLinkSource( const rtl::OUString& LinkSource ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL Delete(  ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setName( const ::rtl::OUString& Name ) throw (script::BasicErrorException, uno::RuntimeException);
+    virtual void SAL_CALL setType( ::sal_Int8 Type ) throw (script::BasicErrorException, uno::RuntimeException);
+
+};
+
+
+SwVbaCustomDocumentProperty::SwVbaCustomDocumentProperty(  const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const DocPropInfo& rInfo ) : SwVbaBuiltInDocumentProperty( xParent, xContext, rInfo )
+{
+}
+
+sal_Bool
+SwVbaCustomDocumentProperty::getLinkToContent(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // #FIXME we need to store the link content somewhere
+    return sal_False;
+}
+
+void
+SwVbaCustomDocumentProperty::setLinkToContent( sal_Bool /*bLinkContent*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+}
+
+rtl::OUString
+SwVbaCustomDocumentProperty::getLinkSource(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // #FIXME we need to store the link content somewhere
+    return rtl::OUString();;
+}
+
+void
+SwVbaCustomDocumentProperty::setLinkSource( const rtl::OUString& /*rsLinkContent*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // #FIXME we need to store the link source somewhere
+}
+
+void SAL_CALL
+SwVbaCustomDocumentProperty::setName( const ::rtl::OUString& /*Name*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // setName on existing property ?
+    // #FIXME
+    // do we need to delete existing property and create a new one?
+}
+
+void SAL_CALL
+SwVbaCustomDocumentProperty::setType( ::sal_Int8 /*Type*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // setType, do we need to do a conversion?
+    // #FIXME the underlying value needs to be changed to the new type
+}
+
+void SAL_CALL
+SwVbaCustomDocumentProperty::Delete(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertyContainer > xContainer( mPropInfo.getUnoProperties(), uno::UNO_QUERY_THROW );
+    xContainer->removeProperty( getName() );
+}
+
+SwVbaBuiltInDocumentProperty::SwVbaBuiltInDocumentProperty( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const DocPropInfo& rInfo ) : SwVbaDocumentProperty_BASE( xParent, xContext ), mPropInfo( rInfo )
+{
+}
+
+void SAL_CALL
+SwVbaBuiltInDocumentProperty::Delete(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // not valid for Builtin
+    throw uno::RuntimeException();
+}
+
+::rtl::OUString SAL_CALL
+SwVbaBuiltInDocumentProperty::getName(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    return mPropInfo.msMSODesc;
+}
+
+void SAL_CALL
+SwVbaBuiltInDocumentProperty::setName( const rtl::OUString& ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // not valid for Builtin
+    throw uno::RuntimeException();
+}
+
+::sal_Int8 SAL_CALL
+SwVbaBuiltInDocumentProperty::getType(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    return lcl_toMSOPropType( getValue().getValueType() );
+}
+
+void SAL_CALL
+SwVbaBuiltInDocumentProperty::setType( ::sal_Int8 /*Type*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // not valid for Builtin
+    throw uno::RuntimeException();
+}
+
+::sal_Bool SAL_CALL
+SwVbaBuiltInDocumentProperty::getLinkToContent(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    return sal_False; // built-in always false
+}
+
+void SAL_CALL
+SwVbaBuiltInDocumentProperty::setLinkToContent( ::sal_Bool /*LinkToContent*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // not valid for Builtin
+    throw uno::RuntimeException();
+}
+
+uno::Any SAL_CALL
+SwVbaBuiltInDocumentProperty::getValue(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    uno::Any aRet = mPropInfo.getValue();
+    if ( !aRet.hasValue() )
+        throw uno::RuntimeException();
+    return aRet;
+}
+
+void SAL_CALL
+SwVbaBuiltInDocumentProperty::setValue( const uno::Any& Value ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    mPropInfo.setValue( Value );
+}
+
+rtl::OUString SAL_CALL
+SwVbaBuiltInDocumentProperty::getLinkSource(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // not valid for Builtin
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL
+SwVbaBuiltInDocumentProperty::setLinkSource( const rtl::OUString& /*LinkSource*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // not valid for Builtin
+    throw uno::RuntimeException();
+}
+
+rtl::OUString&
+SwVbaBuiltInDocumentProperty::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaBuiltinDocumentProperty") );
+    return sImplName;
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaBuiltInDocumentProperty::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.DocumentProperty" ) );
+    }
+    return aServiceNames;
+}
+typedef ::cppu::WeakImplHelper3< com::sun::star::container::XIndexAccess
+        ,com::sun::star::container::XNameAccess
+        ,com::sun::star::container::XEnumerationAccess
+        > PropertiesImpl_BASE;
+
+typedef std::hash_map< sal_Int32, uno::Reference< XDocumentProperty > > DocProps;
+
+typedef ::cppu::WeakImplHelper1< com::sun::star::container::XEnumeration > DocPropEnumeration_BASE;
+class DocPropEnumeration : public DocPropEnumeration_BASE
+{
+    DocProps mDocProps;
+    DocProps::iterator mIt;
+public:
+
+    DocPropEnumeration( const DocProps& rProps ) : mDocProps( rProps ), mIt( mDocProps.begin() ) {}
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return mIt != mDocProps.end();
+    }
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasMoreElements() )
+            throw container::NoSuchElementException();
+        return uno::makeAny( mIt++->second );
+    }
+};
+
+typedef std::hash_map< rtl::OUString, uno::Reference< XDocumentProperty >, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > DocPropsByName;
+
+class BuiltInPropertiesImpl : public PropertiesImpl_BASE
+{
+protected:
+
+    uno::Reference< XHelperInterface > m_xParent;
+    uno::Reference< uno::XComponentContext > m_xContext;
+    uno::Reference< frame::XModel > m_xModel;
+    uno::Reference< document::XDocumentInfo > m_xOOOBuiltIns;
+
+    DocProps mDocProps;
+    DocPropsByName mNamedDocProps;
+
+    public:
+    BuiltInPropertiesImpl( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : m_xParent( xParent ), m_xContext( xContext ), m_xModel( xModel )
+    {
+        BuiltInIndexHelper builtIns( m_xModel );
+        for ( sal_Int32 index = word::WdBuiltInProperty::wdPropertyTitle; index <= word::WdBuiltInProperty::wdPropertyCharsWSpaces; ++index )
+        {
+            mDocProps[ index ] = new SwVbaBuiltInDocumentProperty( xParent, xContext, builtIns.getDocPropInfoMap()[ index ] );
+            mNamedDocProps[ mDocProps[ index ]->getName() ] = mDocProps[ index ];
+        }
+    }
+// XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return mDocProps.size();
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException )
+    {
+        // correct the correct by the base class for 1 based indices
+        DocProps::iterator it = mDocProps.find( ++Index );
+        if ( it == mDocProps.end() )
+            throw lang::IndexOutOfBoundsException();
+        return uno::makeAny( it->second  );
+    }
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasByName( aName ) )
+        throw container::NoSuchElementException();
+        DocPropsByName::iterator it = mNamedDocProps.find( aName );
+        return uno::Any( it->second );
+
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > aNames( getCount() );
+        rtl::OUString* pName = aNames.getArray();
+        DocPropsByName::iterator it_end = mNamedDocProps.end();
+        for(  DocPropsByName::iterator it = mNamedDocProps.begin(); it != it_end; ++it, ++pName )
+           *pName = it->first;
+        return aNames;
+    }
+
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        DocPropsByName::iterator it = mNamedDocProps.find( aName );
+        if ( it == mNamedDocProps.end() )
+            return sal_False;
+        return sal_True;
+    }
+// XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return  XDocumentProperty::static_type(0);
+    }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return mDocProps.size() > 0;
+    }
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        return new DocPropEnumeration( mDocProps );
+    }
+};
+
+SwVbaBuiltinDocumentProperties::SwVbaBuiltinDocumentProperties( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : SwVbaDocumentproperties_BASE( xParent, xContext,  uno::Reference< container::XIndexAccess >( new BuiltInPropertiesImpl( xParent, xContext, xModel ) ) ), m_xModel( xModel )
+{
+}
+
+uno::Reference< XDocumentProperty > SAL_CALL
+SwVbaBuiltinDocumentProperties::Add( const ::rtl::OUString& /*Name*/, ::sal_Bool /*LinkToContent*/, ::sal_Int8 /*Type*/, const uno::Any& /*value*/, const uno::Any& /*LinkSource*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    throw uno::RuntimeException(
+        rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("not supported for Builtin properties") ), uno::Reference< uno::XInterface >() );
+}
+
+// XEnumerationAccess
+uno::Type SAL_CALL
+SwVbaBuiltinDocumentProperties::getElementType() throw (uno::RuntimeException)
+{
+    return  XDocumentProperty::static_type(0);
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+SwVbaBuiltinDocumentProperties::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return xEnumAccess->createEnumeration();
+}
+
+// ScVbaCollectionBaseImpl
+uno::Any
+SwVbaBuiltinDocumentProperties::createCollectionObject( const uno::Any& aSource )
+{
+    // pass through
+    return aSource;
+}
+
+// XHelperInterface
+rtl::OUString&
+SwVbaBuiltinDocumentProperties::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaBuiltinDocumentProperties") );
+    return sImplName;
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaBuiltinDocumentProperties::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.DocumentProperties" ) );
+    }
+    return aServiceNames;
+}
+
+class CustomPropertiesImpl : public PropertiesImpl_BASE
+{
+    uno::Reference< XHelperInterface > m_xParent;
+    uno::Reference< uno::XComponentContext > m_xContext;
+    uno::Reference< frame::XModel > m_xModel;
+    uno::Reference< beans::XPropertySet > mxUserDefinedProp;
+    boost::shared_ptr< PropertGetSetHelper > mpPropGetSetHelper;
+public:
+    CustomPropertiesImpl( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : m_xParent( xParent ), m_xContext( xContext ), m_xModel( xModel )
+    {
+        // suck in the document( custom ) properties
+        uno::Reference< document::XDocumentInfoSupplier > xDocInfoSupp( m_xModel, uno::UNO_QUERY_THROW );
+        uno::Reference< document::XDocumentPropertiesSupplier > xDocPropSupp( xDocInfoSupp->getDocumentInfo(), uno::UNO_QUERY_THROW );
+        uno::Reference< document::XDocumentProperties > xDocProp( xDocPropSupp->getDocumentProperties(), uno::UNO_QUERY_THROW );
+        mxUserDefinedProp.set( xDocProp->getUserDefinedProperties(), uno::UNO_QUERY_THROW );
+        mpPropGetSetHelper.reset( new CustomPropertyGetSetHelper( m_xModel ) );
+    };
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return mxUserDefinedProp->getPropertySetInfo()->getProperties().getLength();
+    }
+
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException )
+    {
+        uno::Sequence< beans::Property > aProps = mxUserDefinedProp->getPropertySetInfo()->getProperties();
+        if ( Index >= aProps.getLength() )
+            throw lang::IndexOutOfBoundsException();
+        // How to determine type e.g Date? ( com.sun.star.util.DateTime )
+        DocPropInfo aPropInfo = DocPropInfo::createDocPropInfo( aProps[ Index ].Name, aProps[ Index ].Name, mpPropGetSetHelper );
+        return uno::makeAny( uno::Reference< XDocumentProperty >( new SwVbaCustomDocumentProperty( m_xParent, m_xContext, aPropInfo ) ) );
+    }
+
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasByName( aName ) )
+            throw container::NoSuchElementException();
+
+        DocPropInfo aPropInfo = DocPropInfo::createDocPropInfo( aName, aName, mpPropGetSetHelper );
+        return uno::makeAny( uno::Reference< XDocumentProperty >( new SwVbaCustomDocumentProperty( m_xParent, m_xContext, aPropInfo ) ) );
+    }
+
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< beans::Property > aProps = mxUserDefinedProp->getPropertySetInfo()->getProperties();
+        uno::Sequence< rtl::OUString > aNames( aProps.getLength() );
+        rtl::OUString* pString = aNames.getArray();
+        rtl::OUString* pEnd = ( pString + aNames.getLength() );
+        beans::Property* pProp = aProps.getArray();
+        for ( ; pString != pEnd; ++pString, ++pProp )
+            *pString = pProp->Name;
+        return aNames;
+    }
+
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        OSL_TRACE("hasByName(%s) returns %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), mxUserDefinedProp->getPropertySetInfo()->hasPropertyByName( aName ) );
+        return mxUserDefinedProp->getPropertySetInfo()->hasPropertyByName( aName );
+    }
+
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return  XDocumentProperty::static_type(0);
+    }
+
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return getCount() > 0;
+    }
+
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        // create a map of properties ( the key doesn't matter )
+        OSL_TRACE("Creating an enumeration");
+        sal_Int32 key = 0;
+        sal_Int32 nElem =  getCount();
+        DocProps simpleDocPropSnapShot;
+        for ( ; key < nElem; ++key )
+             simpleDocPropSnapShot[ key ].set( getByIndex( key ), uno::UNO_QUERY_THROW );
+        OSL_TRACE("After creating the enumeration");
+        return  new DocPropEnumeration( simpleDocPropSnapShot );
+    }
+
+    void addProp( const ::rtl::OUString& Name, ::sal_Int8 /*Type*/, const uno::Any& Value )
+    {
+        sal_Int16 attributes = 128;
+        uno::Reference< beans::XPropertyContainer > xContainer( mxUserDefinedProp, uno::UNO_QUERY_THROW );
+        // TODO fixme, perform the necessary Type Value conversions
+        xContainer->addProperty( Name, attributes, Value );
+    }
+
+};
+
+
+SwVbaCustomDocumentProperties::SwVbaCustomDocumentProperties( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : SwVbaBuiltinDocumentProperties( xParent, xContext, xModel )
+{
+    // replace the m_xIndexAccess implementation ( we need a virtual init )
+    m_xIndexAccess.set( new CustomPropertiesImpl( xParent, xContext, xModel ) );
+    m_xNameAccess.set( m_xIndexAccess, uno::UNO_QUERY_THROW );
+}
+
+uno::Reference< XDocumentProperty > SAL_CALL
+SwVbaCustomDocumentProperties::Add( const ::rtl::OUString& Name, ::sal_Bool LinkToContent, ::sal_Int8 Type, const uno::Any& Value, const uno::Any& LinkSource ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    CustomPropertiesImpl* pCustomProps = dynamic_cast< CustomPropertiesImpl* > ( m_xIndexAccess.get() );
+    uno::Reference< XDocumentProperty > xDocProp;
+    if ( pCustomProps )
+    {
+        rtl::OUString sLinkSource;
+        pCustomProps->addProp( Name, Type, Value );
+
+        xDocProp.set( m_xNameAccess->getByName( Name ), uno::UNO_QUERY_THROW );
+        xDocProp->setLinkToContent( LinkToContent );
+
+        if ( LinkSource >>= sLinkSource )
+           xDocProp->setLinkSource( sLinkSource );
+    }
+    return xDocProp;
+}
+
+// XHelperInterface
+rtl::OUString&
+SwVbaCustomDocumentProperties::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaCustomDocumentProperties") );
+    return sImplName;
+}
diff --git a/sw/source/ui/vba/vbadocumentproperties.hxx b/sw/source/ui/vba/vbadocumentproperties.hxx
new file mode 100644
index 0000000..57cc41e
--- /dev/null
+++ b/sw/source/ui/vba/vbadocumentproperties.hxx
@@ -0,0 +1,70 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadocument.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_DOCUMENTPROPERTIES_HXX
+#define SW_VBA_DOCUMENTPROPERTIES_HXX
+
+#include <ooo/vba/XDocumentProperties.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <hash_map>
+
+typedef CollTestImplHelper< ov::XDocumentProperties > SwVbaDocumentproperties_BASE;
+
+class SwVbaBuiltinDocumentProperties : public SwVbaDocumentproperties_BASE
+{
+protected:
+    css::uno::Reference< css::frame::XModel > m_xModel;
+public:
+    SwVbaBuiltinDocumentProperties( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xDocument );
+
+    // XDocumentProperties
+    virtual css::uno::Reference< ::ooo::vba::XDocumentProperty > SAL_CALL Add( const ::rtl::OUString& Name, ::sal_Bool LinkToContent, ::sal_Int8 Type, const css::uno::Any& Value, const css::uno::Any& LinkSource ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    // ScVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+class SwVbaCustomDocumentProperties : public SwVbaBuiltinDocumentProperties
+{
+public:
+    SwVbaCustomDocumentProperties( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xDocument );
+// XDocumentProperties
+    virtual css::uno::Reference< ::ooo::vba::XDocumentProperty > SAL_CALL Add( const ::rtl::OUString& Name, ::sal_Bool LinkToContent, ::sal_Int8 Type, const css::uno::Any& Value, const css::uno::Any& LinkSource ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+};
+
+#endif /* SW_VBA_DOCUMENTPROPERTY_HXX */
diff --git a/sw/source/ui/vba/vbadocuments.cxx b/sw/source/ui/vba/vbadocuments.cxx
new file mode 100644
index 0000000..b97498f
--- /dev/null
+++ b/sw/source/ui/vba/vbadocuments.cxx
@@ -0,0 +1,200 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadocuments.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <comphelper/processfactory.hxx>
+
+#include <cppuhelper/implbase1.hxx>
+#include <cppuhelper/implbase3.hxx>
+
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/frame/XComponentLoader.hpp>
+#include <com/sun/star/lang/XComponent.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/frame/XFrame.hpp>
+#include <com/sun/star/frame/FrameSearchFlag.hpp>
+#include <com/sun/star/util/XModifiable.hpp>
+#include <com/sun/star/frame/XStorable.hpp>
+#include <com/sun/star/lang/DisposedException.hpp>
+#include <com/sun/star/beans/PropertyVetoException.hpp>
+#include <com/sun/star/util/XCloseable.hpp>
+#include <com/sun/star/lang/IndexOutOfBoundsException.hpp>
+#include <com/sun/star/document/XTypeDetection.hpp>
+#include <com/sun/star/uri/XUriReference.hpp>
+#include <com/sun/star/uri/XUriReferenceFactory.hpp>
+
+#include <sfx2/objsh.hxx>
+#include <tools/urlobj.hxx>
+
+#include "vbaglobals.hxx"
+#include "vbadocument.hxx"
+#include "vbadocuments.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+#include <hash_map>
+#include <osl/file.hxx>
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+static uno::Any
+getDocument( uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< text::XTextDocument > &xDoc, const uno::Any& aApplication )
+{
+    // FIXME: fine as long as SwVbaDocument is stateless ...
+    uno::Reference< frame::XModel > xModel( xDoc, uno::UNO_QUERY );
+    if( !xModel.is() )
+        return uno::Any();
+
+    SwVbaDocument *pWb = new SwVbaDocument(  uno::Reference< XHelperInterface >( aApplication, uno::UNO_QUERY_THROW ), xContext, xModel );
+    return uno::Any( uno::Reference< word::XDocument > (pWb) );
+}
+
+class DocumentEnumImpl : public EnumerationHelperImpl
+{
+    uno::Any m_aApplication;
+public:
+    DocumentEnumImpl( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XEnumeration >& xEnumeration, const uno::Any& aApplication ) throw ( uno::RuntimeException ) : EnumerationHelperImpl( xContext, xEnumeration ), m_aApplication( aApplication ) {}
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        uno::Reference< text::XTextDocument > xDoc( m_xEnumeration->nextElement(), uno::UNO_QUERY_THROW );
+        return getDocument( m_xContext, xDoc, m_aApplication );
+    }
+};
+
+SwVbaDocuments::SwVbaDocuments( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext ) : SwVbaDocuments_BASE( xParent, xContext, VbaDocumentsBase::WORD_DOCUMENT )
+{
+}
+// XEnumerationAccess
+uno::Type
+SwVbaDocuments::getElementType() throw (uno::RuntimeException)
+{
+    return word::XDocument::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaDocuments::createEnumeration() throw (uno::RuntimeException)
+{
+    // #FIXME its possible the DocumentEnumImpl here doens't reflect
+    // the state of this object ( although it should ) would be
+    // safer to create an enumeration based on this objects state
+    // rather than one effectively based of the desktop component
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return new DocumentEnumImpl( mxContext, xEnumerationAccess->createEnumeration(), Application() );
+}
+
+uno::Any
+SwVbaDocuments::createCollectionObject( const uno::Any& aSource )
+{
+    uno::Reference< text::XTextDocument > xDoc( aSource, uno::UNO_QUERY_THROW );
+    return getDocument( mxContext, xDoc, Application() );
+}
+
+uno::Any SAL_CALL
+SwVbaDocuments::Add( const uno::Any& Template, const uno::Any& /*NewTemplate*/, const uno::Any& /*DocumentType*/, const uno::Any& /*Visible*/ ) throw (uno::RuntimeException)
+{
+    rtl::OUString sFileName;
+    if( Template.hasValue() && ( Template >>= sFileName ) )
+    {
+        return  Open( sFileName, uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any(), uno::Any());
+    }
+    uno::Reference <text::XTextDocument> xTextDoc( VbaDocumentsBase::Add() , uno::UNO_QUERY_THROW );
+
+    if( xTextDoc.is() )
+        return getDocument( mxContext, xTextDoc, Application() );
+    return uno::Any();
+}
+
+// #TODO# #FIXME# can any of the unused params below be used?
+void SAL_CALL
+SwVbaDocuments::Close( const uno::Any& /*SaveChanges*/, const uno::Any& /*OriginalFormat*/, const uno::Any& /*RouteDocument*/ ) throw (uno::RuntimeException)
+{
+    VbaDocumentsBase::Close();
+}
+
+// #TODO# #FIXME# can any of the unused params below be used?
+uno::Any SAL_CALL
+SwVbaDocuments::Open( const ::rtl::OUString& Filename, const uno::Any& /*ConfirmConversions*/, const uno::Any& ReadOnly, const uno::Any& /*AddToRecentFiles*/, const uno::Any& /*PasswordDocument*/, const uno::Any& /*PasswordTemplate*/, const uno::Any& /*Revert*/, const uno::Any& /*WritePasswordDocument*/, const uno::Any& /*WritePasswordTemplate*/, const uno::Any& /*Format*/, const uno::Any& /*Encoding*/, const uno::Any& /*Visible*/, const uno::Any& /*OpenAndRepair*/, const uno::Any& /*DocumentDirection*/, const uno::Any& /*NoEncodingDialog*/, const uno::Any& /*XMLTransform*/ ) throw (uno::RuntimeException)
+{
+    // we need to detect if this is a URL, if not then assume its a file path
+    rtl::OUString aURL;
+    INetURLObject aObj;
+    aObj.SetURL( Filename );
+    bool bIsURL = aObj.GetProtocol() != INET_PROT_NOT_VALID;
+    if ( bIsURL )
+        aURL = Filename;
+    else
+        osl::FileBase::getFileURLFromSystemPath( Filename, aURL );
+
+    uno::Sequence< beans::PropertyValue > sProps(0);
+
+    uno::Reference <text::XTextDocument> xSpreadDoc( VbaDocumentsBase::Open( Filename, ReadOnly, sProps ), uno::UNO_QUERY_THROW );
+    uno::Any aRet = getDocument( mxContext, xSpreadDoc, Application() );
+    uno::Reference< word::XDocument > xDocument( aRet, uno::UNO_QUERY );
+    if ( xDocument.is() )
+        xDocument->Activate();
+    return aRet;
+}
+
+    // VbaDocumentsBase / XDocumentsBase (to avoid warning C4266 for hiding function on wntmsci)
+uno::Any SAL_CALL
+SwVbaDocuments::Add() throw (uno::RuntimeException)
+{
+    return VbaDocumentsBase::Add();
+}
+
+void SAL_CALL
+SwVbaDocuments::Close(  ) throw (uno::RuntimeException)
+{
+    VbaDocumentsBase::Close();
+}
+
+uno::Any SAL_CALL
+SwVbaDocuments::Open( const ::rtl::OUString& Filename, const uno::Any& ReadOnly, const uno::Sequence< beans::PropertyValue >& rProps ) throw (uno::RuntimeException)
+{
+    return VbaDocumentsBase::Open( Filename, ReadOnly, rProps );
+}
+
+rtl::OUString&
+SwVbaDocuments::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaDocuments") );
+    return sImplName;
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaDocuments::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Documents") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbadocuments.hxx b/sw/source/ui/vba/vbadocuments.hxx
new file mode 100644
index 0000000..cb6b9d2
--- /dev/null
+++ b/sw/source/ui/vba/vbadocuments.hxx
@@ -0,0 +1,69 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_DOCUMENTS_HXX
+#define SW_VBA_DOCUMENTS_HXX
+
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XDocuments.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <vbahelper/vbadocumentsbase.hxx>
+#include "wordvbahelper.hxx"
+
+
+typedef cppu::ImplInheritanceHelper1< VbaDocumentsBase, ov::word::XDocuments > SwVbaDocuments_BASE;
+
+class SwVbaDocuments : public SwVbaDocuments_BASE
+{
+public:
+    SwVbaDocuments( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext );
+    virtual ~SwVbaDocuments() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaDocuments_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+
+    // Methods
+    virtual css::uno::Any SAL_CALL Add( const css::uno::Any& Template, const css::uno::Any& NewTemplate, const css::uno::Any& DocumentType, const css::uno::Any& Visible ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Open( const ::rtl::OUString& Filename, const css::uno::Any& ConfirmConversions, const css::uno::Any& ReadOnly, const css::uno::Any& AddToRecentFiles, const css::uno::Any& PasswordDocument, const css::uno::Any& PasswordTemplate, const css::uno::Any& Revert, const css::uno::Any& WritePasswordDocument, const css::uno::Any& WritePasswordTemplate, const css::uno::Any& Format, const css::uno::Any& Encoding, const css::uno::Any& Visible, const css::uno::Any& OpenAndRepair, const css::uno::Any& DocumentDirection, const css::uno::Any& NoEncodingDialog, const css::uno::Any& XMLTransform ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Close( const css::uno::Any& SaveChanges, const css::uno::Any& OriginalFormat, const css::uno::Any& RouteDocument ) throw (css::uno::RuntimeException);
+
+    // VbaDocumentsBase / XDocumentsBase (to avoid warning C4266 for hiding function on wntmsci)
+    virtual css::uno::Any SAL_CALL Add() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Close(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Open( const ::rtl::OUString& Filename, const css::uno::Any& ReadOnly, const css::uno::Sequence< css::beans::PropertyValue >& rProps ) throw (css::uno::RuntimeException);
+};
+
+#endif /* SW_VBA_DOCUMENTS_HXX */
diff --git a/sw/source/ui/vba/vbafield.cxx b/sw/source/ui/vba/vbafield.cxx
new file mode 100644
index 0000000..e43dab4
--- /dev/null
+++ b/sw/source/ui/vba/vbafield.cxx
@@ -0,0 +1,480 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:  $
+ * $Revision:  $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbafield.hxx"
+#include "vbarange.hxx"
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include <com/sun/star/view/XSelectionSupplier.hpp>
+#include <com/sun/star/text/XTextFieldsSupplier.hpp>
+#include <ooo/vba/word/WdFieldType.hpp>
+#include <com/sun/star/text/FilenameDisplayFormat.hpp>
+#include <com/sun/star/util/XRefreshable.hpp>
+#include <swtypes.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+// *** SwVbaField ***********************************************
+
+SwVbaField::SwVbaField(  const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rDocument, const  uno::Reference< css::text::XTextField >& xTextField) throw ( uno::RuntimeException ) : SwVbaField_BASE( rParent, rContext ), mxTextDocument( rDocument )
+{
+    mxTextField.set( xTextField, uno::UNO_QUERY_THROW );
+}
+
+// XHelperInterface
+rtl::OUString&
+SwVbaField::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaField") );
+    return sImplName;
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaField::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Field" ) );
+    }
+    return aServiceNames;
+}
+
+// *** _ReadFieldParams ***********************************************
+// the codes are copied from ww8par5.cxx
+class _ReadFieldParams
+{
+private:
+    String aData;
+    xub_StrLen nLen, nFnd, nNext, nSavPtr;
+    String aFieldName;
+public:
+    _ReadFieldParams( const String& rData );
+    ~_ReadFieldParams();
+
+    xub_StrLen GoToTokenParam();
+    long SkipToNextToken();
+    xub_StrLen GetTokenSttPtr() const   { return nFnd;  }
+
+    xub_StrLen FindNextStringPiece( xub_StrLen _nStart = STRING_NOTFOUND );
+    bool GetTokenSttFromTo(xub_StrLen* _pFrom, xub_StrLen* _pTo,
+        xub_StrLen _nMax);
+
+    String GetResult() const;
+    String GetFieldName()const { return aFieldName; }
+};
+
+
+_ReadFieldParams::_ReadFieldParams( const String& _rData )
+    : aData( _rData ), nLen( _rData.Len() ), nNext( 0 )
+{
+    /*
+        erstmal nach einer oeffnenden Klammer oder einer Leerstelle oder einem
+        Anfuehrungszeichen oder einem Backslash suchen, damit der Feldbefehl
+        (also INCLUDEPICTURE bzw EINFUeGENGRAFIK bzw ...) ueberlesen wird
+    */
+    while( (nLen > nNext) && (aData.GetChar( nNext ) == ' ') )
+        ++nNext;
+
+    sal_Unicode c;
+    while(     nLen > nNext
+            && (c = aData.GetChar( nNext )) != ' '
+            && c != '"'
+            && c != '\\'
+            && c != 132
+            && c != 0x201c )
+        ++nNext;
+
+    nFnd      = nNext;
+    nSavPtr   = nNext;
+    aFieldName = aData.Copy( 0, nFnd );
+//  cLastChar = aData.GetChar( nSavPtr );
+}
+
+
+_ReadFieldParams::~_ReadFieldParams()
+{
+//  aData.SetChar( nSavPtr, cLastChar );
+}
+
+
+String _ReadFieldParams::GetResult() const
+{
+    return    (STRING_NOTFOUND == nFnd)
+            ? aEmptyStr
+            : aData.Copy( nFnd, (nSavPtr - nFnd) );
+}
+
+
+xub_StrLen _ReadFieldParams::GoToTokenParam()
+{
+    xub_StrLen nOld = nNext;
+    if( -2 == SkipToNextToken() )
+        return GetTokenSttPtr();
+    nNext = nOld;
+    return STRING_NOTFOUND;
+}
+
+// ret: -2: NOT a '\' parameter but normal Text
+long _ReadFieldParams::SkipToNextToken()
+{
+    long nRet = -1;     // Ende
+    if (
+         (STRING_NOTFOUND != nNext) && (nLen > nNext) &&
+         STRING_NOTFOUND != (nFnd = FindNextStringPiece(nNext))
+       )
+    {
+        nSavPtr = nNext;
+
+        if ('\\' == aData.GetChar(nFnd) && '\\' != aData.GetChar(nFnd + 1))
+        {
+            nRet = aData.GetChar(++nFnd);
+            nNext = ++nFnd;             // und dahinter setzen
+        }
+        else
+        {
+            nRet = -2;
+            if (
+                 (STRING_NOTFOUND != nSavPtr ) &&
+                 (
+                   ('"' == aData.GetChar(nSavPtr - 1)) ||
+                   (0x201d == aData.GetChar(nSavPtr - 1))
+                 )
+               )
+            {
+                --nSavPtr;
+            }
+        }
+    }
+    return nRet;
+}
+
+// FindNextPara sucht naechsten Backslash-Parameter oder naechste Zeichenkette
+// bis zum Blank oder naechsten "\" oder zum schliessenden Anfuehrungszeichen
+// oder zum String-Ende von pStr.
+//
+// Ausgabe ppNext (falls ppNext != 0) Suchbeginn fuer naechsten Parameter bzw. 0
+//
+// Returnwert: 0 falls String-Ende erreicht,
+//             ansonsten Anfang des Paramters bzw. der Zeichenkette
+//
+xub_StrLen _ReadFieldParams::FindNextStringPiece(const xub_StrLen nStart)
+{
+    xub_StrLen  n = ( STRING_NOTFOUND == nStart ) ? nFnd : nStart;  // Anfang
+    xub_StrLen n2;          // Ende
+
+    nNext = STRING_NOTFOUND;        // Default fuer nicht gefunden
+
+    while( (nLen > n) && (aData.GetChar( n ) == ' ') )
+        ++n;
+
+    if( nLen == n )
+        return STRING_NOTFOUND;     // String End reached!
+
+    if(     (aData.GetChar( n ) == '"')     // Anfuehrungszeichen vor Para?
+        ||  (aData.GetChar( n ) == 0x201c)
+        ||  (aData.GetChar( n ) == 132) )
+    {
+        n++;                        // Anfuehrungszeichen ueberlesen
+        n2 = n;                     // ab hier nach Ende suchen
+        while(     (nLen > n2)
+                && (aData.GetChar( n2 ) != '"')
+                && (aData.GetChar( n2 ) != 0x201d)
+                && (aData.GetChar( n2 ) != 147) )
+            n2++;                   // Ende d. Paras suchen
+    }
+    else                        // keine Anfuehrungszeichen
+    {
+        n2 = n;                     // ab hier nach Ende suchen
+        while( (nLen > n2) && (aData.GetChar( n2 ) != ' ') ) // Ende d. Paras suchen
+        {
+            if( aData.GetChar( n2 ) == '\\' )
+            {
+                if( aData.GetChar( n2+1 ) == '\\' )
+                    n2 += 2;        // Doppel-Backslash -> OK
+                else
+                {
+                    if( n2 > n )
+                        n2--;
+                    break;          // einfach-Backslash -> Ende
+                }
+            }
+            else
+                n2++;               // kein Backslash -> OK
+        }
+    }
+    if( nLen > n2 )
+    {
+        if(aData.GetChar( n2 ) != ' ') n2++;
+        nNext = n2;
+    }
+    return n;
+}
+
+
+
+// read parameters "1-3" or 1-3 with both values between 1 and nMax
+bool _ReadFieldParams::GetTokenSttFromTo(USHORT* pFrom, USHORT* pTo, USHORT nMax)
+{
+    USHORT nStart = 0;
+    USHORT nEnd   = 0;
+    xub_StrLen n = GoToTokenParam();
+    if( STRING_NOTFOUND != n )
+    {
+
+        String sParams( GetResult() );
+
+        xub_StrLen nIndex = 0;
+        String sStart( sParams.GetToken(0, '-', nIndex) );
+        if( STRING_NOTFOUND != nIndex )
+        {
+            nStart = static_cast<USHORT>(sStart.ToInt32());
+            nEnd   = static_cast<USHORT>(sParams.Copy(nIndex).ToInt32());
+        }
+    }
+    if( pFrom ) *pFrom = nStart;
+    if( pTo )   *pTo   = nEnd;
+
+    return nStart && nEnd && (nMax >= nStart) && (nMax >= nEnd);
+}
+
+// *** SwVbaFields ***********************************************
+
+uno::Any lcl_createField( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel, const uno::Any& aSource )
+{
+    uno::Reference< text::XTextField > xTextField( aSource, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextDocument > xTextDocument( xModel, uno::UNO_QUERY_THROW );
+    uno::Reference< word::XField > xField( new SwVbaField( xParent, xContext, xTextDocument, xTextField ) );
+    return uno::makeAny( xField );
+}
+
+typedef ::cppu::WeakImplHelper1< css::container::XEnumeration > FieldEnumeration_BASE;
+typedef ::cppu::WeakImplHelper2< container::XIndexAccess, container::XEnumerationAccess > FieldCollectionHelper_BASE;
+
+class FieldEnumeration : public FieldEnumeration_BASE
+{
+    uno::Reference< XHelperInterface > mxParent;
+    uno::Reference< uno::XComponentContext > mxContext;
+    uno::Reference< frame::XModel > mxModel;
+    uno::Reference< container::XEnumeration > mxEnumeration;
+public:
+    FieldEnumeration(  const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xModel, const uno::Reference< container::XEnumeration >& xEnumeration ) : mxParent( xParent ), mxContext( xContext ), mxModel( xModel ), mxEnumeration( xEnumeration )
+    {
+    }
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return mxEnumeration->hasMoreElements();
+    }
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasMoreElements() )
+            throw container::NoSuchElementException();
+        return lcl_createField( mxParent, mxContext, mxModel, mxEnumeration->nextElement() );
+    }
+};
+
+class FieldCollectionHelper : public FieldCollectionHelper_BASE
+{
+    uno::Reference< XHelperInterface > mxParent;
+    uno::Reference< uno::XComponentContext > mxContext;
+    uno::Reference< frame::XModel > mxModel;
+    uno::Reference< container::XEnumerationAccess > mxEnumerationAccess;
+public:
+    FieldCollectionHelper( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) throw (css::uno::RuntimeException) : mxParent( xParent ), mxContext( xContext ), mxModel( xModel )
+    {
+        uno::Reference< text::XTextFieldsSupplier > xSupp( xModel, uno::UNO_QUERY_THROW );
+        mxEnumerationAccess.set( xSupp->getTextFields(), uno::UNO_QUERY_THROW );
+    }
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return  mxEnumerationAccess->getElementType(); }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) { return mxEnumerationAccess->hasElements(); }
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        uno::Reference< container::XEnumeration > xEnumeration =  mxEnumerationAccess->createEnumeration();
+        sal_Int32 nCount = 0;
+        while( xEnumeration->hasMoreElements() )
+        {
+            ++nCount;
+            xEnumeration->nextElement();
+        }
+        return nCount;
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        if( Index < 0 || Index >= getCount() )
+            throw lang::IndexOutOfBoundsException();
+
+        uno::Reference< container::XEnumeration > xEnumeration =  mxEnumerationAccess->createEnumeration();
+        sal_Int32 nCount = 0;
+        while( xEnumeration->hasMoreElements() )
+        {
+            if( nCount == Index )
+            {
+                return xEnumeration->nextElement();
+            }
+            ++nCount;
+        }
+        throw lang::IndexOutOfBoundsException();
+    }
+    // XEnumerationAccess
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        uno::Reference< container::XEnumeration > xEnumeration =  mxEnumerationAccess->createEnumeration();
+        return uno::Reference< container::XEnumeration >( new FieldEnumeration( mxParent, mxContext, mxModel, xEnumeration ) );
+    }
+};
+
+SwVbaFields::SwVbaFields( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xModel ) : SwVbaFields_BASE( xParent, xContext , uno::Reference< container::XIndexAccess >( new FieldCollectionHelper( xParent, xContext, xModel ) ) ), mxModel( xModel )
+{
+    mxMSF.set( mxModel, uno::UNO_QUERY_THROW );
+}
+
+uno::Reference< word::XField > SAL_CALL
+SwVbaFields::Add( const css::uno::Reference< ::ooo::vba::word::XRange >& Range, const css::uno::Any& Type, const css::uno::Any& Text, const css::uno::Any& /*PreserveFormatting*/ ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 nType = word::WdFieldType::wdFieldEmpty;
+    Type >>= nType;
+    rtl::OUString sText;
+    Text >>= sText;
+
+    String sFieldName;
+    if( ( nType == word::WdFieldType::wdFieldEmpty ) && ( sText.getLength() > 0 ) )
+    {
+        _ReadFieldParams aReadParam(sText);
+        sFieldName = aReadParam.GetFieldName();
+    }
+
+    uno::Reference< text::XTextContent > xTextField;
+    if( nType == word::WdFieldType::wdFieldFileName || sFieldName.EqualsIgnoreCaseAscii("FILENAME") )
+    {
+        xTextField.set( Create_Field_FileName( sText ), uno::UNO_QUERY_THROW );
+    }
+    else
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+
+    SwVbaRange* pVbaRange = dynamic_cast< SwVbaRange* >( Range.get() );
+    uno::Reference< text::XTextRange > xTextRange = pVbaRange->getXTextRange();
+    uno::Reference< text::XText > xText = xTextRange->getText();
+    xText->insertTextContent( xTextRange, xTextField, true );
+    return uno::Reference< word::XField >( new SwVbaField( mxParent, mxContext, uno::Reference< text::XTextDocument >( mxModel, uno::UNO_QUERY_THROW ), uno::Reference< text::XTextField >( xTextField, uno::UNO_QUERY_THROW ) ) );
+}
+
+uno::Reference< text::XTextField > SwVbaFields::Create_Field_FileName( const rtl::OUString _text ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XTextField > xTextField( mxMSF->createInstance( rtl::OUString::createFromAscii("com.sun.star.text.TextField.FileName") ), uno::UNO_QUERY_THROW );
+    sal_Int16 nFileFormat = text::FilenameDisplayFormat::NAME_AND_EXT;
+    if( _text.getLength() > 0 )
+    {
+        long nRet;
+        _ReadFieldParams aReadParam( _text );
+        while (-1 != (nRet = aReadParam.SkipToNextToken()))
+        {
+            switch (nRet)
+            {
+                case 'p':
+                    nFileFormat = text::FilenameDisplayFormat::FULL;
+                    break;
+                case '*':
+                    //Skip over MERGEFORMAT
+                    aReadParam.SkipToNextToken();
+                    break;
+                default:
+                    DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+                    break;
+            }
+        }
+    }
+
+    uno::Reference< beans::XPropertySet > xProps( xTextField, uno::UNO_QUERY_THROW );
+    xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FileFormat") ), uno::makeAny( nFileFormat ) );
+
+    return xTextField;
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+SwVbaFields::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return xEnumerationAccess->createEnumeration();
+}
+
+// ScVbaCollectionBaseImpl
+uno::Any
+SwVbaFields::createCollectionObject( const uno::Any& aSource )
+{
+    return lcl_createField( mxParent, mxContext, mxModel, aSource );
+}
+
+sal_Int32 SAL_CALL SwVbaFields::Update() throw (uno::RuntimeException)
+{
+    sal_Int32 nUpdate = 1;
+    try
+    {
+        uno::Reference< text::XTextFieldsSupplier > xSupp( mxModel, uno::UNO_QUERY_THROW );
+        uno::Reference< util::XRefreshable > xRef( xSupp->getTextFields(), uno::UNO_QUERY_THROW );
+        xRef->refresh();
+        nUpdate = 0;
+    }catch( uno::Exception )
+    {
+        nUpdate = 1;
+    }
+    return nUpdate;
+}
+
+// XHelperInterface
+rtl::OUString&
+SwVbaFields::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaFields") );
+    return sImplName;
+}
+
+// XEnumerationAccess
+uno::Type SAL_CALL
+SwVbaFields::getElementType() throw (uno::RuntimeException)
+{
+    return  word::XField::static_type(0);
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaFields::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Fields" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbafield.hxx b/sw/source/ui/vba/vbafield.hxx
new file mode 100644
index 0000000..f02ead1
--- /dev/null
+++ b/sw/source/ui/vba/vbafield.hxx
@@ -0,0 +1,80 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:  $
+ * $Revision:  $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_FIELD_HXX
+#define SW_VBA_FIELD_HXX
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XTextField.hpp>
+#include <ooo/vba/word/XField.hpp>
+#include <ooo/vba/word/XFields.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XField > SwVbaField_BASE;
+
+class SwVbaField : public SwVbaField_BASE
+{
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+    css::uno::Reference< css::text::XTextField > mxTextField;
+public:
+    SwVbaField( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rDocument, const css::uno::Reference< css::text::XTextField >& xTextField) throw ( css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+// *** SwVbaFields ***********************************************
+
+typedef CollTestImplHelper< ov::word::XFields > SwVbaFields_BASE;
+
+class SwVbaFields : public SwVbaFields_BASE
+{
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::lang::XMultiServiceFactory > mxMSF;
+private:
+    css::uno::Reference< css::text::XTextField > Create_Field_FileName( const rtl::OUString _text ) throw (css::uno::RuntimeException);
+
+public:
+    SwVbaFields( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xModel );
+    // XFields
+    virtual css::uno::Reference< ::ooo::vba::word::XField > SAL_CALL Add( const css::uno::Reference< ::ooo::vba::word::XRange >& Range, const css::uno::Any& Type, const css::uno::Any& Text, const css::uno::Any& PreserveFormatting ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL Update() throw (css::uno::RuntimeException);
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    // ScVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif
diff --git a/sw/source/ui/vba/vbafind.cxx b/sw/source/ui/vba/vbafind.cxx
new file mode 100644
index 0000000..9825835
--- /dev/null
+++ b/sw/source/ui/vba/vbafind.cxx
@@ -0,0 +1,430 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbafind.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbareplacement.hxx"
+#include <ooo/vba/word/WdFindWrap.hpp>
+#include <ooo/vba/word/WdReplace.hpp>
+#include <com/sun/star/text/XTextRangeCompare.hpp>
+#include "wordvbahelper.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaFind::SwVbaFind( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XTextRange >& xTextRange ) throw ( uno::RuntimeException ) :
+    SwVbaFind_BASE( rParent, rContext ), mxModel( xModel ), mxTextRange( xTextRange ), mbReplace( sal_False ), mnReplaceType( word::WdReplace::wdReplaceOne ), mnWrap( word::WdFindWrap::wdFindStop )
+{
+    mxReplaceable.set( mxModel, uno::UNO_QUERY_THROW );
+    mxPropertyReplace.set( mxReplaceable->createReplaceDescriptor(), uno::UNO_QUERY_THROW );
+    mxTVC = word::getXTextViewCursor( mxModel );
+    mxSelSupp.set( mxModel->getCurrentController(), uno::UNO_QUERY_THROW );
+}
+
+SwVbaFind::~SwVbaFind()
+{
+}
+
+sal_Bool SwVbaFind::InRange( const uno::Reference< text::XTextRange >& xCurrentRange ) throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRangeCompare > xTRC( mxTextRange->getText(), uno::UNO_QUERY_THROW );
+    if( xTRC->compareRegionStarts( mxTextRange, xCurrentRange ) >= 0 && xTRC->compareRegionEnds( mxTextRange, xCurrentRange ) <= 0 )
+        return sal_True;
+    return sal_False;
+}
+
+sal_Bool SwVbaFind::InEqualRange( const uno::Reference< text::XTextRange >& xCurrentRange ) throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRangeCompare > xTRC( mxTextRange->getText(), uno::UNO_QUERY_THROW );
+    if( xTRC->compareRegionStarts( mxTextRange, xCurrentRange ) == 0 && xTRC->compareRegionEnds( mxTextRange, xCurrentRange ) == 0 )
+        return sal_True;
+    return sal_False;
+}
+
+void SwVbaFind::SetReplaceWith( const rtl::OUString& rText ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setReplaceString( rText );
+    mbReplace = sal_True;
+}
+
+rtl::OUString SwVbaFind::GetReplaceWith() throw (uno::RuntimeException)
+{
+    return mxPropertyReplace->getReplaceString();
+}
+void SwVbaFind::SetReplace( sal_Int32 type )
+{
+    mnReplaceType = type;
+    mbReplace = sal_True;
+}
+
+rtl::OUString SwVbaFind::ReplaceWildcards( const rtl::OUString& /*rText*/ ) throw ( uno::RuntimeException )
+{
+    // TODO:
+    return rtl::OUString();
+}
+
+uno::Reference< text::XTextRange > SwVbaFind::FindOneElement() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xFoundOne;
+    if( mxTVC->getString().getLength() > 0 )
+    {
+        if( getForward() )
+        {
+            xFoundOne.set( mxReplaceable->findNext( mxTextRange->getStart(), uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) ), uno::UNO_QUERY );
+        }
+        else
+        {
+            xFoundOne.set( mxReplaceable->findNext( mxTextRange->getEnd(), uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) ), uno::UNO_QUERY );
+        }
+
+        if( xFoundOne.is() && InEqualRange( xFoundOne ) )
+        {
+            xFoundOne.set( mxReplaceable->findNext( xFoundOne, uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) ), uno::UNO_QUERY );
+        }
+        else if( xFoundOne.is() && !InRange( xFoundOne ) )
+        {
+            xFoundOne = uno::Reference< text::XTextRange >();
+        }
+    }
+    else
+    {
+        xFoundOne.set( mxReplaceable->findNext( mxTextRange, uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) ), uno::UNO_QUERY );
+    }
+
+    if( !xFoundOne.is() && ( getWrap() == word::WdFindWrap::wdFindContinue || getWrap() == word::WdFindWrap::wdFindAsk ) )
+    {
+        if( getForward() )
+        {
+            mxTVC->gotoStart(sal_False);
+            xFoundOne.set( mxReplaceable->findNext( mxTextRange->getStart(), uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) ), uno::UNO_QUERY );
+        }
+        else
+        {
+            mxTVC->gotoEnd( sal_False );
+            xFoundOne.set( mxReplaceable->findNext( mxTextRange->getEnd(), uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) ), uno::UNO_QUERY );
+
+        }
+    }
+    return xFoundOne;
+}
+
+sal_Bool SwVbaFind::SearchReplace() throw (uno::RuntimeException)
+{
+    sal_Bool result = sal_False;
+
+    // TODO: map wildcards in area to OOo wildcards
+
+    if( mbReplace )
+    {
+        switch( mnReplaceType )
+        {
+            case word::WdReplace::wdReplaceNone:
+            {
+                result = sal_True;
+                break;
+            }
+            case word::WdReplace::wdReplaceOne:
+            {
+                uno::Reference< text::XTextRange > xFindOne = FindOneElement();
+                if( xFindOne.is() )
+                {
+                    xFindOne->setString( GetReplaceWith() );
+                    result = mxSelSupp->select( uno::makeAny( xFindOne ) );
+                }
+                break;
+            }
+            case word::WdReplace::wdReplaceAll:
+            {
+                uno::Reference< container::XIndexAccess > xIndexAccess = mxReplaceable->findAll( uno::Reference< util::XSearchDescriptor >( mxPropertyReplace, uno::UNO_QUERY_THROW ) );
+                if( xIndexAccess->getCount() > 0 )
+                {
+                    for( sal_Int32 i = 0; i < xIndexAccess->getCount(); i++ )
+                    {
+                        uno::Reference< text::XTextRange > xTextRange( xIndexAccess->getByIndex( i ), uno::UNO_QUERY_THROW );
+                        if( mnWrap == word::WdFindWrap::wdFindContinue || mnWrap == word::WdFindWrap::wdFindAsk || InRange( xTextRange ) )
+                        {
+                            xTextRange->setString( GetReplaceWith() );
+                            result = sal_True;
+                        }
+                    }
+                }
+                break;
+            }
+            default:
+            {
+                result = sal_False;
+            }
+        }
+    }
+    else
+    {
+        uno::Reference< text::XTextRange > xFindOne = FindOneElement();
+        if( xFindOne.is() )
+            result = mxSelSupp->select( uno::makeAny( xFindOne ) );
+    }
+
+    return result;
+}
+
+::rtl::OUString SAL_CALL SwVbaFind::getText() throw (uno::RuntimeException)
+{
+    return mxPropertyReplace->getSearchString();
+}
+
+void SAL_CALL SwVbaFind::setText( const ::rtl::OUString& _text ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setSearchString( _text );
+}
+
+uno::Any SAL_CALL SwVbaFind::getReplacement() throw (uno::RuntimeException)
+{
+    return uno::makeAny( uno::Reference< word::XReplacement >( new SwVbaReplacement( this, mxContext, mxPropertyReplace ) ) );
+}
+
+void SAL_CALL SwVbaFind::setReplacement( const uno::Any& /*_replacement */ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getForward() throw (uno::RuntimeException)
+{
+    sal_Bool bBackward = sal_False;
+    mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchBackwards") ) ) >>= bBackward;
+    return !bBackward;
+}
+
+void SAL_CALL SwVbaFind::setForward( ::sal_Bool _forward ) throw (uno::RuntimeException)
+{
+    sal_Bool bBackward = !_forward;
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchBackwards") ), uno::makeAny( bBackward ) );
+}
+
+::sal_Int32 SAL_CALL SwVbaFind::getWrap() throw (uno::RuntimeException)
+{
+    // seems not supported in Writer
+    return mnWrap;
+}
+
+void SAL_CALL SwVbaFind::setWrap( ::sal_Int32 _wrap ) throw (uno::RuntimeException)
+{
+    // seems not supported in Writer
+    mnWrap = _wrap;
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getFormat() throw (uno::RuntimeException)
+{
+    return mxPropertyReplace->getValueSearch();
+}
+
+void SAL_CALL SwVbaFind::setFormat( ::sal_Bool _format ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setValueSearch( _format );
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getMatchCase() throw (uno::RuntimeException)
+{
+    sal_Bool value = sal_False;
+    mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchCaseSensitive") ) ) >>= value;
+    return value;
+}
+
+void SAL_CALL SwVbaFind::setMatchCase( ::sal_Bool _matchcase ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchCaseSensitive") ), uno::makeAny( _matchcase ) );
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getMatchWholeWord() throw (uno::RuntimeException)
+{
+    sal_Bool value = sal_False;
+    mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchWords") ) ) >>= value;
+    return value;
+}
+
+void SAL_CALL SwVbaFind::setMatchWholeWord( ::sal_Bool _matchwholeword ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchWords") ), uno::makeAny( _matchwholeword ) );
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getMatchWildcards() throw (uno::RuntimeException)
+{
+    sal_Bool value = sal_False;
+    mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchRegularExpression") ) ) >>= value;
+    return value;
+}
+
+void SAL_CALL SwVbaFind::setMatchWildcards( ::sal_Bool _matchwildcards ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchRegularExpression") ), uno::makeAny( _matchwildcards ) );
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getMatchSoundsLike() throw (uno::RuntimeException)
+{
+    sal_Bool value = sal_False;
+    mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchSimilarity") ) ) >>= value;
+    return value;
+}
+
+void SAL_CALL SwVbaFind::setMatchSoundsLike( ::sal_Bool _matchsoundslike ) throw (uno::RuntimeException)
+{
+    // seems not accurate
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchSimilarity") ), uno::makeAny( _matchsoundslike ) );
+}
+
+::sal_Bool SAL_CALL SwVbaFind::getMatchAllWordForms() throw (uno::RuntimeException)
+{
+    sal_Bool value = sal_False;
+    mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchSimilarity") ) ) >>= value;
+    if( value )
+        mxPropertyReplace->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchSimilarityRelax") ) ) >>= value;
+    return value;
+}
+
+void SAL_CALL SwVbaFind::setMatchAllWordForms( ::sal_Bool _matchallwordforms ) throw (uno::RuntimeException)
+{
+    // seems not accurate
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchSimilarity") ), uno::makeAny( _matchallwordforms ) );
+    mxPropertyReplace->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SearchSimilarityRelax") ), uno::makeAny( _matchallwordforms ) );
+}
+
+uno::Any SAL_CALL SwVbaFind::getStyle() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL SwVbaFind::setStyle( const uno::Any& /*_style */ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+sal_Bool SAL_CALL
+SwVbaFind::Execute( const uno::Any& FindText, const uno::Any& MatchCase, const uno::Any& MatchWholeWord, const uno::Any& MatchWildcards, const uno::Any& MatchSoundsLike, const uno::Any& MatchAllWordForms, const uno::Any& Forward, const uno::Any& Wrap, const uno::Any& Format, const uno::Any& ReplaceWith, const uno::Any& Replace, const uno::Any& /*MatchKashida*/, const uno::Any& /*MatchDiacritics*/, const uno::Any& /*MatchAlefHamza*/, const uno::Any& /*MatchControl*/, const uno::Any& /*MatchPrefix*/, const uno::Any& /*MatchSuffix*/, const uno::Any& /*MatchPhrase*/, const uno::Any& /*IgnoreSpace*/, const uno::Any& /*IgnorePunct*/ ) throw (uno::RuntimeException)
+{
+    sal_Bool result = sal_False;
+    if( FindText.hasValue() )
+    {
+        rtl::OUString sText;
+        FindText >>= sText;
+        setText( sText );
+    }
+
+    sal_Bool bValue = sal_False;
+    if( MatchCase.hasValue() )
+    {
+        MatchCase >>= bValue;
+        setMatchCase( bValue );
+    }
+
+    if( MatchWholeWord.hasValue() )
+    {
+        MatchWholeWord >>= bValue;
+        setMatchWholeWord( bValue );
+    }
+
+    if( MatchWildcards.hasValue() )
+    {
+        MatchWildcards >>= bValue;
+        setMatchWildcards( bValue );
+    }
+
+    if( MatchSoundsLike.hasValue() )
+    {
+        MatchSoundsLike >>= bValue;
+        setMatchSoundsLike( bValue );
+    }
+
+    if( MatchAllWordForms.hasValue() )
+    {
+        MatchAllWordForms >>= bValue;
+        setMatchAllWordForms( bValue );
+    }
+
+    if( Forward.hasValue() )
+    {
+        Forward >>= bValue;
+        setForward( bValue );
+    }
+
+    if( Wrap.hasValue() )
+    {
+        sal_Int32 nWrapType = 0;
+        Wrap >>= nWrapType;
+        setWrap( nWrapType );
+    }
+
+    if( Format.hasValue() )
+    {
+        Format >>= bValue;
+        setFormat( bValue );
+    }
+
+    if( ReplaceWith.hasValue() )
+    {
+        rtl::OUString sValue;
+        ReplaceWith >>= sValue;
+        SetReplaceWith( sValue );
+    }
+
+    if( Replace.hasValue() )
+    {
+        sal_Int32 nValue(0);
+        Replace >>= nValue;
+        SetReplace( nValue );
+    }
+
+    result = SearchReplace();
+
+    return result;
+}
+
+void SAL_CALL
+SwVbaFind::ClearFormatting(  ) throw (uno::RuntimeException)
+{
+    uno::Sequence< beans::PropertyValue >  aSearchAttribs;
+    mxPropertyReplace->setSearchAttributes( aSearchAttribs );
+}
+
+rtl::OUString&
+SwVbaFind::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaFind") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaFind::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Find" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbafind.hxx b/sw/source/ui/vba/vbafind.hxx
new file mode 100644
index 0000000..bd40977
--- /dev/null
+++ b/sw/source/ui/vba/vbafind.hxx
@@ -0,0 +1,104 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_FIND_HXX
+#define SW_VBA_FIND_HXX
+
+#include <ooo/vba/word/XFind.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/util/XReplaceable.hpp>
+#include <com/sun/star/util/XPropertyReplace.hpp>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XTextCursor.hpp>
+#include <com/sun/star/view/XSelectionSupplier.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XFind > SwVbaFind_BASE;
+
+class SwVbaFind : public SwVbaFind_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::text::XTextRange > mxTextRange;
+    css::uno::Reference< css::util::XReplaceable > mxReplaceable;
+    css::uno::Reference< css::util::XPropertyReplace> mxPropertyReplace;
+    css::uno::Reference< css::text::XTextViewCursor> mxTVC;
+    css::uno::Reference< css::view::XSelectionSupplier> mxSelSupp;
+    sal_Bool mbReplace;
+    sal_Int32 mnReplaceType;
+    sal_Int32 mnWrap;
+
+private:
+    sal_Bool InRange( const css::uno::Reference< css::text::XTextRange >& xCurrentRange ) throw ( css::uno::RuntimeException );
+    sal_Bool InEqualRange( const css::uno::Reference< css::text::XTextRange >& xCurrentRange ) throw ( css::uno::RuntimeException );
+    void SetReplace( sal_Int32 type );
+    void SetReplaceWith( const rtl::OUString& rText ) throw ( css::uno::RuntimeException );
+    rtl::OUString GetReplaceWith() throw ( css::uno::RuntimeException );
+    rtl::OUString ReplaceWildcards( const rtl::OUString& rText ) throw ( css::uno::RuntimeException );
+    css::uno::Reference< css::text::XTextRange > FindOneElement() throw ( css::uno::RuntimeException );
+    sal_Bool SearchReplace() throw ( css::uno::RuntimeException );
+
+public:
+    SwVbaFind( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XTextRange >& xTextRange ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaFind();
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getReplacement() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setReplacement( const css::uno::Any& _replacement ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getForward() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setForward( ::sal_Bool _forward ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getWrap() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setWrap( ::sal_Int32 _wrap ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getFormat() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setFormat( ::sal_Bool _format ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getMatchCase() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMatchCase( ::sal_Bool _matchcase ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getMatchWholeWord() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMatchWholeWord( ::sal_Bool _matchwholeword ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getMatchWildcards() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMatchWildcards( ::sal_Bool _matchwildcards ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getMatchSoundsLike() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMatchSoundsLike( ::sal_Bool _matchsoundslike ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getMatchAllWordForms() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMatchAllWordForms( ::sal_Bool _matchallwordforms ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStyle( const css::uno::Any& _style ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual ::sal_Bool SAL_CALL Execute( const css::uno::Any& FindText, const css::uno::Any& MatchCase, const css::uno::Any& MatchWholeWord, const css::uno::Any& MatchWildcards, const css::uno::Any& MatchSoundsLike, const css::uno::Any& MatchAllWordForms, const css::uno::Any& Forward, const css::uno::Any& Wrap, const css::uno::Any& Format, const css::uno::Any& ReplaceWith, const css::uno::Any& Replace, const css::uno::Any& MatchKashida, const css::uno::Any& MatchDiacritics, const css::uno::Any& MatchAlefHamza, const css::uno::Any& MatchControl, const css::uno::Any& MatchPrefix, const css::uno::Any& MatchSuffix, const css::uno::Any& MatchPhrase, const css::uno::Any& IgnoreSpace, const css::uno::Any& IgnorePunct ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL ClearFormatting(  ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_FIND_HXX */
diff --git a/sw/source/ui/vba/vbafont.cxx b/sw/source/ui/vba/vbafont.cxx
new file mode 100644
index 0000000..081d42d
--- /dev/null
+++ b/sw/source/ui/vba/vbafont.cxx
@@ -0,0 +1,214 @@
+#include "vbafont.hxx"
+#include <com/sun/star/awt/FontUnderline.hpp>
+#include <ooo/vba/word/WdUnderline.hpp>
+#include <hash_map>
+#include <ooo/vba/word/WdColorIndex.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+const uno::Any aLongAnyTrue( sal_Int16(-1) );
+const uno::Any aLongAnyFalse( sal_Int16( 0 ) );
+
+struct MapPair
+{
+    sal_Int32 nMSOConst;
+    sal_Int32 nOOOConst;
+};
+
+static MapPair UnderLineTable[] = {
+        { word::WdUnderline::wdUnderlineNone, com::sun::star::awt::FontUnderline::NONE },
+        { word::WdUnderline::wdUnderlineSingle, com::sun::star::awt::FontUnderline::SINGLE },
+        { word::WdUnderline::wdUnderlineWords, com::sun::star::awt::FontUnderline::SINGLE },
+        { word::WdUnderline::wdUnderlineDouble, com::sun::star::awt::FontUnderline::DOUBLE },
+        { word::WdUnderline::wdUnderlineDotted, com::sun::star::awt::FontUnderline::DOTTED },
+        { word::WdUnderline::wdUnderlineThick, com::sun::star::awt::FontUnderline::BOLDDASH },
+        { word::WdUnderline::wdUnderlineDash, com::sun::star::awt::FontUnderline::DASH },
+    { word::WdUnderline::wdUnderlineDotDash, com::sun::star::awt::FontUnderline::DASHDOT },
+    { word::WdUnderline::wdUnderlineDotDotDash, com::sun::star::awt::FontUnderline::DASHDOTDOT },
+        { word::WdUnderline::wdUnderlineWavy, com::sun::star::awt::FontUnderline::WAVE },
+        { word::WdUnderline::wdUnderlineDottedHeavy, com::sun::star::awt::FontUnderline::BOLDDOTTED },
+        { word::WdUnderline::wdUnderlineDashHeavy, com::sun::star::awt::FontUnderline::BOLDDASH },
+        { word::WdUnderline::wdUnderlineDotDashHeavy, com::sun::star::awt::FontUnderline::BOLDDASHDOT },
+        { word::WdUnderline::wdUnderlineDotDotDashHeavy, com::sun::star::awt::FontUnderline::BOLDDASHDOTDOT },
+        { word::WdUnderline::wdUnderlineWavyHeavy, com::sun::star::awt::FontUnderline::BOLDWAVE },
+        { word::WdUnderline::wdUnderlineDashLong, com::sun::star::awt::FontUnderline::LONGDASH },
+        { word::WdUnderline::wdUnderlineWavyDouble, com::sun::star::awt::FontUnderline::DOUBLEWAVE },
+        { word::WdUnderline::wdUnderlineDashLongHeavy, com::sun::star::awt::FontUnderline::BOLDLONGDASH },
+};
+
+typedef std::hash_map< sal_Int32, sal_Int32 > ConstToConst;
+class UnderLineMapper
+{
+    ConstToConst MSO2OOO;
+    ConstToConst OOO2MSO;
+private:
+    UnderLineMapper()
+    {
+        sal_Int32 nLen = sizeof( UnderLineTable )/ sizeof( UnderLineTable[0] );
+
+        for ( sal_Int32 index=0; index<nLen; ++index )
+        {
+            MSO2OOO[ UnderLineTable[ index ].nMSOConst ] = UnderLineTable[ index ].nOOOConst;
+            OOO2MSO[ UnderLineTable[ index ].nOOOConst ] = UnderLineTable[ index ].nMSOConst;
+        }
+    }
+public:
+    static rtl::OUString propName()
+    {
+        static rtl::OUString sPropName( RTL_CONSTASCII_USTRINGPARAM("CharUnderline") );
+        return sPropName;
+    }
+
+    static UnderLineMapper& instance()
+    {
+        static  UnderLineMapper theMapper;
+        return theMapper;
+    }
+
+    sal_Int32 getOOOFromMSO( sal_Int32 nMSOConst ) throw( lang::IllegalArgumentException )
+    {
+        ConstToConst::iterator it = MSO2OOO.find( nMSOConst );
+        if ( it == MSO2OOO.end() )
+            throw lang::IllegalArgumentException();
+        return it->second;
+    }
+    sal_Int32 getMSOFromOOO( sal_Int32 nOOOConst ) throw( lang::IllegalArgumentException )
+    {
+        ConstToConst::iterator it = OOO2MSO.find( nOOOConst );
+        if ( it == OOO2MSO.end() )
+            throw lang::IllegalArgumentException();
+        return it->second;
+    }
+};
+
+SwVbaFont::SwVbaFont( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xPalette, uno::Reference< css::beans::XPropertySet > xPropertySet ) throw ( css::uno::RuntimeException ) : SwVbaFont_BASE( xParent, xContext, xPalette, xPropertySet )
+{
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getUnderline() throw (uno::RuntimeException)
+{
+    sal_Int32 nOOVal = 0;
+    mxFont->getPropertyValue(  UnderLineMapper::propName() ) >>= nOOVal;
+    return uno::makeAny( UnderLineMapper::instance().getMSOFromOOO( nOOVal ) );
+}
+
+void SAL_CALL
+SwVbaFont::setUnderline( const uno::Any& _underline ) throw (uno::RuntimeException)
+{
+    sal_Int32 nMSOVal = 0;
+
+    if ( _underline >>= nMSOVal )
+    {
+        sal_Int32 nOOVal =  UnderLineMapper::instance().getOOOFromMSO( nMSOVal );
+        mxFont->setPropertyValue(  UnderLineMapper::propName(), uno::makeAny( nOOVal ) );
+    }
+}
+
+rtl::OUString&
+SwVbaFont::getServiceImplName()
+{
+        static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaFont") );
+        return sImplName;
+}
+
+void SAL_CALL
+SwVbaFont::setColorIndex( const uno::Any& _colorindex ) throw( uno::RuntimeException )
+{
+        sal_Int32 nIndex = 0;
+        _colorindex >>= nIndex;
+        return setColor( OORGBToXLRGB(mxPalette->getByIndex( nIndex )) );
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getColorIndex() throw ( uno::RuntimeException )
+{
+        sal_Int32 nColor = 0;
+
+    XLRGBToOORGB( getColor() ) >>= nColor;
+    sal_Int32 nElems = mxPalette->getCount();
+    sal_Int32 nIndex = 0;
+    for ( sal_Int32 count=0; count<nElems; ++count )
+	{
+        sal_Int32 nPaletteColor = 0;
+        mxPalette->getByIndex( count ) >>= nPaletteColor;
+        if ( nPaletteColor == nColor )
+        {
+            nIndex = count;
+            break;
+        }
+    }
+    return uno::makeAny( nIndex );
+}
+uno::Any SAL_CALL
+SwVbaFont::getSubscript() throw ( uno::RuntimeException )
+{
+    sal_Bool bRes = sal_False;
+    SwVbaFont_BASE::getSubscript() >>= bRes;
+    if ( bRes )
+        return aLongAnyTrue;
+    return aLongAnyFalse;
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getSuperscript() throw ( uno::RuntimeException )
+{
+    sal_Bool bRes = sal_False;
+    SwVbaFont_BASE::getSuperscript() >>= bRes;
+    if ( bRes )
+        return aLongAnyTrue;
+    return aLongAnyFalse;
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getBold() throw (uno::RuntimeException)
+{
+    sal_Bool bRes = sal_False;
+    SwVbaFont_BASE::getBold() >>= bRes;
+    if ( bRes )
+        return aLongAnyTrue;
+    return aLongAnyFalse;
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getItalic() throw (uno::RuntimeException)
+{
+    sal_Bool bRes = sal_False;
+    SwVbaFont_BASE::getItalic() >>= bRes;
+    if ( bRes )
+        return aLongAnyTrue;
+    return aLongAnyFalse;
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getStrikethrough() throw (css::uno::RuntimeException)
+{
+    sal_Bool bRes = sal_False;
+    SwVbaFont_BASE::getStrikethrough() >>= bRes;
+    if ( bRes )
+        return aLongAnyTrue;
+    return aLongAnyFalse;
+}
+
+uno::Any SAL_CALL
+SwVbaFont::getShadow() throw (uno::RuntimeException)
+{
+    sal_Bool bRes = sal_False;
+    SwVbaFont_BASE::getShadow() >>= bRes;
+    if ( bRes )
+        return aLongAnyTrue;
+    return aLongAnyFalse;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaFont::getServiceNames()
+{
+        static uno::Sequence< rtl::OUString > aServiceNames;
+        if ( aServiceNames.getLength() == 0 )
+        {
+                aServiceNames.realloc( 1 );
+                aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Font" ) );
+        }
+        return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbafont.hxx b/sw/source/ui/vba/vbafont.hxx
new file mode 100644
index 0000000..1500c2a
--- /dev/null
+++ b/sw/source/ui/vba/vbafont.hxx
@@ -0,0 +1,31 @@
+#ifndef VBA_FONT_HXX
+#define VBA_FONT_HXX
+
+#include <vbahelper/vbafontbase.hxx>
+#include <ooo/vba/word/XFont.hpp>
+
+typedef cppu::ImplInheritanceHelper1< VbaFontBase, ov::word::XFont > SwVbaFont_BASE;
+
+class SwVbaFont : public SwVbaFont_BASE
+{
+public:
+    SwVbaFont( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xPalette, css::uno::Reference< css::beans::XPropertySet > xPropertySet ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaFont(){}
+
+    // Attributes
+    virtual void SAL_CALL setColorIndex( const css::uno::Any& _colorindex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getColorIndex() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getUnderline() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setUnderline( const css::uno::Any& _underline ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getSubscript() throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL getSuperscript() throw ( css::uno::RuntimeException );
+
+    virtual css::uno::Any SAL_CALL getBold() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getItalic() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getStrikethrough() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getShadow() throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif
diff --git a/sw/source/ui/vba/vbaglobals.cxx b/sw/source/ui/vba/vbaglobals.cxx
new file mode 100644
index 0000000..0549d56
--- /dev/null
+++ b/sw/source/ui/vba/vbaglobals.cxx
@@ -0,0 +1,195 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaglobals.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/helperdecl.hxx>
+#include "vbaglobals.hxx"
+
+#include <comphelper/unwrapargs.hxx>
+
+#include <com/sun/star/lang/XMultiComponentFactory.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/container/XNameContainer.hpp>
+#include <cppuhelper/bootstrap.hxx>
+#include "vbaapplication.hxx"
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::uno;
+using namespace ::ooo::vba;
+
+
+rtl::OUString sDocCtxName( RTL_CONSTASCII_USTRINGPARAM("WordDocumentContext") );
+
+// =============================================================================
+// SwVbaGlobals
+// =============================================================================
+
+SwVbaGlobals::SwVbaGlobals(  uno::Sequence< uno::Any > const& aArgs, uno::Reference< uno::XComponentContext >const& rxContext ) : SwVbaGlobals_BASE( uno::Reference< XHelperInterface >(), rxContext, sDocCtxName )
+{
+    OSL_TRACE("SwVbaGlobals::SwVbaGlobals()");
+        uno::Sequence< beans::PropertyValue > aInitArgs( 2 );
+        aInitArgs[ 0 ].Name = rtl::OUString::createFromAscii("Application");
+        aInitArgs[ 0 ].Value = uno::makeAny( getApplication() );
+        aInitArgs[ 1 ].Name = sDocCtxName;
+        aInitArgs[ 1 ].Value = uno::makeAny( getXSomethingFromArgs< frame::XModel >( aArgs, 0 ) );
+
+        init( aInitArgs );
+}
+
+SwVbaGlobals::~SwVbaGlobals()
+{
+    OSL_TRACE("SwVbaGlobals::~SwVbaGlobals");
+}
+
+// =============================================================================
+// XGlobals
+// =============================================================================
+uno::Reference<word::XApplication >
+SwVbaGlobals::getApplication() throw (uno::RuntimeException)
+{
+    OSL_TRACE("In SwVbaGlobals::getApplication");
+    if ( !mxApplication.is() )
+         mxApplication.set( new SwVbaApplication( mxContext) );
+
+	return mxApplication;
+}
+
+uno::Reference<word::XSystem > SAL_CALL
+SwVbaGlobals::getSystem() throw (uno::RuntimeException)
+{
+    return getApplication()->getSystem();
+}
+
+uno::Reference< word::XDocument > SAL_CALL
+SwVbaGlobals::getActiveDocument() throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveDocument();
+}
+
+uno::Reference< word::XWindow > SAL_CALL
+SwVbaGlobals::getActiveWindow() throw (uno::RuntimeException)
+{
+    return getApplication()->getActiveWindow();
+}
+
+rtl::OUString SAL_CALL
+SwVbaGlobals::getName() throw (uno::RuntimeException)
+{
+    return getApplication()->getName();
+}
+
+uno::Reference<word::XOptions > SAL_CALL
+SwVbaGlobals::getOptions() throw (uno::RuntimeException)
+{
+    return getApplication()->getOptions();
+}
+
+uno::Any SAL_CALL
+SwVbaGlobals::CommandBars( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    return getApplication()->CommandBars( aIndex );
+}
+
+uno::Any SAL_CALL
+SwVbaGlobals::Documents( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    return getApplication()->Documents( index );
+}
+
+uno::Any SAL_CALL
+SwVbaGlobals::Addins( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    return getApplication()->Addins( index );
+}
+
+uno::Any SAL_CALL
+SwVbaGlobals::Dialogs( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    return getApplication()->Dialogs( index );
+}
+
+uno::Reference<word::XSelection > SAL_CALL
+SwVbaGlobals::getSelection() throw (uno::RuntimeException)
+{
+    return getApplication()->getSelection();
+}
+
+float SAL_CALL SwVbaGlobals::CentimetersToPoints( float _Centimeters ) throw (uno::RuntimeException)
+{
+    return getApplication()->CentimetersToPoints( _Centimeters );
+}
+
+rtl::OUString&
+SwVbaGlobals::getServiceImplName()
+{
+        static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaGlobals") );
+        return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaGlobals::getServiceNames()
+{
+        static uno::Sequence< rtl::OUString > aServiceNames;
+        if ( aServiceNames.getLength() == 0 )
+        {
+                aServiceNames.realloc( 1 );
+                aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Globals" ) );
+        }
+        return aServiceNames;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaGlobals::getAvailableServiceNames(  ) throw (uno::RuntimeException)
+{
+    static bool bInit = false;
+    static uno::Sequence< rtl::OUString > serviceNames( SwVbaGlobals_BASE::getAvailableServiceNames() );
+    if ( !bInit )
+    {
+         rtl::OUString names[] = {
+            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.word.Document" ) ),
+//            #FIXME #TODO make Application a proper service
+//            ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.word.Application" ) ),
+        };
+        sal_Int32 nWordServices = ( sizeof( names )/ sizeof( names[0] ) );
+        sal_Int32 startIndex = serviceNames.getLength();
+        serviceNames.realloc( serviceNames.getLength() + nWordServices );
+        for ( sal_Int32 index = 0; index < nWordServices; ++index )
+             serviceNames[ startIndex + index ] = names[ index ];
+        bInit = true;
+    }
+    return serviceNames;
+}
+
+namespace globals
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::vba_service_class_<SwVbaGlobals, sdecl::with_args<true> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "SwVbaGlobals",
+    "ooo.vba.word.Globals" );
+}
diff --git a/sw/source/ui/vba/vbaglobals.hxx b/sw/source/ui/vba/vbaglobals.hxx
new file mode 100644
index 0000000..745c28a
--- /dev/null
+++ b/sw/source/ui/vba/vbaglobals.hxx
@@ -0,0 +1,83 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaglobals.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_GLOBALS_HXX
+#define SW_VBA_GLOBALS_HXX
+
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/lang/XInitialization.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <ooo/vba/word/XGlobals.hpp>
+#include <ooo/vba/word/XApplication.hpp>
+#include <ooo/vba/word/XSystem.hpp>
+#include <ooo/vba/word/XOptions.hpp>
+#include <ooo/vba/word/XSelection.hpp>
+#include <cppuhelper/implbase1.hxx>
+#include <vbahelper/vbahelper.hxx>
+#include <vbahelper/vbaglobalbase.hxx>
+
+// =============================================================================
+// class SwVbaGlobals
+// =============================================================================
+
+
+typedef ::cppu::ImplInheritanceHelper1< VbaGlobalsBase, ov::word::XGlobals > SwVbaGlobals_BASE;
+
+class SwVbaGlobals : public SwVbaGlobals_BASE
+{
+private:
+    css::uno::Reference< ooo::vba::word::XApplication > mxApplication;
+
+    virtual css::uno::Reference< ooo::vba::word::XApplication > getApplication() throw (css::uno::RuntimeException);
+
+public:
+
+    SwVbaGlobals( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& rxContext );
+    virtual ~SwVbaGlobals();
+
+    // XGlobals
+    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XSystem > SAL_CALL getSystem() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::word::XDocument > SAL_CALL getActiveDocument() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::word::XWindow > SAL_CALL getActiveWindow() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XOptions > SAL_CALL getOptions() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XSelection > SAL_CALL getSelection() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL CommandBars( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Documents( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Addins( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Dialogs( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL CentimetersToPoints( float _Centimeters ) throw (css::uno::RuntimeException);
+    // XMultiServiceFactory
+    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getAvailableServiceNames(  ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_GLOBALS_HXX */
diff --git a/sw/source/ui/vba/vbaheaderfooter.cxx b/sw/source/ui/vba/vbaheaderfooter.cxx
new file mode 100644
index 0000000..b24332f
--- /dev/null
+++ b/sw/source/ui/vba/vbaheaderfooter.cxx
@@ -0,0 +1,113 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaheaderfooter.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include <ooo/vba/word/WdHeaderFooterIndex.hpp>
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/drawing/XDrawPageSupplier.hpp>
+#include "vbarange.hxx"
+#include <vbahelper/vbashapes.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaHeaderFooter::SwVbaHeaderFooter( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< frame::XModel >& xModel, const uno::Reference< beans::XPropertySet >& rProps, sal_Bool isHeader, sal_Int32 index ) throw ( uno::RuntimeException ) : SwVbaHeaderFooter_BASE( rParent, rContext ), mxModel( xModel ), mxPageStyleProps( rProps ), mbHeader( isHeader ), mnIndex( index )
+{
+}
+
+sal_Bool SAL_CALL SwVbaHeaderFooter::getIsHeader() throw (uno::RuntimeException)
+{
+    return mbHeader;
+}
+
+sal_Bool SAL_CALL SwVbaHeaderFooter::getLinkToPrevious() throw (uno::RuntimeException)
+{
+    // seems always false
+    return sal_False;
+}
+
+void SAL_CALL SwVbaHeaderFooter::setLinkToPrevious( ::sal_Bool /*_linktoprevious*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+uno::Reference< word::XRange > SAL_CALL SwVbaHeaderFooter::getRange() throw (uno::RuntimeException)
+{
+    rtl::OUString sPropsNameText;
+    if( mbHeader )
+    {
+        sPropsNameText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderText") );
+    }
+    else
+    {
+        sPropsNameText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterText") );
+    }
+    if( mnIndex == word::WdHeaderFooterIndex::wdHeaderFooterEvenPages )
+    {
+        sPropsNameText.concat( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Left") ) );
+    }
+
+    uno::Reference< text::XText > xText( mxPageStyleProps->getPropertyValue( sPropsNameText ), uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextDocument > xDocument( mxModel, uno::UNO_QUERY_THROW );
+    return uno::Reference< word::XRange >( new SwVbaRange( this, mxContext, xDocument, xText->getStart(), xText->getEnd(), xText ) );
+}
+
+uno::Any SAL_CALL
+SwVbaHeaderFooter::Shapes( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< drawing::XDrawPageSupplier > xDrawPageSupplier( mxModel, uno::UNO_QUERY_THROW );
+    //uno::Reference< drawing::XShapes > xShapes( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
+    uno::Reference< container::XIndexAccess > xIndexAccess( xDrawPageSupplier->getDrawPage(), uno::UNO_QUERY_THROW );
+    uno::Reference< XCollection > xCol( new ScVbaShapes( this, mxContext, xIndexAccess, mxModel ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+rtl::OUString&
+SwVbaHeaderFooter::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaHeaderFooter") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaHeaderFooter::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Pane" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaheaderfooter.hxx b/sw/source/ui/vba/vbaheaderfooter.hxx
new file mode 100644
index 0000000..8308102
--- /dev/null
+++ b/sw/source/ui/vba/vbaheaderfooter.hxx
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_HEADERFOOTER_HXX
+#define SW_VBA_HEADERFOOTER_HXX
+
+#include <ooo/vba/word/XHeaderFooter.hpp>
+#include <ooo/vba/word/XRange.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XHeaderFooter > SwVbaHeaderFooter_BASE;
+
+class SwVbaHeaderFooter : public SwVbaHeaderFooter_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::beans::XPropertySet > mxPageStyleProps;
+    sal_Bool mbHeader;
+    sal_Int32 mnIndex;
+
+public:
+    SwVbaHeaderFooter( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::beans::XPropertySet >& xProps, sal_Bool isHeader, sal_Int32 index ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaHeaderFooter(){}
+
+    // Attributes
+    virtual ::sal_Bool SAL_CALL getIsHeader() throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getLinkToPrevious() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLinkToPrevious( ::sal_Bool _linktoprevious ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ::ooo::vba::word::XRange > SAL_CALL getRange() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Shapes( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_HEADERFOOTER_HXX */
diff --git a/sw/source/ui/vba/vbaheaderfooterhelper.cxx b/sw/source/ui/vba/vbaheaderfooterhelper.cxx
new file mode 100644
index 0000000..afc83ed
--- /dev/null
+++ b/sw/source/ui/vba/vbaheaderfooterhelper.cxx
@@ -0,0 +1,178 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaheaderfooterhelper.hxx"
+#include "wordvbahelper.hxx"
+#include <comphelper/processfactory.hxx>
+#include <com/sun/star/frame/XController.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+#define FIRST_PAGE 1;
+
+// Class HeaderFooterHelper
+
+sal_Bool HeaderFooterHelper::isHeader( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xStyleProps( word::getCurrentPageStyle( xModel ), uno::UNO_QUERY_THROW );
+
+    sal_Bool isOn = sal_False;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn"))) >>= isOn;
+    if( !isOn )
+        return sal_False;
+
+    sal_Bool isShared = sal_False;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsShared"))) >>= isShared;
+
+    rtl::OUString aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderText") );
+    if( !isShared )
+    {
+        if( 0 == xPageCursor->getPage() % 2 )
+        {
+            aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderTextLeft") );
+        }
+        else
+        {
+            aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderTextRight") );
+        }
+    }
+
+    uno::Reference< text::XText > xText( xStyleProps->getPropertyValue( aPropText ), uno::UNO_QUERY_THROW );
+    //FIXME: can not compare in this way?
+    return ( xText == xCurrentText );
+}
+
+sal_Bool HeaderFooterHelper::isFirstPageHeader( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    if( isHeader( xModel, xCurrentText ) )
+    {
+        uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+        // FIXME: getPage allways returns 1
+        sal_Int32 nPage = xPageCursor->getPage();
+        return nPage == FIRST_PAGE;
+    }
+    return sal_False;
+}
+
+sal_Bool HeaderFooterHelper::isEvenPagesHeader( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    if( isHeader( xModel, xCurrentText ) )
+    {
+        uno::Reference< beans::XPropertySet > xStyleProps( word::getCurrentPageStyle( xModel ), uno::UNO_QUERY_THROW );
+        sal_Bool isShared = sal_False;
+        xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsShared"))) >>= isShared;
+        if( !isShared )
+        {
+            uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+            return ( 0 == xPageCursor->getPage() % 2 );
+        }
+    }
+    return sal_False;
+}
+
+sal_Bool HeaderFooterHelper::isFooter( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xStyleProps( word::getCurrentPageStyle( xModel ), uno::UNO_QUERY_THROW );
+
+    sal_Bool isOn = sal_False;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn"))) >>= isOn;
+    if( !isOn )
+        return sal_False;
+
+    sal_Bool isShared = sal_False;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsShared"))) >>= isShared;
+
+    rtl::OUString aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterText") );
+    if( !isShared )
+    {
+        if( 0 == xPageCursor->getPage() % 2 )
+        {
+            aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterTextLeft") );
+        }
+        else
+        {
+            aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterTextRight") );
+        }
+    }
+
+    uno::Reference< text::XText > xText( xStyleProps->getPropertyValue( aPropText ), uno::UNO_QUERY_THROW );
+
+    return ( xText == xCurrentText );
+}
+
+sal_Bool HeaderFooterHelper::isFirstPageFooter( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    if( isFooter( xModel, xCurrentText ) )
+    {
+        uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+        sal_Int32 nPage = xPageCursor->getPage();
+        return nPage == FIRST_PAGE;
+    }
+    return sal_False;
+}
+
+sal_Bool HeaderFooterHelper::isEvenPagesFooter( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    if( isFooter( xModel, xCurrentText ) )
+    {
+        uno::Reference< beans::XPropertySet > xStyleProps( word::getCurrentPageStyle( xModel ), uno::UNO_QUERY_THROW );
+        sal_Bool isShared = sal_False;
+        xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsShared"))) >>= isShared;
+        if( !isShared )
+        {
+            uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+            return ( 0 == xPageCursor->getPage() % 2 );
+        }
+    }
+    return sal_False;
+}
+
+sal_Bool HeaderFooterHelper::isPrimaryHeader( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    if( isHeader( xModel, xCurrentText ) )
+    {
+        return( !( isFirstPageHeader( xModel, xCurrentText ) && isEvenPagesHeader( xModel, xCurrentText ) ) );
+    }
+    return sal_False;
+}
+
+sal_Bool HeaderFooterHelper::isPrimaryFooter( const uno::Reference< frame::XModel >& xModel, const uno::Reference< text::XText >& xCurrentText ) throw (uno::RuntimeException)
+{
+    if( isHeader( xModel, xCurrentText ) )
+    {
+        return( !( isFirstPageFooter( xModel, xCurrentText ) && isEvenPagesFooter( xModel, xCurrentText ) ) );
+    }
+    return sal_False;
+}
diff --git a/sw/source/ui/vba/vbaheaderfooterhelper.hxx b/sw/source/ui/vba/vbaheaderfooterhelper.hxx
new file mode 100644
index 0000000..577e92b
--- /dev/null
+++ b/sw/source/ui/vba/vbaheaderfooterhelper.hxx
@@ -0,0 +1,52 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.hxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_WORD_VBA_HEADERFOOTERHELPER_HXX
+#define SW_WORD_VBA_HEADERFOOTERHELPER_HXX
+
+#include <vbahelper/vbahelper.hxx>
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XPageCursor.hpp>
+#include <com/sun/star/style/XStyle.hpp>
+
+class HeaderFooterHelper
+{
+public:
+    static sal_Bool isHeader( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isFirstPageHeader( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isEvenPagesHeader( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isFooter( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isFirstPageFooter( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isEvenPagesFooter( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isPrimaryHeader( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+    static sal_Bool isPrimaryFooter( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XText >& xCurrentText ) throw (css::uno::RuntimeException);
+};
+
+#endif
diff --git a/sw/source/ui/vba/vbainformationhelper.cxx b/sw/source/ui/vba/vbainformationhelper.cxx
new file mode 100644
index 0000000..6c17541
--- /dev/null
+++ b/sw/source/ui/vba/vbainformationhelper.cxx
@@ -0,0 +1,71 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbainformationhelper.hxx"
+#include <com/sun/star/text/XPageCursor.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include "wordvbahelper.hxx"
+#include <docsh.hxx>
+#include <doc.hxx>
+#include <vbahelper/vbahelper.hxx>
+#include <swtypes.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+static const sal_Int32 DEFAULT_PAGE_DISTANCE = 500;
+
+sal_Int32 SwVbaInformationHelper::handleWdActiveEndPageNumber( const css::uno::Reference< css::text::XTextViewCursor >& xTVCursor ) throw( css::uno::RuntimeException )
+{
+    uno::Reference< text::XPageCursor > xPageCursor( xTVCursor, uno::UNO_QUERY_THROW );
+    return xPageCursor->getPage();
+}
+
+sal_Int32 SwVbaInformationHelper::handleWdNumberOfPagesInDocument( const css::uno::Reference< css::frame::XModel >& xModel ) throw( css::uno::RuntimeException )
+{
+    return word::getPageCount( xModel );
+}
+
+double SwVbaInformationHelper::handleWdVerticalPositionRelativeToPage( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XTextViewCursor >& xTVCursor ) throw( css::uno::RuntimeException )
+{
+    xTVCursor->collapseToStart();
+    uno::Reference< beans::XPropertySet > xStyleProps( word::getCurrentPageStyle( xModel ), uno::UNO_QUERY_THROW );
+    sal_Int32 nTopMargin = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin") ) ) >>= nTopMargin;
+    sal_Int32 nCurrentPos = xTVCursor->getPosition().Y;
+
+    sal_Int32 nCurrentPage = handleWdActiveEndPageNumber( xTVCursor );
+    sal_Int32 nPageHeight = word::getDocShell( xModel )->GetDoc()->GetPageSize( nCurrentPage, sal_False ).Height();
+    // FIXME: handle multipul page style
+    // it is very strange that the curros position is incorrect when open Word file.
+    // e.g. if current cursor in the top left of the text body of the first page without header,
+    // the top value of current position should be 0, but is 201 when open a Word file.
+    nCurrentPos = nCurrentPos + nTopMargin - ( DEFAULT_PAGE_DISTANCE + TWIP_TO_MM100( nPageHeight ) ) * (  nCurrentPage - 1  );
+    return Millimeter::getInPoints( nCurrentPos );
+}
diff --git a/sw/source/ui/vba/vbainformationhelper.hxx b/sw/source/ui/vba/vbainformationhelper.hxx
new file mode 100644
index 0000000..194973b
--- /dev/null
+++ b/sw/source/ui/vba/vbainformationhelper.hxx
@@ -0,0 +1,46 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_INFORMATIONHELPER_HXX
+#define SW_VBA_INFORMATIONHELPER_HXX
+
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+
+class SwVbaInformationHelper
+{
+public:
+    static sal_Int32 handleWdActiveEndPageNumber( const css::uno::Reference< css::text::XTextViewCursor >& xTVCursor ) throw( css::uno::RuntimeException );
+    static sal_Int32 handleWdNumberOfPagesInDocument( const css::uno::Reference< css::frame::XModel >& xModel ) throw( css::uno::RuntimeException );
+    static double handleWdVerticalPositionRelativeToPage( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XTextViewCursor >& xTVCursor ) throw( css::uno::RuntimeException );
+    //static double verticalPositionRelativeToPageBoundary( const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::text::XTextViewCursor >& xTVCursor, const css::uno::Reference< css::beans::XPropertySet >& xStyleProps ) throw( css::uno::RuntimeException );
+
+};
+#endif /* SW_VBA_INFORMATIONHELPER_HXX */
diff --git a/sw/source/ui/vba/vbaoptions.cxx b/sw/source/ui/vba/vbaoptions.cxx
new file mode 100644
index 0000000..b6ce308
--- /dev/null
+++ b/sw/source/ui/vba/vbaoptions.cxx
@@ -0,0 +1,287 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microoptionss, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaoptions.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <ooo/vba/word/WdDefaultFilePath.hpp>
+#include <ooo/vba/word/WdLineStyle.hpp>
+#include <ooo/vba/word/WdLineWidth.hpp>
+#include <ooo/vba/word/WdColorIndex.hpp>
+#include <com/sun/star/util/XStringSubstitution.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <osl/file.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaOptions::SwVbaOptions( uno::Reference<uno::XComponentContext >& xContext ) throw ( uno::RuntimeException ) : SwVbaOptions_BASE( uno::Reference< XHelperInterface >(), xContext )
+{
+    mxFactory.set( comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+}
+
+SwVbaOptions::~SwVbaOptions()
+{
+}
+
+uno::Any SAL_CALL
+SwVbaOptions::DefaultFilePath( sal_Int32 _path ) throw ( uno::RuntimeException )
+{
+    switch( _path )
+    {
+        case word::WdDefaultFilePath::wdDocumentsPath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Work") );
+            break;
+        }
+        case word::WdDefaultFilePath::wdPicturesPath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Gallery") );
+            break;
+        }
+        case word::WdDefaultFilePath::wdUserTemplatesPath:
+        case word::WdDefaultFilePath::wdWorkgroupTemplatesPath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Template") );
+            break;
+        }
+        case word::WdDefaultFilePath::wdStartupPath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Addin") );
+            break;
+        }
+        case word::WdDefaultFilePath::wdUserOptionsPath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("UserConfig") );
+            break;
+        }
+        case word::WdDefaultFilePath::wdToolsPath:
+        case word::WdDefaultFilePath::wdProgramPath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Module") );
+            break;
+        }
+        case word::WdDefaultFilePath::wdTempFilePath:
+        {
+            msDefaultFilePath = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Temp") );
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception( SbERR_NOT_IMPLEMENTED, rtl::OUString() );
+            break;
+        }
+    }
+    return uno::makeAny( uno::Reference< XPropValue > ( new ScVbaPropValue( this ) ) );
+}
+
+void SwVbaOptions::setValueEvent( const uno::Any& value )
+{
+    rtl::OUString sNewPath;
+    value >>= sNewPath;
+    rtl::OUString sNewPathUrl;
+    ::osl::File::getFileURLFromSystemPath( sNewPath, sNewPathUrl );
+    uno::Reference< beans::XPropertySet > xPathSettings( mxFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.util.PathSettings") ), uno::UNO_QUERY_THROW );
+    rtl::OUString sOldPathUrl;
+    xPathSettings->getPropertyValue( msDefaultFilePath ) >>= sOldPathUrl;
+    // path could be a multipath, Microsoft doesn't support this feature in Word currently
+    // only the last path is from interest.
+    sal_Int32 nIndex = sOldPathUrl.lastIndexOf( sal_Unicode(';') );
+    if( nIndex != -1 )
+    {
+        sNewPathUrl = sOldPathUrl.copy( 0, nIndex + 1 ).concat( sNewPathUrl );
+    }
+    xPathSettings->setPropertyValue( msDefaultFilePath, uno::makeAny( sNewPathUrl ) );
+}
+
+uno::Any SwVbaOptions::getValueEvent()
+{
+    uno::Reference< beans::XPropertySet > xPathSettings( mxFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.util.PathSettings") ), uno::UNO_QUERY_THROW );
+    rtl::OUString sPathUrl;
+    xPathSettings->getPropertyValue( msDefaultFilePath ) >>= sPathUrl;
+    // path could be a multipath, Microsoft doesn't support this feature in Word currently
+    // only the last path is from interest.
+    sal_Int32 nIndex = sPathUrl.lastIndexOf( sal_Unicode(';') );
+    if( nIndex != -1 )
+    {
+        sPathUrl = sPathUrl.copy( nIndex + 1 );
+    }
+    rtl::OUString sPath;
+    ::osl::File::getSystemPathFromFileURL( sPathUrl, sPath );
+    return uno::makeAny( sPath );
+}
+
+sal_Int32 SAL_CALL SwVbaOptions::getDefaultBorderLineStyle() throw (uno::RuntimeException)
+{
+    return word::WdLineStyle::wdLineStyleSingle;
+}
+
+void SAL_CALL SwVbaOptions::setDefaultBorderLineStyle( ::sal_Int32 /*_defaultborderlinestyle*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+sal_Int32 SAL_CALL SwVbaOptions::getDefaultBorderLineWidth() throw (uno::RuntimeException)
+{
+    return word::WdLineWidth::wdLineWidth050pt;
+}
+
+void SAL_CALL SwVbaOptions::setDefaultBorderLineWidth( ::sal_Int32 /*_defaultborderlinewidth*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+sal_Int32 SAL_CALL SwVbaOptions::getDefaultBorderColorIndex() throw (uno::RuntimeException)
+{
+    return word::WdColorIndex::wdAuto;
+}
+
+void SAL_CALL SwVbaOptions::setDefaultBorderColorIndex( ::sal_Int32 /*_defaultbordercolorindex*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getReplaceSelection() throw (uno::RuntimeException)
+{
+    return sal_True;
+}
+
+void SAL_CALL SwVbaOptions::setReplaceSelection( ::sal_Bool /*_replaceselection*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getMapPaperSize() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setMapPaperSize( ::sal_Bool /*_mappapersize*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatAsYouTypeApplyHeadings() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatAsYouTypeApplyHeadings( ::sal_Bool /*_autoformatasyoutypeapplyheadings*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatAsYouTypeApplyBulletedLists() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatAsYouTypeApplyBulletedLists( ::sal_Bool /*_autoformatasyoutypeapplybulletedlists*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatAsYouTypeApplyNumberedLists() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatAsYouTypeApplyNumberedLists( ::sal_Bool /*_autoformatasyoutypeapplynumberedlists*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatAsYouTypeFormatListItemBeginning() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatAsYouTypeFormatListItemBeginning( ::sal_Bool /*_autoformatasyoutypeformatlistitembeginning*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatAsYouTypeDefineStyles() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatAsYouTypeDefineStyles( ::sal_Bool /*_autoformatasyoutypedefinestyles*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatApplyHeadings() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatApplyHeadings( ::sal_Bool /*_autoformatapplyheadings*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatApplyLists() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatApplyLists( ::sal_Bool /*_autoformatapplylists*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL SwVbaOptions::getAutoFormatApplyBulletedLists() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaOptions::setAutoFormatApplyBulletedLists( ::sal_Bool /*_autoformatapplybulletedlists*/ ) throw (uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+
+rtl::OUString&
+SwVbaOptions::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaOptions") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaOptions::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Options" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaoptions.hxx b/sw/source/ui/vba/vbaoptions.hxx
new file mode 100644
index 0000000..45cc56b
--- /dev/null
+++ b/sw/source/ui/vba/vbaoptions.hxx
@@ -0,0 +1,90 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbasystem.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_OPTIONS_HXX
+#define SW_VBA_OPTIONS_HXX
+
+#include <ooo/vba/word/XOptions.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <vbahelper/vbapropvalue.hxx>
+#include <comphelper/processfactory.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XOptions > SwVbaOptions_BASE;
+
+class SwVbaOptions : public SwVbaOptions_BASE,
+                    public PropListener
+{
+private:
+    rtl::OUString msDefaultFilePath;
+    css::uno::Reference< css::lang::XMultiServiceFactory > mxFactory;
+public:
+    SwVbaOptions( css::uno::Reference< css::uno::XComponentContext >& m_xContext ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaOptions();
+
+    // Attributes
+    virtual ::sal_Int32 SAL_CALL getDefaultBorderLineStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDefaultBorderLineStyle( ::sal_Int32 _defaultborderlinestyle ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getDefaultBorderLineWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDefaultBorderLineWidth( ::sal_Int32 _defaultborderlinewidth ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getDefaultBorderColorIndex() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDefaultBorderColorIndex( ::sal_Int32 _defaultbordercolorindex ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getReplaceSelection() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setReplaceSelection( ::sal_Bool _replaceselection ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getMapPaperSize() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMapPaperSize( ::sal_Bool _mappapersize ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatAsYouTypeApplyHeadings() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatAsYouTypeApplyHeadings( ::sal_Bool _autoformatasyoutypeapplyheadings ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatAsYouTypeApplyBulletedLists() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatAsYouTypeApplyBulletedLists( ::sal_Bool _autoformatasyoutypeapplybulletedlists ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatAsYouTypeApplyNumberedLists() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatAsYouTypeApplyNumberedLists( ::sal_Bool _autoformatasyoutypeapplynumberedlists ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatAsYouTypeFormatListItemBeginning() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatAsYouTypeFormatListItemBeginning( ::sal_Bool _autoformatasyoutypeformatlistitembeginning ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatAsYouTypeDefineStyles() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatAsYouTypeDefineStyles( ::sal_Bool _autoformatasyoutypedefinestyles ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatApplyHeadings() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatApplyHeadings( ::sal_Bool _autoformatapplyheadings ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatApplyLists() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatApplyLists( ::sal_Bool _autoformatapplylists ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getAutoFormatApplyBulletedLists() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoFormatApplyBulletedLists( ::sal_Bool _autoformatapplybulletedlists ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual css::uno::Any SAL_CALL DefaultFilePath( sal_Int32 _path ) throw ( css::uno::RuntimeException );
+
+    //PropListener
+    virtual void setValueEvent( const css::uno::Any& value );
+    virtual css::uno::Any getValueEvent();
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_OPTIONS_HXX */
diff --git a/sw/source/ui/vba/vbapagesetup.cxx b/sw/source/ui/vba/vbapagesetup.cxx
new file mode 100644
index 0000000..9540072
--- /dev/null
+++ b/sw/source/ui/vba/vbapagesetup.cxx
@@ -0,0 +1,275 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbapagesetup.hxx"
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XPageCursor.hpp>
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <ooo/vba/word/WdSectionStart.hpp>
+#include <ooo/vba/word/WdOrientation.hpp>
+#include "wordvbahelper.hxx"
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+SwVbaPageSetup::SwVbaPageSetup(const uno::Reference< XHelperInterface >& xParent,
+                const uno::Reference< uno::XComponentContext >& xContext,
+                const uno::Reference< frame::XModel >& xModel,
+                const uno::Reference< beans::XPropertySet >& xProps ) throw (uno::RuntimeException):
+	SwVbaPageSetup_BASE( xParent, xContext )
+{
+    mxModel.set( xModel, uno::UNO_QUERY_THROW );
+    mxPageProps.set( xProps, uno::UNO_QUERY_THROW );
+    mnOrientPortrait = word::WdOrientation::wdOrientPortrait;
+    mnOrientLandscape = word::WdOrientation::wdOrientLandscape;
+}
+
+double SAL_CALL SwVbaPageSetup::getGutter() throw (uno::RuntimeException)
+{
+    // not support in Writer
+    return 0;
+}
+
+void SAL_CALL SwVbaPageSetup::setGutter( double _gutter ) throw (uno::RuntimeException)
+{
+    // default add gutter into left margin
+    if( _gutter != 0 )
+    {
+        double margin = VbaPageSetupBase::getLeftMargin() + _gutter;
+        VbaPageSetupBase::setLeftMargin( margin );
+    }
+}
+
+double SAL_CALL SwVbaPageSetup::getHeaderDistance() throw (uno::RuntimeException)
+{
+    sal_Bool isHeaderOn = sal_False;
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn"))) >>= isHeaderOn;
+    if( !isHeaderOn )
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")), uno::makeAny( sal_True ) );
+    return VbaPageSetupBase::getHeaderMargin();
+}
+
+    /**
+     * changes the value of TopMargin to the value of new MS-Word-HeaderDistance. Subtracts the difference
+     * between old TopMargin and the new headerDistance from the value of HeaderSpacing (which defines the
+     * space between the header and the body of the text). calculates the new HeaderHeight (= height of the
+     * header + headerBodyDistance).
+     *
+     * @param: headerDistance is the value that is set in MS Word for the distance from the top of the page
+     *          to the header
+     */
+void SAL_CALL SwVbaPageSetup::setHeaderDistance( double _headerdistance ) throw (uno::RuntimeException)
+{
+    sal_Int32 newHeaderDistance = Millimeter::getInHundredthsOfOneMillimeter( _headerdistance );
+    sal_Bool isHeaderOn = sal_False;
+    sal_Int32 aktTopMargin = 0;
+    sal_Int32 aktSpacing = 0;
+    sal_Int32 aktHeaderHeight = 0;
+
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn"))) >>= isHeaderOn;
+    if( !isHeaderOn )
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")), uno::makeAny( sal_True ) );
+
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin"))) >>= aktTopMargin;
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderBodyDistance"))) >>= aktSpacing;
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight"))) >>= aktHeaderHeight;
+
+    sal_Int32 newSpacing = aktSpacing - ( newHeaderDistance - aktTopMargin );
+    sal_Int32 height = aktHeaderHeight - aktSpacing;
+    sal_Int32 newHeaderHeight = newSpacing + height;
+
+    mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")), uno::makeAny( newHeaderDistance ) );
+    mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderBodyDistance")), uno::makeAny( newSpacing ) );
+    mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight")), uno::makeAny( newHeaderHeight ) );
+}
+
+double SAL_CALL SwVbaPageSetup::getFooterDistance() throw (uno::RuntimeException)
+{
+    sal_Bool isFooterOn = sal_False;
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn"))) >>= isFooterOn;
+    if( !isFooterOn )
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")), uno::makeAny( sal_True ) );
+    return VbaPageSetupBase::getFooterMargin();
+}
+
+void SAL_CALL SwVbaPageSetup::setFooterDistance( double _footerdistance ) throw (uno::RuntimeException)
+{
+    sal_Int32 newFooterDistance = Millimeter::getInHundredthsOfOneMillimeter( _footerdistance );
+    sal_Bool isFooterOn = sal_False;
+    sal_Int32 aktBottomMargin = 0;
+    sal_Int32 aktSpacing = 0;
+    sal_Int32 aktFooterHeight = 0;
+
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn"))) >>= isFooterOn;
+    if( !isFooterOn )
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")), uno::makeAny( sal_True ) );
+
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin"))) >>= aktBottomMargin;
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterBodyDistance"))) >>= aktSpacing;
+    mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight"))) >>= aktFooterHeight;
+
+    sal_Int32 newSpacing = aktSpacing - ( newFooterDistance - aktBottomMargin );
+    sal_Int32 height = aktFooterHeight - aktSpacing;
+    sal_Int32 newFooterHeight = newSpacing + height;
+
+    mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")), uno::makeAny( newFooterDistance ) );
+    mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterBodyDistance")), uno::makeAny( newSpacing ) );
+    mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight")), uno::makeAny( newFooterHeight ) );
+}
+
+sal_Bool SAL_CALL SwVbaPageSetup::getDifferentFirstPageHeaderFooter() throw (uno::RuntimeException)
+{
+    rtl::OUString pageStyle = getStyleOfFirstPage();
+    if( pageStyle.equalsAscii( "First Page" ) )
+        return sal_True;
+
+    return sal_False;
+}
+
+void SAL_CALL SwVbaPageSetup::setDifferentFirstPageHeaderFooter( sal_Bool status ) throw (uno::RuntimeException)
+{
+    if( status == getDifferentFirstPageHeaderFooter() )
+        return;
+
+    rtl::OUString newStyle;
+    if( status )
+        newStyle = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("First Page") );
+    else
+        newStyle = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Standard") );
+
+    uno::Reference< beans::XPropertySet > xStyleProps( word::getCurrentPageStyle( mxModel ), uno::UNO_QUERY_THROW );
+    sal_Int32 nTopMargin = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin"))) >>= nTopMargin;
+    sal_Int32 nBottomMargin = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin"))) >>= nBottomMargin;
+    sal_Int32 nLeftMargin = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin"))) >>= nLeftMargin;
+    sal_Int32 nRightMargin = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin"))) >>= nRightMargin;
+    sal_Int32 nHeaderHeight = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight"))) >>= nHeaderHeight;
+    sal_Int32 nFooterHeight = 0;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight"))) >>= nFooterHeight;
+
+    sal_Bool isHeaderOn = sal_False;
+    xStyleProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn"))) >>= isHeaderOn;
+    if( isHeaderOn )
+    {
+        nTopMargin += nHeaderHeight;
+        nBottomMargin += nFooterHeight;
+        xStyleProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")), uno::makeAny( sal_False ) );
+        xStyleProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")), uno::makeAny( sal_False ) );
+    }
+    uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( mxModel ), uno::UNO_QUERY_THROW );
+    if( xPageCursor->getPage() != 1 )
+    {
+        xPageCursor->jumpToFirstPage();
+    }
+
+    uno::Reference< beans::XPropertySet > xCursorProps( xPageCursor, uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xTableProps( xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextTable") ) ), uno::UNO_QUERY );
+    if( xTableProps.is() )
+    {
+        xTableProps->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageDescName") ), uno::makeAny( newStyle ) );
+    }
+    else
+    {
+        xCursorProps->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageDescName") ), uno::makeAny( newStyle ) );
+    }
+
+    uno::Reference< beans::XPropertySet > xFirstPageProps( word::getCurrentPageStyle( mxModel ), uno::UNO_QUERY_THROW );
+    xFirstPageProps->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin") ), uno::makeAny( nTopMargin ) );
+    xFirstPageProps->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin") ), uno::makeAny( nBottomMargin ) );
+    xFirstPageProps->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin") ), uno::makeAny( nLeftMargin ) );
+    xFirstPageProps->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin") ), uno::makeAny( nRightMargin ) );
+}
+
+rtl::OUString SwVbaPageSetup::getStyleOfFirstPage() throw (uno::RuntimeException)
+{
+    rtl::OUString styleFirstPage;
+    uno::Reference< text::XPageCursor > xPageCursor( word::getXTextViewCursor( mxModel ), uno::UNO_QUERY_THROW );
+    if( xPageCursor->getPage() != 1 )
+    {
+        xPageCursor->jumpToFirstPage();
+    }
+
+    uno::Reference< beans::XPropertySet > xCursorProps( xPageCursor, uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xTableProps( xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextTable") ) ), uno::UNO_QUERY );
+    if( xTableProps.is() )
+    {
+        xTableProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageDescName") ) ) >>= styleFirstPage;
+    }
+    else
+    {
+        xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageDescName") ) ) >>= styleFirstPage;
+    }
+    return styleFirstPage;
+}
+
+::sal_Int32 SAL_CALL SwVbaPageSetup::getSectionStart() throw (uno::RuntimeException)
+{
+    // FIXME:
+    sal_Int32 wdSectionStart = word::WdSectionStart::wdSectionNewPage;
+    uno::Reference< container::XNamed > xNamed( mxPageProps, uno::UNO_QUERY_THROW );
+    rtl::OUString sStyleName = xNamed->getName();
+    //mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Name") ) ) >>= sStyleName;
+    if( sStyleName.equalsAscii("Left Page") )
+        wdSectionStart = word::WdSectionStart::wdSectionEvenPage;
+    else if( sStyleName.equalsAscii("Right Page") )
+        wdSectionStart = word::WdSectionStart::wdSectionOddPage;
+    else
+        wdSectionStart = word::WdSectionStart::wdSectionNewPage;
+    return wdSectionStart;
+}
+
+void SAL_CALL SwVbaPageSetup::setSectionStart( ::sal_Int32 /*_sectionstart*/ ) throw (uno::RuntimeException)
+{
+    // fail to find corresponding feature in Writer
+    // #FIXME:
+}
+
+rtl::OUString&
+SwVbaPageSetup::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaPageSetup") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaPageSetup::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.PageSetup" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbapagesetup.hxx b/sw/source/ui/vba/vbapagesetup.hxx
new file mode 100644
index 0000000..7a03955
--- /dev/null
+++ b/sw/source/ui/vba/vbapagesetup.hxx
@@ -0,0 +1,70 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_PAGESETUP_HXX
+#define SW_VBA_PAGESETUP_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/word/XPageSetup.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbapagesetupbase.hxx>
+
+typedef cppu::ImplInheritanceHelper1< VbaPageSetupBase, ooo::vba::word::XPageSetup > SwVbaPageSetup_BASE;
+
+class SwVbaPageSetup :  public SwVbaPageSetup_BASE
+{
+private:
+    rtl::OUString getStyleOfFirstPage() throw (css::uno::RuntimeException);
+
+public:
+    SwVbaPageSetup( const css::uno::Reference< ooo::vba::XHelperInterface >& xParent,
+                    const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                    const css::uno::Reference< css::frame::XModel >& xModel,
+                    const css::uno::Reference< css::beans::XPropertySet >& xProps ) throw (css::uno::RuntimeException);
+    virtual ~SwVbaPageSetup(){}
+
+    // Attributes
+    virtual double SAL_CALL getGutter() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setGutter( double _gutter ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getHeaderDistance() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setHeaderDistance( double _headerdistance ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getFooterDistance() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setFooterDistance( double _footerdistance ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getDifferentFirstPageHeaderFooter() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDifferentFirstPageHeaderFooter( sal_Bool status ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getSectionStart() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSectionStart( ::sal_Int32 _sectionstart ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif
diff --git a/sw/source/ui/vba/vbapalette.cxx b/sw/source/ui/vba/vbapalette.cxx
new file mode 100644
index 0000000..2fa2881
--- /dev/null
+++ b/sw/source/ui/vba/vbapalette.cxx
@@ -0,0 +1,74 @@
+#include "vbapalette.hxx"
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <ooo/vba/word/WdColor.hpp>
+#include <ooo/vba/word/WdColorIndex.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::ooo::vba::word;
+using namespace ::com::sun::star;
+
+static const sal_Int32 ColorTable[] =
+{
+WdColor::wdColorAutomatic, // 0
+WdColor::wdColorBlack,             // 1
+WdColor::wdColorBlue,               // 2
+WdColor::wdColorTurquoise,     // 3
+WdColor::wdColorBrightGreen, // 4
+WdColor::wdColorPink,               // 5
+WdColor::wdColorRed,                 // 6
+WdColor::wdColorYellow,           // 7
+WdColor::wdColorWhite,             // 8
+WdColor::wdColorDarkBlue,       // 9
+WdColor::wdColorTeal,               // 10
+WdColor::wdColorGreen,             // 11
+WdColor::wdColorViolet,           // 12
+WdColor::wdColorDarkRed,         // 13
+WdColor::wdColorDarkYellow,   // 14
+WdColor::wdColorGray50,           // 15
+WdColor::wdColorGray25,           // 16
+};
+
+typedef ::cppu::WeakImplHelper1< container::XIndexAccess > XIndexAccess_BASE;
+
+class DefaultPalette : public XIndexAccess_BASE
+{
+public:
+   DefaultPalette(){}
+
+    // Methods XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount() throw (uno::RuntimeException)
+    {
+        return sizeof(ColorTable) / sizeof(ColorTable[0]);
+    }
+
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+    if ( Index < 0 || Index >= getCount() )
+        throw lang::IndexOutOfBoundsException();
+        return uno::makeAny( sal_Int32( ColorTable[ Index ] ) );
+    }
+
+    // Methods XElementAcess
+    virtual uno::Type SAL_CALL getElementType() throw (uno::RuntimeException)
+    {
+        return ::getCppuType( (sal_Int32*)0 );
+    }
+    virtual ::sal_Bool SAL_CALL hasElements() throw (uno::RuntimeException)
+    {
+        return sal_True;
+    }
+
+};
+
+VbaPalette::VbaPalette()
+{
+    mxPalette = new DefaultPalette();
+}
+
+uno::Reference< container::XIndexAccess >
+VbaPalette::getPalette() const
+{
+
+    return mxPalette;
+}
diff --git a/sw/source/ui/vba/vbapalette.hxx b/sw/source/ui/vba/vbapalette.hxx
new file mode 100644
index 0000000..6179f17
--- /dev/null
+++ b/sw/source/ui/vba/vbapalette.hxx
@@ -0,0 +1,15 @@
+#ifndef VBAPALETTE_HXX
+#define VBAPALETTE_HXX
+#include <vbahelper/vbahelper.hxx>
+
+class VbaPalette
+{
+        css::uno::Reference< css::container::XIndexAccess > mxPalette;
+public:
+        VbaPalette();
+        // if no palette available e.g. because the document doesn't have a
+        // palette defined then a default palette will be returned.
+        css::uno::Reference< css::container::XIndexAccess > getPalette() const;
+};
+
+#endif
diff --git a/sw/source/ui/vba/vbapane.cxx b/sw/source/ui/vba/vbapane.cxx
new file mode 100644
index 0000000..1647d5d
--- /dev/null
+++ b/sw/source/ui/vba/vbapane.cxx
@@ -0,0 +1,78 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbapane.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbaview.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaPane::SwVbaPane( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext,
+    const uno::Reference< frame::XModel >& xModel ) throw ( uno::RuntimeException ) :
+    SwVbaPane_BASE( rParent, rContext ), mxModel( xModel )
+{
+}
+
+SwVbaPane::~SwVbaPane()
+{
+}
+
+uno::Any SAL_CALL
+SwVbaPane::View() throw ( css::uno::RuntimeException )
+{
+    return uno::makeAny( uno::Reference< word::XView >( new SwVbaView( this,  mxContext, mxModel ) ) );
+}
+
+void SAL_CALL
+SwVbaPane::Close( ) throw ( css::uno::RuntimeException )
+{
+    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:CloseWin"));
+    dispatchRequests( mxModel,url );
+}
+
+rtl::OUString&
+SwVbaPane::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaPane") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaPane::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Pane" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbapane.hxx b/sw/source/ui/vba/vbapane.hxx
new file mode 100644
index 0000000..7417659
--- /dev/null
+++ b/sw/source/ui/vba/vbapane.hxx
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_PANE_HXX
+#define SW_VBA_PANE_HXX
+
+#include <ooo/vba/word/XPane.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XPane > SwVbaPane_BASE;
+
+class SwVbaPane : public SwVbaPane_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+
+public:
+    SwVbaPane( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext,
+        const css::uno::Reference< css::frame::XModel >& xModel ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaPane();
+
+    // Methods
+    virtual css::uno::Any SAL_CALL View(  ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Close(  ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_PANE_HXX */
diff --git a/sw/source/ui/vba/vbapanes.cxx b/sw/source/ui/vba/vbapanes.cxx
new file mode 100644
index 0000000..55df7ad
--- /dev/null
+++ b/sw/source/ui/vba/vbapanes.cxx
@@ -0,0 +1,127 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbapanes.hxx"
+#include "vbapane.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+// I assume there is only one pane in Writer
+typedef ::cppu::WeakImplHelper1<container::XIndexAccess > PanesIndexAccess_Base;
+class PanesIndexAccess : public PanesIndexAccess_Base
+{
+private:
+    uno::Reference< XHelperInterface > mxParent;
+    uno::Reference< uno::XComponentContext > mxContext;
+    uno::Reference< frame::XModel > mxModel;
+
+public:
+    PanesIndexAccess( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : mxParent( xParent ), mxContext( xContext ), mxModel( xModel ) {}
+    ~PanesIndexAccess(){}
+
+    // XIndexAccess
+    virtual sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return 1;
+    }
+    virtual uno::Any SAL_CALL getByIndex( sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if( Index != 1 )
+            throw container::NoSuchElementException();
+        return uno::makeAny( uno::Reference< word::XPane >( new SwVbaPane( mxParent,  mxContext, mxModel ) ) );
+    }
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return word::XPane::static_type(0);
+    }
+    virtual sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return sal_True;
+    }
+};
+
+class PanesEnumWrapper : public EnumerationHelper_BASE
+{
+    uno::Reference<container::XIndexAccess > m_xIndexAccess;
+    sal_Int32 nIndex;
+public:
+    PanesEnumWrapper( const uno::Reference< container::XIndexAccess >& xIndexAccess ) : m_xIndexAccess( xIndexAccess ), nIndex( 0 ) {}
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return ( nIndex < m_xIndexAccess->getCount() );
+    }
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( nIndex < m_xIndexAccess->getCount() )
+            return m_xIndexAccess->getByIndex( nIndex++ );
+        throw container::NoSuchElementException();
+    }
+};
+
+SwVbaPanes::SwVbaPanes( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xModel ): SwVbaPanes_BASE( xParent, xContext, new PanesIndexAccess( xParent, xContext, xModel ) ),  mxModel( xModel )
+{
+}
+// XEnumerationAccess
+uno::Type
+SwVbaPanes::getElementType() throw (uno::RuntimeException)
+{
+    return word::XPane::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaPanes::createEnumeration() throw (uno::RuntimeException)
+{
+    return new PanesEnumWrapper( m_xIndexAccess );
+}
+
+uno::Any
+SwVbaPanes::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource;
+}
+
+rtl::OUString&
+SwVbaPanes::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaPanes") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaPanes::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Panes") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbapanes.hxx b/sw/source/ui/vba/vbapanes.hxx
new file mode 100644
index 0000000..c2fca4a
--- /dev/null
+++ b/sw/source/ui/vba/vbapanes.hxx
@@ -0,0 +1,60 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_PANES_HXX
+#define SW_VBA_PANES_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XPanes.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef CollTestImplHelper< ooo::vba::word::XPanes > SwVbaPanes_BASE;
+
+class SwVbaPanes : public SwVbaPanes_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+
+public:
+    SwVbaPanes( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xModel );
+    virtual ~SwVbaPanes() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaPanes_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_PANES_HXX */
diff --git a/sw/source/ui/vba/vbaparagraph.cxx b/sw/source/ui/vba/vbaparagraph.cxx
new file mode 100644
index 0000000..21077e4
--- /dev/null
+++ b/sw/source/ui/vba/vbaparagraph.cxx
@@ -0,0 +1,177 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaparagraph.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbarange.hxx"
+#include <com/sun/star/lang/XServiceInfo.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaParagraph::SwVbaParagraph( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< text::XTextDocument >& xDocument, const uno::Reference< text::XTextRange >& xTextRange ) throw ( uno::RuntimeException ) :
+    SwVbaParagraph_BASE( rParent, rContext ), mxTextDocument( xDocument ), mxTextRange( xTextRange )
+{
+}
+
+SwVbaParagraph::~SwVbaParagraph()
+{
+}
+
+uno::Reference< word::XRange > SAL_CALL
+SwVbaParagraph::getRange( ) throw ( uno::RuntimeException )
+{
+    return uno::Reference< word::XRange >( new SwVbaRange( this, mxContext, mxTextDocument, mxTextRange->getStart(), mxTextRange->getEnd(), mxTextRange->getText(), sal_True ) );
+}
+
+rtl::OUString&
+SwVbaParagraph::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaParagraph") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaParagraph::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Paragraph" ) );
+    }
+    return aServiceNames;
+}
+
+
+//typedef ::cppu::WeakImplHelper1< container::XEnumeration > ParagraphEnumeration_BASE;
+typedef ::cppu::WeakImplHelper2< container::XIndexAccess, container::XEnumerationAccess > ParagraphCollectionHelper_BASE;
+
+class ParagraphCollectionHelper : public ParagraphCollectionHelper_BASE
+{
+private:
+    uno::Reference< text::XTextDocument > mxTextDocument;
+
+    uno::Reference< container::XEnumeration > getEnumeration() throw (uno::RuntimeException)
+    {
+        uno::Reference< container::XEnumerationAccess > xParEnumAccess( mxTextDocument->getText(), uno::UNO_QUERY_THROW );
+        return xParEnumAccess->createEnumeration();
+    }
+
+public:
+    ParagraphCollectionHelper( const uno::Reference< text::XTextDocument >& xDocument ) throw (uno::RuntimeException): mxTextDocument( xDocument )
+    {
+    }
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return  text::XTextRange::static_type(0); }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) { return sal_True; }
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        sal_Int32 nCount = 0;
+        uno::Reference< container::XEnumeration > xParEnum = getEnumeration();
+        while( xParEnum->hasMoreElements() )
+        {
+            uno::Reference< lang::XServiceInfo > xServiceInfo( xParEnum->nextElement(), uno::UNO_QUERY_THROW );
+            if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Paragraph") ) ) )
+            {
+                nCount++;
+            }
+        }
+        return nCount;
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        if( Index < getCount() )
+        {
+            sal_Int32 nCount = 0;
+            uno::Reference< container::XEnumeration > xParEnum = getEnumeration();
+            while( xParEnum->hasMoreElements() )
+            {
+                uno::Reference< lang::XServiceInfo > xServiceInfo( xParEnum->nextElement(), uno::UNO_QUERY_THROW );
+                if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Paragraph") ) ) )
+                {
+                    if( Index == nCount )
+                        return uno::makeAny( xServiceInfo );
+                    nCount++;
+                }
+            }
+        }
+        throw lang::IndexOutOfBoundsException();
+    }
+    // XEnumerationAccess
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        return getEnumeration();
+    }
+};
+
+SwVbaParagraphs::SwVbaParagraphs( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< ::com::sun::star::uno::XComponentContext > & xContext, const uno::Reference< text::XTextDocument >& xDocument ) throw (uno::RuntimeException) : SwVbaParagraphs_BASE( xParent, xContext, new ParagraphCollectionHelper( xDocument ) ), mxTextDocument( xDocument )
+{
+}
+
+// XEnumerationAccess
+uno::Type
+SwVbaParagraphs::getElementType() throw (uno::RuntimeException)
+{
+    return word::XParagraph::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaParagraphs::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return xEnumerationAccess->createEnumeration();
+}
+
+uno::Any
+SwVbaParagraphs::createCollectionObject( const css::uno::Any& aSource )
+{
+    uno::Reference< text::XTextRange > xTextRange( aSource, uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< word::XParagraph >( new SwVbaParagraph( this, mxContext, mxTextDocument, xTextRange ) ) );
+}
+
+rtl::OUString&
+SwVbaParagraphs::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaParagraphs") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaParagraphs::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Paragraphs") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbaparagraph.hxx b/sw/source/ui/vba/vbaparagraph.hxx
new file mode 100644
index 0000000..c1c6298
--- /dev/null
+++ b/sw/source/ui/vba/vbaparagraph.hxx
@@ -0,0 +1,84 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_PARAGRAPH_HXX
+#define SW_VBA_PARAGRAPH_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XParagraphs.hpp>
+#include <ooo/vba/word/XParagraph.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XParagraph > SwVbaParagraph_BASE;
+
+class SwVbaParagraph : public SwVbaParagraph_BASE
+{
+private:
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+    css::uno::Reference< css::text::XTextRange > mxTextRange;
+
+public:
+    SwVbaParagraph( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& xDocument, const css::uno::Reference< css::text::XTextRange >& xTextRange ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaParagraph();
+
+    // XParagraph
+    virtual css::uno::Reference< ooo::vba::word::XRange > SAL_CALL getRange() throw ( css::uno::RuntimeException );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+
+/* class SwVbaParagraphs */
+typedef CollTestImplHelper< ooo::vba::word::XParagraphs > SwVbaParagraphs_BASE;
+
+class SwVbaParagraphs : public SwVbaParagraphs_BASE
+{
+private:
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+public:
+    SwVbaParagraphs( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::text::XTextDocument >& xDocument ) throw (css::uno::RuntimeException);
+    virtual ~SwVbaParagraphs() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaParagraphs_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_PARAGRAPH_HXX */
diff --git a/sw/source/ui/vba/vbaparagraphformat.cxx b/sw/source/ui/vba/vbaparagraphformat.cxx
new file mode 100644
index 0000000..fa73261
--- /dev/null
+++ b/sw/source/ui/vba/vbaparagraphformat.cxx
@@ -0,0 +1,575 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaparagraphformat.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "wordvbahelper.hxx"
+#include <com/sun/star/style/LineSpacingMode.hpp>
+#include <ooo/vba/word/WdLineSpacing.hpp>
+#include <ooo/vba/word/WdParagraphAlignment.hpp>
+#include <ooo/vba/word/WdOutlineLevel.hpp>
+#include <com/sun/star/style/ParagraphAdjust.hpp>
+#include <com/sun/star/style/BreakType.hpp>
+
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+static const sal_Int16 CHARACTER_INDENT_FACTOR = 12;
+static const sal_Int16 PERCENT100 = 100;
+static const sal_Int16 PERCENT150 = 150;
+static const sal_Int16 PERCENT200 = 200;
+
+SwVbaParagraphFormat::SwVbaParagraphFormat( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< text::XTextDocument >& rTextDocument, const uno::Reference< beans::XPropertySet >& rParaProps ) : SwVbaParagraphFormat_BASE( rParent, rContext ), mxTextDocument( rTextDocument ), mxParaProps( rParaProps )
+{
+}
+
+SwVbaParagraphFormat::~SwVbaParagraphFormat()
+{
+}
+
+sal_Int32 SAL_CALL SwVbaParagraphFormat::getAlignment() throw (uno::RuntimeException)
+{
+    style::ParagraphAdjust aParaAdjust = style::ParagraphAdjust_LEFT;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaAdjust") ) ) >>= aParaAdjust;
+    return getMSWordAlignment( aParaAdjust );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setAlignment( sal_Int32 _alignment ) throw (uno::RuntimeException)
+{
+    style::ParagraphAdjust aParaAdjust = ( style::ParagraphAdjust ) getOOoAlignment( _alignment );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaAdjust") ), uno::makeAny( aParaAdjust ) );
+}
+
+float SAL_CALL SwVbaParagraphFormat::getFirstLineIndent() throw (uno::RuntimeException)
+{
+    sal_Int32 indent = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaFirstLineIndent") ) ) >>= indent;
+    return (float)( Millimeter::getInPoints( indent ) );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setFirstLineIndent( float _firstlineindent ) throw (uno::RuntimeException)
+{
+    sal_Int32 indent = Millimeter::getInHundredthsOfOneMillimeter( _firstlineindent );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaFirstLineIndent") ), uno::makeAny( indent ) );
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getKeepTogether() throw (uno::RuntimeException)
+{
+    sal_Bool bKeep = sal_False;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaKeepTogether") ) ) >>= bKeep;
+    return uno::makeAny ( bKeep );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setKeepTogether( const uno::Any& _keeptogether ) throw (uno::RuntimeException)
+{
+    sal_Bool bKeep = sal_False;
+    if( _keeptogether >>= bKeep )
+    {
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaKeepTogether") ), uno::makeAny( bKeep ) );
+    }
+    else
+    {
+        DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getKeepWithNext() throw (uno::RuntimeException)
+{
+    sal_Bool bKeep = sal_False;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaSplit") ) ) >>= bKeep;
+    return uno::makeAny ( bKeep );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setKeepWithNext( const uno::Any& _keepwithnext ) throw (uno::RuntimeException)
+{
+    sal_Bool bKeep = sal_False;
+    if( _keepwithnext >>= bKeep )
+    {
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaSplit") ), uno::makeAny( bKeep ) );
+    }
+    else
+    {
+        DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getHyphenation() throw (uno::RuntimeException)
+{
+    sal_Bool bHypn = sal_False;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaIsHyphenation") ) ) >>= bHypn;
+    return uno::makeAny ( bHypn );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setHyphenation( const uno::Any& _hyphenation ) throw (uno::RuntimeException)
+{
+    sal_Bool bHypn = sal_False;
+    if( _hyphenation >>= bHypn )
+    {
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaIsHyphenation") ), uno::makeAny( bHypn ) );
+    }
+    else
+    {
+        DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+}
+
+float SAL_CALL SwVbaParagraphFormat::getLineSpacing() throw (uno::RuntimeException)
+{
+    style::LineSpacing aLineSpacing;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineSpacing") ) ) >>= aLineSpacing;
+    return getMSWordLineSpacing( aLineSpacing );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setLineSpacing( float _linespacing ) throw (uno::RuntimeException)
+{
+    style::LineSpacing aLineSpacing;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineSpacing") ) ) >>= aLineSpacing;
+    aLineSpacing = getOOoLineSpacing( _linespacing, aLineSpacing.Mode );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineSpacing") ), uno::makeAny( aLineSpacing ) );
+}
+
+sal_Int32 SAL_CALL SwVbaParagraphFormat::getLineSpacingRule() throw (uno::RuntimeException)
+{
+    style::LineSpacing aLineSpacing;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineSpacing") ) ) >>= aLineSpacing;
+    return getMSWordLineSpacingRule( aLineSpacing );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setLineSpacingRule( sal_Int32 _linespacingrule ) throw (uno::RuntimeException)
+{
+    style::LineSpacing aLineSpacing = getOOoLineSpacingFromRule( _linespacingrule );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineSpacing") ), uno::makeAny( aLineSpacing ) );
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getNoLineNumber() throw (uno::RuntimeException)
+{
+    sal_Bool noLineNum = sal_False;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineNumberCount") ) ) >>= noLineNum;
+    return uno::makeAny ( noLineNum );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setNoLineNumber( const uno::Any& _nolinenumber ) throw (uno::RuntimeException)
+{
+    sal_Bool noLineNum = sal_False;
+    if( _nolinenumber >>= noLineNum )
+    {
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLineNumberCount") ), uno::makeAny( noLineNum ) );
+    }
+    else
+    {
+        DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+}
+
+sal_Int32 SAL_CALL SwVbaParagraphFormat::getOutlineLevel() throw (uno::RuntimeException)
+{
+    sal_Int32 nLevel = word::WdOutlineLevel::wdOutlineLevelBodyText;
+    rtl::OUString aHeading;
+    const rtl::OUString HEADING = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Heading") );
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaStyleName") ) ) >>= aHeading;
+    if( aHeading.indexOf( HEADING ) == 0 )
+    {
+        // get the sub string after "Heading"
+        nLevel = aHeading.copy( HEADING.getLength() ).toInt32();
+    }
+    return nLevel;
+}
+
+void SAL_CALL SwVbaParagraphFormat::setOutlineLevel( sal_Int32 /*_outlinelevel*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getPageBreakBefore() throw (uno::RuntimeException)
+{
+    style::BreakType aBreakType;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BreakType") ) ) >>= aBreakType;
+    sal_Bool bBreakBefore = ( aBreakType == style::BreakType_PAGE_BEFORE || aBreakType == style::BreakType_PAGE_BOTH );
+    return uno::makeAny( bBreakBefore );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setPageBreakBefore( const uno::Any& _breakbefore ) throw (uno::RuntimeException)
+{
+    sal_Bool bBreakBefore = sal_False;
+    if( _breakbefore >>= bBreakBefore )
+    {
+        style::BreakType aBreakType;
+        mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BreakType") ) ) >>= aBreakType;
+        if( bBreakBefore )
+        {
+            if( aBreakType == style::BreakType_NONE )
+                aBreakType = style::BreakType_PAGE_BEFORE;
+            else if ( aBreakType == style::BreakType_PAGE_AFTER )
+                aBreakType = style::BreakType_PAGE_BOTH;
+        }
+        else
+        {
+            if( aBreakType == style::BreakType_PAGE_BOTH )
+                aBreakType = style::BreakType_PAGE_AFTER;
+            else if ( aBreakType == style::BreakType_PAGE_BEFORE )
+                aBreakType = style::BreakType_PAGE_AFTER;
+        }
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BreakType") ), uno::makeAny( aBreakType ) );
+    }
+    else
+    {
+        DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+}
+
+float SAL_CALL SwVbaParagraphFormat::getSpaceBefore() throw (uno::RuntimeException)
+{
+    sal_Int32 nSpace = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaTopMargin") ) ) >>= nSpace;
+    return (float)( Millimeter::getInPoints( nSpace ) );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setSpaceBefore( float _space ) throw (uno::RuntimeException)
+{
+    sal_Int32 nSpace = Millimeter::getInHundredthsOfOneMillimeter( _space );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaTopMargin") ), uno::makeAny( nSpace ) );
+}
+
+float SAL_CALL SwVbaParagraphFormat::getSpaceAfter() throw (uno::RuntimeException)
+{
+    sal_Int32 nSpace = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaBottomMargin") ) ) >>= nSpace;
+    return (float)( Millimeter::getInPoints( nSpace ) );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setSpaceAfter( float _space ) throw (uno::RuntimeException)
+{
+    sal_Int32 nSpace = Millimeter::getInHundredthsOfOneMillimeter( _space );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaBottomMargin") ), uno::makeAny( nSpace ) );
+}
+
+float SAL_CALL SwVbaParagraphFormat::getLeftIndent() throw (uno::RuntimeException)
+{
+    sal_Int32 nIndent = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLeftMargin") ) ) >>= nIndent;
+    return (float)( Millimeter::getInPoints( nIndent ) );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setLeftIndent( float _leftindent ) throw (uno::RuntimeException)
+{
+    sal_Int32 nIndent = Millimeter::getInHundredthsOfOneMillimeter( _leftindent );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaLeftMargin") ), uno::makeAny( nIndent ) );
+}
+
+float SAL_CALL SwVbaParagraphFormat::getRightIndent() throw (uno::RuntimeException)
+{
+    sal_Int32 nIndent = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaRightMargin") ) ) >>= nIndent;
+    return (float)( Millimeter::getInPoints( nIndent ) );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setRightIndent( float _rightindent ) throw (uno::RuntimeException)
+{
+    sal_Int32 nIndent = Millimeter::getInHundredthsOfOneMillimeter( _rightindent );
+    mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaRightMargin") ), uno::makeAny( nIndent ) );
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getTabStops() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setTabStops( const uno::Any& /*_tabstops*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+uno::Any SAL_CALL SwVbaParagraphFormat::getWidowControl() throw (uno::RuntimeException)
+{
+    sal_Bool bWidow = sal_False;
+    sal_Int8 nWidow = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaWidows") ) ) >>= nWidow;
+    sal_Int8 nOrphan = 0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaOrphans") ) ) >>= nOrphan;
+    // if the amount of single lines on one page > 1 and the same of start and end of the paragraph,
+    // true is retured.
+    bWidow = ( nWidow > 1 && nOrphan == nWidow );
+    return uno::makeAny( bWidow );
+}
+
+void SAL_CALL SwVbaParagraphFormat::setWidowControl( const uno::Any& _widowcontrol ) throw (uno::RuntimeException)
+{
+    // if we get true, the part of the paragraph on one page has to be
+    // at least two lines
+    sal_Bool bWidow = sal_False;
+    if( _widowcontrol >>= bWidow )
+    {
+        sal_Int8 nControl = bWidow? 2:1;
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaWidows") ), uno::makeAny( nControl ) );
+        mxParaProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaOrphans") ), uno::makeAny( nControl ) );
+    }
+    else
+    {
+        DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+}
+
+style::LineSpacing SwVbaParagraphFormat::getOOoLineSpacing( float _lineSpace, sal_Int16 mode )
+{
+    style::LineSpacing aLineSpacing;
+    if( mode != style::LineSpacingMode::MINIMUM && mode != style::LineSpacingMode::FIX )
+    {
+        // special behaviour of word: if the space is set to these values, the rule and
+        // the height are changed accordingly
+        if( _lineSpace == CHARACTER_INDENT_FACTOR )
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::PROP;
+            aLineSpacing.Height = PERCENT100;
+        }
+        else if( _lineSpace == ( sal_Int16 )( CHARACTER_INDENT_FACTOR * 1.5 ) )
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::PROP;
+            aLineSpacing.Height = PERCENT150;
+        }
+        else if( _lineSpace == ( sal_Int16 )( ( CHARACTER_INDENT_FACTOR ) * 2 ) )
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::PROP;
+            aLineSpacing.Height = PERCENT200;
+        }
+        else
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::FIX;
+            aLineSpacing.Height = ( sal_Int16 )( Millimeter::getInHundredthsOfOneMillimeter( _lineSpace ) );
+        }
+    }
+    else
+    {
+        aLineSpacing.Mode = mode;
+        aLineSpacing.Height = ( sal_Int16 )( Millimeter::getInHundredthsOfOneMillimeter( _lineSpace ) );
+    }
+    return aLineSpacing;
+}
+
+style::LineSpacing SwVbaParagraphFormat::getOOoLineSpacingFromRule( sal_Int32 _linespacingrule )
+{
+    style::LineSpacing aLineSpacing;
+    switch( _linespacingrule )
+    {
+        case word::WdLineSpacing::wdLineSpace1pt5:
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::PROP;
+            aLineSpacing.Height = PERCENT150;
+            break;
+        }
+        case word::WdLineSpacing::wdLineSpaceAtLeast:
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::MINIMUM;
+            aLineSpacing.Height = getCharHeight();
+            break;
+        }
+        case word::WdLineSpacing::wdLineSpaceDouble:
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::PROP;
+            aLineSpacing.Height = getCharHeight();
+            break;
+        }
+        case word::WdLineSpacing::wdLineSpaceExactly:
+        case word::WdLineSpacing::wdLineSpaceMultiple:
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::FIX;
+            aLineSpacing.Height = getCharHeight();
+            break;
+        }
+        case word::WdLineSpacing::wdLineSpaceSingle:
+        {
+            aLineSpacing.Mode = style::LineSpacingMode::PROP;
+            aLineSpacing.Height = PERCENT100;
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+            break;
+        }
+    }
+    return aLineSpacing;
+}
+
+float SwVbaParagraphFormat::getMSWordLineSpacing( style::LineSpacing& rLineSpacing )
+{
+    float wdLineSpacing = 0;
+    if( rLineSpacing.Mode != style::LineSpacingMode::PROP )
+    {
+        wdLineSpacing = (float)( Millimeter::getInPoints( rLineSpacing.Height ) );
+    }
+    else
+    {
+        wdLineSpacing = (float)( CHARACTER_INDENT_FACTOR * rLineSpacing.Height ) / PERCENT100;
+    }
+    return wdLineSpacing;
+}
+
+sal_Int32 SwVbaParagraphFormat::getMSWordLineSpacingRule( style::LineSpacing& rLineSpacing )
+{
+    sal_Int32 wdLineSpacing = word::WdLineSpacing::wdLineSpaceSingle;
+    switch( rLineSpacing.Mode )
+    {
+        case style::LineSpacingMode::PROP:
+        {
+            switch( rLineSpacing.Height )
+            {
+                case PERCENT100:
+                {
+                    wdLineSpacing = word::WdLineSpacing::wdLineSpaceSingle;
+                    break;
+                }
+                case PERCENT150:
+                {
+                    wdLineSpacing = word::WdLineSpacing::wdLineSpace1pt5;
+                    break;
+                }
+                case PERCENT200:
+                {
+                    wdLineSpacing = word::WdLineSpacing::wdLineSpaceDouble;
+                    break;
+                }
+                default:
+                {
+                    wdLineSpacing = word::WdLineSpacing::wdLineSpaceMultiple;
+                }
+            }
+            break;
+        }
+        case style::LineSpacingMode::MINIMUM:
+        {
+            wdLineSpacing = word::WdLineSpacing::wdLineSpaceAtLeast;
+            break;
+        }
+        case style::LineSpacingMode::FIX:
+        case style::LineSpacingMode::LEADING:
+        {
+            wdLineSpacing = word::WdLineSpacing::wdLineSpaceExactly;
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+        }
+    }
+    return wdLineSpacing;
+}
+
+sal_Int16 SwVbaParagraphFormat::getCharHeight() throw (uno::RuntimeException)
+{
+    float fCharHeight = 0.0;
+    mxParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharHeight") ) ) >>= fCharHeight;
+    return (sal_Int16)( Millimeter::getInHundredthsOfOneMillimeter( fCharHeight ) );
+}
+
+sal_Int32 SwVbaParagraphFormat::getOOoAlignment( sal_Int32 _alignment )
+{
+    sal_Int32 nParaAjust = style::ParagraphAdjust_LEFT;
+    switch( _alignment )
+    {
+        case word::WdParagraphAlignment::wdAlignParagraphCenter:
+        {
+            nParaAjust = style::ParagraphAdjust_CENTER;
+            break;
+        }
+        case word::WdParagraphAlignment::wdAlignParagraphJustify:
+        {
+            nParaAjust = style::ParagraphAdjust_BLOCK;
+            break;
+        }
+        case word::WdParagraphAlignment::wdAlignParagraphLeft:
+        {
+            nParaAjust = style::ParagraphAdjust_LEFT;
+            break;
+        }
+        case word::WdParagraphAlignment::wdAlignParagraphRight:
+        {
+            nParaAjust = style::ParagraphAdjust_RIGHT;
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+        }
+    }
+    return nParaAjust;
+}
+
+sal_Int32 SwVbaParagraphFormat::getMSWordAlignment( sal_Int32 _alignment )
+{
+    sal_Int32 wdAlignment = word::WdParagraphAlignment::wdAlignParagraphLeft;
+    switch( _alignment )
+    {
+        case style::ParagraphAdjust_CENTER:
+        {
+            wdAlignment = word::WdParagraphAlignment::wdAlignParagraphCenter;
+            break;
+        }
+        case style::ParagraphAdjust_LEFT:
+        {
+            wdAlignment = word::WdParagraphAlignment::wdAlignParagraphLeft;
+            break;
+        }
+        case style::ParagraphAdjust_BLOCK:
+        {
+            wdAlignment = word::WdParagraphAlignment::wdAlignParagraphJustify;
+            break;
+        }
+        case style::ParagraphAdjust_RIGHT:
+        {
+            wdAlignment = word::WdParagraphAlignment::wdAlignParagraphRight;
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+        }
+    }
+    return wdAlignment;
+}
+
+rtl::OUString&
+SwVbaParagraphFormat::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaParagraphFormat") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaParagraphFormat::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.ParagraphFormat" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaparagraphformat.hxx b/sw/source/ui/vba/vbaparagraphformat.hxx
new file mode 100644
index 0000000..63ea9a4
--- /dev/null
+++ b/sw/source/ui/vba/vbaparagraphformat.hxx
@@ -0,0 +1,98 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_PARAGRAPHFORMAT_HXX
+#define SW_VBA_PARAGRAPHFORMAT_HXX
+
+#include <ooo/vba/word/XParagraphFormat.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/style/LineSpacing.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XParagraphFormat > SwVbaParagraphFormat_BASE;
+
+class SwVbaParagraphFormat : public SwVbaParagraphFormat_BASE
+{
+private:
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+    css::uno::Reference< css::beans::XPropertySet > mxParaProps;
+
+private:
+    css::style::LineSpacing getOOoLineSpacing( float _lineSpace, sal_Int16 mode );
+    css::style::LineSpacing getOOoLineSpacingFromRule( sal_Int32 _linespacingrule );
+    float getMSWordLineSpacing( css::style::LineSpacing& rLineSpacing );
+    sal_Int32 getMSWordLineSpacingRule( css::style::LineSpacing& rLineSpacing );
+    sal_Int16 getCharHeight() throw (css::uno::RuntimeException);
+    sal_Int32 getOOoAlignment( sal_Int32 _alignment );
+    sal_Int32 getMSWordAlignment( sal_Int32 _alignment );
+
+public:
+    SwVbaParagraphFormat( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rTextDocument, const css::uno::Reference< css::beans::XPropertySet >& rParaProps );
+    virtual ~SwVbaParagraphFormat();
+
+    // Attributes
+    virtual ::sal_Int32 SAL_CALL getAlignment() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAlignment( ::sal_Int32 _alignment ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getFirstLineIndent() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setFirstLineIndent( float _firstlineindent ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getKeepTogether() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setKeepTogether( const css::uno::Any& _keeptogether ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getKeepWithNext() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setKeepWithNext( const css::uno::Any& _keepwithnext ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getHyphenation() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setHyphenation( const css::uno::Any& _hyphenation ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getLineSpacing() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLineSpacing( float _linespacing ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getLineSpacingRule() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLineSpacingRule( ::sal_Int32 _linespacingrule ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getNoLineNumber() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setNoLineNumber( const css::uno::Any& _nolinenumber ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getOutlineLevel() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setOutlineLevel( ::sal_Int32 _outlinelevel ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getPageBreakBefore() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setPageBreakBefore( const css::uno::Any& _pagebreakbefore ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getSpaceBefore() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSpaceBefore( float _spacebefore ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getSpaceAfter() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSpaceAfter( float _spaceafter ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getLeftIndent() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLeftIndent( float _leftindent ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getRightIndent() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRightIndent( float _rightindent ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getTabStops() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTabStops( const css::uno::Any& _tabstops ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getWidowControl() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setWidowControl( const css::uno::Any& _widowcontrol ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_PARAGRAPHFORMAT_HXX */
diff --git a/sw/source/ui/vba/vbarange.cxx b/sw/source/ui/vba/vbarange.cxx
new file mode 100644
index 0000000..d27e045
--- /dev/null
+++ b/sw/source/ui/vba/vbarange.cxx
@@ -0,0 +1,347 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbarange.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbarangehelper.hxx"
+#include <ooo/vba/word/WdBreakType.hpp>
+#include <com/sun/star/style/BreakType.hpp>
+#include <com/sun/star/text/ControlCharacter.hpp>
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+#include "wordvbahelper.hxx"
+#include "vbaparagraphformat.hxx"
+#include "vbastyle.hxx"
+#include "vbafont.hxx"
+#include "vbapalette.hxx"
+#include "vbapagesetup.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaRange::SwVbaRange( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< text::XTextDocument >& rTextDocument, const uno::Reference< text::XTextRange >& rStart, sal_Bool _bMaySpanEndOfDocument ) throw (uno::RuntimeException) : SwVbaRange_BASE( rParent, rContext ), mxTextDocument( rTextDocument ), mbMaySpanEndOfDocument( _bMaySpanEndOfDocument )
+{
+    uno::Reference< text::XTextRange > xEnd;
+    initialize( rStart, xEnd );
+}
+
+SwVbaRange::SwVbaRange( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< text::XTextDocument >& rTextDocument, const uno::Reference< text::XTextRange >& rStart, const uno::Reference< text::XTextRange >& rEnd, sal_Bool _bMaySpanEndOfDocument ) throw (uno::RuntimeException) : SwVbaRange_BASE( rParent, rContext ), mxTextDocument( rTextDocument ), mbMaySpanEndOfDocument( _bMaySpanEndOfDocument )
+{
+    initialize( rStart, rEnd );
+}
+
+SwVbaRange::SwVbaRange( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< text::XTextDocument >& rTextDocument, const uno::Reference< text::XTextRange >& rStart, const uno::Reference< text::XTextRange >& rEnd, const uno::Reference< text::XText >& rText, sal_Bool _bMaySpanEndOfDocument ) throw (uno::RuntimeException) : SwVbaRange_BASE( rParent, rContext ),mxTextDocument( rTextDocument ), mxText( rText ), mbMaySpanEndOfDocument( _bMaySpanEndOfDocument )
+{
+    initialize( rStart, rEnd );
+}
+
+SwVbaRange::~SwVbaRange()
+{
+}
+
+void SwVbaRange::initialize( const uno::Reference< text::XTextRange >& rStart, const uno::Reference< text::XTextRange >& rEnd ) throw (uno::RuntimeException)
+{
+    if( !mxText.is() )
+    {
+        mxText = mxTextDocument->getText();
+    }
+
+    mxTextCursor = SwVbaRangeHelper::initCursor( rStart, mxText );
+    mxTextCursor->collapseToStart();
+
+    if( rEnd.is() )
+        mxTextCursor->gotoRange( rEnd, sal_True );
+    else
+        mxTextCursor->gotoEnd( sal_True );
+}
+
+uno::Reference< text::XTextRange > SAL_CALL
+SwVbaRange::getXTextRange() throw (uno::RuntimeException)
+{
+    uno::Reference< text::XTextRange > xTextRange( mxTextCursor, uno::UNO_QUERY_THROW );
+    return xTextRange;
+}
+
+void SwVbaRange::setXTextRange( const uno::Reference< text::XTextRange >& xRange ) throw (uno::RuntimeException)
+{
+    mxTextCursor->gotoRange( xRange->getStart(), sal_False );
+    mxTextCursor->gotoRange( xRange->getEnd(), sal_True );
+}
+
+/**
+* The complexity in this method is because we need to workaround
+* an issue that the last paragraph in a document does not have a trailing CRLF.
+* @return
+*/
+rtl::OUString SAL_CALL
+SwVbaRange::getText() throw ( uno::RuntimeException )
+{
+    rtl::OUString aText = mxTextCursor->getString();
+    sal_Int32 nLen = aText.getLength();
+
+    // FIXME: should add a line separator if the range includes the last paragraph
+    if( nLen == 0 )
+    {
+        if( mxTextCursor->isCollapsed() )
+        {
+            mxTextCursor->goRight( 1, sal_True );
+            aText = mxTextCursor->getString();
+            mxTextCursor->collapseToStart();
+        }
+        else
+        {
+            uno::Reference< text::XTextRange > xStart = mxTextCursor->getStart();
+            uno::Reference< text::XTextRange > xEnd = mxTextCursor->getEnd();
+            mxTextCursor->collapseToEnd();
+            mxTextCursor->goRight( 1, sal_True );
+            mxTextCursor->gotoRange( xStart, sal_False );
+            mxTextCursor->gotoRange( xEnd, sal_True );
+        }
+    }
+
+    return aText;
+}
+
+void SAL_CALL
+SwVbaRange::setText( const rtl::OUString& rText ) throw ( uno::RuntimeException )
+{
+    if( rText.indexOf( '\n' )  != -1 )
+    {
+        mxTextCursor->setString( rtl::OUString() );
+        // process CR in strings
+        uno::Reference< text::XTextRange > xRange( mxTextCursor, uno::UNO_QUERY_THROW );
+        SwVbaRangeHelper::insertString( xRange, mxText, rText, sal_True );
+    }
+    else
+    {
+        mxTextCursor->setString( rText );
+    }
+}
+
+// FIXME: test is not pass
+void SAL_CALL SwVbaRange::InsertBreak( const uno::Any& _breakType ) throw (uno::RuntimeException)
+{
+    // default type is wdPageBreak;
+    sal_Int32 nBreakType = word::WdBreakType::wdPageBreak;
+    if( _breakType.hasValue() )
+        _breakType >>= nBreakType;
+
+    style::BreakType eBreakType = style::BreakType_NONE;
+    switch( nBreakType )
+    {
+        case word::WdBreakType::wdPageBreak:
+            eBreakType = style::BreakType_PAGE_BEFORE;
+            break;
+        case word::WdBreakType::wdColumnBreak:
+            eBreakType = style::BreakType_COLUMN_AFTER;
+            break;
+        case word::WdBreakType::wdLineBreak:
+        case word::WdBreakType::wdLineBreakClearLeft:
+        case word::WdBreakType::wdLineBreakClearRight:
+        case word::WdBreakType::wdSectionBreakContinuous:
+        case word::WdBreakType::wdSectionBreakEvenPage:
+        case word::WdBreakType::wdSectionBreakNextPage:
+        case word::WdBreakType::wdSectionBreakOddPage:
+        case word::WdBreakType::wdTextWrappingBreak:
+            DebugHelper::exception( SbERR_NOT_IMPLEMENTED, rtl::OUString() );
+            break;
+        default:
+            DebugHelper::exception( SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+
+    if( eBreakType != style::BreakType_NONE )
+    {
+        if( !mxTextCursor->isCollapsed() )
+        {
+            mxTextCursor->setString( rtl::OUString() );
+            mxTextCursor->collapseToStart();
+        }
+
+        uno::Reference< beans::XPropertySet > xProp( mxTextCursor, uno::UNO_QUERY_THROW );
+        xProp->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BreakType") ), uno::makeAny( eBreakType ) );
+    }
+}
+
+void SAL_CALL
+SwVbaRange::Select() throw ( uno::RuntimeException )
+{
+    uno::Reference< frame::XModel > xModel( mxTextDocument, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextViewCursor > xTextViewCursor = word::getXTextViewCursor( xModel );
+    xTextViewCursor->gotoRange( mxTextCursor->getStart(), sal_False );
+    xTextViewCursor->gotoRange( mxTextCursor->getEnd(), sal_True );
+}
+
+void SAL_CALL
+SwVbaRange::InsertParagraph() throw ( uno::RuntimeException )
+{
+    mxTextCursor->setString( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("") ) );
+    InsertParagraphBefore();
+}
+
+void SAL_CALL
+SwVbaRange::InsertParagraphBefore() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xTextRange = mxTextCursor->getStart();
+    mxText->insertControlCharacter( xTextRange, text::ControlCharacter::PARAGRAPH_BREAK, sal_True );
+    mxTextCursor->gotoRange( xTextRange, sal_True );
+}
+
+void SAL_CALL
+SwVbaRange::InsertParagraphAfter() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xTextRange = mxTextCursor->getEnd();
+    mxText->insertControlCharacter( xTextRange, text::ControlCharacter::PARAGRAPH_BREAK, sal_True );
+}
+
+uno::Reference< word::XParagraphFormat > SAL_CALL
+SwVbaRange::getParagraphFormat() throw ( uno::RuntimeException )
+{
+    uno::Reference< beans::XPropertySet > xParaProps( mxTextCursor, uno::UNO_QUERY_THROW );
+    return uno::Reference< word::XParagraphFormat >( new SwVbaParagraphFormat( this, mxContext, mxTextDocument, xParaProps ) );
+}
+
+void SAL_CALL
+SwVbaRange::setParagraphFormat( const uno::Reference< word::XParagraphFormat >& /*rParagraphFormat*/ ) throw ( uno::RuntimeException )
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+uno::Reference< word::XStyle > SAL_CALL
+SwVbaRange::getStyle() throw ( uno::RuntimeException )
+{
+    rtl::OUString aStyleName;
+    rtl::OUString aStyleType;
+    uno::Reference< beans::XPropertySet > xProp( mxTextCursor, uno::UNO_QUERY_THROW );
+    if( ( xProp->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharStyleName") ) ) >>= aStyleName ) && aStyleName.getLength() )
+    {
+        aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharacterStyles") );
+    }
+    else if( ( xProp->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaStyleName") ) ) >>= aStyleName ) && aStyleName.getLength() )
+    {
+        aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParagraphStyles") );
+    }
+    if( aStyleType.getLength() == 0 )
+    {
+        DebugHelper::exception( SbERR_INTERNAL_ERROR, rtl::OUString() );
+    }
+    uno::Reference< style::XStyleFamiliesSupplier > xStyleSupplier( mxTextDocument, uno::UNO_QUERY_THROW);
+    uno::Reference< container::XNameAccess > xStylesAccess( xStyleSupplier->getStyleFamilies()->getByName( aStyleType ), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xStyleProps( xStylesAccess->getByName( aStyleName ), uno::UNO_QUERY_THROW );
+    return uno::Reference< word::XStyle >( new SwVbaStyle( this, mxContext, xStyleProps ) );
+}
+
+void SAL_CALL
+SwVbaRange::setStyle( const uno::Reference< word::XStyle >& rStyle ) throw ( uno::RuntimeException )
+{
+    uno::Reference< beans::XPropertySet > xParaProps( mxTextCursor, uno::UNO_QUERY_THROW );
+    SwVbaStyle::setStyle( xParaProps, rStyle );
+}
+
+uno::Reference< word::XFont > SAL_CALL
+SwVbaRange::getFont() throw ( uno::RuntimeException )
+{
+    VbaPalette aColors;
+    return new SwVbaFont( mxParent, mxContext, aColors.getPalette(), uno::Reference< beans::XPropertySet >( getXTextRange(), uno::UNO_QUERY_THROW ) );
+}
+
+::sal_Int32 SAL_CALL SwVbaRange::getLanguageID() throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xParaProps( mxTextCursor, uno::UNO_QUERY_THROW );
+    return SwVbaStyle::getLanguageID( xParaProps );
+}
+
+void SAL_CALL SwVbaRange::setLanguageID( ::sal_Int32 _languageid ) throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xParaProps( mxTextCursor, uno::UNO_QUERY_THROW );
+    SwVbaStyle::setLanguageID( xParaProps, _languageid );
+}
+
+uno::Any SAL_CALL
+SwVbaRange::PageSetup( ) throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xParaProps( mxTextCursor, uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XModel > xModel( mxTextDocument, uno::UNO_QUERY_THROW );
+    rtl::OUString aPageStyleName;
+    xParaProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyleName"))) >>= aPageStyleName;
+    uno::Reference< style::XStyleFamiliesSupplier > xSytleFamSupp( xModel, uno::UNO_QUERY_THROW );
+    uno::Reference< container::XNameAccess > xSytleFamNames( xSytleFamSupp->getStyleFamilies(), uno::UNO_QUERY_THROW );
+    uno::Reference< container::XNameAccess > xPageStyles( xSytleFamNames->getByName( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyles") ) ), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xPageProps( xPageStyles->getByName( aPageStyleName ), uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< word::XPageSetup >( new SwVbaPageSetup( this, mxContext, xModel, xPageProps ) ) );
+}
+
+::sal_Int32 SAL_CALL SwVbaRange::getStart() throw (uno::RuntimeException)
+{
+    uno::Reference< text::XText > xText = mxTextDocument->getText();
+    return SwVbaRangeHelper::getPosition( xText, mxTextCursor->getStart() );
+}
+
+void SAL_CALL SwVbaRange::setStart( ::sal_Int32 _start ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XText > xText = mxTextDocument->getText();
+    uno::Reference< text::XTextRange > xStart = SwVbaRangeHelper::getRangeByPosition( xText, _start );
+    uno::Reference< text::XTextRange > xEnd = mxTextCursor->getEnd();
+
+    mxTextCursor->gotoRange( xStart, sal_False );
+    mxTextCursor->gotoRange( xEnd, sal_True );
+}
+
+::sal_Int32 SAL_CALL SwVbaRange::getEnd() throw (uno::RuntimeException)
+{
+    uno::Reference< text::XText > xText = mxTextDocument->getText();
+    return SwVbaRangeHelper::getPosition( xText, mxTextCursor->getEnd() );
+}
+
+void SAL_CALL SwVbaRange::setEnd( ::sal_Int32 _end ) throw (uno::RuntimeException)
+{
+    uno::Reference< text::XText > xText = mxTextDocument->getText();
+    uno::Reference< text::XTextRange > xEnd = SwVbaRangeHelper::getRangeByPosition( xText, _end );
+
+    mxTextCursor->collapseToStart();
+    mxTextCursor->gotoRange( xEnd, sal_True );
+}
+
+rtl::OUString&
+SwVbaRange::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaRange") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaRange::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Range" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbarange.hxx b/sw/source/ui/vba/vbarange.hxx
new file mode 100644
index 0000000..cb16fed
--- /dev/null
+++ b/sw/source/ui/vba/vbarange.hxx
@@ -0,0 +1,93 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_RANGE_HXX
+#define SW_VBA_RANGE_HXX
+
+#include <ooo/vba/word/XRange.hpp>
+#include <ooo/vba/word/XParagraphFormat.hpp>
+#include <ooo/vba/word/XFont.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <ooo/vba/word/XStyle.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XRange > SwVbaRange_BASE;
+
+class SwVbaRange : public SwVbaRange_BASE
+{
+private:
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+    css::uno::Reference< css::text::XTextCursor > mxTextCursor;
+    css::uno::Reference< css::text::XText > mxText;
+    sal_Bool mbMaySpanEndOfDocument;
+
+private:
+    void initialize( const css::uno::Reference< css::text::XTextRange >& rStart, const css::uno::Reference< css::text::XTextRange >& rEnd ) throw (css::uno::RuntimeException);
+public:
+    SwVbaRange( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rTextDocument, const css::uno::Reference< css::text::XTextRange >& rStart, sal_Bool _bMaySpanEndOfDocument = sal_False ) throw (css::uno::RuntimeException);
+    SwVbaRange( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rTextDocument, const css::uno::Reference< css::text::XTextRange >& rStart, const css::uno::Reference< css::text::XTextRange >& rEnd, sal_Bool _bMaySpanEndOfDocument = sal_False ) throw (css::uno::RuntimeException);
+    SwVbaRange( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rTextDocument, const css::uno::Reference< css::text::XTextRange >& rStart, const css::uno::Reference< css::text::XTextRange >& rEnd, const css::uno::Reference< css::text::XText >& rText, sal_Bool _bMaySpanEndOfDocument = sal_False ) throw (css::uno::RuntimeException);
+    virtual ~SwVbaRange();
+   css::uno::Reference< css::text::XTextDocument > getDocument() { return mxTextDocument; }
+
+    virtual css::uno::Reference< css::text::XTextRange > SAL_CALL getXTextRange() throw (css::uno::RuntimeException);
+    void setXTextRange( const css::uno::Reference< css::text::XTextRange >& xRange ) throw (css::uno::RuntimeException);
+    css::uno::Reference< css::text::XText > getXText() { return mxText; }
+    void setXTextCursor( const css::uno::Reference< css::text::XTextCursor >& xTextCursor ) { mxTextCursor = xTextCursor; }
+
+    // Attribute
+    virtual rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const rtl::OUString& rText ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XParagraphFormat > SAL_CALL getParagraphFormat() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setParagraphFormat( const css::uno::Reference< ooo::vba::word::XParagraphFormat >& rParagraphFormat ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XStyle > SAL_CALL getStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStyle( const css::uno::Reference< ooo::vba::word::XStyle >& _xStyle ) throw (css::uno::RuntimeException);
+
+    virtual css::uno::Reference< ooo::vba::word::XFont > SAL_CALL getFont() throw (css::uno::RuntimeException);
+    // Methods
+    virtual void SAL_CALL InsertBreak( const css::uno::Any& _breakType ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Select() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertParagraph() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertParagraphBefore() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertParagraphAfter() throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getLanguageID() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLanguageID( ::sal_Int32 _languageid ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL PageSetup() throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getStart() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStart( ::sal_Int32 _start ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getEnd() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEnd( ::sal_Int32 _end ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_RANGE_HXX */
diff --git a/sw/source/ui/vba/vbarangehelper.cxx b/sw/source/ui/vba/vbarangehelper.cxx
new file mode 100644
index 0000000..fad93ec
--- /dev/null
+++ b/sw/source/ui/vba/vbarangehelper.cxx
@@ -0,0 +1,174 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbarangehelper.hxx"
+#include <com/sun/star/text/ControlCharacter.hpp>
+#include <com/sun/star/text/XTextRangeCompare.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+/**
+ * get a range in a xText by creating
+ * a cursor that iterates over the text. If the iterating cursor is
+ * equal to the desired position, the range equivalent is returned.
+ * Some special cases are tables that are inside of the text, because the
+ * position has to be adjusted.
+ * @param xText a text where a range position is searched
+ * @param position a position inside o the text
+ * @return a range for the postion; null is returned if no range can be
+ * constructed.
+ */
+uno::Reference< text::XTextRange > SwVbaRangeHelper::getRangeByPosition( const uno::Reference< text::XText >& rText, sal_Int32 _position ) throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xRange;
+    if( rText.is() )
+    {
+        sal_Int32 nPos = 0;
+        uno::Reference< text::XTextCursor > xCursor = rText->createTextCursor();
+        xCursor->collapseToStart();
+        sal_Bool bCanGo = sal_True;
+        while( !xRange.is() && bCanGo )
+        {
+            if( _position == nPos )
+            {
+                xRange = xCursor->getStart();
+            }
+            else
+            {
+                bCanGo = xCursor->goRight( 1, sal_False );
+                nPos++;
+            }
+        }
+    }
+    return xRange;
+}
+
+
+void SwVbaRangeHelper::insertString( uno::Reference< text::XTextRange >& rTextRange, uno::Reference< text::XText >& rText, const rtl::OUString& rStr, sal_Bool _bAbsorb ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nlastIndex = 0;
+    sal_Int32 nIndex = 0;
+    uno::Reference< text::XTextRange > xRange = rTextRange;
+
+    while(( nIndex = rStr.indexOf('\n', nlastIndex)) >= 0  )
+    {
+        xRange = xRange->getEnd();
+        if( nlastIndex < ( nIndex - 1 ) )
+        {
+            rText->insertString( xRange, rStr.copy( nlastIndex, ( nIndex - 1 - nlastIndex ) ), _bAbsorb );
+            xRange = xRange->getEnd();
+        }
+
+        rText->insertControlCharacter( xRange, text::ControlCharacter::PARAGRAPH_BREAK, _bAbsorb );
+        nlastIndex = nIndex + 1;
+    }
+
+    if( nlastIndex < rStr.getLength() )
+    {
+        xRange = xRange->getEnd();
+
+        rtl::OUString aWatt = rStr.copy( nlastIndex );
+        rText->insertString( xRange, aWatt, _bAbsorb );
+    }
+}
+
+uno::Reference< text::XTextCursor > SwVbaRangeHelper::initCursor( const uno::Reference< text::XTextRange >& rTextRange, const uno::Reference< text::XText >& rText ) throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextCursor > xTextCursor;
+    sal_Bool bGotTextCursor = sal_False;
+
+    try
+    {
+        xTextCursor = rText->createTextCursorByRange( rTextRange );
+        bGotTextCursor = sal_True;
+    }
+    catch (uno::Exception& e)
+    {
+        DebugHelper::exception(e);
+    }
+
+    if( !bGotTextCursor )
+    {
+        try
+        {
+            uno::Reference< text::XText > xText = rTextRange->getText();
+            xTextCursor = xText->createTextCursor();
+            bGotTextCursor = sal_True;
+        }
+        catch( uno::Exception& e )
+        {
+            DebugHelper::exception(e);
+        }
+    }
+
+    if( !bGotTextCursor )
+    {
+        try
+        {
+            xTextCursor = rText->createTextCursor();
+            bGotTextCursor = sal_True;
+        }
+        catch( uno::Exception& e )
+        {
+            DebugHelper::exception(e);
+        }
+    }
+    return xTextCursor;
+}
+
+sal_Int32 SwVbaRangeHelper::getPosition( const uno::Reference< text::XText >& rText, const uno::Reference< text::XTextRange >& rTextRange ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nPosition = -1;
+    if( rText.is() && rTextRange.is() )
+    {
+        nPosition = 0;
+        uno::Reference< text::XTextCursor > xCursor = rText->createTextCursor();
+        xCursor->collapseToStart();
+        uno::Reference< text::XTextRangeCompare > xCompare( rText, uno::UNO_QUERY_THROW );
+        // compareValue is 0 if the ranges are equal
+        sal_Int32 nCompareValue = xCompare->compareRegionStarts( xCursor->getStart(), rTextRange );
+        sal_Bool canGo = sal_True;
+
+        while( nCompareValue !=0 && canGo )
+        {
+            canGo = xCursor->goRight( 1, sal_False );
+            nCompareValue = xCompare->compareRegionStarts( xCursor->getStart(), rTextRange );
+            nPosition++;
+        }
+
+        // check fails: no correct position found
+        if( !canGo && nCompareValue != 0 )
+        {
+            nPosition = -1;
+        }
+    }
+
+    return nPosition;
+}
diff --git a/sw/source/ui/vba/vbarangehelper.hxx b/sw/source/ui/vba/vbarangehelper.hxx
new file mode 100644
index 0000000..6c0f844
--- /dev/null
+++ b/sw/source/ui/vba/vbarangehelper.hxx
@@ -0,0 +1,46 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_RANGEHELPER_HXX
+#define SW_VBA_RANGEHELPER_HXX
+
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XText.hpp>
+
+class SwVbaRangeHelper
+{
+public:
+    static css::uno::Reference< css::text::XTextRange > getRangeByPosition( const css::uno::Reference< css::text::XText >& rText, sal_Int32 _position )throw ( css::uno::RuntimeException );
+    static void insertString( css::uno::Reference< css::text::XTextRange >& rTextRange, css::uno::Reference< css::text::XText >& rText, const rtl::OUString& rStr, sal_Bool _bAbsorb ) throw ( css::uno::RuntimeException );
+    static css::uno::Reference< css::text::XTextCursor > initCursor( const css::uno::Reference< css::text::XTextRange >& rTextRange, const css::uno::Reference< css::text::XText >& rText ) throw ( css::uno::RuntimeException );
+    static sal_Int32 getPosition( const css::uno::Reference< css::text::XText >& rText, const css::uno::Reference< css::text::XTextRange >& rTextRange ) throw ( css::uno::RuntimeException );
+
+};
+#endif /* SW_VBA_RANGEHELPER_HXX */
diff --git a/sw/source/ui/vba/vbareplacement.cxx b/sw/source/ui/vba/vbareplacement.cxx
new file mode 100644
index 0000000..dedd9e6
--- /dev/null
+++ b/sw/source/ui/vba/vbareplacement.cxx
@@ -0,0 +1,73 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbareplacement.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaReplacement::SwVbaReplacement( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< util::XPropertyReplace >& xPropertyReplace ) throw ( uno::RuntimeException ) :
+    SwVbaReplacement_BASE( rParent, rContext ), mxPropertyReplace( xPropertyReplace )
+{
+}
+
+SwVbaReplacement::~SwVbaReplacement()
+{
+}
+
+::rtl::OUString SAL_CALL SwVbaReplacement::getText() throw (uno::RuntimeException)
+{
+    return mxPropertyReplace->getReplaceString();
+}
+
+void SAL_CALL SwVbaReplacement::setText( const ::rtl::OUString& _text ) throw (uno::RuntimeException)
+{
+    mxPropertyReplace->setReplaceString( _text );
+}
+
+rtl::OUString&
+SwVbaReplacement::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaReplacement") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaReplacement::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Replacement" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbareplacement.hxx b/sw/source/ui/vba/vbareplacement.hxx
new file mode 100644
index 0000000..a49d14d
--- /dev/null
+++ b/sw/source/ui/vba/vbareplacement.hxx
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_REPLACEMENT_HXX
+#define SW_VBA_REPLACEMENT_HXX
+
+#include <ooo/vba/word/XReplacement.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/util/XPropertyReplace.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XReplacement > SwVbaReplacement_BASE;
+
+class SwVbaReplacement : public SwVbaReplacement_BASE
+{
+private:
+    css::uno::Reference< css::util::XPropertyReplace> mxPropertyReplace;
+
+public:
+    SwVbaReplacement( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::util::XPropertyReplace >& xPropertyReplace ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaReplacement();
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_REPLACEMENT_HXX */
diff --git a/sw/source/ui/vba/vbasection.cxx b/sw/source/ui/vba/vbasection.cxx
new file mode 100644
index 0000000..9184807
--- /dev/null
+++ b/sw/source/ui/vba/vbasection.cxx
@@ -0,0 +1,89 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbasection.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbapagesetup.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaSection::SwVbaSection( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< frame::XModel >& xModel, const uno::Reference< beans::XPropertySet >& xProps ) throw ( uno::RuntimeException ) :
+    SwVbaSection_BASE( rParent, rContext ), mxModel( xModel ), mxPageProps( xProps )
+{
+}
+
+SwVbaSection::~SwVbaSection()
+{
+}
+
+::sal_Bool SAL_CALL SwVbaSection::getProtectedForForms() throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+
+void SAL_CALL SwVbaSection::setProtectedForForms( ::sal_Bool /*_protectedforforms*/ ) throw (uno::RuntimeException)
+{
+}
+
+uno::Any SAL_CALL SwVbaSection::Headers(  ) throw (uno::RuntimeException)
+{
+    return uno::Any();
+}
+
+uno::Any SAL_CALL SwVbaSection::Footers(  ) throw (uno::RuntimeException)
+{
+    return uno::Any();
+}
+
+uno::Any SAL_CALL
+SwVbaSection::PageSetup( ) throw (uno::RuntimeException)
+{
+    return uno::makeAny( uno::Reference< word::XPageSetup >( new SwVbaPageSetup( this, mxContext, mxModel, mxPageProps ) ) );
+}
+
+rtl::OUString&
+SwVbaSection::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaSection") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaSection::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Section" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbasection.hxx b/sw/source/ui/vba/vbasection.hxx
new file mode 100644
index 0000000..07e820c
--- /dev/null
+++ b/sw/source/ui/vba/vbasection.hxx
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_SECTION_HXX
+#define SW_VBA_SECTION_HXX
+
+#include <ooo/vba/word/XSection.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XSection > SwVbaSection_BASE;
+
+class SwVbaSection : public SwVbaSection_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::beans::XPropertySet > mxPageProps;
+
+public:
+    SwVbaSection( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::frame::XModel >& xModel, const css::uno::Reference< css::beans::XPropertySet >& xProps ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaSection();
+
+    // Attributes
+    virtual ::sal_Bool SAL_CALL getProtectedForForms() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setProtectedForForms( ::sal_Bool _protectedforforms ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual css::uno::Any SAL_CALL Headers(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Footers(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL PageSetup(  ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_SECTION_HXX */
diff --git a/sw/source/ui/vba/vbasections.cxx b/sw/source/ui/vba/vbasections.cxx
new file mode 100644
index 0000000..3097cc1
--- /dev/null
+++ b/sw/source/ui/vba/vbasections.cxx
@@ -0,0 +1,190 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbasections.hxx"
+#include "vbasection.hxx"
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+#include <com/sun/star/style/XStyle.hpp>
+#include <docsh.hxx>
+#include <doc.hxx>
+#include "wordvbahelper.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > SectionEnumeration_BASE;
+typedef ::cppu::WeakImplHelper2< container::XIndexAccess, container::XEnumerationAccess > SectionCollectionHelper_Base;
+typedef std::vector< uno::Reference< beans::XPropertySet > > XSectionVec;
+
+class SectionEnumeration : public SectionEnumeration_BASE
+{
+    XSectionVec mxSections;
+    XSectionVec::iterator mIt;
+
+public:
+    SectionEnumeration( const XSectionVec& rVec ) : mxSections( rVec ), mIt( mxSections.begin() ) {}
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mIt != mxSections.end() );
+    }
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( hasMoreElements() )
+            return uno::makeAny( *mIt++ );
+        throw container::NoSuchElementException();
+    }
+};
+
+// here I regard pagestyle as section
+class SectionCollectionHelper : public SectionCollectionHelper_Base
+{
+private:
+    uno::Reference< XHelperInterface > mxParent;
+    uno::Reference< uno::XComponentContext > mxContext;
+    uno::Reference< frame::XModel > mxModel;
+    XSectionVec mxSections;
+
+public:
+    SectionCollectionHelper( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException) : mxParent( xParent ), mxContext( xContext ), mxModel( xModel )
+    {
+        uno::Reference< style::XStyleFamiliesSupplier > xSytleFamSupp( mxModel, uno::UNO_QUERY_THROW );
+        uno::Reference< container::XNameAccess > xSytleFamNames( xSytleFamSupp->getStyleFamilies(), uno::UNO_QUERY_THROW );
+        uno::Reference< container::XIndexAccess > xPageStyles( xSytleFamNames->getByName( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyles") ) ), uno::UNO_QUERY_THROW );
+        sal_Int32 nCount = xPageStyles->getCount();
+        for( sal_Int32 index = 0; index < nCount; ++index )
+        {
+            uno::Reference< style::XStyle > xStyle( xPageStyles->getByIndex( index ), uno::UNO_QUERY_THROW );
+            // only the pagestyles in using are considered
+            if( xStyle->isInUse( ) )
+            {
+                uno::Reference< beans::XPropertySet > xPageProps( xStyle, uno::UNO_QUERY_THROW );
+                mxSections.push_back( xPageProps );
+            }
+        }
+    }
+
+    ~SectionCollectionHelper(){}
+
+    // XIndexAccess
+    virtual sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return mxSections.size();
+    }
+    virtual uno::Any SAL_CALL getByIndex( sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( Index < 0 || Index >= getCount() )
+            throw css::lang::IndexOutOfBoundsException();
+
+        uno::Reference< beans::XPropertySet > xPageProps( mxSections[ Index ], uno::UNO_QUERY_THROW );
+        return uno::makeAny( uno::Reference< word::XSection >( new SwVbaSection( mxParent,  mxContext, mxModel, xPageProps ) ) );
+    }
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return word::XSection::static_type(0);
+    }
+    virtual sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return sal_True;
+    }
+    // XEnumerationAccess
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        return new SectionEnumeration( mxSections );
+    }
+};
+
+class SectionsEnumWrapper : public EnumerationHelperImpl
+{
+    uno::Reference< frame::XModel > mxModel;
+    uno::WeakReference< XHelperInterface > mxParent;
+public:
+    SectionsEnumWrapper( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XEnumeration >& xEnumeration,  const uno::Reference< frame::XModel >& xModel  ) throw ( uno::RuntimeException ) : EnumerationHelperImpl( xContext, xEnumeration ), mxModel( xModel ), mxParent( xParent ) {}
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        uno::Reference< beans::XPropertySet > xPageProps( m_xEnumeration->nextElement(), uno::UNO_QUERY_THROW );
+        return uno::makeAny( uno::Reference< word::XSection > ( new SwVbaSection( mxParent, m_xContext, mxModel, xPageProps ) ) );
+    }
+};
+
+SwVbaSections::SwVbaSections( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xModel ): SwVbaSections_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( new SectionCollectionHelper( xParent, xContext, xModel ) ) ),  mxModel( xModel )
+{
+}
+
+uno::Any SAL_CALL
+SwVbaSections::PageSetup( ) throw (uno::RuntimeException)
+{
+    if( m_xIndexAccess->getCount() )
+    {
+        // check if the first section is our want
+        uno::Reference< word::XSection > xSection( m_xIndexAccess->getByIndex( 0 ), uno::UNO_QUERY_THROW );
+        return xSection->PageSetup();
+    }
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("There is no section") ), uno::Reference< uno::XInterface >() );
+}
+
+// XEnumerationAccess
+uno::Type SAL_CALL
+SwVbaSections::getElementType() throw (uno::RuntimeException)
+{
+    return word::XSection::static_type(0);
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+SwVbaSections::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return new SectionsEnumWrapper( this, mxContext, xEnumAccess->createEnumeration(), mxModel );
+}
+
+uno::Any
+SwVbaSections::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource;
+}
+
+rtl::OUString&
+SwVbaSections::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaSections") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaSections::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Sections") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbasections.hxx b/sw/source/ui/vba/vbasections.hxx
new file mode 100644
index 0000000..331395d
--- /dev/null
+++ b/sw/source/ui/vba/vbasections.hxx
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_SECTIONS_HXX
+#define SW_VBA_SECTIONS_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XSections.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef CollTestImplHelper< ooo::vba::word::XSections > SwVbaSections_BASE;
+
+class SwVbaSections : public SwVbaSections_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+
+public:
+    SwVbaSections( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xModel );
+    virtual ~SwVbaSections() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    virtual css::uno::Any SAL_CALL PageSetup(  ) throw (css::uno::RuntimeException);
+
+    // SwVbaSections_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* SW_VBA_SECTIONS_HXX */
diff --git a/sw/source/ui/vba/vbaselection.cxx b/sw/source/ui/vba/vbaselection.cxx
new file mode 100644
index 0000000..c97a934
--- /dev/null
+++ b/sw/source/ui/vba/vbaselection.cxx
@@ -0,0 +1,681 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaselection.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include "vbarange.hxx"
+#include "vbafind.hxx"
+#include "wordvbahelper.hxx"
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/text/XTextTable.hpp>
+#include <com/sun/star/text/XTextTableCursor.hpp>
+#include <com/sun/star/text/ControlCharacter.hpp>
+#include <com/sun/star/table/XCell.hpp>
+#include <ooo/vba/word/WdUnits.hpp>
+#include <ooo/vba/word/WdMovementType.hpp>
+#include <ooo/vba/word/WdGoToItem.hpp>
+#include <ooo/vba/word/WdGoToDirection.hpp>
+#include <ooo/vba/word/XBookmark.hpp>
+#include <ooo/vba/word/XApplication.hpp>
+#include <com/sun/star/text/XPageCursor.hpp>
+#include "unotbl.hxx"
+#include "unocoll.hxx"
+#include "vbatable.hxx"
+#include <com/sun/star/view/XSelectionSupplier.hpp>
+#include <com/sun/star/view/XViewCursor.hpp>
+#include <ooo/vba/word/WdInformation.hpp>
+#include <ooo/vba/word/WdHeaderFooterIndex.hpp>
+#include "vbainformationhelper.hxx"
+#include "vbafield.hxx"
+#include "vbaheaderfooter.hxx"
+#include "vbaheaderfooterhelper.hxx"
+#include <vbahelper/vbashaperange.hxx>
+#include <com/sun/star/drawing/XDrawPageSupplier.hpp>
+#include <com/sun/star/drawing/XDrawPage.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaSelection::SwVbaSelection( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const uno::Reference< frame::XModel >& rModel ) throw ( uno::RuntimeException ) : SwVbaSelection_BASE( rParent, rContext ), mxModel( rModel )
+{
+    mxTextViewCursor = word::getXTextViewCursor( mxModel );
+}
+
+SwVbaSelection::~SwVbaSelection()
+{
+}
+
+uno::Reference< text::XTextRange > SwVbaSelection::GetSelectedRange() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xTextRange;
+    uno::Reference< lang::XServiceInfo > xServiceInfo( mxModel->getCurrentSelection(), uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextRanges") ) ) )
+    {
+        uno::Reference< container::XIndexAccess > xTextRanges( xServiceInfo, uno::UNO_QUERY_THROW );
+        if( xTextRanges->getCount() > 0 )
+        {
+            // if there are multipul selection, just return the last selected Range.
+            xTextRange.set( xTextRanges->getByIndex( xTextRanges->getCount()-1 ), uno::UNO_QUERY_THROW );
+        }
+    }
+    else
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+    return xTextRange;
+}
+
+uno::Reference< word::XRange > SAL_CALL
+SwVbaSelection::getRange() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xTextRange = GetSelectedRange();
+    uno::Reference< text::XTextDocument > xDocument( mxModel, uno::UNO_QUERY_THROW );
+    return uno::Reference< word::XRange >( new SwVbaRange( this, mxContext, xDocument, xTextRange->getStart(), xTextRange->getEnd(), mxTextViewCursor->getText() ) );
+}
+
+rtl::OUString SAL_CALL
+SwVbaSelection::getText() throw ( uno::RuntimeException )
+{
+    return getRange()->getText();
+}
+
+void SAL_CALL
+SwVbaSelection::setText( const rtl::OUString& rText ) throw ( uno::RuntimeException )
+{
+    getRange()->setText( rText );
+}
+
+void SAL_CALL
+SwVbaSelection::TypeText( const rtl::OUString& rText ) throw ( uno::RuntimeException )
+{
+    // FIXME: handle the property Options.ReplaceSelection, the default value is TRUE
+    setText( rText );
+}
+
+void SAL_CALL
+SwVbaSelection::HomeKey( const uno::Any& _unit, const uno::Any& _extend ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nUnit = word::WdUnits::wdLine;
+    sal_Int32 nExtend = word::WdMovementType::wdMove;
+    _unit >>= nUnit;
+    _extend >>= nExtend;
+
+    switch( nUnit )
+    {
+        case word::WdUnits::wdStory:
+        {
+            // go to the begin of the document
+            rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:GoToStartOfDoc"));
+            dispatchRequests( mxModel,url );
+            // If something is selected, it needs to go twice
+            dispatchRequests( mxModel,url );
+            break;
+        }
+        case word::WdUnits::wdLine:
+        {
+            // go to the begin of the Line
+            rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:GoToStartOfLine"));
+            dispatchRequests( mxModel,url );
+            break;
+        }
+        default:
+        {
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+            break;
+        }
+    }
+}
+
+void SAL_CALL
+SwVbaSelection::EndKey( const uno::Any& _unit, const uno::Any& _extend ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nUnit = word::WdUnits::wdLine;
+    sal_Int32 nExtend = word::WdMovementType::wdMove;
+    _unit >>= nUnit;
+    _extend >>= nExtend;
+
+    switch( nUnit )
+    {
+        case word::WdUnits::wdStory:
+        {
+            // go to the end of the document
+            rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:GoToEndOfDoc"));
+            dispatchRequests( mxModel,url );
+            // If something is selected, it needs to go twice
+            dispatchRequests( mxModel,url );
+            break;
+        }
+        case word::WdUnits::wdLine:
+        {
+            // go to the end of the Line
+            rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:GoToEndOfLine"));
+            dispatchRequests( mxModel,url );
+            break;
+        }
+        default:
+        {
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+            break;
+        }
+    }
+}
+
+void SAL_CALL
+SwVbaSelection::Delete( const uno::Any& /*_unit*/, const uno::Any& /*_count*/ ) throw ( uno::RuntimeException )
+{
+    // FIXME: handle the arguments: _unit and _count
+    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:Delete"));
+    dispatchRequests( mxModel,url );
+}
+
+void SwVbaSelection::NextCell( sal_Int32 nCount, E_DIRECTION eDirection ) throw ( uno::RuntimeException )
+{
+    uno::Reference< beans::XPropertySet > xCursorProps( mxTextViewCursor, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextTable > xTextTable;
+    uno::Reference< table::XCell > xCell;
+    xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextTable") ) ) >>= xTextTable;
+    xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Cell") ) ) >>= xCell;
+    if( !xTextTable.is() || !xCell.is() )
+    {
+        DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+        return;
+    }
+    uno::Reference< beans::XPropertySet > xCellProps( xCell, uno::UNO_QUERY_THROW );
+    rtl::OUString aCellName;
+    xCellProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CellName") ) ) >>= aCellName;
+    uno::Reference< text::XTextTableCursor > xTextTableCursor = xTextTable->createCursorByCellName( aCellName );
+    // move the table cursor
+    switch( eDirection )
+    {
+        case MOVE_LEFT:
+        {
+            xTextTableCursor->goLeft( nCount, sal_False );
+            break;
+        }
+        case MOVE_RIGHT:
+        {
+            xTextTableCursor->goRight( nCount, sal_False );
+            break;
+        }
+        case MOVE_UP:
+        {
+            xTextTableCursor->goUp( nCount, sal_False );
+            break;
+        }
+        case MOVE_DOWN:
+        {
+            xTextTableCursor->goDown( nCount, sal_False );
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+            return;
+        }
+    }
+    // move the view cursor
+    xCell = xTextTable->getCellByName( xTextTableCursor->getRangeName() );
+    mxTextViewCursor->gotoRange( uno::Reference< text::XTextRange >( xCell, uno::UNO_QUERY_THROW ), sal_False );
+}
+
+void SAL_CALL
+SwVbaSelection::MoveRight( const uno::Any& _unit, const uno::Any& _count, const uno::Any& _extend ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nUnit = word::WdUnits::wdCharacter;
+    sal_Int32 nCount = 1;
+    sal_Int32 nExtend = word::WdMovementType::wdMove;
+
+    if( _unit.hasValue() )
+        _unit >>= nUnit;
+    if( _count.hasValue() )
+        _count >>= nCount;
+    if( _extend.hasValue() )
+        _extend >>= nExtend;
+
+    if( nCount == 0 )
+        return;
+
+    if( nCount < 0 )
+    {
+        // TODO: call MoveLeft;
+        MoveLeft( _unit, uno::makeAny( -nCount ), _extend );
+        return;
+    }
+
+    switch( nUnit )
+    {
+        case word::WdUnits::wdCell:
+        {
+            if(  nExtend == word::WdMovementType::wdExtend )
+            {
+                DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+                return;
+            }
+            NextCell( nCount, MOVE_RIGHT );
+            break;
+        }
+        default:
+        {
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+            break;
+        }
+    }
+
+}
+
+void SAL_CALL
+SwVbaSelection::MoveLeft( const uno::Any& _unit, const uno::Any& _count, const uno::Any& _extend ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nUnit = word::WdUnits::wdCharacter;
+    sal_Int32 nCount = 1;
+    sal_Int32 nExtend = word::WdMovementType::wdMove;
+
+    if( _unit.hasValue() )
+        _unit >>= nUnit;
+    if( _count.hasValue() )
+        _count >>= nCount;
+    if( _extend.hasValue() )
+        _extend >>= nExtend;
+
+    if( nCount == 0 )
+        return;
+
+    if( nCount < 0 )
+    {
+        MoveRight( _unit, uno::makeAny( -nCount ), _extend );
+        return;
+    }
+
+    switch( nUnit )
+    {
+        case word::WdUnits::wdCell:
+        {
+            if(  nExtend == word::WdMovementType::wdExtend )
+            {
+                DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+                return;
+            }
+            NextCell( nCount, MOVE_LEFT );
+            break;
+        }
+        default:
+        {
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+            break;
+        }
+    }
+
+}
+
+void SAL_CALL
+SwVbaSelection::MoveDown( const uno::Any& _unit, const uno::Any& _count, const uno::Any& _extend ) throw ( uno::RuntimeException )
+{
+    sal_Int32 nUnit = word::WdUnits::wdCharacter;
+    sal_Int32 nCount = 1;
+    sal_Int32 nExtend = word::WdMovementType::wdMove;
+
+    if( _unit.hasValue() )
+        _unit >>= nUnit;
+    if( _count.hasValue() )
+        _count >>= nCount;
+    if( _extend.hasValue() )
+        _extend >>= nExtend;
+
+    if( nCount == 0 )
+        return;
+
+    if( nCount < 0 )
+    {
+        // TODO: call MoveLeft;
+        //MoveUp( _unit, uno::makeAny( -nCount ), _extend );
+        return;
+    }
+
+    switch( nUnit )
+    {
+        case word::WdUnits::wdLine:
+        {
+            uno::Reference< view::XViewCursor > xViewCursor( mxTextViewCursor, uno::UNO_QUERY_THROW );
+            sal_Bool bExpand = ( nExtend == word::WdMovementType::wdMove ) ? sal_False : sal_True;
+            xViewCursor->goDown( nCount, bExpand );
+            break;
+        }
+        default:
+        {
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+            break;
+        }
+    }
+
+}
+
+void SAL_CALL
+SwVbaSelection::TypeParagraph() throw ( uno::RuntimeException )
+{
+    // #FIXME: if the selection is an entire paragraph, it's replaced
+    // by the new paragraph
+    sal_Bool isCollapsed = mxTextViewCursor->isCollapsed();
+    InsertParagraph();
+    if( isCollapsed )
+        mxTextViewCursor->collapseToStart();
+}
+
+void SAL_CALL
+SwVbaSelection::InsertParagraph() throw ( uno::RuntimeException )
+{
+    // #FIME: the selection should include the new paragraph.
+    getRange()->InsertParagraph();
+}
+
+void SAL_CALL
+SwVbaSelection::InsertParagraphBefore() throw ( uno::RuntimeException )
+{
+    getRange()->InsertParagraphBefore();
+}
+
+void SAL_CALL
+SwVbaSelection::InsertParagraphAfter() throw ( uno::RuntimeException )
+{
+    getRange()->InsertParagraphAfter();
+}
+
+uno::Reference< word::XParagraphFormat > SAL_CALL
+SwVbaSelection::getParagraphFormat() throw ( uno::RuntimeException )
+{
+    return getRange()->getParagraphFormat();
+}
+
+void SAL_CALL
+SwVbaSelection::setParagraphFormat( const uno::Reference< word::XParagraphFormat >& rParagraphFormat ) throw ( uno::RuntimeException )
+{
+    return getRange()->setParagraphFormat( rParagraphFormat );
+}
+
+uno::Reference< word::XFind > SAL_CALL
+SwVbaSelection::getFind() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XTextRange > xTextRange = GetSelectedRange();
+    return uno::Reference< word::XFind >( new SwVbaFind( this, mxContext, mxModel, xTextRange ) );
+}
+
+uno::Reference< word::XStyle > SAL_CALL
+SwVbaSelection::getStyle() throw ( uno::RuntimeException )
+{
+    return getRange()->getStyle();
+}
+
+void SAL_CALL
+SwVbaSelection::setStyle( const uno::Reference< word::XStyle >& rStyle ) throw ( uno::RuntimeException )
+{
+    return getRange()->setStyle( rStyle );
+}
+
+uno::Reference< word::XFont > SAL_CALL
+SwVbaSelection::getFont() throw ( uno::RuntimeException )
+{
+    return getRange()->getFont();
+}
+
+void SAL_CALL
+SwVbaSelection::TypeBackspace() throw ( uno::RuntimeException )
+{
+    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:SwBackspace"));
+    dispatchRequests( mxModel,url );
+}
+
+uno::Reference< word::XRange > SAL_CALL SwVbaSelection::GoTo( const uno::Any& _what, const uno::Any& _which, const uno::Any& _count, const uno::Any& _name ) throw (uno::RuntimeException)
+{
+    sal_Int32 nWhat = 0;
+    if( ( _what >>= nWhat ) != sal_True )
+         DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+    switch( nWhat )
+    {
+        case word::WdGoToItem::wdGoToBookmark:
+        {
+            rtl::OUString sName;
+            uno::Reference< word::XApplication > xApplication( Application(), uno::UNO_QUERY_THROW );
+            uno::Reference< word::XBookmark > xBookmark( xApplication->getActiveDocument()->Bookmarks(_name), uno::UNO_QUERY_THROW );
+            xBookmark->Select();
+            //return uno::Reference< word::XRange >( xBookmark->Range(), uno::UNO_QUERY_THROW );
+            break;
+        }
+        case word::WdGoToItem::wdGoToPage:
+        {
+            uno::Reference< text::XPageCursor > xPageCursor( mxTextViewCursor, uno::UNO_QUERY_THROW );
+            sal_Int32 nCurrPage = xPageCursor->getPage();
+            sal_Int32 nLastPage = word::getPageCount( mxModel );
+            sal_Int32 nCount = 0;
+            if( _count.hasValue() )
+                _count >>= nCount;
+            sal_Int32 nWhich = 0;
+            if( _which.hasValue() )
+                _which >>= nWhich;
+             sal_Int32 nPage = 0;
+             switch( nWhich )
+             {
+                case word::WdGoToDirection::wdGoToLast:
+                {
+                    nPage = nLastPage;
+                    break;
+                }
+                case word::WdGoToDirection::wdGoToNext:
+                {
+                    nPage = nCurrPage + 1;
+                    break;
+                }
+                case word::WdGoToDirection::wdGoToPrevious:
+                {
+                    nPage = nCurrPage - 1;
+                    break;
+                }
+                default:
+                {
+                    nPage = nCount;
+                }
+             }
+             if( nPage <= 0 )
+                nPage = 1;
+             if( nPage > nLastPage )
+                nPage = nLastPage;
+             xPageCursor->jumpToPage( ( sal_Int16 )( nPage ) );
+             break;
+        }
+        case word::WdGoToItem::wdGoToSection:
+        {
+            // TODO: implement Section object
+        }
+        default:
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+    return getRange();
+}
+
+::sal_Int32 SAL_CALL SwVbaSelection::getLanguageID() throw (uno::RuntimeException)
+{
+    return getRange()->getLanguageID();
+}
+
+void SAL_CALL SwVbaSelection::setLanguageID( ::sal_Int32 _languageid ) throw (uno::RuntimeException)
+{
+    getRange()->setLanguageID( _languageid );
+}
+
+uno::Any SAL_CALL SwVbaSelection::Information( sal_Int32 _type ) throw (uno::RuntimeException)
+{
+    uno::Any result;
+    //uno::Reference< view::XSelectionSupplier > xSel( mxModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    //uno::Any aSelectedObject = xSel->getSelection();
+    switch( _type )
+    {
+        case word::WdInformation::wdActiveEndPageNumber:
+        {
+            result = uno::makeAny( SwVbaInformationHelper::handleWdActiveEndPageNumber( mxTextViewCursor ) );
+            break;
+        }
+        case word::WdInformation::wdNumberOfPagesInDocument:
+        {
+            result = uno::makeAny( SwVbaInformationHelper::handleWdNumberOfPagesInDocument( mxModel ) );
+            break;
+        }
+        case word::WdInformation::wdVerticalPositionRelativeToPage:
+        {
+            result = uno::makeAny( SwVbaInformationHelper::handleWdVerticalPositionRelativeToPage( mxModel, mxTextViewCursor ) );
+            break;
+        }
+        default:
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+    // This method fails to restore the previouse selection
+    //xSel->select( aSelectedObject );
+    return result;
+}
+
+void SAL_CALL SwVbaSelection::InsertBreak( const uno::Any& _breakType ) throw (uno::RuntimeException)
+{
+    getRange()->InsertBreak( _breakType );
+}
+
+uno::Any SAL_CALL
+SwVbaSelection::Tables( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    // Hacky implementation due to missing api ( and lack of knowledge )
+    // we can only support a selection that is a single table
+    if ( !aIndex.hasValue() ) // currently we can't support multiple tables in a selection
+       throw uno::RuntimeException();
+    // if the current selection is a XTextTableCursor and the index is 1 then we can service this request, otherwise we just have to throw
+    uno::Reference< text::XTextTableCursor > xTextTableCursor( mxModel->getCurrentSelection(), uno::UNO_QUERY );
+
+    if ( !xTextTableCursor.is() )
+       throw uno::RuntimeException();
+
+    sal_Int32 nIndex = 0;
+    aIndex >>= nIndex;
+
+    uno::Any aRet;
+
+    if ( nIndex != 1 )
+       throw uno::RuntimeException();
+    SwXTextTableCursor* pTTCursor = dynamic_cast< SwXTextTableCursor* >( xTextTableCursor.get() );
+    if ( pTTCursor )
+    {
+        SwFrmFmt* pFmt = pTTCursor->GetFrmFmt();
+        rtl::OUString sTableName;
+        if ( pFmt )
+        {
+            uno::Reference< text::XTextTable > xTbl = SwXTextTables::GetObject(*pFmt);
+            uno::Reference< css::text::XTextDocument > xTextDoc( mxModel, uno::UNO_QUERY_THROW );
+            uno::Reference< word::XTable > xVBATbl = new SwVbaTable( mxParent, mxContext, xTextDoc, xTbl );
+            aRet <<= xVBATbl;
+        }
+    }
+    return aRet;
+
+}
+
+uno::Any SAL_CALL
+SwVbaSelection::Fields( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xCol( new SwVbaFields( mxParent, mxContext, mxModel ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+uno::Reference< word::XHeaderFooter > SAL_CALL
+SwVbaSelection::getHeaderFooter() throw ( uno::RuntimeException )
+{
+    uno::Reference< text::XText > xCurrentText = word::getXTextViewCursor( mxModel )->getText();
+    if( HeaderFooterHelper::isHeader( mxModel, xCurrentText ) || HeaderFooterHelper::isFooter( mxModel, xCurrentText ) )
+    {
+        uno::Reference< beans::XPropertySet > xPageStyleProps( word::getCurrentPageStyle( mxModel ), uno::UNO_QUERY_THROW );
+        sal_Int32 nIndex = word::WdHeaderFooterIndex::wdHeaderFooterPrimary;
+        sal_Bool isHeader = HeaderFooterHelper::isHeader( mxModel, xCurrentText );
+        if( HeaderFooterHelper::isEvenPagesHeader( mxModel, xCurrentText ) || HeaderFooterHelper::isEvenPagesFooter( mxModel, xCurrentText ) )
+            nIndex = word::WdHeaderFooterIndex::wdHeaderFooterEvenPages;
+        else if( HeaderFooterHelper::isFirstPageHeader( mxModel, xCurrentText ) || HeaderFooterHelper::isFirstPageFooter( mxModel, xCurrentText ) )
+            nIndex = word::WdHeaderFooterIndex::wdHeaderFooterFirstPage;
+
+        return uno::Reference< word::XHeaderFooter >( new SwVbaHeaderFooter( this, mxContext, mxModel, xPageStyleProps, isHeader, nIndex ) );
+
+    }
+    return uno::Reference< word::XHeaderFooter >();
+}
+
+uno::Any SAL_CALL
+SwVbaSelection::ShapeRange( ) throw (uno::RuntimeException)
+{
+    uno::Reference< drawing::XShapes > xShapes( mxModel->getCurrentSelection(), uno::UNO_QUERY );
+
+    if ( !xShapes.is() )
+       throw uno::RuntimeException();
+
+    uno::Reference< drawing::XDrawPageSupplier > xDrawPageSupplier( mxModel, uno::UNO_QUERY_THROW );
+    uno::Reference< drawing::XDrawPage > xDrawPage = xDrawPageSupplier->getDrawPage();
+    uno::Reference< container::XIndexAccess > xShapesAccess( xShapes, uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< msforms::XShapeRange >( new ScVbaShapeRange( this, mxContext, xShapesAccess, xDrawPage, mxModel ) ) );
+}
+
+::sal_Int32 SAL_CALL SwVbaSelection::getStart() throw (uno::RuntimeException)
+{
+    return getRange()->getStart();
+}
+
+void SAL_CALL SwVbaSelection::setStart( ::sal_Int32 _start ) throw (uno::RuntimeException)
+{
+    getRange()->setStart( _start );
+}
+::sal_Int32 SAL_CALL SwVbaSelection::getEnd() throw (uno::RuntimeException)
+{
+    return getRange()->getEnd();
+}
+
+void SAL_CALL SwVbaSelection::setEnd( ::sal_Int32 _end ) throw (uno::RuntimeException)
+{
+    getRange()->setEnd( _end );
+}
+
+rtl::OUString&
+SwVbaSelection::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaSelection") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaSelection::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Selection" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaselection.hxx b/sw/source/ui/vba/vbaselection.hxx
new file mode 100644
index 0000000..f319289
--- /dev/null
+++ b/sw/source/ui/vba/vbaselection.hxx
@@ -0,0 +1,108 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_SELECTION_HXX
+#define SW_VBA_SELECTION_HXX
+
+#include <ooo/vba/word/XSelection.hpp>
+#include <ooo/vba/word/XRange.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <ooo/vba/word/XParagraphFormat.hpp>
+#include <ooo/vba/word/XFind.hpp>
+#include <ooo/vba/word/XStyle.hpp>
+#include <ooo/vba/word/XFont.hpp>
+#include <ooo/vba/word/XHeaderFooter.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XSelection > SwVbaSelection_BASE;
+
+class SwVbaSelection : public SwVbaSelection_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::text::XTextViewCursor > mxTextViewCursor;
+    css::uno::Reference< ooo::vba::word::XRange > mxRange;
+
+    enum E_DIRECTION
+    {
+        MOVE_LEFT = 1,
+        MOVE_RIGHT,
+        MOVE_UP,
+        MOVE_DOWN
+    };
+
+private:
+    void NextCell( sal_Int32 nCount, E_DIRECTION eDirection ) throw ( css::uno::RuntimeException );
+    css::uno::Reference< css::text::XTextRange > GetSelectedRange() throw ( css::uno::RuntimeException );
+
+public:
+    SwVbaSelection( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::frame::XModel >& rModel ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaSelection();
+
+    // Attribute
+    virtual rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const rtl::OUString& rText ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XRange > SAL_CALL getRange() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL HomeKey( const css::uno::Any& _unit, const css::uno::Any& _extend ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL EndKey( const css::uno::Any& _unit, const css::uno::Any& _extend ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL TypeText( const rtl::OUString& rText ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Delete( const css::uno::Any& _unit, const css::uno::Any& _count ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL MoveRight( const css::uno::Any& _unit, const css::uno::Any& _count, const css::uno::Any& _extend ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL MoveLeft( const css::uno::Any& _unit, const css::uno::Any& _count, const css::uno::Any& _extend ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL MoveDown( const css::uno::Any& _unit, const css::uno::Any& _count, const css::uno::Any& _extend ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL TypeParagraph() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertParagraph() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertParagraphBefore() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertParagraphAfter() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XParagraphFormat > SAL_CALL getParagraphFormat() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setParagraphFormat( const css::uno::Reference< ooo::vba::word::XParagraphFormat >& rParagraphFormat ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XFind > SAL_CALL getFind() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XStyle > SAL_CALL getStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStyle( const css::uno::Reference< ooo::vba::word::XStyle >& _xStyle ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XFont > SAL_CALL getFont() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL TypeBackspace() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XRange > SAL_CALL GoTo( const css::uno::Any& _what, const css::uno::Any& _which, const css::uno::Any& _count, const css::uno::Any& _name ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getLanguageID( ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLanguageID( ::sal_Int32 _languageid ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Information( sal_Int32 _type ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL InsertBreak( const css::uno::Any& _breakType ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Tables( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Fields( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XHeaderFooter > SAL_CALL getHeaderFooter() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL ShapeRange( ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getStart() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStart( ::sal_Int32 _start ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getEnd() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEnd( ::sal_Int32 _end ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_SELECTION_HXX */
diff --git a/sw/source/ui/vba/vbastyle.cxx b/sw/source/ui/vba/vbastyle.cxx
new file mode 100644
index 0000000..7a2c42a
--- /dev/null
+++ b/sw/source/ui/vba/vbastyle.cxx
@@ -0,0 +1,152 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#include "vbastyle.hxx"
+#include <ooo/vba/word/WdStyleType.hpp>
+#include <com/sun/star/lang/Locale.hpp>
+#include <i18npool/mslangid.hxx>
+#include "vbafont.hxx"
+#include "vbapalette.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+
+SwVbaStyle::SwVbaStyle( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< beans::XPropertySet >& _xPropertySet ) throw ( script::BasicErrorException, uno::RuntimeException ) : SwVbaStyle_BASE( xParent, xContext ) , mxStyleProps( _xPropertySet )
+{
+    mxStyle.set( _xPropertySet, uno::UNO_QUERY_THROW );
+}
+
+void SAL_CALL
+SwVbaStyle::setName( const ::rtl::OUString& Name ) throw (uno::RuntimeException)
+{
+    mxStyle->setName(Name);
+}
+
+::rtl::OUString SAL_CALL
+SwVbaStyle::getName() throw (uno::RuntimeException)
+{
+    return mxStyle->getName();
+}
+
+sal_Int32 SwVbaStyle::getLanguageID( const uno::Reference< beans::XPropertySet >& xTCProps ) throw (uno::RuntimeException)
+{
+    lang::Locale aLocale;
+    xTCProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharLocale") ) ) >>= aLocale;
+    return MsLangId::convertLocaleToLanguage( aLocale );
+}
+
+void SwVbaStyle::setLanguageID( const uno::Reference< beans::XPropertySet >& xTCProps, sal_Int32 _languageid ) throw (uno::RuntimeException)
+{
+    lang::Locale aLocale = MsLangId::convertLanguageToLocale( static_cast<LanguageType>(_languageid) );
+    xTCProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharLocale") ), uno::makeAny( aLocale ) ) ;
+}
+
+::sal_Int32 SAL_CALL SwVbaStyle::getLanguageID() throw (uno::RuntimeException)
+{
+    return getLanguageID( mxStyleProps );
+}
+
+void SAL_CALL SwVbaStyle::setLanguageID( ::sal_Int32 _languageid ) throw (uno::RuntimeException)
+{
+    setLanguageID( mxStyleProps, _languageid );
+}
+
+::sal_Int32 SAL_CALL SwVbaStyle::getType() throw (uno::RuntimeException)
+{
+    sal_Int32 nType = word::WdStyleType::wdStyleTypeParagraph;
+    uno::Reference< lang::XServiceInfo > xServiceInfo( mxStyle, uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.style.ParagraphStyle") ) ) )
+        nType = word::WdStyleType::wdStyleTypeParagraph;
+    else if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.style.CharacterStyle") ) ) )
+        nType = word::WdStyleType::wdStyleTypeCharacter;
+    else // if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.NumberingStyle") ) ) )
+        nType = word::WdStyleType::wdStyleTypeList;
+    return nType;
+}
+
+uno::Reference< word::XFont > SAL_CALL
+SwVbaStyle::getFont() throw ( uno::RuntimeException )
+{
+    VbaPalette aColors;
+    return new SwVbaFont( mxParent, mxContext, aColors.getPalette(), mxStyleProps );
+}
+
+void SwVbaStyle::setStyle( const uno::Reference< beans::XPropertySet >& xTCProps, const uno::Reference< ooo::vba::word::XStyle >& xStyle )throw (uno::RuntimeException)
+{
+    rtl::OUString aStyleType = getOOoStyleTypeFromMSWord( xStyle->getType() );
+    xTCProps->setPropertyValue( aStyleType, uno::makeAny( xStyle->getName() ) );
+}
+
+rtl::OUString SwVbaStyle::getOOoStyleTypeFromMSWord( sal_Int32 _wdStyleType )
+{
+    rtl::OUString aStyleType;
+    switch( _wdStyleType )
+    {
+        case word::WdStyleType::wdStyleTypeParagraph:
+        case word::WdStyleType::wdStyleTypeTable:
+        {
+            aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParaStyleName") );
+            break;
+        }
+        case word::WdStyleType::wdStyleTypeCharacter:
+        {
+            aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharStyleName") );
+            break;
+        }
+        case word::WdStyleType::wdStyleTypeList:
+        {
+            aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("NumberingStyleName") );
+            break;
+        }
+        default:
+            DebugHelper::exception( SbERR_INTERNAL_ERROR, rtl::OUString() );
+    }
+    return aStyleType;
+}
+
+rtl::OUString&
+SwVbaStyle::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaStyle") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaStyle::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.XStyle" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbastyle.hxx b/sw/source/ui/vba/vbastyle.hxx
new file mode 100644
index 0000000..e0d109b
--- /dev/null
+++ b/sw/source/ui/vba/vbastyle.hxx
@@ -0,0 +1,70 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:  $
+ * $Revision:  $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_STYLE_HXX
+#define SW_VBA_STYLE_HXX
+#include <ooo/vba/word/XStyle.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/container/XNameContainer.hpp>
+#include <com/sun/star/style/XStyle.hpp>
+#include <ooo/vba/word/XFont.hpp>
+
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XStyle > SwVbaStyle_BASE;
+
+class SwVbaStyle : public SwVbaStyle_BASE
+{
+private:
+    css::uno::Reference< css::beans::XPropertySet > mxStyleProps;
+    css::uno::Reference< css::style::XStyle > mxStyle;
+public:
+    SwVbaStyle( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::beans::XPropertySet >& _xPropertySet ) throw ( css::script::BasicErrorException, css::uno::RuntimeException );
+    virtual ~SwVbaStyle(){}
+
+    static void setStyle( const css::uno::Reference< css::beans::XPropertySet >& xTCProps, const css::uno::Reference< ooo::vba::word::XStyle >& xStyle ) throw (css::uno::RuntimeException);
+    static rtl::OUString getOOoStyleTypeFromMSWord( sal_Int32 _wdStyleType );
+    static sal_Int32 getLanguageID( const css::uno::Reference< css::beans::XPropertySet >& xTCProps ) throw (css::uno::RuntimeException);
+    static void setLanguageID( const css::uno::Reference< css::beans::XPropertySet >& xTCProps, sal_Int32 _languageid ) throw (css::uno::RuntimeException);
+
+    // Attributes
+    virtual rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setName( const rtl::OUString& Name ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getLanguageID( ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLanguageID( ::sal_Int32 _languageid ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ooo::vba::word::XFont > SAL_CALL getFont() throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif //SW_VBA_AXIS_HXX
diff --git a/sw/source/ui/vba/vbastyles.cxx b/sw/source/ui/vba/vbastyles.cxx
new file mode 100644
index 0000000..c13c884
--- /dev/null
+++ b/sw/source/ui/vba/vbastyles.cxx
@@ -0,0 +1,380 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbastyles.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbastyles.hxx"
+#include "vbastyle.hxx"
+#include <cppuhelper/implbase3.hxx>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/lang/IndexOutOfBoundsException.hpp>
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+#include <com/sun/star/style/XStyle.hpp>
+#include <ooo/vba/word/WdBuiltinStyle.hpp>
+#include <ooo/vba/word/WdStyleType.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+struct BuiltinStyleTable
+{
+    sal_Int32 wdBuiltinStyle;
+    const sal_Char* pOOoStyleName;
+    sal_Int32 wdStyleType;
+};
+
+const BuiltinStyleTable aBuiltinStyleTable[] =
+{
+    { word::WdBuiltinStyle::wdStyleBlockQuotation, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyText, "Text body", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyText2, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyText3, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyTextFirstIndent, "First line indent", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyTextFirstIndent2, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyTextIndent, "Text body indent", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyTextIndent2, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleBodyTextIndent3, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleCaption, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleClosing, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleCommentReference, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleCommentText, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleDate, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleDefaultParagraphFont, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleEmphasis, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleEndnoteReference, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleEndnoteText, "Endnote", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleEnvelopeAddress, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleEnvelopeReturn, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleFooter, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleFootnoteReference, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleFootnoteText, "Footnote", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeader, "Header", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading1, "Heading 1", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading2, "Heading 2", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading3, "Heading 3", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading4, "Heading 4", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading5, "Heading 5", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading6, "Heading 6", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading7, "Heading 7", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading8, "Heading 8", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHeading9, "Heading 9", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlAcronym, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlAddress, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlCite, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlCode, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlDfn, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlKbd, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlNormal, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlPre, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlSamp, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlTt, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHtmlVar, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHyperlink, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleHyperlinkFollowed, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex1, "Index 1", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex2, "Index 2", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex3, "Index 3", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex4, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex5, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex6, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex7, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex8, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndex9, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleIndexHeading, "Index Heading", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleLineNumber, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleList, "List", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleList2, "List 2", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleList3, "List 3", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleList4, "List 4", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleList5, "List 5", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleListBullet, "List 1", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListBullet2, "List 2", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListBullet3, "List 3", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListBullet4, "List 4", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListBullet5, "List 5", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListContinue, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleListContinue2, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleListContinue3, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleListContinue4, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleListContinue5, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleListNumber, "Numbering 1", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListNumber2, "Numbering 2", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListNumber3, "Numbering 3", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListNumber4, "Numbering 4", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleListNumber5, "Numbering 5", word::WdStyleType::wdStyleTypeList },
+    { word::WdBuiltinStyle::wdStyleMacroText, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleMessageHeader, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleNavPane, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleNormal, "Default", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleNormalIndent, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleNormalTable, "Table", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleNoteHeading, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStylePageNumber, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStylePlainText, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleSalutation, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleSignature, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleStrong, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleSubtitle, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTableOfAuthorities, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTableOfFigures, "", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTitle, "Title", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOAHeading, "Contents Heading", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC1, "Contents 1", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC2, "Contents 2", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC3, "Contents 3", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC4, "Contents 4", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC5, "Contents 5", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC6, "Contents 6", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC7, "Contents 7", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC8, "Contents 8", word::WdStyleType::wdStyleTypeParagraph },
+    { word::WdBuiltinStyle::wdStyleTOC9, "Contents 9", word::WdStyleType::wdStyleTypeParagraph },
+    { 0, 0, 0 }
+};
+
+
+static uno::Sequence< rtl::OUString > getStyleTypes()
+{
+    uno::Sequence< rtl::OUString > aRet(3);
+    rtl::OUString* pArray = aRet.getArray();
+    pArray[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParagraphStyles") );
+    pArray[1] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharacterStyles") );
+    pArray[2] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("NumberingStyles") );
+    return aRet;
+}
+
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > StyleEnumeration_BASE;
+typedef ::cppu::WeakImplHelper3< container::XNameAccess, container::XIndexAccess, container::XEnumerationAccess > StyleCollectionHelper_BASE;
+/*
+class StylesEnumeration : public StyleEnumeration_BASE
+{
+public:
+    StylesEnumeration( const SheetMap& sMap ) : mSheetMap( sMap ), mIt( mSheetMap.begin() ) {}
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mIt != mSheetMap.end() );
+    }
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasMoreElements() )
+            throw container::NoSuchElementException();
+        uno::Reference< sheet::XSpreadsheet > xSheet( *mIt++ );
+        return uno::makeAny( xSheet ) ;
+    }
+};
+*/
+class StyleCollectionHelper : public StyleCollectionHelper_BASE
+{
+private:
+    uno::Reference< frame::XModel > mxModel;
+    uno::Reference< container::XNameAccess > mxStyleFamilies;
+    uno::Reference< container::XNameContainer > mxCurrentStyleFamily;
+    uno::Any cachePos;
+public:
+    StyleCollectionHelper( const uno::Reference< frame::XModel >& _xModel ) : mxModel( _xModel )
+    {
+        uno::Reference< style::XStyleFamiliesSupplier > xStyleSupplier( _xModel, uno::UNO_QUERY_THROW);
+        mxStyleFamilies = xStyleSupplier->getStyleFamilies();
+    }
+    uno::Reference< container::XNameContainer > getCurrentStyleFamily(){ return mxCurrentStyleFamily; }
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException) { return  style::XStyle::static_type(0); }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException) { return getCount() > 0; }
+    // XNameAcess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasByName(aName) )
+            throw container::NoSuchElementException();
+        return cachePos;
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > sNames( getCount() );
+        rtl::OUString* pString = sNames.getArray();
+        uno::Sequence< rtl::OUString > aStyleTypes = getStyleTypes();
+        sal_Int32 nCount = 0;
+        for( sal_Int32 i = 0; i < aStyleTypes.getLength(); i++ )
+        {
+            uno::Reference< container::XNameAccess > xNameAccess( mxStyleFamilies->getByName( aStyleTypes[i] ), uno::UNO_QUERY_THROW );
+            uno::Sequence< rtl::OUString > sElementNames = xNameAccess->getElementNames();
+            for( sal_Int32 j = 0; j < sElementNames.getLength(); j++ )
+            {
+                pString[nCount++] = sElementNames[j];
+            }
+        }
+        return sNames;
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > aStyleTypes = getStyleTypes();
+        for( sal_Int32 i = 0; i < aStyleTypes.getLength(); i++ )
+        {
+            uno::Reference< container::XNameAccess > xNameAccess( mxStyleFamilies->getByName( aStyleTypes[i] ), uno::UNO_QUERY_THROW );
+            if( xNameAccess->hasByName( aName ) )
+            {
+                cachePos = xNameAccess->getByName( aName );
+                mxCurrentStyleFamily.set( xNameAccess, uno::UNO_QUERY_THROW );
+                return sal_True;
+            }
+        }
+        return sal_False;
+    }
+
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > aStyleTypes = getStyleTypes();
+        sal_Int32 nCount = 0;
+        for( sal_Int32 i = 0; i < aStyleTypes.getLength(); i++ )
+        {
+            uno::Reference< container::XIndexAccess > xIndexAccess( mxStyleFamilies->getByName( aStyleTypes[i] ), uno::UNO_QUERY_THROW );
+            nCount += xIndexAccess->getCount();
+        }
+        return nCount;
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        if ( Index < 0 || Index >= getCount() )
+            throw lang::IndexOutOfBoundsException();
+
+        // FIXME: need to make a alphabetically sorted list of style names
+        uno::Sequence< rtl::OUString > aStyleTypes = getStyleTypes();
+        for( sal_Int32 i = 0; i < aStyleTypes.getLength(); i++ )
+        {
+            uno::Reference< container::XIndexAccess > xIndexAccess( mxStyleFamilies->getByName( aStyleTypes[i] ), uno::UNO_QUERY_THROW );
+            sal_Int32 nCount = xIndexAccess->getCount();
+            if( Index >= nCount )
+                Index -= nCount;
+            else
+            {
+                mxCurrentStyleFamily.set( xIndexAccess, uno::UNO_QUERY_THROW );
+                return xIndexAccess->getByIndex( Index );
+            }
+        }
+        throw lang::IndexOutOfBoundsException();
+    }
+    // XEnumerationAccess
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        // FIXME:
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+};
+
+SwVbaStyles::SwVbaStyles( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< css::uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xModel ) throw ( script::BasicErrorException ) : SwVbaStyles_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( new StyleCollectionHelper( xModel )  ) ), mxModel( xModel )
+{
+    mxMSF.set( mxModel, uno::UNO_QUERY_THROW );
+}
+
+uno::Any
+SwVbaStyles::createCollectionObject(const uno::Any& aObject)
+{
+    uno::Reference< beans::XPropertySet > xStyleProp( aObject, uno::UNO_QUERY_THROW );
+    return uno::makeAny( uno::Reference< word::XStyle >( new SwVbaStyle( this, mxContext, xStyleProp ) ) );
+}
+
+uno::Type SAL_CALL
+SwVbaStyles::getElementType() throw (uno::RuntimeException)
+{
+    return word::XStyle::static_type(0);
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+SwVbaStyles::createEnumeration() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+uno::Any SAL_CALL
+SwVbaStyles::Item( const uno::Any& Index1, const uno::Any& Index2 ) throw (uno::RuntimeException)
+{
+    //handle WdBuiltinStyle
+    sal_Int32 nIndex = 0;
+    if( ( Index1 >>= nIndex ) && ( nIndex < 0 ) )
+    {
+        for( const BuiltinStyleTable* pTable = aBuiltinStyleTable; pTable != NULL; pTable++ )
+        {
+            if( nIndex == pTable->wdBuiltinStyle )
+            {
+                rtl::OUString aStyleName = rtl::OUString::createFromAscii( pTable->pOOoStyleName );
+                if( aStyleName.getLength() > 0 )
+                {
+                    rtl::OUString aStyleType = SwVbaStyle::getOOoStyleTypeFromMSWord( pTable->wdStyleType );
+                    switch( pTable->wdStyleType )
+                    {
+                        case word::WdStyleType::wdStyleTypeParagraph:
+                        case word::WdStyleType::wdStyleTypeTable:
+                        {
+                            aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ParagraphStyles") );
+                            break;
+                        }
+                        case word::WdStyleType::wdStyleTypeCharacter:
+                        {
+                            aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CharacterStyles") );
+                            break;
+                        }
+                        case word::WdStyleType::wdStyleTypeList:
+                        {
+                            aStyleType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("NumberingStyles") );
+                            break;
+                        }
+                        default:
+                            DebugHelper::exception( SbERR_INTERNAL_ERROR, rtl::OUString() );
+                    }
+                    uno::Reference< style::XStyleFamiliesSupplier > xStyleSupplier( mxModel, uno::UNO_QUERY_THROW);
+                    uno::Reference< container::XNameAccess > xStylesAccess( xStyleSupplier->getStyleFamilies()->getByName( aStyleType ), uno::UNO_QUERY_THROW );
+                    uno::Reference< beans::XPropertySet > xStyleProps( xStylesAccess->getByName( aStyleName ), uno::UNO_QUERY_THROW );
+                    return uno::makeAny( uno::Reference< word::XStyle >( new SwVbaStyle( this, mxContext, xStyleProps ) ) );
+                }
+                else
+                {
+                    OSL_TRACE("SwVbaStyles::Item: the builtin style type is not implemented");
+                    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+                }
+            }
+        }
+    }
+    return SwVbaStyles_BASE::Item( Index1, Index2 );
+}
+
+rtl::OUString&
+SwVbaStyles::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaStyles") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaStyles::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.XStyles" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbastyles.hxx b/sw/source/ui/vba/vbastyles.hxx
new file mode 100644
index 0000000..764e74f
--- /dev/null
+++ b/sw/source/ui/vba/vbastyles.hxx
@@ -0,0 +1,54 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbastyles.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_STYLES_HXX
+#define SW_VBA_STYLES_HXX
+
+#include <ooo/vba/word/XStyles.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
+
+typedef CollTestImplHelper< ooo::vba::word::XStyles > SwVbaStyles_BASE;
+class SwVbaStyles: public SwVbaStyles_BASE
+{
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::lang::XMultiServiceFactory > mxMSF;
+public:
+    SwVbaStyles( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xModel ) throw ( css::script::BasicErrorException );
+
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index1, const css::uno::Any& Index2 ) throw (css::uno::RuntimeException);
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    virtual css::uno::Any createCollectionObject(const css::uno::Any&);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif
diff --git a/sw/source/ui/vba/vbasystem.cxx b/sw/source/ui/vba/vbasystem.cxx
new file mode 100644
index 0000000..f3f5cf7
--- /dev/null
+++ b/sw/source/ui/vba/vbasystem.cxx
@@ -0,0 +1,195 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbasystem.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <ooo/vba/word/WdCursorType.hpp>
+#include <tools/diagnose_ex.h>
+#include <tools/config.hxx>
+#include <tools/string.hxx>
+#include <osl/file.hxx>
+#include <tools/urlobj.hxx>
+#include <tools/string.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+PrivateProfileStringListener::PrivateProfileStringListener( const rtl::OUString& rFileName, const ByteString& rGroupName, const ByteString& rKey )
+    :maFileName( rFileName ), maGroupName( rGroupName ), maKey( rKey )
+{
+}
+
+PrivateProfileStringListener::~PrivateProfileStringListener()
+{
+}
+
+void PrivateProfileStringListener::Initialize( const rtl::OUString& rFileName, const ByteString& rGroupName, const ByteString& rKey )
+{
+    maFileName = rFileName;
+    maGroupName = rGroupName;
+    maKey = rKey;
+}
+
+uno::Any PrivateProfileStringListener::getValueEvent()
+{
+    // get the private profile string
+    Config aCfg( maFileName );
+    aCfg.SetGroup( maGroupName );
+    rtl::OUString sValue = String( aCfg.ReadKey( maKey ), RTL_TEXTENCODING_DONTKNOW );
+
+    return uno::makeAny( sValue );
+}
+
+void PrivateProfileStringListener::setValueEvent( const css::uno::Any& value )
+{
+    // set the private profile string
+    Config aCfg( maFileName );
+    aCfg.SetGroup( maGroupName );
+
+    rtl::OUString aValue;
+    value >>= aValue;
+    aCfg.WriteKey( maKey, ByteString( aValue.getStr(), RTL_TEXTENCODING_DONTKNOW ) );
+}
+
+SwVbaSystem::SwVbaSystem( uno::Reference<uno::XComponentContext >& xContext ): SwVbaSystem_BASE( uno::Reference< XHelperInterface >(), xContext )
+{
+}
+
+SwVbaSystem::~SwVbaSystem()
+{
+}
+
+sal_Int32 SAL_CALL
+SwVbaSystem::getCursor() throw (uno::RuntimeException)
+{
+    sal_Int32 nPointerStyle =  getPointerStyle( getCurrentWordDoc(mxContext) );
+
+    switch( nPointerStyle )
+    {
+        case POINTER_ARROW:
+            return word::WdCursorType::wdCursorNorthwestArrow;
+        case POINTER_NULL:
+            return word::WdCursorType::wdCursorNormal;
+        case POINTER_WAIT:
+            return word::WdCursorType::wdCursorWait;
+        case POINTER_TEXT:
+            return word::WdCursorType::wdCursorIBeam;
+        default:
+            return word::WdCursorType::wdCursorNormal;
+    }
+}
+
+void SAL_CALL
+SwVbaSystem::setCursor( sal_Int32 _cursor ) throw (uno::RuntimeException)
+{
+    try
+    {
+        switch( _cursor )
+        {
+            case word::WdCursorType::wdCursorNorthwestArrow:
+            {
+                const Pointer& rPointer( POINTER_ARROW );
+                setCursorHelper( getCurrentWordDoc(mxContext), rPointer, sal_False );
+                break;
+            }
+            case word::WdCursorType::wdCursorWait:
+            {
+                const Pointer& rPointer( static_cast< PointerStyle >( POINTER_WAIT ) );
+                //It will set the edit window, toobar and statusbar's mouse pointer.
+                setCursorHelper( getCurrentWordDoc(mxContext), rPointer, sal_True );
+                break;
+            }
+            case word::WdCursorType::wdCursorIBeam:
+            {
+                const Pointer& rPointer( static_cast< PointerStyle >( POINTER_TEXT ) );
+                //It will set the edit window, toobar and statusbar's mouse pointer.
+                setCursorHelper( getCurrentWordDoc( mxContext ), rPointer, sal_True );
+                break;
+            }
+            case word::WdCursorType::wdCursorNormal:
+            {
+                const Pointer& rPointer( POINTER_NULL );
+                setCursorHelper( getCurrentWordDoc( mxContext ), rPointer, sal_False );
+                break;
+            }
+            default:
+                throw uno::RuntimeException( rtl::OUString(
+                        RTL_CONSTASCII_USTRINGPARAM("Unknown value for Cursor pointer")), uno::Reference< uno::XInterface >() );
+                // TODO: isn't this a flaw in the API? It should be allowed to throw an
+                // IllegalArgumentException, or so
+        }
+    }
+    catch( const uno::Exception& )
+    {
+        DBG_UNHANDLED_EXCEPTION();
+    }
+}
+
+uno::Any SAL_CALL
+SwVbaSystem::PrivateProfileString( const rtl::OUString& rFilename, const rtl::OUString& rSection, const rtl::OUString& rKey ) throw ( uno::RuntimeException )
+{
+    if( rFilename.getLength() == 0 )
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Failed to access document from shell" ) ), uno::Reference< uno::XInterface >() );
+
+    // FIXME: need to detect whether it is a relative file path
+    // we need to detect if this is a URL, if not then assume its a file path
+    rtl::OUString sFileUrl;
+    INetURLObject aObj;
+    aObj.SetURL( rFilename );
+    bool bIsURL = aObj.GetProtocol() != INET_PROT_NOT_VALID;
+    if ( bIsURL )
+        sFileUrl = rFilename;
+    else
+        osl::FileBase::getFileURLFromSystemPath( rFilename, sFileUrl);
+
+    ByteString aGroupName = ByteString( rSection.getStr(), RTL_TEXTENCODING_DONTKNOW);
+    ByteString aKey = ByteString( rKey.getStr(), RTL_TEXTENCODING_DONTKNOW);
+    maPrivateProfileStringListener.Initialize( sFileUrl, aGroupName, aKey );
+
+    return uno::makeAny( uno::Reference< XPropValue > ( new ScVbaPropValue( &maPrivateProfileStringListener ) ) );
+}
+
+rtl::OUString&
+SwVbaSystem::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaSystem") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaSystem::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.System" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbasystem.hxx b/sw/source/ui/vba/vbasystem.hxx
new file mode 100644
index 0000000..f510ed1
--- /dev/null
+++ b/sw/source/ui/vba/vbasystem.hxx
@@ -0,0 +1,75 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbasystem.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_SYSTEM_HXX
+#define SW_VBA_SYSTEM_HXX
+
+#include <ooo/vba/word/XSystem.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <vbahelper/vbapropvalue.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XSystem > SwVbaSystem_BASE;
+
+class PrivateProfileStringListener : public PropListener
+{
+private:
+    rtl::OUString maFileName;
+    ByteString maGroupName;
+    ByteString  maKey;
+public:
+    PrivateProfileStringListener(){};
+    PrivateProfileStringListener( const rtl::OUString& rFileName, const ByteString& rGroupName, const ByteString& rKey );
+    virtual ~PrivateProfileStringListener();
+    void Initialize( const rtl::OUString& rFileName, const ByteString& rGroupName, const ByteString& rKey );
+
+    //PropListener
+    virtual void setValueEvent( const css::uno::Any& value );
+    virtual css::uno::Any getValueEvent();
+};
+
+class SwVbaSystem : public SwVbaSystem_BASE
+{
+private:
+    PrivateProfileStringListener maPrivateProfileStringListener;
+
+public:
+    SwVbaSystem( css::uno::Reference< css::uno::XComponentContext >& m_xContext );
+    virtual ~SwVbaSystem();
+
+    // XSystem
+    virtual sal_Int32 SAL_CALL getCursor() throw ( css::uno::RuntimeException );
+    virtual void SAL_CALL setCursor( sal_Int32 _cursor ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL PrivateProfileString( const rtl::OUString& rFilename, const rtl::OUString& rSection, const rtl::OUString& rKey ) throw ( css::uno::RuntimeException );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_SYSTEM_HXX */
diff --git a/sw/source/ui/vba/vbatable.cxx b/sw/source/ui/vba/vbatable.cxx
new file mode 100644
index 0000000..ba0fe8d
--- /dev/null
+++ b/sw/source/ui/vba/vbatable.cxx
@@ -0,0 +1,96 @@
+#include "vbatable.hxx"
+#include "vbarange.hxx"
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include <com/sun/star/view/XSelectionSupplier.hpp>
+#include <com/sun/star/text/XTextTable.hpp>
+#include <com/sun/star/text/XTextTablesSupplier.hpp>
+#include <com/sun/star/table/XTableRows.hpp>
+#include <com/sun/star/container/XNamed.hpp>
+#include "vbaborders.hxx"
+#include "vbapalette.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaTable::SwVbaTable(  const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rDocument, const  uno::Reference< css::text::XTextTable >& xTextTable) throw ( uno::RuntimeException ) : SwVbaTable_BASE( rParent, rContext ), mxTextDocument( rDocument )
+{
+    mxTextTable.set( xTextTable, uno::UNO_QUERY_THROW );
+}
+
+uno::Reference< word::XRange > SAL_CALL
+SwVbaTable::Range(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    return new SwVbaRange( mxParent, mxContext, mxTextDocument, mxTextTable->getAnchor() );
+}
+
+void SAL_CALL
+SwVbaTable::Select(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel( mxTextDocument, uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XController > xController = xModel->getCurrentController();
+
+    uno::Reference< text::XTextViewCursorSupplier > xViewCursorSupplier( xController, uno::UNO_QUERY_THROW );
+    uno::Reference< view::XSelectionSupplier > xSelectionSupplier( xController, uno::UNO_QUERY_THROW );
+
+    // set the view cursor to the start of the table.
+    xSelectionSupplier->select( uno::makeAny( mxTextTable ) );
+
+    // go to the end of the table and span the view
+    uno::Reference< text::XTextViewCursor > xCursor = xViewCursorSupplier->getViewCursor();
+    xCursor->gotoEnd(sal_True);
+
+}
+
+void SAL_CALL
+SwVbaTable::Delete(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    uno::Reference< table::XTableRows > xRows( mxTextTable->getRows() );
+    xRows->removeByIndex( 0, xRows->getCount() );
+}
+
+uno::Reference< word::XRange > SAL_CALL
+SwVbaTable::ConvertToText( const uno::Any& /*Separator*/, const uno::Any& /*NestedTables*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // #FIXME the helper api uses the dreaded dispatch mechanism, holding off
+    // implementation while I look for alternative solution
+    throw uno::RuntimeException();
+}
+
+rtl::OUString SAL_CALL
+SwVbaTable::getName() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XNamed > xNamed( mxTextTable, uno::UNO_QUERY_THROW );
+    return xNamed->getName();
+}
+
+uno::Any SAL_CALL
+SwVbaTable::Borders( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< table::XCellRange > aCellRange( mxTextTable, uno::UNO_QUERY_THROW );
+    VbaPalette aPalette;
+    uno::Reference< XCollection > xCol( new SwVbaBorders( this, mxContext, aCellRange, aPalette ) );
+    if ( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+// XHelperInterface
+rtl::OUString&
+SwVbaTable::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaTable") );
+    return sImplName;
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaTable::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Table" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbatable.hxx b/sw/source/ui/vba/vbatable.hxx
new file mode 100644
index 0000000..7d913d7
--- /dev/null
+++ b/sw/source/ui/vba/vbatable.hxx
@@ -0,0 +1,28 @@
+#ifndef SW_VBA_TABLE_HXX
+#define SW_VBA_TABLE_HXX
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XTextTable.hpp>
+#include <ooo/vba/word/XRange.hpp>
+#include <ooo/vba/word/XTable.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XTable > SwVbaTable_BASE;
+
+class SwVbaTable : public SwVbaTable_BASE
+{
+    css::uno::Reference< css::text::XTextDocument > mxTextDocument;
+    css::uno::Reference< css::text::XTextTable > mxTextTable;
+public:
+    SwVbaTable( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext, const css::uno::Reference< css::text::XTextDocument >& rDocument, const css::uno::Reference< css::text::XTextTable >& xTextTable) throw ( css::uno::RuntimeException);
+    css::uno::Reference< css::text::XTextDocument > getDocument() { return mxTextDocument; };
+    virtual css::uno::Reference< ::ooo::vba::word::XRange > SAL_CALL Range(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual void SAL_CALL Select(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual void SAL_CALL Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual css::uno::Reference< ::ooo::vba::word::XRange > SAL_CALL ConvertToText( const css::uno::Any& Separator, const css::uno::Any& NestedTables ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getName( ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Borders( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif
diff --git a/sw/source/ui/vba/vbatables.cxx b/sw/source/ui/vba/vbatables.cxx
new file mode 100644
index 0000000..f9fafb3
--- /dev/null
+++ b/sw/source/ui/vba/vbatables.cxx
@@ -0,0 +1,130 @@
+#include "vbatables.hxx"
+#include "vbatable.hxx"
+#include "vbarange.hxx"
+#include <com/sun/star/text/XTextTable.hpp>
+#include <com/sun/star/text/XTextTablesSupplier.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <comphelper/componentcontext.hxx>
+
+using namespace ::ooo::vba;
+using namespace css;
+
+uno::Reference< container::XIndexAccess > lcl_getTables( const uno::Reference< frame::XModel >& xDoc )
+{
+    uno::Reference< container::XIndexAccess > xTables;
+    uno::Reference< text::XTextTablesSupplier > xSupp( xDoc, uno::UNO_QUERY );
+    if ( xSupp.is() )
+        xTables.set( xSupp->getTextTables(), uno::UNO_QUERY_THROW );
+    return xTables;
+}
+
+uno::Any lcl_createTable( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xDocument, const uno::Any& aSource )
+{
+    uno::Reference< text::XTextTable > xTextTable( aSource, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextDocument > xTextDocument( xDocument, uno::UNO_QUERY_THROW );
+    uno::Reference< word::XTable > xTable( new SwVbaTable( xParent, xContext, xTextDocument, xTextTable ) );
+    return uno::makeAny( xTable );
+}
+
+typedef ::cppu::WeakImplHelper1< css::container::XEnumeration > EnumBase;
+
+class TableEnumerationImpl : public EnumBase
+{
+    uno::Reference< XHelperInterface > mxParent;
+    uno::Reference< uno::XComponentContext > mxContext;
+    uno::Reference< frame::XModel > mxDocument;
+    uno::Reference< container::XIndexAccess > mxIndexAccess;
+    sal_Int32 mnCurIndex;
+public:
+    TableEnumerationImpl(  const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xDocument, const uno::Reference< container::XIndexAccess >& xIndexAccess ) : mxParent( xParent ), mxContext( xContext ), mxDocument( xDocument ), mxIndexAccess( xIndexAccess ), mnCurIndex(0)
+    {
+    }
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mnCurIndex < mxIndexAccess->getCount() );
+    }
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasMoreElements() )
+            throw container::NoSuchElementException();
+        return lcl_createTable( mxParent, mxContext, mxDocument, mxIndexAccess->getByIndex( mnCurIndex++ ) );
+    }
+
+};
+
+SwVbaTables::SwVbaTables( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext > & xContext, const uno::Reference< frame::XModel >& xDocument ) : SwVbaTables_BASE( xParent, xContext , lcl_getTables( xDocument ) ), mxDocument( xDocument )
+{
+}
+
+
+uno::Reference< word::XTable > SAL_CALL
+SwVbaTables::Add( const uno::Reference< word::XRange >& Range, const uno::Any& NumRows, const uno::Any& NumColumns, const uno::Any& /*DefaultTableBehavior*/, const uno::Any& /*AutoFitBehavior*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    sal_Int32 nCols = 0;
+    sal_Int32 nRows = 0;
+    SwVbaRange* pVbaRange = dynamic_cast< SwVbaRange* >( Range.get() );
+    // Preconditions
+    if ( !( pVbaRange && ( NumRows >>= nRows ) && ( NumColumns >>= nCols ) ) )
+        throw uno::RuntimeException(); // #FIXME better exception??
+    if ( nCols <= 0 || nRows <= 0 )
+        throw uno::RuntimeException(); // #FIXME better exception??
+
+    uno::Reference< frame::XModel > xModel( pVbaRange->getDocument(), uno::UNO_QUERY_THROW );
+    uno::Reference< lang::XMultiServiceFactory > xMsf( xModel, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextRange > xTextRange = pVbaRange->getXTextRange();
+
+    uno::Reference< text::XTextTable > xTable;
+    xTable.set( xMsf->createInstance( rtl::OUString::createFromAscii("com.sun.star.text.TextTable") ), uno::UNO_QUERY_THROW );
+/*
+    comphelper::ComponentContext aCtx( xMsf );
+    if ( !aCtx.createComponent( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextTable") ), xTable ) );
+        throw uno::RuntimeException(); // #FIXME better exception??
+*/
+    xTable->initialize( nRows, nCols );
+    uno::Reference< text::XText > xText = xTextRange->getText();
+    uno::Reference< text::XTextContent > xContext( xTable, uno::UNO_QUERY_THROW );
+
+    xText->insertTextContent( xTextRange, xContext, true );
+    uno::Reference< word::XTable > xVBATable( new SwVbaTable( mxParent, mxContext,  pVbaRange->getDocument(), xTable ) );
+    return xVBATable;
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+SwVbaTables::createEnumeration() throw (uno::RuntimeException)
+{
+    return new TableEnumerationImpl( mxParent, mxContext, mxDocument, m_xIndexAccess );
+}
+
+// ScVbaCollectionBaseImpl
+uno::Any
+SwVbaTables::createCollectionObject( const uno::Any& aSource )
+{
+    return lcl_createTable( mxParent, mxContext, mxDocument, aSource );
+}
+
+// XHelperInterface
+rtl::OUString&
+SwVbaTables::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaTables") );
+    return sImplName;
+}
+
+// XEnumerationAccess
+uno::Type SAL_CALL
+SwVbaTables::getElementType() throw (uno::RuntimeException)
+{
+    return  word::XTable::static_type(0);
+}
+
+uno::Sequence<rtl::OUString>
+SwVbaTables::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Tables" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbatables.hxx b/sw/source/ui/vba/vbatables.hxx
new file mode 100644
index 0000000..a789337
--- /dev/null
+++ b/sw/source/ui/vba/vbatables.hxx
@@ -0,0 +1,28 @@
+#ifndef SW_VBA_TABLES_HXX
+#define SW_VBA_TABLES_HXX
+
+#include <ooo/vba/word/XTables.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
+
+
+typedef CollTestImplHelper< ov::word::XTables > SwVbaTables_BASE;
+
+class SwVbaTables : public SwVbaTables_BASE
+{
+    css::uno::Reference< css::frame::XModel > mxDocument;
+public:
+    SwVbaTables( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::frame::XModel >& xDocument );
+    // XTables
+    virtual css::uno::Reference< ov::word::XTable > SAL_CALL Add( const css::uno::Reference< ::ooo::vba::word::XRange >& Range, const css::uno::Any& NumRows, const css::uno::Any& NumColumns, const css::uno::Any& DefaultTableBehavior, const css::uno::Any& AutoFitBehavior ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    // ScVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif
diff --git a/sw/source/ui/vba/vbatemplate.cxx b/sw/source/ui/vba/vbatemplate.cxx
new file mode 100644
index 0000000..21fc8e0
--- /dev/null
+++ b/sw/source/ui/vba/vbatemplate.cxx
@@ -0,0 +1,105 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbatemplate.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include "wordvbahelper.hxx"
+#include "vbaautotextentry.hxx"
+#include <comphelper/processfactory.hxx>
+#include <com/sun/star/text/XAutoTextContainer.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaTemplate::SwVbaTemplate( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext, const css::uno::Reference< css::frame::XModel >& rModel, const rtl::OUString& rName )
+    : SwVbaTemplate_BASE( rParent, rContext ), mxModel( rModel ), msName( rName )
+{
+}
+
+
+SwVbaTemplate::~SwVbaTemplate()
+{
+}
+
+rtl::OUString
+SwVbaTemplate::getName() throw ( css::uno::RuntimeException )
+{
+    return msName;
+}
+
+uno::Any SAL_CALL
+SwVbaTemplate::AutoTextEntries( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< lang::XMultiServiceFactory > xMgr = comphelper::getProcessServiceFactory();
+    uno::Reference< text::XAutoTextContainer > xAutoTextContainer( xMgr->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.AutoTextContainer") ) ), uno::UNO_QUERY_THROW );
+
+    // the default template is "Normal.dot" in Word.
+    rtl::OUString sGroup( RTL_CONSTASCII_USTRINGPARAM("Normal") );
+    sal_Int32 nIndex = msName.lastIndexOf( sal_Unicode('.') );
+    if( nIndex > 0 )
+    {
+        sGroup = msName.copy( 0, msName.lastIndexOf( sal_Unicode('.') ) );
+       // OSL_TRACE("SwVbaTemplate::AutoTextEntries: %s", rtl::OUStringToOString( sGroup, RTL_TEXTENCODING_UTF8 ).getStr() );
+    }
+
+    uno::Reference< container::XIndexAccess > xGroup;
+    if( xAutoTextContainer->hasByName( sGroup ) )
+    {
+        xGroup.set( xAutoTextContainer->getByName( sGroup ), uno::UNO_QUERY_THROW );
+    }
+    else
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Auto Text Entry doesn't exist") ), uno::Reference< uno::XInterface >() );
+        //xGroup.set( xAutoTextContainer->insertNewByName( sGroup ), uno::UNO_QUERY_THROW );
+    }
+
+    uno::Reference< XCollection > xCol( new SwVbaAutoTextEntries( this, mxContext, xGroup ) );
+    if( index.hasValue() )
+        return xCol->Item( index, uno::Any() );
+    return uno::makeAny( xCol );
+}
+
+rtl::OUString&
+SwVbaTemplate::getServiceImplName()
+{
+        static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaTemplate") );
+        return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaTemplate::getServiceNames()
+{
+        static uno::Sequence< rtl::OUString > aServiceNames;
+        if ( aServiceNames.getLength() == 0 )
+        {
+                aServiceNames.realloc( 1 );
+                aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Template" ) );
+        }
+        return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbatemplate.hxx b/sw/source/ui/vba/vbatemplate.hxx
new file mode 100644
index 0000000..90c06cb
--- /dev/null
+++ b/sw/source/ui/vba/vbatemplate.hxx
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_TEMPLATE_HXX
+#define SW_VBA_TEMPLATE_HXX
+
+#include <ooo/vba/word/XTemplate.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XTemplate > SwVbaTemplate_BASE;
+
+class SwVbaTemplate : public SwVbaTemplate_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    rtl::OUString msName;
+public:
+    SwVbaTemplate( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext,
+        const css::uno::Reference< css::frame::XModel >& rModel, const rtl::OUString& );
+    virtual ~SwVbaTemplate();
+
+   // XTemplate
+    virtual rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL AutoTextEntries( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_TEMPLATE_HXX */
diff --git a/sw/source/ui/vba/vbavariable.cxx b/sw/source/ui/vba/vbavariable.cxx
new file mode 100644
index 0000000..c734ceb
--- /dev/null
+++ b/sw/source/ui/vba/vbavariable.cxx
@@ -0,0 +1,107 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbavariable.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/beans/PropertyValue.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+SwVbaVariable::SwVbaVariable( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext,
+    const uno::Reference< beans::XPropertyAccess >& rUserDefined, const rtl::OUString& rName ) throw ( uno::RuntimeException ) :
+    SwVbaVariable_BASE( rParent, rContext ), mxUserDefined( rUserDefined ), maName( rName )
+{
+}
+
+SwVbaVariable::~SwVbaVariable()
+{
+}
+
+rtl::OUString SAL_CALL
+SwVbaVariable::getName() throw ( css::uno::RuntimeException )
+{
+    return maName;
+}
+
+void SAL_CALL
+SwVbaVariable::setName( const rtl::OUString& ) throw ( css::uno::RuntimeException )
+{
+    throw uno::RuntimeException( rtl::OUString(
+            RTL_CONSTASCII_USTRINGPARAM(" Fail to set name")), uno::Reference< uno::XInterface >() );
+}
+
+uno::Any SAL_CALL
+SwVbaVariable::getValue() throw ( css::uno::RuntimeException )
+{
+    uno::Reference< beans::XPropertySet > xProp( mxUserDefined, uno::UNO_QUERY_THROW );
+    return xProp->getPropertyValue( maName );
+}
+
+void SAL_CALL
+SwVbaVariable::setValue( const uno::Any& rValue ) throw ( css::uno::RuntimeException )
+{
+    // FIXME: fail to set the value if the new type of vaue is differenct from the original one.
+    uno::Reference< beans::XPropertySet > xProp( mxUserDefined, uno::UNO_QUERY_THROW );
+    xProp->setPropertyValue( maName, rValue );
+}
+
+sal_Int32 SAL_CALL
+SwVbaVariable::getIndex() throw ( css::uno::RuntimeException )
+{
+    const uno::Sequence< beans::PropertyValue > props = mxUserDefined->getPropertyValues();
+    for (sal_Int32 i = 0; i < props.getLength(); ++i)
+    {
+        if( maName.equals( props[i].Name ) )
+            return i+1;
+    }
+
+    return 0;
+}
+
+rtl::OUString&
+SwVbaVariable::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaVariable") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaVariable::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Variable" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbavariable.hxx b/sw/source/ui/vba/vbavariable.hxx
new file mode 100644
index 0000000..e802161
--- /dev/null
+++ b/sw/source/ui/vba/vbavariable.hxx
@@ -0,0 +1,62 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_VARIABLE_HXX
+#define SW_VBA_VARIABLE_HXX
+
+#include <ooo/vba/word/XVariable.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/beans/XPropertyAccess.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XVariable > SwVbaVariable_BASE;
+
+class SwVbaVariable : public SwVbaVariable_BASE
+{
+private:
+    css::uno::Reference< css::beans::XPropertyAccess > mxUserDefined;
+    rtl::OUString maName;
+
+public:
+    SwVbaVariable( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext,
+        const css::uno::Reference< css::beans::XPropertyAccess >& rUserDefined, const rtl::OUString& rName ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaVariable();
+
+   // XVariable
+    virtual rtl::OUString SAL_CALL getName() throw ( css::uno::RuntimeException );
+    virtual void SAL_CALL setName( const rtl::OUString& ) throw ( css::uno::RuntimeException );
+    virtual css::uno::Any SAL_CALL getValue() throw ( css::uno::RuntimeException );
+    virtual void SAL_CALL setValue( const css::uno::Any& rValue ) throw ( css::uno::RuntimeException );
+    virtual sal_Int32 SAL_CALL getIndex() throw ( css::uno::RuntimeException );
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_VARIABLE_HXX */
diff --git a/sw/source/ui/vba/vbavariables.cxx b/sw/source/ui/vba/vbavariables.cxx
new file mode 100644
index 0000000..fbe0460
--- /dev/null
+++ b/sw/source/ui/vba/vbavariables.cxx
@@ -0,0 +1,105 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbavariables.hxx"
+#include "vbavariable.hxx"
+#include <com/sun/star/beans/XPropertyContainer.hpp>
+#include <com/sun/star/beans/PropertyAttribute.hpp>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+uno::Reference< container::XIndexAccess > createVariablesAccess( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< beans::XPropertyAccess >& xUserDefined ) throw ( uno::RuntimeException )
+{
+    // FIXME: the performance is poor?
+    XNamedObjectCollectionHelper< word::XVariable >::XNamedVec mVariables;
+    const uno::Sequence< beans::PropertyValue > props = xUserDefined->getPropertyValues();
+    sal_Int32 nCount = props.getLength();
+    mVariables.reserve( nCount );
+    for( sal_Int32 i=0; i < nCount; i++ )
+        mVariables.push_back( uno::Reference< word::XVariable > ( new SwVbaVariable( xParent, xContext, xUserDefined, props[i].Name ) ) );
+
+    uno::Reference< container::XIndexAccess > xVariables( new XNamedObjectCollectionHelper< word::XVariable >( mVariables ) );
+    return xVariables;
+}
+
+SwVbaVariables::SwVbaVariables( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< ::com::sun::star::uno::XComponentContext > & xContext, const uno::Reference< beans::XPropertyAccess >& rUserDefined ): SwVbaVariables_BASE( xParent, xContext, createVariablesAccess( xParent, xContext, rUserDefined ) ),  mxUserDefined( rUserDefined )
+{
+}
+// XEnumerationAccess
+uno::Type
+SwVbaVariables::getElementType() throw (uno::RuntimeException)
+{
+    return word::XVariable::static_type(0);
+}
+uno::Reference< container::XEnumeration >
+SwVbaVariables::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumerationAccess > xEnumerationAccess( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    return xEnumerationAccess->createEnumeration();
+}
+
+uno::Any
+SwVbaVariables::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource;
+}
+
+uno::Any SAL_CALL
+SwVbaVariables::Add( const rtl::OUString& rName, const uno::Any& rValue ) throw (uno::RuntimeException)
+{
+    uno::Any aValue;
+    if( rValue.hasValue() )
+        aValue = rValue;
+    else
+        aValue <<= rtl::OUString();
+    uno::Reference< beans::XPropertyContainer > xPropertyContainer( mxUserDefined, uno::UNO_QUERY_THROW );
+    xPropertyContainer->addProperty( rName, beans::PropertyAttribute::MAYBEVOID | beans::PropertyAttribute::REMOVEABLE, aValue );
+
+    return uno::makeAny( uno::Reference< word::XVariable >( new SwVbaVariable( getParent(), mxContext, mxUserDefined, rName ) ) );
+}
+
+rtl::OUString&
+SwVbaVariables::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaVariables") );
+    return sImplName;
+}
+
+css::uno::Sequence<rtl::OUString>
+SwVbaVariables::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > sNames;
+    if ( sNames.getLength() == 0 )
+    {
+        sNames.realloc( 1 );
+        sNames[0] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Variables") );
+    }
+    return sNames;
+}
diff --git a/sw/source/ui/vba/vbavariables.hxx b/sw/source/ui/vba/vbavariables.hxx
new file mode 100644
index 0000000..533760a
--- /dev/null
+++ b/sw/source/ui/vba/vbavariables.hxx
@@ -0,0 +1,64 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_VARIABLES_HXX
+#define SW_VBA_VARIABLES_HXX
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/word/XVariables.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/beans/XPropertyAccess.hpp>
+
+typedef CollTestImplHelper< ooo::vba::word::XVariables > SwVbaVariables_BASE;
+
+class SwVbaVariables : public SwVbaVariables_BASE
+{
+private:
+    css::uno::Reference< css::beans::XPropertyAccess > mxUserDefined;
+
+public:
+    SwVbaVariables( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > & xContext, const css::uno::Reference< css::beans::XPropertyAccess >& rUserDefined );
+    virtual ~SwVbaVariables() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // SwVbaVariables_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+
+    // XVariables
+    virtual css::uno::Any SAL_CALL Add( const rtl::OUString& rName, const css::uno::Any& rValue ) throw (css::uno::RuntimeException);
+};
+
+#endif /* SW_VBA_VARIABLES_HXX */
diff --git a/sw/source/ui/vba/vbaview.cxx b/sw/source/ui/vba/vbaview.cxx
new file mode 100644
index 0000000..8336752
--- /dev/null
+++ b/sw/source/ui/vba/vbaview.cxx
@@ -0,0 +1,424 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaview.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <tools/diagnose_ex.h>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/view/XViewSettingsSupplier.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextTable.hpp>
+#include <com/sun/star/table/XCellRange.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XFootnotesSupplier.hpp>
+#include <com/sun/star/text/XEndnotesSupplier.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/container/XEnumeration.hpp>
+#include <com/sun/star/frame/XController.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <ooo/vba/word/WdSpecialPane.hpp>
+#include <ooo/vba/word/WdViewType.hpp>
+#include <ooo/vba/word/WdSeekView.hpp>
+
+#include "wordvbahelper.hxx"
+#include "vbaheaderfooterhelper.hxx"
+#include <view.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+static const sal_Int32 DEFAULT_BODY_DISTANCE = 500;
+
+SwVbaView::SwVbaView( const uno::Reference< ooo::vba::XHelperInterface >& rParent, const uno::Reference< uno::XComponentContext >& rContext,
+    const uno::Reference< frame::XModel >& rModel ) throw ( uno::RuntimeException ) :
+    SwVbaView_BASE( rParent, rContext ), mxModel( rModel )
+{
+    uno::Reference< frame::XController > xController = mxModel->getCurrentController();
+
+    uno::Reference< text::XTextViewCursorSupplier > xTextViewCursorSupp( xController, uno::UNO_QUERY_THROW );
+    mxViewCursor = xTextViewCursorSupp->getViewCursor();
+
+    uno::Reference< view::XViewSettingsSupplier > xViewSettingSupp( xController, uno::UNO_QUERY_THROW );
+    mxViewSettings.set( xViewSettingSupp->getViewSettings(), uno::UNO_QUERY_THROW );
+}
+
+SwVbaView::~SwVbaView()
+{
+}
+
+::sal_Int32 SAL_CALL
+SwVbaView::getSeekView() throw (css::uno::RuntimeException)
+{
+    // FIXME: if the view cursor is in table, field, section and frame
+    // handle if the cursor is in table
+    uno::Reference< text::XText > xCurrentText = mxViewCursor->getText();
+    uno::Reference< beans::XPropertySet > xCursorProps( mxViewCursor, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextContent > xTextContent;
+    while( xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextTable") ) ) >>= xTextContent )
+    {
+        xCurrentText = xTextContent->getAnchor()->getText();
+        xCursorProps.set( xCurrentText->createTextCursor(), uno::UNO_QUERY_THROW );
+    }
+    uno::Reference< lang::XServiceInfo > xServiceInfo( xCurrentText, uno::UNO_QUERY_THROW );
+    rtl::OUString aImplName = xServiceInfo->getImplementationName();
+    if( aImplName.equalsAscii("SwXBodyText") )
+    {
+        return word::WdSeekView::wdSeekMainDocument;
+    }
+    else if( aImplName.equalsAscii("SwXHeadFootText") )
+    {
+        if( HeaderFooterHelper::isHeader( mxModel, xCurrentText ) )
+        {
+            if( HeaderFooterHelper::isFirstPageHeader( mxModel, xCurrentText ) )
+                return word::WdSeekView::wdSeekFirstPageHeader;
+            else if( HeaderFooterHelper::isEvenPagesHeader( mxModel, xCurrentText ) )
+                return word::WdSeekView::wdSeekEvenPagesHeader;
+            else
+                return word::WdSeekView::wdSeekPrimaryHeader;
+        }
+        else
+        {
+            if( HeaderFooterHelper::isFirstPageFooter( mxModel, xCurrentText ) )
+                return word::WdSeekView::wdSeekFirstPageFooter;
+            else if( HeaderFooterHelper::isEvenPagesFooter( mxModel, xCurrentText ) )
+                return word::WdSeekView::wdSeekEvenPagesFooter;
+            else
+                return word::WdSeekView::wdSeekPrimaryFooter;
+        }
+    }
+    else if( aImplName.equalsAscii("SwXFootnote") )
+    {
+        if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.Endnote") ) ) )
+            return word::WdSeekView::wdSeekEndnotes;
+        else
+            return word::WdSeekView::wdSeekFootnotes;
+    }
+
+    return word::WdSeekView::wdSeekMainDocument;
+}
+
+void SAL_CALL
+SwVbaView::setSeekView( ::sal_Int32 _seekview ) throw (css::uno::RuntimeException)
+{
+    // FIXME: save the current cursor position, if the cursor is in the main
+    // document, so we can jump back to this position, if the macro sets
+    // the ViewMode back to wdSeekMainDocument
+
+    // if( _seekview == getSeekView() )
+    //    return;
+
+    switch( _seekview )
+    {
+        case word::WdSeekView::wdSeekFirstPageFooter:
+        case word::WdSeekView::wdSeekFirstPageHeader:
+        case word::WdSeekView::wdSeekCurrentPageFooter:
+        case word::WdSeekView::wdSeekCurrentPageHeader:
+        case word::WdSeekView::wdSeekPrimaryFooter:
+        case word::WdSeekView::wdSeekPrimaryHeader:
+        case word::WdSeekView::wdSeekEvenPagesFooter:
+        case word::WdSeekView::wdSeekEvenPagesHeader:
+        {
+            // need to test
+            mxViewCursor->gotoRange( getHFTextRange( _seekview ), sal_False );
+            break;
+        }
+        case word::WdSeekView::wdSeekFootnotes:
+        {
+            uno::Reference< text::XFootnotesSupplier > xFootnotesSupp( mxModel, uno::UNO_QUERY_THROW );
+            uno::Reference< container::XIndexAccess > xFootnotes( xFootnotesSupp->getFootnotes(), uno::UNO_QUERY_THROW );
+            if( xFootnotes->getCount() > 0 )
+            {
+                uno::Reference< text::XText > xText( xFootnotes->getByIndex(0), uno::UNO_QUERY_THROW );
+                mxViewCursor->gotoRange( xText->getStart(), sal_False );
+            }
+            else
+            {
+                DebugHelper::exception( SbERR_NO_ACTIVE_OBJECT, rtl::OUString() );
+            }
+            break;
+        }
+        case word::WdSeekView::wdSeekEndnotes:
+        {
+            uno::Reference< text::XEndnotesSupplier > xEndnotesSupp( mxModel, uno::UNO_QUERY_THROW );
+            uno::Reference< container::XIndexAccess > xEndnotes( xEndnotesSupp->getEndnotes(), uno::UNO_QUERY_THROW );
+            if( xEndnotes->getCount() > 0 )
+            {
+                uno::Reference< text::XText > xText( xEndnotes->getByIndex(0), uno::UNO_QUERY_THROW );
+                mxViewCursor->gotoRange( xText->getStart(), sal_False );
+            }
+            else
+            {
+                DebugHelper::exception( SbERR_NO_ACTIVE_OBJECT, rtl::OUString() );
+            }
+            break;
+        }
+        case word::WdSeekView::wdSeekMainDocument:
+        {
+            uno::Reference< text::XTextDocument > xTextDocument( mxModel, uno::UNO_QUERY_THROW );
+            uno::Reference< text::XText > xText = xTextDocument->getText();
+            mxViewCursor->gotoRange( getFirstObjectPosition( xText ), sal_False );
+            break;
+        }
+    }
+}
+
+::sal_Int32 SAL_CALL
+SwVbaView::getSplitSpecial() throw (css::uno::RuntimeException)
+{
+    return word::WdSpecialPane::wdPaneNone;
+}
+
+void SAL_CALL
+SwVbaView::setSplitSpecial( ::sal_Int32/* _splitspecial */) throw (css::uno::RuntimeException)
+{
+    // not support in Writer
+}
+
+::sal_Bool SAL_CALL
+SwVbaView::getTableGridLines() throw (css::uno::RuntimeException)
+{
+    sal_Bool bShowTableGridLine = sal_False;
+    mxViewSettings->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ShowTableBoundaries"))) >>= bShowTableGridLine;
+    return bShowTableGridLine;
+}
+
+void SAL_CALL
+SwVbaView::setTableGridLines( ::sal_Bool _tablegridlines ) throw (css::uno::RuntimeException)
+{
+    mxViewSettings->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ShowTableBoundaries")), uno::makeAny( _tablegridlines ) );
+}
+
+::sal_Int32 SAL_CALL
+SwVbaView::getType() throw (css::uno::RuntimeException)
+{
+    // FIXME: handle wdPrintPreview type
+    sal_Bool bOnlineLayout = sal_False;
+    mxViewSettings->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ShowOnlineLayout"))) >>= bOnlineLayout;
+    return bOnlineLayout ? word::WdViewType::wdWebView : word::WdViewType::wdPrintView;
+}
+
+void SAL_CALL
+SwVbaView::setType( ::sal_Int32 _type ) throw (css::uno::RuntimeException)
+{
+    // FIXME: handle wdPrintPreview type
+    switch( _type )
+    {
+        case word::WdViewType::wdPrintView:
+        case word::WdViewType::wdNormalView:
+        {
+            mxViewSettings->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ShowOnlineLayout")), uno::makeAny( sal_False ) );
+            break;
+        }
+        case word::WdViewType::wdWebView:
+        {
+            mxViewSettings->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ShowOnlineLayout")), uno::makeAny( sal_True ) );
+            break;
+        }
+        case word::WdViewType::wdPrintPreview:
+        {
+            PrintPreviewHelper( uno::Any(),word::getView( mxModel ) );
+            break;
+        }
+        default:
+            DebugHelper::exception( SbERR_NOT_IMPLEMENTED, rtl::OUString() );
+
+    }
+}
+
+uno::Reference< text::XTextRange > SwVbaView::getHFTextRange( sal_Int32 nType ) throw (uno::RuntimeException)
+{
+    mxModel->lockControllers();
+
+    rtl::OUString aPropIsOn;
+    rtl::OUString aPropIsShared;
+    rtl::OUString aPropBodyDistance;
+    rtl::OUString aPropText;
+
+    switch( nType )
+    {
+        case word::WdSeekView::wdSeekCurrentPageFooter:
+        case word::WdSeekView::wdSeekFirstPageFooter:
+        case word::WdSeekView::wdSeekPrimaryFooter:
+        case word::WdSeekView::wdSeekEvenPagesFooter:
+        {
+            aPropIsOn = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn") );
+            aPropIsShared = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsShared") );
+            aPropBodyDistance = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterBodyDistance") );
+            aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterText") );
+            break;
+        }
+        case word::WdSeekView::wdSeekCurrentPageHeader:
+        case word::WdSeekView::wdSeekFirstPageHeader:
+        case word::WdSeekView::wdSeekPrimaryHeader:
+        case word::WdSeekView::wdSeekEvenPagesHeader:
+        {
+            aPropIsOn = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn") );
+            aPropIsShared = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsShared") );
+            aPropBodyDistance = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderBodyDistance") );
+            aPropText = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderText") );
+            break;
+        }
+    }
+
+    uno::Reference< text::XPageCursor > xPageCursor( mxViewCursor, uno::UNO_QUERY_THROW );
+
+    if( nType == word::WdSeekView::wdSeekFirstPageFooter
+        || nType == word::WdSeekView::wdSeekFirstPageHeader )
+    {
+        xPageCursor->jumpToFirstPage();
+    }
+
+    uno::Reference< style::XStyle > xStyle;
+    uno::Reference< text::XText > xText;
+    switch( nType )
+    {
+        case word::WdSeekView::wdSeekPrimaryFooter:
+        case word::WdSeekView::wdSeekPrimaryHeader:
+        case word::WdSeekView::wdSeekEvenPagesFooter:
+        case word::WdSeekView::wdSeekEvenPagesHeader:
+        {
+            // The primary header is the first header of the section.
+            // If the header is not shared between odd and even pages
+            // the odd page's header is the primary header. If the
+            // first page's header is different from the rest of the
+            // document, it is NOT the primary header ( the next primary
+            // header would be on page 3 )
+            // The even pages' header is only available if the header is
+            // not shared and the current style is applied to a page with
+            // an even page number
+            uno::Reference< beans::XPropertySet > xCursorProps( mxViewCursor, uno::UNO_QUERY_THROW );
+            rtl::OUString aPageStyleName;
+            xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyleName"))) >>= aPageStyleName;
+            if( aPageStyleName.equalsAscii("First Page") )
+            {
+                // go to the beginning of where the next style is used
+                sal_Bool hasNextPage = sal_False;
+                xStyle = word::getCurrentPageStyle( mxModel );
+                do
+                {
+                    hasNextPage = xPageCursor->jumpToNextPage();
+                }
+                while( hasNextPage && ( xStyle == word::getCurrentPageStyle( mxModel ) ) );
+
+                if( !hasNextPage )
+                    DebugHelper::exception( SbERR_BAD_ACTION, rtl::OUString() );
+            }
+            break;
+        }
+        default:
+        {
+            break;
+        }
+    }
+
+    xStyle = word::getCurrentPageStyle( mxModel );
+    uno::Reference< beans::XPropertySet > xPageProps( xStyle, uno::UNO_QUERY_THROW );
+    sal_Bool isOn = sal_False;
+    xPageProps->getPropertyValue( aPropIsOn ) >>= isOn;
+    sal_Bool isShared =  sal_False;
+    xPageProps->getPropertyValue( aPropIsShared ) >>= isShared;
+    if( !isOn )
+    {
+        xPageProps->setPropertyValue( aPropIsOn, uno::makeAny( sal_True ) );
+        xPageProps->setPropertyValue( aPropBodyDistance, uno::makeAny( DEFAULT_BODY_DISTANCE ) );
+    }
+    if( !isShared )
+    {
+        rtl::OUString aTempPropText = aPropText;
+        if( nType == word::WdSeekView::wdSeekEvenPagesFooter
+            || nType == word::WdSeekView::wdSeekEvenPagesHeader )
+        {
+            aTempPropText += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Left") );
+        }
+        else
+        {
+            aTempPropText += rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Right") );
+        }
+        xText.set( xPageProps->getPropertyValue( aTempPropText), uno::UNO_QUERY_THROW );
+    }
+    else
+    {
+        if( nType == word::WdSeekView::wdSeekEvenPagesFooter
+            || nType == word::WdSeekView::wdSeekEvenPagesHeader )
+        {
+            DebugHelper::exception( SbERR_BAD_ACTION, rtl::OUString() );
+        }
+        xText.set( xPageProps->getPropertyValue( aPropText ), uno::UNO_QUERY_THROW );
+    }
+
+    mxModel->unlockControllers();
+    if( !xText.is() )
+    {
+        DebugHelper::exception( SbERR_INTERNAL_ERROR, rtl::OUString() );
+    }
+    uno::Reference< text::XTextRange > xTextRange = getFirstObjectPosition( xText );
+    return xTextRange;
+}
+
+uno::Reference< text::XTextRange > SwVbaView::getFirstObjectPosition( const uno::Reference< text::XText >& xText ) throw (uno::RuntimeException)
+{
+    // if the first object is table, get the position of first cell
+    uno::Reference< text::XTextRange > xTextRange;
+    uno::Reference< container::XEnumerationAccess > xParaAccess( xText, uno::UNO_QUERY_THROW );
+    uno::Reference< container::XEnumeration> xParaEnum = xParaAccess->createEnumeration();
+    if( xParaEnum->hasMoreElements() )
+    {
+        uno::Reference< lang::XServiceInfo > xServiceInfo( xParaEnum->nextElement(), uno::UNO_QUERY_THROW );
+        if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextTable") ) ) )
+        {
+            uno::Reference< table::XCellRange > xCellRange( xServiceInfo, uno::UNO_QUERY_THROW );
+            uno::Reference< text::XText> xFirstCellText( xCellRange->getCellByPosition(0, 0), uno::UNO_QUERY_THROW );
+            xTextRange = xFirstCellText->getStart();
+        }
+    }
+    if( !xTextRange.is() )
+        xTextRange = xText->getStart();
+    return xTextRange;
+}
+
+rtl::OUString&
+SwVbaView::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaView") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaView::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.View" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbaview.hxx b/sw/source/ui/vba/vbaview.hxx
new file mode 100644
index 0000000..c8fb262
--- /dev/null
+++ b/sw/source/ui/vba/vbaview.hxx
@@ -0,0 +1,71 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_VIEW_HXX
+#define SW_VBA_VIEW_HXX
+
+#include <ooo/vba/word/XView.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XTextRange.hpp>
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XView > SwVbaView_BASE;
+
+class SwVbaView : public SwVbaView_BASE
+{
+private:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::text::XTextViewCursor > mxViewCursor;
+    css::uno::Reference< css::beans::XPropertySet > mxViewSettings;
+
+    css::uno::Reference< css::text::XTextRange > getHFTextRange( sal_Int32 nType ) throw (css::uno::RuntimeException);
+    css::uno::Reference< css::text::XTextRange > getFirstObjectPosition( const css::uno::Reference< css::text::XText >& xText ) throw (css::uno::RuntimeException);
+
+public:
+    SwVbaView( const css::uno::Reference< ooo::vba::XHelperInterface >& rParent, const css::uno::Reference< css::uno::XComponentContext >& rContext,
+        const css::uno::Reference< css::frame::XModel >& rModel ) throw ( css::uno::RuntimeException );
+    virtual ~SwVbaView();
+
+   // XView
+    virtual ::sal_Int32 SAL_CALL getSeekView() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSeekView( ::sal_Int32 _seekview ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getSplitSpecial() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSplitSpecial( ::sal_Int32 _splitspecial ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getTableGridLines() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTableGridLines( ::sal_Bool _tablegridlines ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setType( ::sal_Int32 _type ) throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif /* SW_VBA_VIEW_HXX */
diff --git a/sw/source/ui/vba/vbawindow.cxx b/sw/source/ui/vba/vbawindow.cxx
new file mode 100644
index 0000000..31ac8ac
--- /dev/null
+++ b/sw/source/ui/vba/vbawindow.cxx
@@ -0,0 +1,116 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbawindow.cxx,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/helperdecl.hxx>
+#include "vbawindow.hxx"
+#include "vbaglobals.hxx"
+#include "vbadocument.hxx"
+#include "vbaview.hxx"
+#include "vbapanes.hxx"
+#include "vbapane.hxx"
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+SwVbaWindow::SwVbaWindow( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : WindowImpl_BASE( xParent, xContext, xModel )
+{
+}
+
+SwVbaWindow::SwVbaWindow( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & xContext )
+        : WindowImpl_BASE( args, xContext )
+{
+}
+
+void
+SwVbaWindow::Activate() throw (css::uno::RuntimeException)
+{
+    SwVbaDocument document( uno::Reference< XHelperInterface >( Application(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
+
+    document.Activate();
+}
+
+void
+SwVbaWindow::Close( const uno::Any& SaveChanges, const uno::Any& RouteDocument ) throw (uno::RuntimeException)
+{
+    // FIXME: it is incorrect when there are more than 1 windows
+    SwVbaDocument document( uno::Reference< XHelperInterface >( Application(), uno::UNO_QUERY_THROW ), mxContext, m_xModel );
+    uno::Any FileName;
+    document.Close(SaveChanges, FileName, RouteDocument );
+}
+
+uno::Any SAL_CALL
+SwVbaWindow::getView() throw (uno::RuntimeException)
+{
+    return uno::makeAny( uno::Reference< word::XView >( new SwVbaView( this,  mxContext, m_xModel ) ) );
+}
+
+void SAL_CALL SwVbaWindow::setView( const uno::Any& _view ) throw (uno::RuntimeException)
+{
+    sal_Int32 nType = 0;
+    if( _view >>= nType )
+    {
+        SwVbaView view( this,  mxContext, m_xModel );
+        view.setType( nType );
+    }
+}
+
+uno::Any SAL_CALL
+SwVbaWindow::Panes( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCollection > xPanes( new SwVbaPanes( this,  mxContext, m_xModel ) );
+    if(  aIndex.getValueTypeClass() == uno::TypeClass_VOID )
+        return uno::makeAny( xPanes );
+
+    return uno::Any( xPanes->Item( aIndex, uno::Any() ) );
+}
+
+uno::Any SAL_CALL
+SwVbaWindow::ActivePane() throw (uno::RuntimeException)
+{
+    return uno::makeAny( uno::Reference< word::XPane >( new SwVbaPane( this,  mxContext, m_xModel ) ) );
+}
+
+rtl::OUString&
+SwVbaWindow::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaWindow") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaWindow::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.Window" ) );
+    }
+    return aServiceNames;
+}
diff --git a/sw/source/ui/vba/vbawindow.hxx b/sw/source/ui/vba/vbawindow.hxx
new file mode 100644
index 0000000..b423ad9
--- /dev/null
+++ b/sw/source/ui/vba/vbawindow.hxx
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbawindow.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_WINDOW_HXX
+#define SW_VBA_WINDOW_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/word/XWindow.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbawindowbase.hxx>
+
+typedef cppu::ImplInheritanceHelper1< VbaWindowBase, ov::word::XWindow > WindowImpl_BASE;
+
+class SwVbaWindow : public WindowImpl_BASE
+{
+public:
+    SwVbaWindow( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::frame::XModel >& xModel );
+    SwVbaWindow( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext > const& xContext );
+
+
+    // Attributes
+    virtual css::uno::Any SAL_CALL getView() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setView( const css::uno::Any& _view ) throw (css::uno::RuntimeException);
+    // Methods
+    virtual void SAL_CALL Activate(  ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Close( const css::uno::Any& SaveChanges, const css::uno::Any& RouteDocument ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Panes( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL ActivePane() throw (css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif //SW_VBA_WINDOW_HXX
diff --git a/sw/source/ui/vba/vbawrapformat.cxx b/sw/source/ui/vba/vbawrapformat.cxx
new file mode 100644
index 0000000..3222337
--- /dev/null
+++ b/sw/source/ui/vba/vbawrapformat.cxx
@@ -0,0 +1,258 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbawrapformat.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbawrapformat.hxx"
+#include <ooo/vba/word/WdWrapSideType.hpp>
+#include <ooo/vba/word/WdWrapType.hpp>
+#include <com/sun/star/text/WrapTextMode.hpp>
+#include <vbahelper/vbahelper.hxx>
+#include <vbahelper/helperdecl.hxx>
+
+using namespace ooo::vba;
+using namespace com::sun::star;
+
+SwVbaWrapFormat::SwVbaWrapFormat( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape > xShape ) : SwVbaWrapFormat_BASE( xParent, xContext ), m_xShape( xShape ), mnWrapFormatType( 0 ), mnSide( word::WdWrapSideType::wdWrapBoth )
+{
+    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
+}
+
+SwVbaWrapFormat::SwVbaWrapFormat( uno::Sequence< uno::Any > const& aArgs, uno::Reference< uno::XComponentContext >const& xContext ) : SwVbaWrapFormat_BASE( getXSomethingFromArgs< XHelperInterface >( aArgs, 0 ), xContext ), m_xShape( getXSomethingFromArgs< drawing::XShape >( aArgs, 1, false ) ), mnWrapFormatType( 0 ), mnSide( word::WdWrapSideType::wdWrapBoth )
+{
+    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
+}
+
+void SwVbaWrapFormat::makeWrap() throw (uno::RuntimeException)
+{
+    text::WrapTextMode eTextMode = text::WrapTextMode_NONE;
+    if( mnSide == word::WdWrapSideType::wdWrapLeft )
+    {
+        eTextMode = text::WrapTextMode_LEFT;
+    }
+    else if(  mnSide == word::WdWrapSideType::wdWrapRight )
+    {
+        eTextMode = text::WrapTextMode_RIGHT;
+    }
+    else if( mnSide == word::WdWrapSideType::wdWrapBoth ||
+            mnSide == word::WdWrapSideType::wdWrapLargest )
+    {
+        switch( mnWrapFormatType )
+        {
+            case word::WdWrapType::wdWrapNone:
+            case word::WdWrapType::wdWrapThrough:
+            {
+                eTextMode = text::WrapTextMode_THROUGHT;
+                break;
+            }
+            case word::WdWrapType::wdWrapInline:
+            case word::WdWrapType::wdWrapTopBottom:
+            {
+                eTextMode = text::WrapTextMode_NONE;
+                break;
+            }
+            case word::WdWrapType::wdWrapSquare:
+            {
+                eTextMode = text::WrapTextMode_PARALLEL;
+                m_xPropertySet->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SurroundContour") ), uno::makeAny( sal_False ) );
+                break;
+            }
+            case word::WdWrapType::wdWrapTight:
+            {
+                eTextMode = text::WrapTextMode_PARALLEL;
+                m_xPropertySet->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SurroundContour") ), uno::makeAny( sal_True ) );
+                break;
+            }
+            default:
+            {
+                DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+            }
+        }
+    }
+    m_xPropertySet->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextWrap") ), uno::makeAny( eTextMode ) );
+}
+
+::sal_Int32 SAL_CALL SwVbaWrapFormat::getType() throw (uno::RuntimeException)
+{
+    sal_Int32 nType = word::WdWrapType::wdWrapSquare;
+    text::WrapTextMode eTextMode;
+    m_xPropertySet->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextWrap") )) >>= eTextMode;
+    switch( eTextMode )
+    {
+        case text::WrapTextMode_NONE:
+        {
+            nType = word::WdWrapType::wdWrapTopBottom;
+            break;
+        }
+        case text::WrapTextMode_THROUGHT:
+        {
+            nType = word::WdWrapType::wdWrapNone;
+            break;
+        }
+        case text::WrapTextMode_PARALLEL:
+        {
+            sal_Bool bContour = sal_False;
+            m_xPropertySet->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("SurroundContour") )) >>= bContour;
+            if( bContour )
+                nType = word::WdWrapType::wdWrapTight;
+            else
+                nType = word::WdWrapType::wdWrapSquare;
+            break;
+        }
+        case text::WrapTextMode_DYNAMIC:
+        case text::WrapTextMode_LEFT:
+        case text::WrapTextMode_RIGHT:
+        {
+            nType = word::WdWrapType::wdWrapThrough;
+            break;
+        }
+        default:
+        {
+            nType = word::WdWrapType::wdWrapSquare;
+        }
+    }
+    return nType;
+}
+
+void SAL_CALL SwVbaWrapFormat::setType( ::sal_Int32 _type ) throw (uno::RuntimeException)
+{
+    mnWrapFormatType = _type;
+    makeWrap();
+}
+
+::sal_Int32 SAL_CALL SwVbaWrapFormat::getSide() throw (uno::RuntimeException)
+{
+    sal_Int32 nSide = word::WdWrapSideType::wdWrapBoth;
+    text::WrapTextMode eTextMode;
+    m_xPropertySet->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TextWrap") )) >>= eTextMode;
+    switch( eTextMode )
+    {
+        case text::WrapTextMode_LEFT:
+        {
+            nSide = word::WdWrapSideType::wdWrapLeft;
+            break;
+        }
+        case text::WrapTextMode_RIGHT:
+        {
+            nSide = word::WdWrapSideType::wdWrapRight;
+            break;
+        }
+        default:
+        {
+            nSide = word::WdWrapSideType::wdWrapBoth;
+        }
+    }
+    return nSide;
+}
+
+void SAL_CALL SwVbaWrapFormat::setSide( ::sal_Int32 _side ) throw (uno::RuntimeException)
+{
+    mnSide = _side;
+    makeWrap();
+}
+
+float SwVbaWrapFormat::getDistance( const rtl::OUString& sName ) throw (uno::RuntimeException)
+{
+    sal_Int32 nDistance = 0;
+    m_xPropertySet->getPropertyValue( sName ) >>= nDistance;
+    return static_cast< float >( Millimeter::getInPoints( nDistance ) );
+}
+
+void SwVbaWrapFormat::setDistance( const rtl::OUString& sName, float _distance ) throw (uno::RuntimeException)
+{
+    sal_Int32 nDistance = Millimeter::getInHundredthsOfOneMillimeter( _distance );
+    m_xPropertySet->setPropertyValue( sName, uno::makeAny( nDistance ) );
+}
+
+float SAL_CALL SwVbaWrapFormat::getDistanceTop() throw (uno::RuntimeException)
+{
+    return getDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin") ) );
+}
+
+void SAL_CALL SwVbaWrapFormat::setDistanceTop( float _distancetop ) throw (uno::RuntimeException)
+{
+    setDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin") ), _distancetop );
+}
+
+float SAL_CALL SwVbaWrapFormat::getDistanceBottom() throw (uno::RuntimeException)
+{
+    return getDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin") ) );
+}
+
+void SAL_CALL SwVbaWrapFormat::setDistanceBottom( float _distancebottom ) throw (uno::RuntimeException)
+{
+    setDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin") ), _distancebottom );
+}
+
+float SAL_CALL SwVbaWrapFormat::getDistanceLeft() throw (uno::RuntimeException)
+{
+    return getDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin") ) );
+}
+
+void SAL_CALL SwVbaWrapFormat::setDistanceLeft( float _distanceleft ) throw (uno::RuntimeException)
+{
+    setDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin") ), _distanceleft );
+}
+
+float SAL_CALL SwVbaWrapFormat::getDistanceRight() throw (uno::RuntimeException)
+{
+    return getDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin") ) );
+}
+
+void SAL_CALL SwVbaWrapFormat::setDistanceRight( float _distanceright ) throw (uno::RuntimeException)
+{
+    setDistance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin") ), _distanceright );
+}
+
+rtl::OUString&
+SwVbaWrapFormat::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("SwVbaWrapFormat") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+SwVbaWrapFormat::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.WrapFormat" ) );
+    }
+    return aServiceNames;
+}
+
+namespace wrapformat
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::vba_service_class_<SwVbaWrapFormat, sdecl::with_args<true> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "SwVbaWrapFormat",
+    "ooo.vba.word.WrapFormat" );
+}
diff --git a/sw/source/ui/vba/vbawrapformat.hxx b/sw/source/ui/vba/vbawrapformat.hxx
new file mode 100644
index 0000000..e14f031
--- /dev/null
+++ b/sw/source/ui/vba/vbawrapformat.hxx
@@ -0,0 +1,73 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbafillformat.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_VBA_XWRAPFORMAT_HXX
+#define SW_VBA_XWRAPFORMAT_HXX
+
+#include <com/sun/star/drawing/XShape.hpp>
+#include <ooo/vba/word/XWrapFormat.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::word::XWrapFormat > SwVbaWrapFormat_BASE;
+
+class SwVbaWrapFormat : public SwVbaWrapFormat_BASE
+{
+private:
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+    sal_Int32 mnWrapFormatType;
+    sal_Int32 mnSide;
+
+private:
+    void makeWrap() throw (css::uno::RuntimeException);
+    float getDistance( const rtl::OUString& sName ) throw (css::uno::RuntimeException);
+    void setDistance( const rtl::OUString& sName, float _distance ) throw (css::uno::RuntimeException);
+
+public:
+    SwVbaWrapFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape > xShape );
+    SwVbaWrapFormat(  css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& xContext );
+
+    virtual ::sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setType( ::sal_Int32 _type ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getSide() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSide( ::sal_Int32 _side ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getDistanceTop() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDistanceTop( float _distancetop ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getDistanceBottom() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDistanceBottom( float _distancebottom ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getDistanceLeft() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDistanceLeft( float _distanceleft ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getDistanceRight() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDistanceRight( float _distanceright ) throw (css::uno::RuntimeException);
+
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif//SW_VBA_XWRAPFORMAT_HXX
diff --git a/sw/source/ui/vba/wordvbahelper.cxx b/sw/source/ui/vba/wordvbahelper.cxx
new file mode 100644
index 0000000..ed2ffe9
--- /dev/null
+++ b/sw/source/ui/vba/wordvbahelper.cxx
@@ -0,0 +1,95 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.cxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <docsh.hxx>
+#include "wordvbahelper.hxx"
+#include <comphelper/processfactory.hxx>
+#include <com/sun/star/frame/XController.hpp>
+#include <com/sun/star/text/XTextViewCursorSupplier.hpp>
+#include <com/sun/star/style/XStyleFamiliesSupplier.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/lang/XUnoTunnel.hpp>
+#include <unotxdoc.hxx>
+#include <doc.hxx>
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+#define FIRST_PAGE 1;
+
+namespace ooo
+{
+namespace vba
+{
+namespace word
+{
+
+SwDocShell* getDocShell( const uno::Reference< frame::XModel>& xModel )
+{
+    uno::Reference< lang::XUnoTunnel > xTunnel( xModel, uno::UNO_QUERY_THROW );
+    SwXTextDocument* pXDoc = reinterpret_cast< SwXTextDocument * >( sal::static_int_cast< sal_IntPtr >(xTunnel->getSomething(SwXTextDocument::getUnoTunnelId())));
+    return pXDoc ? pXDoc->GetDocShell() : 0;
+}
+
+SwView* getView( const uno::Reference< frame::XModel>& xModel )
+{
+    SwDocShell* pDocShell = getDocShell( xModel );
+    return pDocShell? pDocShell->GetView() : 0;
+}
+
+uno::Reference< text::XTextViewCursor > getXTextViewCursor( const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XController > xController = xModel->getCurrentController();
+    uno::Reference< text::XTextViewCursorSupplier > xTextViewCursorSupp( xController, uno::UNO_QUERY_THROW );
+    uno::Reference< text::XTextViewCursor > xTextViewCursor = xTextViewCursorSupp->getViewCursor();
+    return xTextViewCursor;
+}
+
+uno::Reference< style::XStyle > getCurrentPageStyle( const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xCursorProps( getXTextViewCursor( xModel ), uno::UNO_QUERY_THROW );
+    rtl::OUString aPageStyleName;
+    xCursorProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyleName"))) >>= aPageStyleName;
+    uno::Reference< style::XStyleFamiliesSupplier > xSytleFamSupp( xModel, uno::UNO_QUERY_THROW );
+    uno::Reference< container::XNameAccess > xSytleFamNames( xSytleFamSupp->getStyleFamilies(), uno::UNO_QUERY_THROW );
+    uno::Reference< container::XNameAccess > xPageStyles( xSytleFamNames->getByName( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("PageStyles") ) ), uno::UNO_QUERY_THROW );
+    uno::Reference< style::XStyle > xStyle( xPageStyles->getByName( aPageStyleName ), uno::UNO_QUERY_THROW );
+
+    return xStyle;
+}
+
+sal_Int32 getPageCount( const uno::Reference< frame::XModel>& xModel ) throw (uno::RuntimeException)
+{
+    SwDocShell* pDocShell = getDocShell( xModel );
+    return pDocShell ? pDocShell->GetDoc()->GetPageCount() : 0;
+}
+
+} // word
+} //
+} //
diff --git a/sw/source/ui/vba/wordvbahelper.hxx b/sw/source/ui/vba/wordvbahelper.hxx
new file mode 100644
index 0000000..73ed7c3
--- /dev/null
+++ b/sw/source/ui/vba/wordvbahelper.hxx
@@ -0,0 +1,57 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.hxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SW_WORD_VBA_HELPER_HXX
+#define SW_WORD_VBA_HELPER_HXX
+
+#include <vbahelper/vbahelper.hxx>
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextViewCursor.hpp>
+#include <com/sun/star/text/XPageCursor.hpp>
+#include <com/sun/star/style/XStyle.hpp>
+
+class SwDocShell;
+class SwView;
+namespace ooo
+{
+    namespace vba
+    {
+    namespace word
+    {
+        //css::uno::Reference< css::frame::XModel > getCurrentDocument() throw (css::uno::RuntimeException);
+        SwDocShell* getDocShell( const css::uno::Reference< css::frame::XModel>& xModel );
+        SwView* getView( const css::uno::Reference< css::frame::XModel>& xModel );
+        css::uno::Reference< css::text::XTextViewCursor > getXTextViewCursor( const css::uno::Reference< css::frame::XModel >& xModel ) throw (css::uno::RuntimeException);
+        css::uno::Reference< css::style::XStyle > getCurrentPageStyle( const css::uno::Reference< css::frame::XModel >& xModel ) throw (css::uno::RuntimeException);
+        sal_Int32 getPageCount( const css::uno::Reference< css::frame::XModel>& xModel ) throw (css::uno::RuntimeException);
+
+} // word
+} // vba
+} // ooo
+#endif
diff --git a/sw/util/makefile.mk b/sw/util/makefile.mk
index 9278d12..5f2755b 100644
--- a/sw/util/makefile.mk
+++ b/sw/util/makefile.mk
@@ -123,6 +123,7 @@ SHL1STDLIBS+= \
     $(SALHELPERLIB) \
     $(ICUUCLIB) \
     $(I18NUTILLIB)	\
+                $(VBAHELPERLIB) \
     $(AVMEDIALIB)
 
 .IF "$(GUI)"=="WNT"
@@ -335,6 +336,40 @@ SHL4STDLIBS= \
     $(CPPUHELPERLIB) \
     $(SALLIB) \
     $(ICUUCLIB) \
+    $(BASICLIB)     \
     $(I18NUTILLIB)
 
+#target vba
+TARGET_VBA=vbaswobj
+SHL5TARGET=$(TARGET_VBA)$(DLLPOSTFIX).uno
+SHL5IMPLIB=     i$(TARGET_VBA)
+
+SHL5VERSIONMAP=$(TARGET_VBA).map
+SHL5DEF=$(MISC)$/$(SHL5TARGET).def
+DEF5NAME=$(SHL5TARGET)
+SHL5STDLIBS= \
+                $(ISWLIB) \
+                $(CPPUHELPERLIB) \
+                $(VCLLIB) \
+                $(CPPULIB) \
+                $(COMPHELPERLIB) \
+                $(SVLIB) \
+                $(UNOTOOLSLIB) \
+                $(TOOLSLIB) \
+                $(SALLIB)\
+                $(VBAHELPERLIB) \
+                $(BASICLIB)     \
+                $(SFXLIB)       \
+                $(SVXLIB)       \
+                $(SVTOOLLIB)    \
+                $(SVLLIB) \
+                $(VCLLIB) \
+                $(TKLIB) \
+                $(I18NISOLANGLIB) \
+                $(SVXCORELIB) \
+                $(SVXMSFILTERLIB) \
+
+SHL5DEPN=$(SHL1TARGETN)
+SHL5LIBS=$(SLB)$/$(TARGET_VBA).lib
+
 .INCLUDE :  target.mk
diff --git a/sw/util/vbaswobj.map b/sw/util/vbaswobj.map
new file mode 100644
index 0000000..737cddb
--- /dev/null
+++ b/sw/util/vbaswobj.map
@@ -0,0 +1,9 @@
+OOO_1.1 {
+    global:
+        component_getImplementationEnvironment;
+        component_getFactory;
+        component_writeInfo;
+
+    local:
+        *;
+};
diff --git a/vbahelper/inc/vbahelper/helperdecl.hxx b/vbahelper/inc/vbahelper/helperdecl.hxx
new file mode 100644
index 0000000..a570a0e
--- /dev/null
+++ b/vbahelper/inc/vbahelper/helperdecl.hxx
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: helperdecl.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef OOVBAAPI_SERV_DECL
+#define OOVBAAPI_SERV_DECL
+#include <comphelper/servicedecl.hxx>
+#include <ooo/vba/XHelperInterface.hpp>
+
+namespace comphelper {
+namespace service_decl {
+template <typename ImplT_, typename WithArgsT = with_args<false> >
+struct vba_service_class_ : public serviceimpl_base< detail::OwnServiceImpl<ImplT_>, WithArgsT >
+{
+    typedef serviceimpl_base< detail::OwnServiceImpl<ImplT_>, WithArgsT > baseT;
+    /** Default ctor.  Implementation class without args, expecting
+        component context as single argument.
+    */
+    vba_service_class_() : baseT() {}
+    template <typename PostProcessFuncT>
+    /** Ctor to pass a post processing function/functor.
+
+        @tpl PostProcessDefaultT let your compiler deduce this
+        @param postProcessFunc function/functor that gets the yet unacquired
+                               ImplT_ pointer returning a
+                               uno::Reference<uno::XInterface>
+    */
+    explicit vba_service_class_( PostProcessFuncT const& postProcessFunc ) : baseT( postProcessFunc ) {}
+};
+
+} // namespace service_decl
+} // namespace comphelper
+#endif
diff --git a/vbahelper/inc/vbahelper/vbaapplicationbase.hxx b/vbahelper/inc/vbahelper/vbaapplicationbase.hxx
new file mode 100644
index 0000000..547e4b2
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbaapplicationbase.hxx
@@ -0,0 +1,64 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaapplicationbase.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_APPLICATION_BASE_HXX
+#define VBA_APPLICATION_BASE_HXX
+
+#include <ooo/vba/XHelperInterface.hpp>
+#include <ooo/vba/XApplicationBase.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <sfx2/objsh.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ov::XApplicationBase > ApplicationBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaApplicationBase : public ApplicationBase_BASE
+{
+protected:
+    VbaApplicationBase( const css::uno::Reference< css::uno::XComponentContext >& xContext );
+    virtual ~VbaApplicationBase();
+
+    virtual css::uno::Reference< css::frame::XModel > getCurrentDocument() throw (css::uno::RuntimeException) = 0;
+public:
+    // XHelperInterface ( parent is itself )
+    virtual css::uno::Reference< ov::XHelperInterface > SAL_CALL getParent(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException) { return this; }
+
+    virtual sal_Bool SAL_CALL getScreenUpdating() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setScreenUpdating(sal_Bool bUpdate) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getDisplayStatusBar() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDisplayStatusBar(sal_Bool bDisplayStatusBar) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL CommandBars( const css::uno::Any& aIndex ) throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getVersion() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Run( const ::rtl::OUString& MacroName, const css::uno::Any& varg1, const css::uno::Any& varg2, const css::uno::Any& varg3, const css::uno::Any& varg4, const css::uno::Any& varg5, const css::uno::Any& varg6, const css::uno::Any& varg7, const css::uno::Any& varg8, const css::uno::Any& varg9, const css::uno::Any& varg10, const css::uno::Any& varg11, const css::uno::Any& varg12, const css::uno::Any& varg13, const css::uno::Any& varg14, const css::uno::Any& varg15, const css::uno::Any& varg16, const css::uno::Any& varg17, const css::uno::Any& varg18, const css::uno::Any& varg19, const css::uno::Any& varg20, const css::uno::Any& varg21, const css::uno::Any& varg22, const css::uno::Any& varg23, const css::uno::Any& varg24, const css::uno::Any& varg25, const css::uno::Any& varg26, const css::uno::Any& varg27, const css::uno::Any& varg28, const css::uno::Any& varg29, const css::uno::Any& varg30 ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL CentimetersToPoints( float _Centimeters ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Quit(  ) throw (::com::sun::star::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif
diff --git a/vbahelper/inc/vbahelper/vbacollectionimpl.hxx b/vbahelper/inc/vbahelper/vbacollectionimpl.hxx
new file mode 100644
index 0000000..a8903ae
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbacollectionimpl.hxx
@@ -0,0 +1,257 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacollectionimpl.hxx,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef OOVBAAPI_VBA_COLLECTION_IMPL_HXX
+#define OOVBAAPI_VBA_COLLECTION_IMPL_HXX
+
+#include <ooo/vba/XCollection.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/script/XDefaultMethod.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/container/XNamed.hpp>
+
+#include <cppuhelper/implbase3.hxx>
+#include <cppuhelper/implbase2.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+#include "vbahelper/vbahelper.hxx"
+#include "vbahelper/vbahelperinterface.hxx"
+
+#include <vector>
+
+typedef ::cppu::WeakImplHelper1< css::container::XEnumeration > EnumerationHelper_BASE;
+
+class VBAHELPER_DLLPUBLIC EnumerationHelperImpl : public EnumerationHelper_BASE
+{
+protected:
+    css::uno::Reference< css::uno::XComponentContext > m_xContext;
+    css::uno::Reference< css::container::XEnumeration > m_xEnumeration;
+public:
+
+    EnumerationHelperImpl( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XEnumeration >& xEnumeration ) throw ( css::uno::RuntimeException ) : m_xContext( xContext ),  m_xEnumeration( xEnumeration ) { }
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (css::uno::RuntimeException) { return m_xEnumeration->hasMoreElements(); }
+};
+
+// a wrapper class for a providing a XIndexAccess, XNameAccess, XEnumerationAccess impl based on providing a vector of interfaces
+// only requirement is the object needs to implement XName
+
+
+
+typedef ::cppu::WeakImplHelper3< css::container::XNameAccess, css::container::XIndexAccess, css::container::XEnumerationAccess > XNamedCollectionHelper_BASE;
+
+template< typename Ifc1 >
+class VBAHELPER_DLLPUBLIC XNamedObjectCollectionHelper : public XNamedCollectionHelper_BASE
+{
+public:
+typedef std::vector< css::uno::Reference< Ifc1 > >  XNamedVec;
+private:
+
+    class XNamedEnumerationHelper : public EnumerationHelper_BASE
+    {
+        XNamedVec mXNamedVec;
+        typename XNamedVec::iterator mIt;
+    public:
+            XNamedEnumerationHelper( const XNamedVec& sMap ) : mXNamedVec( sMap ), mIt( mXNamedVec.begin() ) {}
+
+            virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (css::uno::RuntimeException)
+            {
+            return ( mIt != mXNamedVec.end() );
+            }
+
+            virtual css::uno::Any SAL_CALL nextElement(  ) throw (css::container::NoSuchElementException, css::lang::WrappedTargetException, css::uno::RuntimeException)
+            {
+                    if ( hasMoreElements() )
+                return css::uno::makeAny( *mIt++ );
+                    throw css::container::NoSuchElementException();
+            }
+    };
+
+protected:
+    XNamedVec mXNamedVec;
+    typename XNamedVec::iterator cachePos;
+public:
+    XNamedObjectCollectionHelper( const XNamedVec& sMap ) : mXNamedVec( sMap ), cachePos(mXNamedVec.begin()) {}
+    // XElementAccess
+    virtual css::uno::Type SAL_CALL getElementType(  ) throw (css::uno::RuntimeException) { return  Ifc1::static_type(0); }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (css::uno::RuntimeException) { return ( mXNamedVec.size() > 0 ); }
+    // XNameAcess
+    virtual css::uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (css::container::NoSuchElementException, css::lang::WrappedTargetException, css::uno::RuntimeException)
+    {
+        if ( !hasByName(aName) )
+            throw css::container::NoSuchElementException();
+        return css::uno::makeAny( *cachePos );
+    }
+    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (css::uno::RuntimeException)
+    {
+        css::uno::Sequence< rtl::OUString > sNames( mXNamedVec.size() );
+        rtl::OUString* pString = sNames.getArray();
+        typename XNamedVec::iterator it = mXNamedVec.begin();
+        typename XNamedVec::iterator it_end = mXNamedVec.end();
+
+        for ( ; it != it_end; ++it, ++pString )
+        {
+            css::uno::Reference< css::container::XNamed > xName( *it, css::uno::UNO_QUERY_THROW );
+            *pString = xName->getName();
+        }
+        return sNames;
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException)
+    {
+        cachePos = mXNamedVec.begin();
+        typename XNamedVec::iterator it_end = mXNamedVec.end();
+        for ( ; cachePos != it_end; ++cachePos )
+        {
+            css::uno::Reference< css::container::XNamed > xName( *cachePos, css::uno::UNO_QUERY_THROW );
+            if ( aName.equals( xName->getName() ) )
+                break;
+        }
+        return ( cachePos != it_end );
+    }
+
+    // XElementAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (css::uno::RuntimeException) { return mXNamedVec.size(); }
+    virtual css::uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (css::lang::IndexOutOfBoundsException, css::lang::WrappedTargetException, css::uno::RuntimeException )
+    {
+        if ( Index < 0 || Index >= getCount() )
+            throw css::lang::IndexOutOfBoundsException();
+
+        return css::uno::makeAny( mXNamedVec[ Index ] );
+
+    }
+    // XEnumerationAccess
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration(  ) throw (css::uno::RuntimeException)
+    {
+        return new XNamedEnumerationHelper( mXNamedVec );
+    }
+};
+
+// including a HelperInterface implementation
+template< typename Ifc1 >
+class ScVbaCollectionBase : public InheritedHelperInterfaceImpl< Ifc1 >
+{
+typedef InheritedHelperInterfaceImpl< Ifc1 > BaseColBase;
+protected:
+    css::uno::Reference< css::container::XIndexAccess > m_xIndexAccess;
+    css::uno::Reference< css::container::XNameAccess > m_xNameAccess;
+
+    virtual css::uno::Any getItemByStringIndex( const rtl::OUString& sIndex ) throw (css::uno::RuntimeException)
+    {
+        if ( !m_xNameAccess.is() )
+            throw css::uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ScVbaCollectionBase string index access not supported by this object") ), css::uno::Reference< css::uno::XInterface >() );
+
+        return createCollectionObject( m_xNameAccess->getByName( sIndex ) );
+    }
+
+    virtual css::uno::Any getItemByIntIndex( const sal_Int32 nIndex ) throw (css::uno::RuntimeException)
+    {
+        if ( !m_xIndexAccess.is() )
+            throw css::uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ScVbaCollectionBase numeric index access not supported by this object") ), css::uno::Reference< css::uno::XInterface >() );
+        if ( nIndex <= 0 )
+        {
+            throw  css::lang::IndexOutOfBoundsException(
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(
+                "index is 0 or negative" ) ),
+                css::uno::Reference< css::uno::XInterface >() );
+        }
+        // need to adjust for vba index ( for which first element is 1 )
+        return createCollectionObject( m_xIndexAccess->getByIndex( nIndex - 1 ) );
+    }
+public:
+    ScVbaCollectionBase( const css::uno::Reference< ov::XHelperInterface >& xParent,   const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) : BaseColBase( xParent, xContext ), m_xIndexAccess( xIndexAccess ){ m_xNameAccess.set(m_xIndexAccess, css::uno::UNO_QUERY); }
+    //XCollection
+    virtual ::sal_Int32 SAL_CALL getCount() throw (css::uno::RuntimeException)
+    {
+        return m_xIndexAccess->getCount();
+    }
+
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index1, const css::uno::Any& /*not processed in this base class*/ ) throw (css::uno::RuntimeException)
+    {
+        if ( Index1.getValueTypeClass() != css::uno::TypeClass_STRING )
+        {
+            sal_Int32 nIndex = 0;
+
+            if ( ( Index1 >>= nIndex ) != sal_True )
+            {
+                rtl::OUString message;
+                message = rtl::OUString::createFromAscii(
+                    "Couldn't convert index to Int32");
+                throw  css::lang::IndexOutOfBoundsException( message,
+                    css::uno::Reference< css::uno::XInterface >() );
+            }
+            return 	getItemByIntIndex( nIndex );
+        }
+        rtl::OUString aStringSheet;
+
+        Index1 >>= aStringSheet;
+        return getItemByStringIndex( aStringSheet );
+    }
+    // XDefaultMethod
+    ::rtl::OUString SAL_CALL getDefaultMethodName(  ) throw (css::uno::RuntimeException)
+    {
+        const static rtl::OUString sName( RTL_CONSTASCII_USTRINGPARAM("Item") );
+        return sName;
+    }
+    // XEnumerationAccess
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException) = 0;
+
+    // XElementAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException) = 0;
+    // XElementAccess
+    virtual ::sal_Bool SAL_CALL hasElements() throw (css::uno::RuntimeException)
+    {
+        return ( m_xIndexAccess->getCount() > 0 );
+    }
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource ) = 0;
+
+};
+
+typedef ::cppu::WeakImplHelper1<ov::XCollection> XCollection_InterfacesBASE;
+
+typedef ScVbaCollectionBase< XCollection_InterfacesBASE > CollImplBase1;
+// compatible with the old collections ( pre XHelperInterface base class ) ( some internal objects still use this )
+class VBAHELPER_DLLPUBLIC ScVbaCollectionBaseImpl : public CollImplBase1
+{
+public:
+    ScVbaCollectionBaseImpl( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) throw( css::uno::RuntimeException ) : CollImplBase1( xParent, xContext, xIndexAccess){}
+
+};
+
+template <typename Ifc> // where Ifc must implement XCollectionTest
+class VBAHELPER_DLLPUBLIC CollTestImplHelper :  public ScVbaCollectionBase< ::cppu::WeakImplHelper1< Ifc > >
+{
+typedef ScVbaCollectionBase< ::cppu::WeakImplHelper1< Ifc >  > ImplBase1;
+
+public:
+    CollTestImplHelper( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,  const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess ) throw( css::uno::RuntimeException ) : ImplBase1( xParent, xContext, xIndexAccess ) {}
+};
+
+
+#endif //SC_VBA_COLLECTION_IMPL_HXX
diff --git a/vbahelper/inc/vbahelper/vbadialogbase.hxx b/vbahelper/inc/vbahelper/vbadialogbase.hxx
new file mode 100644
index 0000000..80d76b0
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbadialogbase.hxx
@@ -0,0 +1,54 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialog.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_DIALOG_BASE_HXX
+#define VBA_DIALOG_BASE_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/XDialogBase.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/frame/XModel.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ov::XDialogBase > VbaDialogBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaDialogBase : public VbaDialogBase_BASE
+{
+protected:
+    sal_Int32 mnIndex;
+        css::uno::Reference< css::frame::XModel > m_xModel;
+public:
+    VbaDialogBase( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::frame::XModel >& xModel, sal_Int32 nIndex ):VbaDialogBase_BASE( xParent, xContext ), mnIndex( nIndex ), m_xModel( xModel ) {}
+    virtual ~VbaDialogBase() {}
+
+    // Methods
+    virtual void SAL_CALL Show() throw (css::uno::RuntimeException);
+    virtual rtl::OUString mapIndexToName( sal_Int32 nIndex ) = 0;
+};
+
+#endif /* VBA_DIALOG_BASE_HXX */
diff --git a/vbahelper/inc/vbahelper/vbadialogsbase.hxx b/vbahelper/inc/vbahelper/vbadialogsbase.hxx
new file mode 100644
index 0000000..96b74fe
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbadialogsbase.hxx
@@ -0,0 +1,54 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialogs.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_DIALOGS_BASE_HXX
+#define VBA_DIALOGS_BASE_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/XHelperInterface.hpp>
+#include <ooo/vba/XDialogsBase.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/frame/XModel.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ov::XDialogsBase > VbaDialogsBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaDialogsBase : public VbaDialogsBase_BASE
+{
+protected:
+        css::uno::Reference< css::frame::XModel > m_xModel;
+public:
+    VbaDialogsBase( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext > &xContext, const css::uno::Reference< css::frame::XModel >& xModel ): VbaDialogsBase_BASE( xParent, xContext ), m_xModel( xModel ) {}
+    virtual ~VbaDialogsBase() {}
+
+    // XCollection
+    virtual ::sal_Int32 SAL_CALL getCount() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index ) throw (css::uno::RuntimeException);
+};
+
+#endif /* VBA_DIALOGS_BASE_HXX */
diff --git a/vbahelper/inc/vbahelper/vbadllapi.h b/vbahelper/inc/vbahelper/vbadllapi.h
new file mode 100644
index 0000000..53b8402
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbadllapi.h
@@ -0,0 +1,43 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: svldllapi.h,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef INCLUDED_VBADLLAPI_H
+#define INCLUDED_VBADLLAPI_H
+
+#include "sal/types.h"
+
+#if defined(VBAHELPER_DLLIMPLEMENTATION)
+#define VBAHELPER_DLLPUBLIC  SAL_DLLPUBLIC_EXPORT
+#else
+#define VBAHELPER_DLLPUBLIC  SAL_DLLPUBLIC_IMPORT
+#endif
+#define VBAHELPER_DLLPRIVATE SAL_DLLPRIVATE
+
+#endif /* INCLUDED_SVLDLLAPI_H */
diff --git a/vbahelper/inc/vbahelper/vbadocumentbase.hxx b/vbahelper/inc/vbahelper/vbadocumentbase.hxx
new file mode 100644
index 0000000..9c769f5
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbadocumentbase.hxx
@@ -0,0 +1,73 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_DOCUMENTBASE_HXX
+#define VBA_DOCUMENTBASE_HXX
+
+#include <com/sun/star/frame/XModel.hpp>
+#include <ooo/vba/XDocumentBase.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::XDocumentBase > VbaDocumentBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaDocumentBase : public VbaDocumentBase_BASE
+{
+protected:
+    css::uno::Reference< css::frame::XModel > mxModel;
+protected:
+    virtual css::uno::Reference< css::frame::XModel >  getModel() { return mxModel; }
+    VbaDocumentBase( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext);
+public:
+    VbaDocumentBase( 	const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,
+            css::uno::Reference< css::frame::XModel > xModel );
+    VbaDocumentBase( 	css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& xContext );
+    virtual ~VbaDocumentBase() {}
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getPath() throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getFullName() throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getSaved() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSaved( sal_Bool bSave ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual void SAL_CALL Close( const css::uno::Any &bSaveChanges,
+                                 const css::uno::Any &aFileName,
+                                 const css::uno::Any &bRouteWorkbook ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Protect( const css::uno::Any & aPassword ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Unprotect( const css::uno::Any &aPassword ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Save() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Activate() throw (css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif /* VBA_DOCUMENTBASE_HXX */
diff --git a/vbahelper/inc/vbahelper/vbadocumentsbase.hxx b/vbahelper/inc/vbahelper/vbadocumentsbase.hxx
new file mode 100644
index 0000000..59791f9
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbadocumentsbase.hxx
@@ -0,0 +1,69 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_WORKBOOKS_HXX
+#define VBA_WORKBOOKS_HXX
+
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/XDocumentsBase.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+
+typedef CollTestImplHelper< ooo::vba::XDocumentsBase > VbaDocumentsBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaDocumentsBase : public VbaDocumentsBase_BASE
+{
+public:
+    enum DOCUMENT_TYPE
+    {
+        WORD_DOCUMENT = 1,
+        EXCEL_DOCUMENT
+    };
+
+private:
+    DOCUMENT_TYPE meDocType;
+
+public:
+    VbaDocumentsBase( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, DOCUMENT_TYPE eDocType ) throw (css::uno::RuntimeException);
+    virtual ~VbaDocumentsBase() {}
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException) = 0;
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException) = 0;
+
+    // VbaDocumentsBase_BASE
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource ) = 0;
+
+    // XDocumentsBase
+    virtual css::uno::Any SAL_CALL Add() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Close(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Open( const ::rtl::OUString& Filename, const css::uno::Any& ReadOnly, const css::uno::Sequence< css::beans::PropertyValue >& rProps ) throw (css::uno::RuntimeException);
+};
+
+#endif /* SC_VBA_WORKBOOKS_HXX */
diff --git a/vbahelper/inc/vbahelper/vbafontbase.hxx b/vbahelper/inc/vbahelper/vbafontbase.hxx
new file mode 100644
index 0000000..5b0e9fc
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbafontbase.hxx
@@ -0,0 +1,98 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbafont.hxx,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBAHELPER_FONTBASE_HXX
+#define VBAHELPER_FONTBASE_HXX
+
+#include <cppuhelper/implbase1.hxx>
+
+#include <ooo/vba/XFontBase.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+// use local constants there is no need to expose these constants
+// externally. Looking at the Format->Character dialog it seem that
+// these may infact be even be calculated. Leave hardcoded for now
+// #FIXEME #TBD investigate the code for dialog mentioned above
+
+// The font baseline is not specified.
+const short NORMAL = 0;
+
+// specifies a superscripted.
+const short SUPERSCRIPT = 33;
+
+// specifies a subscripted.
+const short SUBSCRIPT = -33;
+
+// specifies a hight of superscripted font
+ const sal_Int8 SUPERSCRIPTHEIGHT = 58;
+
+// specifies a hight of subscripted font
+const sal_Int8 SUBSCRIPTHEIGHT = 58;
+
+// specifies a hight of normal font
+const short NORMALHEIGHT = 100;
+
+typedef  InheritedHelperInterfaceImpl1< ov::XFontBase > VbaFontBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaFontBase : public VbaFontBase_BASE
+{
+protected:
+    css::uno::Reference< css::beans::XPropertySet > mxFont;
+    css::uno::Reference< css::container::XIndexAccess > mxPalette;
+public:
+    VbaFontBase( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xPalette, css::uno::Reference< css::beans::XPropertySet > xPropertySet ) throw ( css::uno::RuntimeException );
+    virtual ~VbaFontBase();// {}
+
+    // Attributes
+    virtual css::uno::Any SAL_CALL getSize() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSize( const css::uno::Any& _size ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getColorIndex() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setColorIndex( const css::uno::Any& _colorindex ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getBold() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setBold( const css::uno::Any& _bold ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getUnderline() throw (css::uno::RuntimeException) = 0;
+    virtual void SAL_CALL setUnderline( const css::uno::Any& _underline ) throw (css::uno::RuntimeException) = 0;
+    virtual css::uno::Any SAL_CALL getStrikethrough() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStrikethrough( const css::uno::Any& _strikethrough ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getShadow() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setShadow( const css::uno::Any& _shadow ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getItalic() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setItalic( const css::uno::Any& _italic ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getSubscript() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSubscript( const css::uno::Any& _subscript ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getSuperscript() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSuperscript( const css::uno::Any& _superscript ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setName( const css::uno::Any& _name ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getColor() throw (css::uno::RuntimeException) ;
+    virtual void SAL_CALL setColor( const css::uno::Any& _color ) throw (css::uno::RuntimeException) ;
+};
+
+#endif
diff --git a/vbahelper/inc/vbahelper/vbaglobalbase.hxx b/vbahelper/inc/vbahelper/vbaglobalbase.hxx
new file mode 100644
index 0000000..76fa460
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbaglobalbase.hxx
@@ -0,0 +1,53 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaapplicationbase.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_GLOBAL_BASE_HXX
+#define VBA_GLOBAL_BASE_HXX
+
+#include "vbahelperinterface.hxx"
+#include <ooo/vba/XGlobalsBase.hpp>
+
+typedef InheritedHelperInterfaceImpl1< ov::XGlobalsBase > Globals_BASE;
+class VBAHELPER_DLLPUBLIC VbaGlobalsBase : public Globals_BASE
+
+{
+protected:
+
+    bool hasServiceName( const rtl::OUString& serviceName );
+    void init(  const css::uno::Sequence< css::beans::PropertyValue >& aInitArgs );
+
+public:
+    VbaGlobalsBase( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const rtl::OUString& sDocCtxName );
+    virtual ~VbaGlobalsBase(){};
+    // XMultiServiceFactory
+    virtual css::uno::Reference< css::uno::XInterface > SAL_CALL createInstance( const ::rtl::OUString& aServiceSpecifier ) throw (css::uno::Exception, css::uno::RuntimeException);
+    virtual css::uno::Reference< css::uno::XInterface > SAL_CALL createInstanceWithArguments( const ::rtl::OUString& ServiceSpecifier, const css::uno::Sequence< css::uno::Any >& Arguments ) throw (css::uno::Exception, css::uno::RuntimeException);
+    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getAvailableServiceNames(  ) throw (css::uno::RuntimeException);
+};
+#endif
diff --git a/vbahelper/inc/vbahelper/vbahelper.hxx b/vbahelper/inc/vbahelper/vbahelper.hxx
new file mode 100644
index 0000000..67a68d8
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbahelper.hxx
@@ -0,0 +1,231 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.hxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef OOVBAAPI_VBA_HELPER_HXX
+#define OOVBAAPI_VBA_HELPER_HXX
+
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/beans/XIntrospectionAccess.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/script/BasicErrorException.hpp>
+#include <com/sun/star/script/XTypeConverter.hpp>
+#include <com/sun/star/lang/IllegalArgumentException.hpp>
+#include <com/sun/star/awt/XControl.hpp>
+#include <com/sun/star/awt/XDevice.hpp>
+#include <basic/sberrors.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/frame/XModel.hpp>
+#include <sfx2/dispatch.hxx>
+//#include <ooo/vba/msforms/XShape.hpp>
+#include <vcl/pointr.hxx>
+#define VBAHELPER_DLLIMPLEMENTATION
+#include <vbahelper/vbadllapi.h>
+#include <memory>
+namespace css = ::com::sun::star;
+
+namespace ooo
+{
+    namespace vba
+    {
+        template < class T >
+        css::uno::Reference< T > getXSomethingFromArgs( css::uno::Sequence< css::uno::Any > const & args, sal_Int32 nPos, bool bCanBeNull = true ) throw (css::lang::IllegalArgumentException)
+        {
+            if ( args.getLength() < ( nPos + 1) )
+                throw css::lang::IllegalArgumentException();
+            css::uno::Reference< T > aSomething( args[ nPos ], css::uno::UNO_QUERY );
+            if ( !bCanBeNull && !aSomething.is() )
+                throw css::lang::IllegalArgumentException();
+            return aSomething;
+        }
+        VBAHELPER_DLLPUBLIC SfxObjectShell* getSfxObjShell( const css::uno::Reference< css::frame::XModel >& xModel ) throw ( css::uno::RuntimeException);
+        VBAHELPER_DLLPUBLIC css::uno::Reference< css::uno::XInterface > createVBAUnoAPIService( SfxObjectShell* pShell,  const sal_Char* _pAsciiName ) throw (css::uno::RuntimeException);
+        VBAHELPER_DLLPUBLIC css::uno::Reference< css::uno::XInterface > createVBAUnoAPIServiceWithArgs( SfxObjectShell* pShell,  const sal_Char* _pAsciiName, const css::uno::Sequence< css::uno::Any >& aArgs ) throw (css::uno::RuntimeException);
+        css::uno::Reference< css::frame::XModel > getCurrentDoc( const rtl::OUString& sKey ) throw (css::uno::RuntimeException);
+        VBAHELPER_DLLPUBLIC css::uno::Reference< css::frame::XModel > getCurrentExcelDoc( const css::uno::Reference< css::uno::XComponentContext >& xContext ) throw (css::uno::RuntimeException);
+        VBAHELPER_DLLPUBLIC css::uno::Reference< css::frame::XModel > getCurrentWordDoc( const css::uno::Reference< css::uno::XComponentContext >& xContext ) throw (css::uno::RuntimeException);
+
+        VBAHELPER_DLLPUBLIC css::uno::Reference< css::beans::XIntrospectionAccess > getIntrospectionAccess( const css::uno::Any& aObject ) throw (css::uno::RuntimeException);
+        VBAHELPER_DLLPUBLIC css::uno::Reference< css::script::XTypeConverter > getTypeConverter( const css::uno::Reference< css::uno::XComponentContext >& xContext ) throw (css::uno::RuntimeException);
+
+        VBAHELPER_DLLPUBLIC void dispatchRequests (css::uno::Reference< css::frame::XModel>& xModel,rtl::OUString & aUrl) ;
+        VBAHELPER_DLLPUBLIC void dispatchRequests (css::uno::Reference< css::frame::XModel>& xModel,rtl::OUString & aUrl, css::uno::Sequence< css::beans::PropertyValue >& sProps ) ;
+        VBAHELPER_DLLPUBLIC void dispatchExecute(SfxViewShell* pView, USHORT nSlot, SfxCallMode nCall = SFX_CALLMODE_SYNCHRON );
+        VBAHELPER_DLLPUBLIC sal_Int32 OORGBToXLRGB( sal_Int32 );
+        VBAHELPER_DLLPUBLIC sal_Int32 XLRGBToOORGB( sal_Int32 );
+        VBAHELPER_DLLPUBLIC css::uno::Any OORGBToXLRGB( const css::uno::Any& );
+        VBAHELPER_DLLPUBLIC css::uno::Any XLRGBToOORGB( const css::uno::Any& );
+        // provide a NULL object that can be passed as variant so that
+        // the object when passed to IsNull will return true. aNULL
+        // contains an empty object reference
+        VBAHELPER_DLLPUBLIC const css::uno::Any& aNULL();
+        VBAHELPER_DLLPUBLIC void PrintOutHelper( SfxViewShell* pViewShell, const css::uno::Any& From, const css::uno::Any& To, const css::uno::Any& Copies, const css::uno::Any& Preview, const css::uno::Any& ActivePrinter, const css::uno::Any& PrintToFile, const css::uno::Any& Collate, const css::uno::Any& PrToFileName, sal_Bool bSelection  );
+        VBAHELPER_DLLPUBLIC void PrintPreviewHelper( const css::uno::Any& EnableChanges,  SfxViewShell* );
+
+        VBAHELPER_DLLPUBLIC rtl::OUString getAnyAsString( const css::uno::Any& pvargItem ) throw ( css::uno::RuntimeException );
+        VBAHELPER_DLLPUBLIC rtl::OUString VBAToRegexp(const rtl::OUString &rIn, bool bForLike = false); // needs to be in an uno service ( already this code is duplicated in basic )
+        VBAHELPER_DLLPUBLIC double getPixelTo100thMillimeterConversionFactor( css::uno::Reference< css::awt::XDevice >& xDevice, sal_Bool bVertical);
+        VBAHELPER_DLLPUBLIC double PointsToPixels( css::uno::Reference< css::awt::XDevice >& xDevice, double fPoints, sal_Bool bVertical);
+        VBAHELPER_DLLPUBLIC double PixelsToPoints( css::uno::Reference< css::awt::XDevice >& xDevice, double fPoints, sal_Bool bVertical);
+        VBAHELPER_DLLPUBLIC sal_Int32 getPointerStyle( const css::uno::Reference< css::frame::XModel >& );
+        VBAHELPER_DLLPUBLIC void setCursorHelper( const css::uno::Reference< css::frame::XModel >& xModel, const Pointer& rPointer, sal_Bool bOverWrite );
+        VBAHELPER_DLLPUBLIC void setDefaultPropByIntrospection( const css::uno::Any& aObj, const css::uno::Any& aValue  ) throw ( css::uno::RuntimeException );
+        VBAHELPER_DLLPUBLIC css::uno::Any getPropertyValue( const css::uno::Sequence< css::beans::PropertyValue >& aProp, const rtl::OUString& aName );
+        VBAHELPER_DLLPUBLIC sal_Bool setPropertyValue( css::uno::Sequence< css::beans::PropertyValue >& aProp, const rtl::OUString& aName, const css::uno::Any& aValue );
+
+class VBAHELPER_DLLPUBLIC Millimeter
+{
+//Factor to translate between points and hundredths of millimeters:
+private:
+    static const double factor;
+
+    double m_nMillimeter;
+
+public:
+    Millimeter();
+
+    Millimeter(double mm);
+
+    void set(double mm);
+    void setInPoints(double points) ;
+    void setInHundredthsOfOneMillimeter(double hmm);
+    double get();
+    double getInHundredthsOfOneMillimeter();
+    double getInPoints();
+    static sal_Int32 getInHundredthsOfOneMillimeter(double points);
+    static double getInPoints(int _hmm);
+};
+
+class VBAHELPER_DLLPUBLIC AbstractGeometryAttributes // probably should replace the ShapeHelper below
+{
+public:
+    virtual ~AbstractGeometryAttributes() {}
+    virtual double getLeft() = 0;
+    virtual void setLeft( double ) = 0;
+    virtual double getTop() = 0;
+    virtual void setTop( double ) = 0;
+    virtual double getHeight() = 0;
+    virtual void setHeight( double ) = 0;
+    virtual double getWidth() = 0;
+    virtual void setWidth( double ) = 0;
+};
+
+namespace msforms {
+    class XShape;
+}
+
+class VBAHELPER_DLLPUBLIC ShapeHelper
+{
+protected:
+    css::uno::Reference< css::drawing::XShape > xShape;
+public:
+    ShapeHelper( const css::uno::Reference< css::drawing::XShape >& _xShape) throw (css::script::BasicErrorException );
+
+    double getHeight();
+
+        void setHeight(double _fheight) throw ( css::script::BasicErrorException );
+
+    double getWidth();
+
+    void setWidth(double _fWidth) throw ( css::script::BasicErrorException );
+
+    double getLeft();
+
+    void setLeft(double _fLeft);
+
+    double getTop();
+
+    void setTop(double _fTop);
+};
+
+class VBAHELPER_DLLPUBLIC ConcreteXShapeGeometryAttributes : public AbstractGeometryAttributes
+{
+    std::auto_ptr< ShapeHelper > m_pShapeHelper;
+public:
+    ConcreteXShapeGeometryAttributes( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape );
+    virtual double getLeft();
+    virtual void setLeft( double nLeft );
+    virtual double getTop();
+    virtual void setTop( double nTop );
+    virtual double getHeight();
+    virtual void setHeight( double nHeight );
+    virtual double getWidth();
+    virtual void setWidth( double nWidth);
+};
+#define VBA_LEFT "PositionX"
+#define VBA_TOP "PositionY"
+class VBAHELPER_DLLPUBLIC UserFormGeometryHelper : public AbstractGeometryAttributes
+{
+
+    css::uno::Reference< css::beans::XPropertySet > mxModel;
+public:
+    UserFormGeometryHelper( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::awt::XControl >& xControl );
+    virtual double getLeft();
+    virtual void setLeft( double nLeft );
+    virtual double getTop();
+    virtual void setTop( double nTop );
+    virtual double getHeight();
+    virtual void setHeight( double nHeight );
+    virtual double getWidth();
+    virtual void setWidth( double nWidth);
+};
+
+class VBAHELPER_DLLPUBLIC ContainerUtilities
+{
+
+public:
+    static rtl::OUString getUniqueName( const css::uno::Sequence< ::rtl::OUString >&  _slist, const rtl::OUString& _sElementName, const ::rtl::OUString& _sSuffixSeparator);
+    static rtl::OUString getUniqueName( const css::uno::Sequence< rtl::OUString >& _slist, const rtl::OUString _sElementName, const rtl::OUString& _sSuffixSeparator, sal_Int32 _nStartSuffix );
+
+    static sal_Int32 FieldInList( const css::uno::Sequence< rtl::OUString >& SearchList, const rtl::OUString& SearchString );
+};
+
+// really just a a place holder to ease the porting pain
+class VBAHELPER_DLLPUBLIC DebugHelper
+{
+public:
+    static void exception( const rtl::OUString&  DetailedMessage, const css::uno::Exception& ex,  int err, const rtl::OUString& /*additionalArgument*/ ) throw( css::script::BasicErrorException );
+
+    static void exception( int err,  const rtl::OUString& additionalArgument ) throw( css::script::BasicErrorException );
+
+    static void exception( css::uno::Exception& ex ) throw( css::script::BasicErrorException );
+};
+    } // openoffice
+} // org
+
+namespace ov = ooo::vba;
+
+#ifdef DEBUG
+#  define SC_VBA_FIXME(a) OSL_TRACE( a )
+#  define SC_VBA_STUB() SC_VBA_FIXME(( "%s - stubbed\n", __FUNCTION__ ))
+#else
+#  define SC_VBA_FIXME(a)
+#  define SC_VBA_STUB()
+#endif
+
+#endif
diff --git a/vbahelper/inc/vbahelper/vbahelperinterface.hxx b/vbahelper/inc/vbahelper/vbahelperinterface.hxx
new file mode 100644
index 0000000..709bc06
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbahelperinterface.hxx
@@ -0,0 +1,121 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelperinterface.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef OOVBAAPI_VBA_HELPERINTERFACE_HXX
+#define OOVBAAPI_VBA_HELPERINTERFACE_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/XHelperInterface.hpp>
+#include <vbahelper/vbahelper.hxx>
+#include <com/sun/star/container/XNameAccess.hpp>
+
+// use this class when you have an a object like
+// interface  XAnInterface which contains XHelperInterface in its inheritance hierarchy
+// interface XAnInterface
+// {
+//     interface XHelperInterface;
+//     [attribute, string] name;
+// }
+// or
+// interface XAnInterface : XHelperInterface;
+// {
+//     [attribute, string] name;
+// }
+//
+// then this class can provide a default implementation of XHelperInterface,
+// you can use it like this
+// typedef InheritedHelperInterfaceImpl< XAnInterface > > AnInterfaceImpl_BASE;
+// class AnInterfaceImpl : public AnInterfaceImpl_BASE
+// {
+// public:
+//     AnInterface( const Reference< HelperInterface >& xParent ) : AnInterfaceImpl_BASE( xParent ) {}
+//     // implement XAnInterface methods only, no need to implement the XHelperInterface
+//     // methods
+//     virtual void setName( const OUString& );
+//     virtual OUString getName();
+// }
+//
+const ::rtl::OUString sHelperServiceName( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.HelperServiceBase" ) );
+
+template< typename Ifc1 >
+class VBAHELPER_DLLPUBLIC InheritedHelperInterfaceImpl : public Ifc1
+{
+protected:
+    css::uno::WeakReference< ov::XHelperInterface > mxParent;
+    css::uno::Reference< css::uno::XComponentContext > mxContext;
+public:
+    InheritedHelperInterfaceImpl() {}
+    InheritedHelperInterfaceImpl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext ) : mxParent( xParent ), mxContext( xContext ) {}
+    virtual rtl::OUString& getServiceImplName() = 0;
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames() = 0;
+
+    // XHelperInterface Methods
+    virtual ::sal_Int32 SAL_CALL getCreator() throw (css::script::BasicErrorException, css::uno::RuntimeException)
+    {
+        return 0x53756E4F;
+    }
+    virtual css::uno::Reference< ov::XHelperInterface > SAL_CALL getParent(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException) { return mxParent; }
+
+    virtual css::uno::Any SAL_CALL Application(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException) {
+            // The application could certainly be passed around in the context - seems
+            // to make sense
+            css::uno::Reference< css::container::XNameAccess > xNameAccess( mxContext, css::uno::UNO_QUERY_THROW );
+            return xNameAccess->getByName( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Application" ) ) );
+    }
+
+
+    // XServiceInfo Methods
+    virtual ::rtl::OUString SAL_CALL getImplementationName(  ) throw (css::uno::RuntimeException) { return getServiceImplName(); }
+    virtual ::sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw (css::uno::RuntimeException)
+    {
+        css::uno::Sequence< rtl::OUString > sServices = getSupportedServiceNames();
+        const rtl::OUString* pStart = sServices.getConstArray();
+        const rtl::OUString* pEnd = pStart + sServices.getLength();
+        for ( ; pStart != pEnd ; ++pStart )
+            if ( (*pStart).equals( ServiceName ) )
+                return sal_True;
+        return sal_False;
+    }
+    virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) throw (css::uno::RuntimeException)
+    {
+        css::uno::Sequence< rtl::OUString > aNames = getServiceNames();;
+        return aNames;
+    }
+ };
+
+template< typename Ifc1 >
+class VBAHELPER_DLLPUBLIC InheritedHelperInterfaceImpl1 : public InheritedHelperInterfaceImpl< ::cppu::WeakImplHelper1< Ifc1 > >
+
+{
+typedef InheritedHelperInterfaceImpl< ::cppu::WeakImplHelper1< Ifc1 > > Base;
+public:
+    InheritedHelperInterfaceImpl1< Ifc1 > ( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext ) : Base( xParent, xContext ) {}
+
+};
+#endif
diff --git a/vbahelper/inc/vbahelper/vbapagesetupbase.hxx b/vbahelper/inc/vbahelper/vbapagesetupbase.hxx
new file mode 100644
index 0000000..d2ad558
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbapagesetupbase.hxx
@@ -0,0 +1,70 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_PAGESETUPBASE_HXX
+#define VBA_PAGESETUPBASE_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/XPageSetupBase.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ooo::vba::XPageSetupBase > VbaPageSetupBase_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaPageSetupBase :  public VbaPageSetupBase_BASE
+{
+protected:
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::beans::XPropertySet > mxPageProps;
+    sal_Int32 mnOrientLandscape;
+    sal_Int32 mnOrientPortrait;
+
+    VbaPageSetupBase( const css::uno::Reference< ov::XHelperInterface >& xParent,
+                    const css::uno::Reference< css::uno::XComponentContext >& xContext ) throw (css::uno::RuntimeException);
+public:
+    virtual ~VbaPageSetupBase(){}
+
+    // Attribute
+    virtual double SAL_CALL getTopMargin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTopMargin( double margin ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getBottomMargin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setBottomMargin( double margin ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getRightMargin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRightMargin( double margin ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getLeftMargin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLeftMargin( double margin ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getHeaderMargin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setHeaderMargin( double margin ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getFooterMargin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setFooterMargin( double margin ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getOrientation() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setOrientation( sal_Int32 orientation ) throw (css::uno::RuntimeException);
+};
+#endif
diff --git a/vbahelper/inc/vbahelper/vbapropvalue.hxx b/vbahelper/inc/vbahelper/vbapropvalue.hxx
new file mode 100644
index 0000000..c2d2ed2
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbapropvalue.hxx
@@ -0,0 +1,60 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbapropvalue.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_PROPVALULE_HXX
+#define SC_VBA_PROPVALULE_HXX
+#include <ooo/vba/XPropValue.hpp>
+#include <cppuhelper/implbase1.hxx>
+
+#include <vbahelper/vbahelper.hxx>
+
+typedef ::cppu::WeakImplHelper1< ov::XPropValue > PropValueImpl_BASE;
+
+class VBAHELPER_DLLPUBLIC PropListener
+{
+public:
+    virtual void setValueEvent( const css::uno::Any& value ) = 0;
+    virtual css::uno::Any getValueEvent() = 0;
+};
+
+
+class VBAHELPER_DLLPUBLIC ScVbaPropValue : public PropValueImpl_BASE
+{
+    PropListener* m_pListener;
+public:
+    ScVbaPropValue( PropListener* pListener );
+
+    // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+
+    rtl::OUString SAL_CALL getDefaultPropertyName() throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+
+};
+#endif //SC_VBA_PROPVALULE_HXX
diff --git a/vbahelper/inc/vbahelper/vbashape.hxx b/vbahelper/inc/vbahelper/vbashape.hxx
new file mode 100644
index 0000000..64fdaef
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbashape.hxx
@@ -0,0 +1,118 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbashape.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_SHAPE_HXX
+#define SC_VBA_SHAPE_HXX
+
+#include <ooo/vba/office/MsoShapeType.hpp>
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/drawing/XShapes.hpp>
+#include <com/sun/star/lang/XEventListener.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <ooo/vba/msforms/XShape.hpp>
+#include <ooo/vba/msforms/XLineFormat.hpp>
+#include <cppuhelper/implbase2.hxx>
+
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef  ::cppu::WeakImplHelper2< ov::msforms::XShape, css::lang::XEventListener > ListeningShape;
+
+typedef InheritedHelperInterfaceImpl< ListeningShape > ScVbaShape_BASE;
+
+class VBAHELPER_DLLPUBLIC ScVbaShape : public ScVbaShape_BASE
+{
+private:
+protected:
+    std::auto_ptr< ov::ShapeHelper > m_pShapeHelper;
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::drawing::XShapes > m_xShapes;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+    sal_Int32 m_nType;
+    css::uno::Reference< css::frame::XModel > m_xModel;
+    css::uno::Any m_aRange;
+    virtual void addListeners();
+    virtual void removeShapeListener() throw( css::uno::RuntimeException );
+    virtual void removeShapesListener() throw( css::uno::RuntimeException );
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+public:
+    ScVbaShape( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape, const css::uno::Reference< css::drawing::XShapes >& xShapes, const css::uno::Reference< css::frame::XModel >& xModel, sal_Int32 nType ) throw ( css::lang::IllegalArgumentException );
+    ScVbaShape( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape >& xShape, const css::uno::Reference< css::frame::XModel >& xModel ) throw ( css::lang::IllegalArgumentException );
+    virtual ~ScVbaShape();
+    css::uno::Any getRange() { return m_aRange; };
+    void setRange( css::uno::Any aRange ) { m_aRange = aRange; };
+
+    static sal_Int32 getType( const css::uno::Reference< css::drawing::XShape > xShape ) throw (css::uno::RuntimeException);
+
+    // Attributes
+    virtual rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setName( const rtl::OUString& _name ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getHeight() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setHeight( double _height ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setWidth( double _width ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getLeft() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLeft( double _left ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getTop() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTop( double _top ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getZOrderPosition() throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getRotation() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRotation( double _rotation ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XLineFormat > SAL_CALL getLine() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XFillFormat > SAL_CALL getFill() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XPictureFormat > SAL_CALL getPictureFormat() throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getLockAspectRatio() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLockAspectRatio( ::sal_Bool _lockaspectratio ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getLockAnchor() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLockAnchor( ::sal_Bool _lockanchor ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getRelativeHorizontalPosition() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRelativeHorizontalPosition( ::sal_Int32 _relativehorizontalposition ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getRelativeVerticalPosition() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRelativeVerticalPosition( ::sal_Int32 _relativeverticalposition ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual css::uno::Any SAL_CALL SAL_CALL TextFrame(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL SAL_CALL WrapFormat(  ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Delete() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL ZOrder( sal_Int32 ZOrderCmd ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL IncrementRotation( double Increment ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL IncrementLeft( double Increment ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL IncrementTop( double Increment ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL ScaleHeight( double Factor, sal_Bool RelativeToOriginalSize, sal_Int32 Scale ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL ScaleWidth( double Factor, sal_Bool RelativeToOriginalSize, sal_Int32 Scale ) throw (css::uno::RuntimeException);
+    // Replace??
+    virtual void SAL_CALL Select( const css::uno::Any& Replace ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL ShapeRange( const css::uno::Any& index ) throw ( css::uno::RuntimeException );
+    // XEventListener
+    virtual void SAL_CALL disposing( const css::lang::EventObject& rEventObject ) throw( css::uno::RuntimeException );
+};
+#endif//SC_VBA_SHAPE_HXX
diff --git a/vbahelper/inc/vbahelper/vbashaperange.hxx b/vbahelper/inc/vbahelper/vbashaperange.hxx
new file mode 100644
index 0000000..712a2f1
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbashaperange.hxx
@@ -0,0 +1,89 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbashaperange.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_SHAPERANGE_HXX
+#define SC_VBA_SHAPERANGE_HXX
+
+#include <com/sun/star/drawing/XShapes.hpp>
+#include <ooo/vba/msforms/XShapeRange.hpp>
+#include <com/sun/star/drawing/XDrawPage.hpp>
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <ooo/vba/msforms/XLineFormat.hpp>
+#include <ooo/vba/msforms/XFillFormat.hpp>
+
+typedef CollTestImplHelper< ov::msforms::XShapeRange > ScVbaShapeRange_BASE;
+
+class VBAHELPER_DLLPUBLIC ScVbaShapeRange : public ScVbaShapeRange_BASE
+{
+private:
+    css::uno::Reference< css::drawing::XDrawPage > m_xDrawPage;
+    css::uno::Reference< css::drawing::XShapes > m_xShapes;
+    sal_Int32 m_nShapeGroupCount;
+protected:
+    css::uno::Reference< css::frame::XModel > m_xModel;
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    css::uno::Reference< css::drawing::XShapes > getShapes() throw (css::uno::RuntimeException) ;
+public:
+    ScVbaShapeRange( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xShapes, const css::uno::Reference< css::drawing::XDrawPage>& xDrawShape, const css::uno::Reference< css::frame::XModel >& xModel );
+
+    // Methods
+    virtual void SAL_CALL Select(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ::ooo::vba::msforms::XShape > SAL_CALL Group() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL IncrementRotation( double Increment ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL IncrementLeft( double Increment ) throw (css::uno::RuntimeException) ;
+    virtual void SAL_CALL IncrementTop( double Increment ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getHeight() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setHeight( double _height ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setWidth( double _width ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getLeft() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLeft( double _left ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getTop() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTop( double _top ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XLineFormat > SAL_CALL getLine() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XFillFormat > SAL_CALL getFill() throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getLockAspectRatio() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLockAspectRatio( ::sal_Bool _lockaspectratio ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getLockAnchor() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLockAnchor( ::sal_Bool _lockanchor ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getRelativeHorizontalPosition() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRelativeHorizontalPosition( ::sal_Int32 _relativehorizontalposition ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getRelativeVerticalPosition() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRelativeVerticalPosition( ::sal_Int32 _relativeverticalposition ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL SAL_CALL TextFrame(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL SAL_CALL WrapFormat(  ) throw (css::uno::RuntimeException);
+    //XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    // ScVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+};
+
+#endif//SC_VBA_SHAPERANGE_HXX
diff --git a/vbahelper/inc/vbahelper/vbashapes.hxx b/vbahelper/inc/vbahelper/vbashapes.hxx
new file mode 100644
index 0000000..19cbec2
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbashapes.hxx
@@ -0,0 +1,84 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbashapes.hxx,v $
+ * $Revision: 1.3.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_SHAPES_HXX
+#define SC_VBA_SHAPES_HXX
+
+#include <com/sun/star/drawing/XShapes.hpp>
+#include <com/sun/star/drawing/XDrawPage.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <ooo/vba/msforms/XShapes.hpp>
+
+#include <vbahelper/vbahelperinterface.hxx>
+
+#include <vbahelper/vbacollectionimpl.hxx>
+
+typedef CollTestImplHelper< ov::msforms::XShapes > ScVbaShapes_BASE;
+
+class VBAHELPER_DLLPUBLIC ScVbaShapes : public ScVbaShapes_BASE
+{
+private:
+    css::uno::Reference< css::drawing::XShapes > m_xShapes;
+    css::uno::Reference< css::drawing::XDrawPage > m_xDrawPage;
+    sal_Int32 m_nNewShapeCount;
+    void initBaseCollection();
+protected:
+    css::uno::Reference< css::frame::XModel > m_xModel;
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    virtual css::uno::Reference< css::container::XIndexAccess > getShapesByArrayIndices( const css::uno::Any& Index ) throw (css::uno::RuntimeException);
+    css::uno::Reference< css::drawing::XShape > createShape( rtl::OUString service ) throw (css::uno::RuntimeException);
+    css::uno::Any AddRectangle( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, css::uno::Any aRange ) throw (css::uno::RuntimeException);
+    css::uno::Any AddEllipse( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, css::uno::Any aRange ) throw (css::uno::RuntimeException);
+    css::uno::Any AddTextboxInWriter( sal_Int32 _nOrientation, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (css::uno::RuntimeException);
+    rtl::OUString createName( rtl::OUString sName );
+    css::uno::Any AddShape( const rtl::OUString& sService, const rtl::OUString& sName, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (css::uno::RuntimeException);
+    //TODO helperapi using a writer document
+    //css::awt::Point calculateTopLeftMargin( css::uno::Reference< ov::XHelperInterface > xDocument );
+
+public:
+    ScVbaShapes( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess > xShapes, const css::uno::Reference< css::frame::XModel >& xModel );
+    static void setDefaultShapeProperties( css::uno::Reference< css::drawing::XShape > xShape ) throw (css::uno::RuntimeException);
+    static void setShape_NameProperty( css::uno::Reference< css::drawing::XShape > xShape, rtl::OUString sName );
+    //XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    virtual void SAL_CALL SelectAll() throw (css::uno::RuntimeException);
+    //helper::calc
+    virtual css::uno::Any SAL_CALL AddLine( sal_Int32 StartX, sal_Int32 StartY, sal_Int32 endX, sal_Int32 endY ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL AddShape( sal_Int32 _nType, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL AddTextbox( sal_Int32 _nOrientation, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XShapeRange > SAL_CALL Range( const css::uno::Any& shapes ) throw (css::uno::RuntimeException);
+    // ScVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index1, const css::uno::Any& Index2 ) throw (css::uno::RuntimeException);
+};
+
+#endif//SC_VBA_SHAPES_HXX
diff --git a/vbahelper/inc/vbahelper/vbatextframe.hxx b/vbahelper/inc/vbahelper/vbatextframe.hxx
new file mode 100644
index 0000000..f096d67
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbatextframe.hxx
@@ -0,0 +1,70 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbatextframe.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_TEXTFRAME_HXX
+#define VBA_TEXTFRAME_HXX
+#include <ooo/vba/msforms/XTextFrame.hpp>
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ov::msforms::XTextFrame > VbaTextFrame_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaTextFrame : public VbaTextFrame_BASE
+{
+protected:
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    virtual void setAsMSObehavior();
+    sal_Int32 getMargin( rtl::OUString sMarginType );
+    void setMargin( rtl::OUString sMarginType, float fMargin );
+public:
+    VbaTextFrame( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext , css::uno::Reference< css::drawing::XShape > xShape);
+    virtual ~VbaTextFrame() {}
+    // Attributes
+    virtual sal_Bool SAL_CALL getAutoSize() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setAutoSize( sal_Bool _autosize ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getMarginBottom() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMarginBottom( float _marginbottom ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getMarginTop() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMarginTop( float _margintop ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getMarginLeft() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMarginLeft( float _marginleft ) throw (css::uno::RuntimeException);
+    virtual float SAL_CALL getMarginRight() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMarginRight( float _marginright ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual css::uno::Any SAL_CALL Characters(  ) throw (css::uno::RuntimeException);
+
+};
+
+#endif//SC_VBA_TEXTFRAME_HXX
diff --git a/vbahelper/inc/vbahelper/vbawindowbase.hxx b/vbahelper/inc/vbahelper/vbawindowbase.hxx
new file mode 100644
index 0000000..515897d
--- /dev/null
+++ b/vbahelper/inc/vbahelper/vbawindowbase.hxx
@@ -0,0 +1,66 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef VBA_WINDOWBASE_HXX
+#define VBA_WINDOWBASE_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/XWindowBase.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/awt/XDevice.hpp>
+
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1<ov::XWindowBase > WindowBaseImpl_BASE;
+
+class VBAHELPER_DLLPUBLIC VbaWindowBase : public WindowBaseImpl_BASE
+{
+protected:
+    css::uno::Reference< css::frame::XModel > m_xModel;
+public:
+    VbaWindowBase( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::frame::XModel >& xModel );
+    VbaWindowBase( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext > const& xContext );
+
+    // XWindowBase
+    virtual sal_Int32 SAL_CALL getHeight() throw (css::uno::RuntimeException) ;
+    virtual void SAL_CALL setHeight( sal_Int32 _height ) throw (css::uno::RuntimeException) ;
+    virtual sal_Int32 SAL_CALL getLeft() throw (css::uno::RuntimeException) ;
+    virtual void SAL_CALL setLeft( sal_Int32 _left ) throw (css::uno::RuntimeException) ;
+    virtual sal_Int32 SAL_CALL getTop() throw (css::uno::RuntimeException) ;
+    virtual void SAL_CALL setTop( sal_Int32 _top ) throw (css::uno::RuntimeException) ;
+    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getWidth() throw (css::uno::RuntimeException) ;
+    virtual void SAL_CALL setWidth( sal_Int32 _width ) throw (css::uno::RuntimeException) ;
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif //VBA_WINDOWBASE_HXX
diff --git a/vbahelper/prj/build.lst b/vbahelper/prj/build.lst
new file mode 100644
index 0000000..a38a6dc
--- /dev/null
+++ b/vbahelper/prj/build.lst
@@ -0,0 +1,6 @@
+vba	vbahelper	:	oovbaapi basic sfx2 svx cppuhelper vcl comphelper svtools tools sal NULL
+vba	vbahelper									usr1	-	all	  vba_mkout NULL
+#vba	vbahelper\inc								nmake	-	all	vba_inc NULL
+vba	vbahelper\source\vbahelper                        nmake	-	all	vba_vbahelper NULL
+vba	vbahelper\source\msforms                        nmake	-	all	vba_msforms NULL
+vba	vbahelper\util								nmake	-	all	vba_util vba_vbahelper vba_msforms NULL
diff --git a/vbahelper/prj/d.lst b/vbahelper/prj/d.lst
new file mode 100644
index 0000000..d7b61d1
--- /dev/null
+++ b/vbahelper/prj/d.lst
@@ -0,0 +1,27 @@
+..\%__SRC%\lib\lib*.so %_DEST%\lib%_EXT%
+..\%__SRC%\lib\lib*.dylib %_DEST%\lib%_EXT%
+..\%__SRC%\lib\ivbahelper.lib %_DEST%\lib%_EXT%\vbahelper.lib
+..\%__SRC%\lib\vbahelp*.* %_DEST%\lib%_EXT%\vba*.*
+..\%__SRC%\bin\vbahelper*.* %_DEST%\bin%_EXT%\vbahelper*.*
+..\%__SRC%\bin\msforms*.* %_DEST%\bin%_EXT%\msforms*.*
+
+mkdir: %_DEST%\inc%_EXT%\basic
+..\inc\vbahelper\vbacollectionimpl.hxx %_DEST%\inc%_EXT%\vbahelper\vbacollectionimpl.hxx
+..\inc\vbahelper\vbahelper.hxx %_DEST%\inc%_EXT%\vbahelper\vbahelper.hxx
+..\inc\vbahelper\helperdecl.hxx %_DEST%\inc%_EXT%\vbahelper\helperdecl.hxx
+..\inc\vbahelper\vbahelperinterface.hxx %_DEST%\inc%_EXT%\vbahelper\vbahelperinterface.hxx
+..\inc\vbahelper\vbaapplicationbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbaapplicationbase.hxx
+..\inc\vbahelper\vbafontbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbafontbase.hxx
+..\inc\vbahelper\vbadllapi.h %_DEST%\inc%_EXT%\vbahelper\vbadllapi.h
+..\inc\vbahelper\vbawindowbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbawindowbase.hxx
+..\inc\vbahelper\vbadocumentbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbadocumentbase.hxx
+..\inc\vbahelper\vbadocumentsbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbadocumentsbase.hxx
+..\inc\vbahelper\vbapropvalue.hxx %_DEST%\inc%_EXT%\vbahelper\vbapropvalue.hxx
+..\inc\vbahelper\vbaglobalbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbaglobalbase.hxx
+..\inc\vbahelper\vbadialogbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbadialogbase.hxx
+..\inc\vbahelper\vbadialogsbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbadialogsbase.hxx
+..\inc\vbahelper\vbashape.hxx %_DEST%\inc%_EXT%\vbahelper\vbashape.hxx
+..\inc\vbahelper\vbashapes.hxx %_DEST%\inc%_EXT%\vbahelper\vbashapes.hxx
+..\inc\vbahelper\vbatextframe.hxx %_DEST%\inc%_EXT%\vbahelper\vbatextframe.hxx
+..\inc\vbahelper\vbashaperange.hxx %_DEST%\inc%_EXT%\vbahelper\vbashaperange.hxx
+..\inc\vbahelper\vbapagesetupbase.hxx %_DEST%\inc%_EXT%\vbahelper\vbapagesetupbase.hxx
diff --git a/vbahelper/source/msforms/makefile.mk b/vbahelper/source/msforms/makefile.mk
new file mode 100644
index 0000000..5135b7e
--- /dev/null
+++ b/vbahelper/source/msforms/makefile.mk
@@ -0,0 +1,78 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: makefile.mk,v $
+#
+# $Revision: 1.45 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+
+PRJ=..$/..
+PRJNAME=vbahelper
+TARGET=msforms
+
+ENABLE_EXCEPTIONS=TRUE
+VISIBILITY_HIDDEN=TRUE
+
+# --- Settings -----------------------------------------------------
+
+.INCLUDE :  settings.mk
+
+SLOFILES=\
+    $(SLO)$/vbacontrol.obj \
+    $(SLO)$/vbacontrols.obj \
+    $(SLO)$/vbabutton.obj \
+    $(SLO)$/vbacombobox.obj \
+    $(SLO)$/vbalabel.obj \
+    $(SLO)$/vbatextbox.obj \
+    $(SLO)$/vbaradiobutton.obj \
+    $(SLO)$/vbalistbox.obj \
+    $(SLO)$/vbatogglebutton.obj \
+    $(SLO)$/vbacheckbox.obj \
+    $(SLO)$/vbaframe.obj \
+    $(SLO)$/vbascrollbar.obj \
+    $(SLO)$/vbaprogressbar.obj \
+    $(SLO)$/vbamultipage.obj \
+    $(SLO)$/vbalistcontrolhelper.obj \
+    $(SLO)$/vbaspinbutton.obj \
+    $(SLO)$/vbaimage.obj \
+    $(SLO)$/vbapages.obj \
+    $(SLO)$/vbauserform.obj \
+    $(SLO)$/service.obj \
+
+# #FIXME vbapropvalue needs to move to vbahelper
+
+# --- Targets -------------------------------------------------------
+
+.INCLUDE :  target.mk
+
+ALLTAR : \
+        $(MISC)$/$(TARGET).don \
+
+$(SLOFILES) : $(MISC)$/$(TARGET).don
+
+$(MISC)$/$(TARGET).don : $(SOLARBINDIR)$/oovbaapi.rdb
+        +$(CPPUMAKER) -O$(INCCOM)$/$(TARGET) -BUCR $(SOLARBINDIR)$/oovbaapi.rdb -X$(SOLARBINDIR)$/types.rdb && echo > $@
+        echo $@
diff --git a/vbahelper/source/msforms/service.cxx b/vbahelper/source/msforms/service.cxx
new file mode 100644
index 0000000..395256b
--- /dev/null
+++ b/vbahelper/source/msforms/service.cxx
@@ -0,0 +1,83 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: service.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "cppuhelper/implementationentry.hxx"
+#include "com/sun/star/lang/XMultiServiceFactory.hpp"
+#include "com/sun/star/registry/XRegistryKey.hpp"
+#include "comphelper/servicedecl.hxx"
+
+// =============================================================================
+// component exports
+// =============================================================================
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::uno;
+
+namespace sdecl = comphelper::service_decl;
+
+// reference service helper(s)
+namespace  controlprovider
+{
+extern sdecl::ServiceDecl const serviceDecl;
+}
+
+namespace  userform
+{
+extern sdecl::ServiceDecl const serviceDecl;
+}
+
+extern "C"
+{
+    SAL_DLLPUBLIC_EXPORT void SAL_CALL component_getImplementationEnvironment(
+        const sal_Char ** ppEnvTypeName, uno_Environment ** /*ppEnv*/ )
+    {
+        OSL_TRACE("In component_getImplementationEnv");
+        *ppEnvTypeName = CPPU_CURRENT_LANGUAGE_BINDING_NAME;
+    }
+
+    SAL_DLLPUBLIC_EXPORT sal_Bool SAL_CALL component_writeInfo(
+        lang::XMultiServiceFactory * pServiceManager, registry::XRegistryKey * pRegistryKey )
+    {
+        OSL_TRACE("In component_writeInfo");
+
+    // Component registration
+         return component_writeInfoHelper( pServiceManager, pRegistryKey,
+        controlprovider::serviceDecl, userform::serviceDecl );
+    }
+
+    SAL_DLLPUBLIC_EXPORT void * SAL_CALL component_getFactory(
+        const sal_Char * pImplName, lang::XMultiServiceFactory * pServiceManager,
+        registry::XRegistryKey * pRegistryKey )
+    {
+        OSL_TRACE("In component_getFactory for %s", pImplName );
+    void* pRet =  component_getFactoryHelper(
+            pImplName, pServiceManager, pRegistryKey, controlprovider::serviceDecl, userform::serviceDecl );
+    OSL_TRACE("Ret is 0x%x", pRet);
+    return pRet;
+    }
+}
diff --git a/vbahelper/source/msforms/vbabutton.cxx b/vbahelper/source/msforms/vbabutton.cxx
new file mode 100644
index 0000000..4c21c70
--- /dev/null
+++ b/vbahelper/source/msforms/vbabutton.cxx
@@ -0,0 +1,74 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbabutton.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbabutton.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+ScVbaButton::ScVbaButton( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaButton::getCaption() throw (css::uno::RuntimeException)
+{
+    rtl::OUString Label;
+    m_xProps->getPropertyValue( LABEL ) >>= Label;
+    return Label;
+}
+
+void SAL_CALL
+ScVbaButton::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
+}
+
+rtl::OUString&
+ScVbaButton::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaButton") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaButton::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Button" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbabutton.hxx b/vbahelper/source/msforms/vbabutton.hxx
new file mode 100644
index 0000000..48dda8b
--- /dev/null
+++ b/vbahelper/source/msforms/vbabutton.hxx
@@ -0,0 +1,51 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbabutton.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_BUTTON_HXX
+#define SC_VBA_BUTTON_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XButton.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XButton > ButtonImpl_BASE;
+
+class ScVbaButton : public ButtonImpl_BASE
+{
+public:
+    ScVbaButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
+   // Attributes
+    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif //SC_VBA_BUTTON_HXX
diff --git a/vbahelper/source/msforms/vbacheckbox.cxx b/vbahelper/source/msforms/vbacheckbox.cxx
new file mode 100644
index 0000000..cbd028a
--- /dev/null
+++ b/vbahelper/source/msforms/vbacheckbox.cxx
@@ -0,0 +1,111 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbacheckbox.hxx"
+#include <vbahelper/helperdecl.hxx>
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+const static rtl::OUString STATE( RTL_CONSTASCII_USTRINGPARAM("State") );
+ScVbaCheckbox::ScVbaCheckbox( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : CheckBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaCheckbox::getCaption() throw (css::uno::RuntimeException)
+{
+    rtl::OUString Label;
+    m_xProps->getPropertyValue( LABEL ) >>= Label;
+    return Label;
+}
+
+void SAL_CALL
+ScVbaCheckbox::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
+}
+
+uno::Any SAL_CALL
+ScVbaCheckbox::getValue() throw (css::uno::RuntimeException)
+{
+    sal_Int16 nValue = -1;
+    m_xProps->getPropertyValue( STATE ) >>= nValue;
+    if( nValue != 0 )
+        nValue = -1;
+//    return uno::makeAny( nValue );
+// I must be missing something MSO says value should be -1 if selected, 0 if not
+// selected
+    return uno::makeAny( ( nValue == -1 ) ? sal_True : sal_False );
+}
+
+void SAL_CALL
+ScVbaCheckbox::setValue( const uno::Any& _value ) throw (css::uno::RuntimeException)
+{
+    sal_Int16 nValue = 0;
+    sal_Bool bValue = false;
+    if( _value >>= nValue )
+    {
+        if( nValue == -1)
+            nValue = 1;
+    }
+    else if ( _value >>= bValue )
+    {
+        if ( bValue )
+            nValue = 1;
+    }
+    m_xProps->setPropertyValue( STATE, uno::makeAny( nValue ) );
+}
+rtl::OUString&
+ScVbaCheckbox::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCheckbox") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaCheckbox::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.CheckBox" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbacheckbox.hxx b/vbahelper/source/msforms/vbacheckbox.hxx
new file mode 100644
index 0000000..f3374db
--- /dev/null
+++ b/vbahelper/source/msforms/vbacheckbox.hxx
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_CHECKBOX_HXX
+#define SC_VBA_CHECKBOX_HXX
+#include <cppuhelper/implbase2.hxx>
+#include <ooo/vba/msforms/XRadioButton.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XRadioButton, css::script::XDefaultProperty > CheckBoxImpl_BASE;
+
+class ScVbaCheckbox : public CheckBoxImpl_BASE
+{
+public:
+    ScVbaCheckbox(  const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
+   // Attributes
+    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif //SC_VBA_CHECKBOX_HXX
diff --git a/vbahelper/source/msforms/vbacombobox.cxx b/vbahelper/source/msforms/vbacombobox.cxx
new file mode 100644
index 0000000..caabcbe
--- /dev/null
+++ b/vbahelper/source/msforms/vbacombobox.cxx
@@ -0,0 +1,183 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacombobox.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbacombobox.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+//SelectedItems list of integer indexes
+//StringItemList list of items
+
+const static rtl::OUString TEXT( RTL_CONSTASCII_USTRINGPARAM("Text") );
+const static rtl::OUString SELECTEDITEMS( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") );
+const static rtl::OUString ITEMS( RTL_CONSTASCII_USTRINGPARAM("StringItemList") );
+const static rtl::OUString CONTROLSOURCEPROP( RTL_CONSTASCII_USTRINGPARAM("DataFieldProperty") );
+
+ScVbaComboBox::ScVbaComboBox( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, bool bDialogType ) : ComboBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper ), mbDialogType( bDialogType )
+{
+        mpListHelper.reset( new ListControlHelper( m_xProps ) );
+    // grab the default value property name
+    m_xProps->getPropertyValue( CONTROLSOURCEPROP ) >>= sSourceName;
+}
+
+// Attributes
+
+
+// Value, [read] e.g. getValue returns the value of ooo Text propery e.g. the value in
+// the drop down
+uno::Any SAL_CALL
+ScVbaComboBox::getValue() throw (uno::RuntimeException)
+{
+    return m_xProps->getPropertyValue( sSourceName );
+}
+
+void SAL_CALL
+ScVbaComboBox::setListIndex( const uno::Any& _value ) throw (uno::RuntimeException)
+{
+    sal_Int16 nIndex = 0;
+    if( _value >>= nIndex )
+    {
+        uno::Sequence< rtl::OUString > sItems;
+        m_xProps->getPropertyValue( ITEMS ) >>= sItems;
+        if( ( nIndex >= 0 ) && ( sItems.getLength() > nIndex ) )
+        {
+            rtl::OUString sText = sItems[ nIndex ];
+            m_xProps->setPropertyValue( TEXT, uno::makeAny( sText ) );
+        }
+    }
+}
+
+uno::Any SAL_CALL
+ScVbaComboBox::getListIndex() throw (uno::RuntimeException)
+{
+    uno::Sequence< rtl::OUString > sItems;
+    m_xProps->getPropertyValue( ITEMS ) >>= sItems;
+    // should really return the item that has focus regardless of
+    // it been selected
+    if ( sItems.getLength() > 0 )
+    {
+        rtl::OUString sText = getText();
+        sal_Int32 nLen = sItems.getLength();
+        for ( sal_Int32 index = 0; sText.getLength() && index < nLen; ++index )
+        {
+            if ( sItems[ index ].equals( sText ) )
+            {
+                OSL_TRACE("getListIndex returning %d", index );
+                return uno::makeAny( index );
+            }
+
+        }
+	}
+    OSL_TRACE("getListIndex returning %d", -1 );
+    return uno::makeAny( sal_Int32( -1 ) );
+}
+
+// Value, [write]e.g. setValue sets the value in the drop down, and if the value is one
+// of the values in the list then the selection is also set
+void SAL_CALL
+ScVbaComboBox::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( sSourceName, _value );
+}
+
+// see Value
+
+::rtl::OUString SAL_CALL
+ScVbaComboBox::getText() throw (uno::RuntimeException)
+{
+    rtl::OUString result;
+    getValue() >>= result;
+    return result;
+}
+
+void SAL_CALL
+ScVbaComboBox::setText( const ::rtl::OUString& _text ) throw (uno::RuntimeException)
+{
+    setValue( uno::makeAny( _text ) ); // seems the same
+}
+
+// Methods
+void SAL_CALL
+ScVbaComboBox::AddItem( const uno::Any& pvargItem, const uno::Any& pvargIndex ) throw (uno::RuntimeException)
+{
+    mpListHelper->AddItem( pvargItem, pvargIndex );
+}
+
+void SAL_CALL
+ScVbaComboBox::removeItem( const uno::Any& index ) throw (uno::RuntimeException)
+    {
+    mpListHelper->removeItem( index );
+}
+
+void SAL_CALL
+ScVbaComboBox::Clear(  ) throw (uno::RuntimeException)
+        {
+    mpListHelper->Clear();
+        }
+
+void SAL_CALL
+ScVbaComboBox::setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException)
+{
+    ScVbaControl::setRowSource( _rowsource );
+    mpListHelper->setRowSource( _rowsource );
+        }
+
+sal_Int32 SAL_CALL
+ScVbaComboBox::getListCount() throw (uno::RuntimeException)
+{
+    return mpListHelper->getListCount();
+}
+
+uno::Any SAL_CALL
+ScVbaComboBox::List( const ::uno::Any& pvargIndex, const uno::Any& pvarColumn ) throw (uno::RuntimeException)
+{
+    return mpListHelper->List( pvargIndex, pvarColumn );
+    }
+
+rtl::OUString&
+ScVbaComboBox::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaComboBox") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaComboBox::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ComboBox" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbacombobox.hxx b/vbahelper/source/msforms/vbacombobox.hxx
new file mode 100644
index 0000000..66b1a9a
--- /dev/null
+++ b/vbahelper/source/msforms/vbacombobox.hxx
@@ -0,0 +1,80 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacombobox.hxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_COMBOBOX_HXX
+#define SC_VBA_COMBOBOX_HXX
+#include <cppuhelper/implbase2.hxx>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/script/XDefaultProperty.hpp>
+#include <ooo/vba/msforms/XComboBox.hpp>
+#include <comphelper/proparrhlp.hxx>
+#include <comphelper/propertycontainer.hxx>
+#include <com/sun/star/beans/PropertyAttribute.hpp>
+
+#include "vbacontrol.hxx"
+#include "vbalistcontrolhelper.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper2<ScVbaControl, ov::msforms::XComboBox, css::script::XDefaultProperty > ComboBoxImpl_BASE;
+class ScVbaComboBox : public ComboBoxImpl_BASE
+{
+    std::auto_ptr< ListControlHelper > mpListHelper;
+    rtl::OUString sSourceName;
+    rtl::OUString msDftPropName;
+    bool mbDialogType;
+
+public:
+    ScVbaComboBox( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper, bool bDialogType = false );
+
+    // Attributes
+    virtual css::uno::Any SAL_CALL getListIndex() throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getListCount() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setListIndex( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual void SAL_CALL AddItem( const css::uno::Any& pvargItem, const css::uno::Any& pvargIndex ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL removeItem( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Clear(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL List( const css::uno::Any& pvargIndex, const css::uno::Any& pvarColumn ) throw (css::uno::RuntimeException);
+    // XControl
+    virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
+
+    // XDefaultProperty
+        ::rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif //
diff --git a/vbahelper/source/msforms/vbacontrol.cxx b/vbahelper/source/msforms/vbacontrol.cxx
new file mode 100644
index 0000000..92b7be4
--- /dev/null
+++ b/vbahelper/source/msforms/vbacontrol.cxx
@@ -0,0 +1,537 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacontrol.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/form/FormComponentType.hpp>
+#include <com/sun/star/awt/XControlModel.hpp>
+#include <com/sun/star/awt/XControl.hpp>
+#include <com/sun/star/awt/XWindow2.hpp>
+#include <com/sun/star/lang/XEventListener.hpp>
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/drawing/XControlShape.hpp>
+#include <com/sun/star/awt/XControl.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/view/XControlAccess.hpp>
+#include <com/sun/star/container/XChild.hpp>
+#include <com/sun/star/form/binding/XBindableValue.hpp>
+#include <com/sun/star/form/binding/XListEntrySink.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
+#include <ooo/vba/XControlProvider.hpp>
+#ifdef VBA_OOBUILD_HACK
+#include <svtools/bindablecontrolhelper.hxx>
+#endif
+#include"vbacontrol.hxx"
+#include"vbacombobox.hxx"
+#include "vbabutton.hxx"
+#include "vbalabel.hxx"
+#include "vbatextbox.hxx"
+#include "vbaradiobutton.hxx"
+#include "vbalistbox.hxx"
+#include "vbatogglebutton.hxx"
+#include "vbacheckbox.hxx"
+#include "vbaframe.hxx"
+#include "vbascrollbar.hxx"
+#include "vbaprogressbar.hxx"
+#include "vbamultipage.hxx"
+#include "vbaspinbutton.hxx"
+#include "vbaimage.hxx"
+#include <vbahelper/helperdecl.hxx>
+
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+uno::Reference< css::awt::XWindowPeer >
+ScVbaControl::getWindowPeer() throw (uno::RuntimeException)
+{
+    uno::Reference< drawing::XControlShape > xControlShape( m_xControl, uno::UNO_QUERY );
+
+    uno::Reference< awt::XControlModel > xControlModel;
+    uno::Reference< css::awt::XWindowPeer >  xWinPeer;
+    if ( !xControlShape.is() )
+    {
+        // would seem to be a Userform control
+        uno::Reference< awt::XControl > xControl( m_xControl, uno::UNO_QUERY_THROW );
+        xWinPeer =  xControl->getPeer();
+    return xWinPeer;
+    }
+    // form control
+    xControlModel.set( xControlShape->getControl(), uno::UNO_QUERY_THROW );
+
+    uno::Reference< view::XControlAccess > xControlAccess( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    try
+    {
+        uno::Reference< awt::XControl > xControl( xControlAccess->getControl( xControlModel ), uno::UNO_QUERY );
+        xWinPeer =  xControl->getPeer();
+    }
+    catch( uno::Exception )
+    {
+        throw uno::RuntimeException( rtl::OUString::createFromAscii( "The Control does not exsit" ),
+                uno::Reference< uno::XInterface >() );
+    }
+    return xWinPeer;
+}
+
+//ScVbaControlListener
+class ScVbaControlListener: public cppu::WeakImplHelper1< lang::XEventListener >
+{
+private:
+    ScVbaControl *pControl;
+public:
+    ScVbaControlListener( ScVbaControl *pTmpControl );
+    virtual ~ScVbaControlListener();
+    virtual void SAL_CALL disposing( const lang::EventObject& rEventObject ) throw( uno::RuntimeException );
+};
+
+ScVbaControlListener::ScVbaControlListener( ScVbaControl *pTmpControl ): pControl( pTmpControl )
+{
+}
+
+ScVbaControlListener::~ScVbaControlListener()
+{
+}
+
+void SAL_CALL
+ScVbaControlListener::disposing( const lang::EventObject& ) throw( uno::RuntimeException )
+{
+    if( pControl )
+    {
+        pControl->removeResouce();
+        pControl = NULL;
+    }
+}
+
+//ScVbaControl
+
+ScVbaControl::ScVbaControl( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< ::uno::XInterface >& xControl,  const css::uno::Reference< css::frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ControlImpl_BASE( xParent, xContext ),  m_xControl( xControl ), m_xModel( xModel )
+{
+    //add listener
+    m_xEventListener.set( new ScVbaControlListener( this ) );
+    setGeometryHelper( pGeomHelper );
+    uno::Reference< lang::XComponent > xComponent( m_xControl, uno::UNO_QUERY_THROW );
+    xComponent->addEventListener( m_xEventListener );
+
+    //init m_xProps
+    uno::Reference< drawing::XControlShape > xControlShape( m_xControl, uno::UNO_QUERY ) ;
+    uno::Reference< awt::XControl> xUserFormControl( m_xControl, uno::UNO_QUERY ) ;
+    if ( xControlShape.is() ) // form control
+        m_xProps.set( xControlShape->getControl(), uno::UNO_QUERY_THROW );
+    else if ( xUserFormControl.is() ) // userform control
+        m_xProps.set( xUserFormControl->getModel(), uno::UNO_QUERY_THROW );
+}
+
+ScVbaControl::~ScVbaControl()
+{
+    if( m_xControl.is() )
+{
+        uno::Reference< lang::XComponent > xComponent( m_xControl, uno::UNO_QUERY_THROW );
+    xComponent->removeEventListener( m_xEventListener );
+}
+}
+
+void
+ScVbaControl::setGeometryHelper( AbstractGeometryAttributes* pHelper )
+{
+    mpGeometryHelper.reset( pHelper );
+}
+
+void ScVbaControl::removeResouce() throw( uno::RuntimeException )
+{
+    uno::Reference< lang::XComponent > xComponent( m_xControl, uno::UNO_QUERY_THROW );
+    xComponent->removeEventListener( m_xEventListener );
+    m_xControl= NULL;
+    m_xProps = NULL;
+}
+
+//In design model has different behavior
+sal_Bool SAL_CALL ScVbaControl::getEnabled() throw (uno::RuntimeException)
+{
+    uno::Any aValue = m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Enabled" ) ) );
+    sal_Bool bRet = false;
+    aValue >>= bRet;
+    return bRet;
+}
+
+void SAL_CALL ScVbaControl::setEnabled( sal_Bool bVisible ) throw (uno::RuntimeException)
+{
+    uno::Any aValue( bVisible );
+    m_xProps->setPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Enabled" ) ), aValue);
+
+}
+
+sal_Bool SAL_CALL ScVbaControl::getVisible() throw (uno::RuntimeException)
+{
+    sal_Bool bVisible( sal_True );
+    m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "EnableVisible" ) )) >>= bVisible;
+    return bVisible;
+}
+
+void SAL_CALL ScVbaControl::setVisible( sal_Bool bVisible ) throw (uno::RuntimeException)
+{
+    uno::Any aValue( bVisible );
+    m_xProps->setPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "EnableVisible" ) ), aValue);
+}
+double SAL_CALL ScVbaControl::getHeight() throw (uno::RuntimeException)
+{
+    return mpGeometryHelper->getHeight();
+}
+void SAL_CALL ScVbaControl::setHeight( double _height ) throw (uno::RuntimeException)
+{
+    mpGeometryHelper->setHeight( _height );
+}
+
+double SAL_CALL ScVbaControl::getWidth() throw (uno::RuntimeException)
+{
+    return mpGeometryHelper->getWidth();
+}
+void SAL_CALL ScVbaControl::setWidth( double _width ) throw (uno::RuntimeException)
+{
+    mpGeometryHelper->setWidth( _width );
+}
+
+double SAL_CALL
+ScVbaControl::getLeft() throw (uno::RuntimeException)
+{
+    return mpGeometryHelper->getLeft();
+}
+
+void SAL_CALL
+ScVbaControl::setLeft( double _left ) throw (uno::RuntimeException)
+{
+    mpGeometryHelper->setLeft( _left );
+
+}
+
+double SAL_CALL
+ScVbaControl::getTop() throw (uno::RuntimeException)
+{
+    return mpGeometryHelper->getTop();
+}
+
+void SAL_CALL
+ScVbaControl::setTop( double _top ) throw (uno::RuntimeException)
+{
+    mpGeometryHelper->setTop( _top );
+}
+
+uno::Reference< uno::XInterface > SAL_CALL
+ScVbaControl::getObject() throw (uno::RuntimeException)
+{
+    uno::Reference< msforms::XControl > xRet( this );
+    return xRet;
+}
+
+void SAL_CALL ScVbaControl::SetFocus() throw (uno::RuntimeException)
+{
+    uno::Reference< awt::XWindow > xWin( m_xControl, uno::UNO_QUERY_THROW );
+    xWin->setFocus();
+}
+
+rtl::OUString SAL_CALL
+ScVbaControl::getControlSource() throw (uno::RuntimeException)
+{
+// #FIXME I *hate* having these upstream differences
+// but this is necessary until I manage to upstream other
+// dependant parts
+#ifdef VBA_OOBUILD_HACK
+    rtl::OUString sControlSource;
+    uno::Reference< form::binding::XBindableValue > xBindable( m_xProps, uno::UNO_QUERY );
+    if ( xBindable.is() )
+    {
+        try
+        {
+            uno::Reference< lang::XMultiServiceFactory > xFac( m_xModel, uno::UNO_QUERY_THROW );
+            uno::Reference< beans::XPropertySet > xConvertor( xFac->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.table.CellAddressConversion" ))), uno::UNO_QUERY );
+            uno::Reference< beans::XPropertySet > xProps( xBindable->getValueBinding(), uno::UNO_QUERY_THROW );
+            table::CellAddress aAddress;
+            xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BoundCell") ) ) >>= aAddress;
+            xConvertor->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Address") ), uno::makeAny( aAddress ) );
+                    xConvertor->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("XL_A1_Representation") ) ) >>= sControlSource;
+        }
+        catch( uno::Exception& )
+        {
+        }
+    }
+    return sControlSource;
+#else
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("getControlSource not supported") ), uno::Reference< uno::XInterface >()); // not supported
+#endif
+}
+
+void SAL_CALL
+ScVbaControl::setControlSource( const rtl::OUString& _controlsource ) throw (uno::RuntimeException)
+{
+#ifdef VBA_OOBUILD_HACK
+    rtl::OUString sEmpty;
+    svt::BindableControlHelper::ApplyListSourceAndBindableData( m_xModel, m_xProps, _controlsource, sEmpty );
+#else
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("setControlSource not supported ") ).concat( _controlsource ), uno::Reference< uno::XInterface >()); // not supported
+#endif
+}
+
+rtl::OUString SAL_CALL
+ScVbaControl::getRowSource() throw (uno::RuntimeException)
+{
+#ifdef VBA_OOBUILD_HACK
+    rtl::OUString sRowSource;
+    uno::Reference< form::binding::XListEntrySink > xListSink( m_xProps, uno::UNO_QUERY );
+    if ( xListSink.is() )
+    {
+        try
+        {
+            uno::Reference< lang::XMultiServiceFactory > xFac( m_xModel, uno::UNO_QUERY_THROW );
+            uno::Reference< beans::XPropertySet > xConvertor( xFac->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.table.CellRangeAddressConversion" ))), uno::UNO_QUERY );
+
+            uno::Reference< beans::XPropertySet > xProps( xListSink->getListEntrySource(), uno::UNO_QUERY_THROW );
+            table::CellRangeAddress aAddress;
+            xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("CellRange") ) ) >>= aAddress;
+            xConvertor->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Address")), uno::makeAny( aAddress ) );
+            xConvertor->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("XL_A1_Representation") ) ) >>= sRowSource;
+        }
+        catch( uno::Exception& )
+        {
+        }
+    }
+    return sRowSource;
+#else
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("getRowSource not supported") ), uno::Reference< uno::XInterface >()); // not supported
+#endif
+}
+
+void SAL_CALL
+ScVbaControl::setRowSource( const rtl::OUString& _rowsource ) throw (uno::RuntimeException)
+{
+#ifdef VBA_OOBUILD_HACK
+    rtl::OUString sEmpty;
+    svt::BindableControlHelper::ApplyListSourceAndBindableData( m_xModel, m_xProps, sEmpty, _rowsource );
+#else
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("setRowSource not supported ") ).concat( _rowsource ), uno::Reference< uno::XInterface >()); // not supported
+#endif
+}
+
+rtl::OUString SAL_CALL
+ScVbaControl::getName() throw (uno::RuntimeException)
+{
+    rtl::OUString sName;
+    m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Name" ) ) ) >>= sName;
+    return sName;
+
+}
+
+void SAL_CALL
+ScVbaControl::setName( const rtl::OUString& _name ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Name" ) ), uno::makeAny( _name ) );
+    }
+
+rtl::OUString SAL_CALL
+ScVbaControl::getControlTipText() throw (css::uno::RuntimeException)
+{
+    rtl::OUString sName;
+    m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "HelpText" ) ) ) >>= sName;
+    return sName;
+}
+
+void SAL_CALL
+ScVbaControl::setControlTipText( const rtl::OUString& rsToolTip ) throw (css::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "HelpText" ) ), uno::makeAny( rsToolTip ) );
+}
+//ScVbaControlFactory
+
+ScVbaControlFactory::ScVbaControlFactory( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel ): m_xContext( xContext ), m_xControl( xControl ), m_xModel( xModel )
+{
+}
+
+ScVbaControl* ScVbaControlFactory::createControl()  throw (uno::RuntimeException)
+{
+    return createControl( m_xModel );
+}
+ScVbaControl* ScVbaControlFactory::createControl( const uno::Reference< uno::XInterface >& xParent )  throw (uno::RuntimeException)
+{
+    uno::Reference< drawing::XControlShape > xControlShape( m_xControl, uno::UNO_QUERY );
+    if ( xControlShape.is() ) // form controls
+        return createControl( xControlShape, xParent );
+    uno::Reference< awt::XControl > xControl( m_xControl, uno::UNO_QUERY );
+    if ( !xControl.is() )
+        throw uno::RuntimeException(); // really we should be more informative
+    return createControl( xControl, xParent );
+
+}
+
+ScVbaControl* ScVbaControlFactory::createControl(const uno::Reference< drawing::XControlShape >& xControlShape,  const uno::Reference< uno::XInterface >& /*xParent*/ )  throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xProps( xControlShape->getControl(), uno::UNO_QUERY_THROW );
+    sal_Int32 nClassId = -1;
+    const static rtl::OUString sClassId( RTL_CONSTASCII_USTRINGPARAM("ClassId") );
+    xProps->getPropertyValue( sClassId ) >>= nClassId;
+    uno::Reference< XHelperInterface > xVbaParent; // #FIXME - should be worksheet I guess
+    switch( nClassId )
+    {
+        case form::FormComponentType::COMBOBOX:
+            return new ScVbaComboBox( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::COMMANDBUTTON:
+            return new ScVbaButton( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::FIXEDTEXT:
+            return new ScVbaLabel( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::TEXTFIELD:
+            return new ScVbaTextBox( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::RADIOBUTTON:
+            return new ScVbaRadioButton( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::LISTBOX:
+            return new ScVbaListBox( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::SPINBUTTON:
+            return new ScVbaSpinButton( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        case form::FormComponentType::IMAGECONTROL:
+            return new ScVbaImage( xVbaParent, m_xContext, xControlShape, m_xModel, new ConcreteXShapeGeometryAttributes( m_xContext, uno::Reference< drawing::XShape >( xControlShape, uno::UNO_QUERY_THROW ) ) );
+        default:
+            throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Donot support this Control Type." ), uno::Reference< uno::XInterface >() );
+    }
+}
+
+ScVbaControl* ScVbaControlFactory::createControl( const uno::Reference< awt::XControl >& xControl,  const uno::Reference< uno::XInterface >& xParent  )  throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xProps( xControl->getModel(), uno::UNO_QUERY_THROW );
+    uno::Reference< lang::XServiceInfo > xServiceInfo( xProps, uno::UNO_QUERY_THROW );
+    ScVbaControl* pControl = NULL;
+    uno::Reference< XHelperInterface > xVbaParent; // #FIXME - should be worksheet I guess
+    if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlCheckBoxModel") ) ) )
+    pControl = new ScVbaCheckbox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlRadioButtonModel") ) ) )
+    pControl = new ScVbaRadioButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlEditModel") ) ) )
+        pControl = new ScVbaTextBox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ), true );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlButtonModel") ) ) )
+    {
+        sal_Bool bToggle = sal_False;
+        xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Toggle") ) ) >>= bToggle;
+        if ( bToggle )
+            pControl = new ScVbaToggleButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+        else
+            pControl = new ScVbaButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    }
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlComboBoxModel") ) ) )
+        pControl = new ScVbaComboBox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ), true );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlListBoxModel") ) ) )
+    pControl = new ScVbaListBox( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlFixedTextModel") ) ) )
+    pControl = new ScVbaLabel( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlImageControlModel") ) ) )
+    pControl = new ScVbaImage( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlProgressBarModel") ) ) )
+    pControl = new ScVbaProgressBar( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlGroupBoxModel") ) ) )
+    pControl = new ScVbaFrame( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlScrollBarModel") ) ) )
+    pControl = new ScVbaScrollBar( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoMultiPageModel") ) ) )
+    pControl = new ScVbaMultiPage( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ), xParent );
+    else if ( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.awt.UnoControlSpinButtonModel") ) ) )
+    pControl = new ScVbaSpinButton( xVbaParent, m_xContext, xControl, m_xModel, new UserFormGeometryHelper( m_xContext, xControl ) );
+    else
+        throw uno::RuntimeException( rtl::OUString::createFromAscii("Unsupported control " ), uno::Reference< uno::XInterface >() );
+    return pControl;
+}
+
+rtl::OUString&
+ScVbaControl::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaControl") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaControl::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Control" ) );
+    }
+    return aServiceNames;
+}
+
+
+
+typedef cppu::WeakImplHelper1< XControlProvider > ControlProvider_BASE;
+class ControlProviderImpl : public ControlProvider_BASE
+{
+    uno::Reference< uno::XComponentContext > m_xCtx;
+public:
+    ControlProviderImpl( const uno::Reference< uno::XComponentContext >& xCtx ) : m_xCtx( xCtx ) {}
+    virtual uno::Reference< msforms::XControl > SAL_CALL createControl( const uno::Reference< drawing::XControlShape >& xControl, const uno::Reference< frame::XModel >& xDocOwner ) throw (uno::RuntimeException);
+    virtual uno::Reference< msforms::XControl > SAL_CALL createUserformControl( const uno::Reference< awt::XControl >& xControl, const uno::Reference< awt::XControl >& xDialog, const uno::Reference< frame::XModel >& xDocOwner ) throw (uno::RuntimeException);
+};
+
+uno::Reference< msforms::XControl > SAL_CALL
+ControlProviderImpl::createControl( const uno::Reference< drawing::XControlShape >& xControlShape, const uno::Reference< frame::XModel >& xDocOwner ) throw (uno::RuntimeException)
+{
+    uno::Reference< msforms::XControl > xControlToReturn;
+    if ( xControlShape.is() )
+    {
+        ScVbaControlFactory controlFactory( m_xCtx, xControlShape, xDocOwner );
+        xControlToReturn.set( controlFactory.createControl( xDocOwner ) );
+    }
+    return xControlToReturn;
+
+}
+uno::Reference< msforms::XControl > SAL_CALL
+ControlProviderImpl::createUserformControl( const uno::Reference< awt::XControl >& xControl, const uno::Reference< awt::XControl >& xDialog, const uno::Reference< frame::XModel >& xDocOwner ) throw (uno::RuntimeException)
+{
+    uno::Reference< msforms::XControl > xControlToReturn;
+    if ( xControl.is() && xDialog.is() )
+    {
+
+        ScVbaControlFactory controlFactory( m_xCtx, xControl, xDocOwner );
+        xControlToReturn.set( controlFactory.createControl( xDialog->getModel() ) );
+        ScVbaControl* pControl  = dynamic_cast< ScVbaControl* >( xControlToReturn.get() );
+        pControl->setGeometryHelper( new UserFormGeometryHelper( m_xCtx, xControl ) );
+    }
+    return xControlToReturn;
+}
+
+namespace controlprovider
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::class_<ControlProviderImpl, sdecl::with_args<false> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "ControlProviderImpl",
+    "ooo.vba.ControlProvider" );
+}
diff --git a/vbahelper/source/msforms/vbacontrol.hxx b/vbahelper/source/msforms/vbacontrol.hxx
new file mode 100644
index 0000000..15be121
--- /dev/null
+++ b/vbahelper/source/msforms/vbacontrol.hxx
@@ -0,0 +1,114 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacontrol.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_CONTROL_HXX
+#define SC_VBA_CONTROL_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/script/XDefaultProperty.hpp>
+#include <com/sun/star/drawing/XControlShape.hpp>
+#include <com/sun/star/awt/XControl.hpp>
+#include <com/sun/star/awt/XWindowPeer.hpp>
+#include <ooo/vba/msforms/XControl.hpp>
+
+#include <vbahelper/vbahelper.hxx>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <memory>
+
+//typedef ::cppu::WeakImplHelper1< ov::msforms::XControl > ControlImpl_BASE;
+typedef InheritedHelperInterfaceImpl1< ov::msforms::XControl > ControlImpl_BASE;
+
+class ScVbaControl : public ControlImpl_BASE
+{
+private:
+    com::sun::star::uno::Reference< com::sun::star::lang::XEventListener > m_xEventListener;
+protected:
+    std::auto_ptr< ov::AbstractGeometryAttributes > mpGeometryHelper;
+    css::uno::Reference< css::beans::XPropertySet > m_xProps;
+    css::uno::Reference< css::uno::XInterface > m_xControl;
+    css::uno::Reference< css::frame::XModel > m_xModel;
+
+    virtual css::uno::Reference< css::awt::XWindowPeer > getWindowPeer() throw (css::uno::RuntimeException);
+public:
+    ScVbaControl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                    const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pHelper );
+    virtual ~ScVbaControl();
+    // This class will own the helper, so make sure it is allocated from
+    // the heap
+    void setGeometryHelper( ov::AbstractGeometryAttributes* pHelper );
+    // XControl
+    virtual sal_Bool SAL_CALL getEnabled() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEnabled( sal_Bool _enabled ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getHeight() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setHeight( double _height ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setWidth( double _width ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getLeft() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLeft( double _left ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getTop() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTop( double _top ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL SetFocus(  ) throw (css::uno::RuntimeException);
+
+    virtual css::uno::Reference< css::uno::XInterface > SAL_CALL getObject() throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getControlSource() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setControlSource( const rtl::OUString& _controlsource ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getRowSource() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setName( const rtl::OUString& _name ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getControlTipText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setControlTipText( const rtl::OUString& ) throw (css::uno::RuntimeException);
+    //remove resouce because ooo.vba.excel.XControl is a wrapper of com.sun.star.drawing.XControlShape
+    virtual void removeResouce() throw( css::uno::RuntimeException );
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+
+class ScVbaControlFactory
+{
+public:
+    ScVbaControlFactory( const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                    const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel );
+    ScVbaControl* createControl()  throw ( css::uno::RuntimeException );
+    ScVbaControl* createControl( const css::uno::Reference< css::uno::XInterface >& xParent )  throw ( css::uno::RuntimeException );
+private:
+    ScVbaControl* createControl( const css::uno::Reference< css::awt::XControl >&, const css::uno::Reference< css::uno::XInterface >&  )  throw ( css::uno::RuntimeException );
+    ScVbaControl* createControl( const css::uno::Reference< css::drawing::XControlShape >&, const css::uno::Reference< css::uno::XInterface >& )  throw ( css::uno::RuntimeException );
+    css::uno::Reference< css::uno::XComponentContext > m_xContext;
+    css::uno::Reference< css::uno::XInterface > m_xControl;
+    css::uno::Reference< css::frame::XModel > m_xModel;
+};
+
+#endif//SC_VBA_CONTROL_HXX
diff --git a/vbahelper/source/msforms/vbacontrols.cxx b/vbahelper/source/msforms/vbacontrols.cxx
new file mode 100644
index 0000000..ccef141
--- /dev/null
+++ b/vbahelper/source/msforms/vbacontrols.cxx
@@ -0,0 +1,232 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#include "vbacontrols.hxx"
+#include <cppuhelper/implbase2.hxx>
+#include <com/sun/star/awt/XControlContainer.hpp>
+#include <ooo/vba//XControlProvider.hpp>
+#include <hash_map>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+typedef ::cppu::WeakImplHelper2< container::XNameAccess, container::XIndexAccess > ArrayWrapImpl;
+
+typedef  std::hash_map< rtl::OUString, sal_Int32, ::rtl::OUStringHash,
+    ::std::equal_to< ::rtl::OUString >  > ControlIndexMap;
+typedef  std::vector< uno::Reference< awt::XControl > > ControlVec;
+
+class ControlArrayWrapper : public ArrayWrapImpl
+{
+    uno::Reference< awt::XControlContainer > mxDialog;
+    uno::Sequence< ::rtl::OUString > msNames;
+    ControlVec mControls;
+    ControlIndexMap mIndices;
+
+    rtl::OUString getControlName( const uno::Reference< awt::XControl >& xCtrl )
+    {
+        uno::Reference< beans::XPropertySet > xProp( xCtrl->getModel(), uno::UNO_QUERY );
+        rtl::OUString sName;
+        xProp->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Name" ) ) ) >>= sName;
+        return sName;
+    }
+
+public:
+
+    ControlArrayWrapper( const uno::Reference< awt::XControl >& xDialog )
+    {
+        mxDialog.set( xDialog, uno::UNO_QUERY_THROW );
+        uno::Sequence< uno::Reference< awt::XControl > > sXControls = mxDialog->getControls();
+
+        msNames.realloc( sXControls.getLength() );
+        for ( sal_Int32 i = 0; i < sXControls.getLength(); ++i )
+        {
+            uno::Reference< awt::XControl > xCtrl = sXControls[ i ];
+            msNames[ i ] = getControlName( xCtrl );
+            mControls.push_back( xCtrl );
+            mIndices[ msNames[ i ] ] = i;
+        }
+    }
+
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return awt::XControl::static_type(0);
+    }
+
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mControls.size() > 0 );
+    }
+
+    // XNameAcess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasByName( aName ) )
+            throw container::NoSuchElementException();
+        return getByIndex( mIndices[ aName ] );
+    }
+
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        return msNames;
+    }
+
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException)
+    {
+        ControlIndexMap::iterator it = mIndices.find( aName );
+        return it != mIndices.end();
+    }
+
+    // XElementAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (css::uno::RuntimeException)
+    {
+        return mControls.size();
+    }
+
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        if ( Index < 0 || Index >= static_cast< sal_Int32 >( mControls.size() ) )
+            throw lang::IndexOutOfBoundsException();
+        return uno::makeAny( mControls[ Index ] );
+    }
+};
+
+
+class ControlsEnumWrapper : public EnumerationHelper_BASE
+{
+    uno::Reference<XHelperInterface > m_xParent;
+    uno::Reference<uno::XComponentContext > m_xContext;
+    uno::Reference<container::XIndexAccess > m_xIndexAccess;
+    uno::Reference<awt::XControl > m_xDlg;
+    sal_Int32 nIndex;
+
+public:
+
+    ControlsEnumWrapper(  const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xIndexAccess, const uno::Reference< awt::XControl >& xDlg ) :  m_xParent( xParent ), m_xContext( xContext), m_xIndexAccess( xIndexAccess ), m_xDlg( xDlg ), nIndex( 0 ) {}
+
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return ( nIndex < m_xIndexAccess->getCount() );
+    }
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( nIndex < m_xIndexAccess->getCount() )
+        {
+            uno::Reference< frame::XModel > xModel;
+            uno::Reference< awt::XControl > xControl;
+            m_xIndexAccess->getByIndex( nIndex++ ) >>= xControl;
+
+    uno::Reference<lang::XMultiComponentFactory > xServiceManager( m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< XControlProvider > xControlProvider( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.ControlProvider" ) ), m_xContext ), uno::UNO_QUERY_THROW );
+
+    uno::Reference< msforms::XControl > xVBAControl( xControlProvider->createUserformControl(  xControl, m_xDlg, xModel ) );
+            return uno::makeAny( xVBAControl );
+        }
+        throw container::NoSuchElementException();
+    }
+
+};
+
+
+uno::Reference<container::XIndexAccess >
+lcl_controlsWrapper( const uno::Reference< awt::XControl >& xDlg )
+{
+    return new ControlArrayWrapper( xDlg );
+}
+
+ScVbaControls::ScVbaControls( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext,
+                const css::uno::Reference< awt::XControl >& xDialog )
+            : ControlsImpl_BASE( xParent, xContext, lcl_controlsWrapper( xDialog  ) )
+{
+    mxDialog.set( xDialog, uno::UNO_QUERY_THROW );
+}
+
+uno::Reference< container::XEnumeration >
+ScVbaControls::createEnumeration() throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumeration > xEnum( new ControlsEnumWrapper( mxParent, mxContext, m_xIndexAccess, mxDialog ) );
+    if ( !xEnum.is() )
+        throw uno::RuntimeException();
+    return xEnum;
+}
+
+uno::Any
+ScVbaControls::createCollectionObject( const css::uno::Any& aSource )
+{
+    // Create control from awt::XControl
+    uno::Reference< awt::XControl > xControl;
+    aSource >>= xControl;
+    uno::Reference< frame::XModel > xModel;
+    uno::Reference<lang::XMultiComponentFactory > xServiceManager( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< XControlProvider > xControlProvider( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.ControlProvider" ) ), mxContext ), uno::UNO_QUERY_THROW );
+
+    uno::Reference< msforms::XControl > xVBAControl( xControlProvider->createUserformControl(  xControl, mxDialog, xModel ) );
+
+    return uno::makeAny( xVBAControl );
+}
+
+void SAL_CALL
+ScVbaControls::Move( double cx, double cy ) throw (uno::RuntimeException)
+{
+    uno::Reference< container::XEnumeration > xEnum( createEnumeration() );
+    while ( xEnum->hasMoreElements() )
+    {
+        uno::Reference< msforms::XControl > xControl( xEnum->nextElement(), uno::UNO_QUERY_THROW );
+        xControl->setLeft( xControl->getLeft() + cx );
+        xControl->setTop( xControl->getTop() + cy );
+    }
+}
+
+uno::Type
+ScVbaControls::getElementType() throw (uno::RuntimeException)
+{
+    return ooo::vba::msforms::XControl::static_type(0);
+}
+rtl::OUString&
+ScVbaControls::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaControls") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaControls::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.Controls" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbacontrols.hxx b/vbahelper/source/msforms/vbacontrols.hxx
new file mode 100644
index 0000000..04c70bb
--- /dev/null
+++ b/vbahelper/source/msforms/vbacontrols.hxx
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_CONTROLS_HXX
+#define SC_VBA_CONTROLS_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XControls.hpp>
+#include <com/sun/star/awt/XControl.hpp>
+
+#include <vbahelper/vbacollectionimpl.hxx>
+#include <vbahelper/vbahelper.hxx>
+
+typedef CollTestImplHelper< ov::msforms::XControls > ControlsImpl_BASE;
+
+class ScVbaControls : public ControlsImpl_BASE
+{
+    css::uno::Reference< css::awt::XControl > mxDialog;
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+public:
+    ScVbaControls( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext,
+                    const css::uno::Reference< css::awt::XControl >& xDialog );
+    // XControls
+     virtual void SAL_CALL Move( double cx, double cy ) throw (css::uno::RuntimeException);
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+
+    // ScVbaCollectionBaseImpl
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+};
+#endif //SC_VBA_OLEOBJECTS_HXX
diff --git a/vbahelper/source/msforms/vbaframe.cxx b/vbahelper/source/msforms/vbaframe.cxx
new file mode 100644
index 0000000..24f8884
--- /dev/null
+++ b/vbahelper/source/msforms/vbaframe.cxx
@@ -0,0 +1,93 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbaframe.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+ScVbaFrame::ScVbaFrame( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : FrameImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaFrame::getCaption() throw (css::uno::RuntimeException)
+{
+    rtl::OUString Label;
+    m_xProps->getPropertyValue( LABEL ) >>= Label;
+    return Label;
+}
+
+void SAL_CALL
+ScVbaFrame::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
+}
+
+uno::Any SAL_CALL
+ScVbaFrame::getValue() throw (css::uno::RuntimeException)
+{
+    return uno::makeAny( getCaption() );
+}
+
+void SAL_CALL
+ScVbaFrame::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
+{
+    rtl::OUString sCaption;
+    _value >>= sCaption;
+    setCaption( sCaption );
+}
+
+rtl::OUString&
+ScVbaFrame::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaFrame") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaFrame::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Frame" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbaframe.hxx b/vbahelper/source/msforms/vbaframe.hxx
new file mode 100644
index 0000000..071b5b0
--- /dev/null
+++ b/vbahelper/source/msforms/vbaframe.hxx
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_FRAME_HXX
+#define SC_VBA_FRAME_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XLabel.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XLabel > FrameImpl_BASE;
+
+class ScVbaFrame : public FrameImpl_BASE
+{
+public:
+    ScVbaFrame(  const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif //SC_VBA_LABEL_HXX
diff --git a/vbahelper/source/msforms/vbaimage.cxx b/vbahelper/source/msforms/vbaimage.cxx
new file mode 100644
index 0000000..7e6cd34
--- /dev/null
+++ b/vbahelper/source/msforms/vbaimage.cxx
@@ -0,0 +1,59 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaimage.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+ScVbaImage::ScVbaImage( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ImageImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+rtl::OUString&
+ScVbaImage::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaImage") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaImage::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Image" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbaimage.hxx b/vbahelper/source/msforms/vbaimage.hxx
new file mode 100644
index 0000000..0fe6b8b
--- /dev/null
+++ b/vbahelper/source/msforms/vbaimage.hxx
@@ -0,0 +1,48 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_IMAGE_HXX
+#define SC_VBA_IMAGE_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XImage.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XImage > ImageImpl_BASE;
+
+class ScVbaImage : public ImageImpl_BASE
+{
+public:
+    ScVbaImage( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif //SC_VBA_IMAGE_HXX
diff --git a/vbahelper/source/msforms/vbalabel.cxx b/vbahelper/source/msforms/vbalabel.cxx
new file mode 100644
index 0000000..0a7614e
--- /dev/null
+++ b/vbahelper/source/msforms/vbalabel.cxx
@@ -0,0 +1,88 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbalabel.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbalabel.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+ScVbaLabel::ScVbaLabel(  const css::uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : LabelImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaLabel::getCaption() throw (css::uno::RuntimeException)
+{
+    rtl::OUString Label;
+    m_xProps->getPropertyValue( LABEL ) >>= Label;
+    return Label;
+}
+
+void SAL_CALL
+ScVbaLabel::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
+}
+uno::Any SAL_CALL
+ScVbaLabel::getValue() throw (css::uno::RuntimeException)
+{
+    return uno::makeAny( getCaption() );
+}
+
+void SAL_CALL
+ScVbaLabel::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
+{
+    rtl::OUString sCaption;
+    _value >>= sCaption;
+    setCaption( sCaption );
+}
+
+
+rtl::OUString&
+ScVbaLabel::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaLabel") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaLabel::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Label" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbalabel.hxx b/vbahelper/source/msforms/vbalabel.hxx
new file mode 100644
index 0000000..e390f3e
--- /dev/null
+++ b/vbahelper/source/msforms/vbalabel.hxx
@@ -0,0 +1,56 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbalabel.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_LABEL_HXX
+#define SC_VBA_LABEL_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XLabel.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <cppuhelper/implbase2.hxx>
+
+typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XLabel, css::script::XDefaultProperty  > LabelImpl_BASE;
+
+class ScVbaLabel : public LabelImpl_BASE
+{
+public:
+    ScVbaLabel( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+};
+#endif //SC_VBA_LABEL_HXX
diff --git a/vbahelper/source/msforms/vbalistbox.cxx b/vbahelper/source/msforms/vbalistbox.cxx
new file mode 100644
index 0000000..184f138
--- /dev/null
+++ b/vbahelper/source/msforms/vbalistbox.cxx
@@ -0,0 +1,290 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbalistbox.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/form/validation/XValidatableFormComponent.hpp>
+
+#include "vbalistbox.hxx"
+#include <vector>
+#include <comphelper/anytostring.hxx>
+#include <com/sun/star/script/ArrayWrapper.hpp>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+const static rtl::OUString TEXT( RTL_CONSTASCII_USTRINGPARAM("Text") );
+const static rtl::OUString SELECTEDITEMS( RTL_CONSTASCII_USTRINGPARAM("SelectedItems") );
+const static rtl::OUString ITEMS( RTL_CONSTASCII_USTRINGPARAM("StringItemList") );
+
+
+ScVbaListBox::ScVbaListBox( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< css::uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ListBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+    mpListHelper.reset( new ListControlHelper( m_xProps ) );
+}
+
+// Attributes
+void SAL_CALL
+ScVbaListBox::setListIndex( const uno::Any& _value ) throw (uno::RuntimeException)
+{
+    sal_Int32 nIndex = 0;
+    _value >>= nIndex;
+    uno::Reference< XPropValue > xPropVal( Selected( nIndex ), uno::UNO_QUERY_THROW );
+    xPropVal->setValue( uno::makeAny( sal_True ) );
+}
+
+uno::Any SAL_CALL
+ScVbaListBox::getListIndex() throw (uno::RuntimeException)
+{
+    uno::Sequence< sal_Int16 > sSelection;
+    m_xProps->getPropertyValue( SELECTEDITEMS ) >>= sSelection;
+    if ( sSelection.getLength() == 0 )
+        return uno::Any( sal_Int32( -1 ) );
+    return uno::Any( sSelection[ 0 ] );
+}
+
+uno::Any SAL_CALL
+ScVbaListBox::getValue() throw (uno::RuntimeException)
+{
+    uno::Sequence< sal_Int16 > sSelection;
+    uno::Sequence< rtl::OUString > sItems;
+    m_xProps->getPropertyValue( SELECTEDITEMS ) >>= sSelection;
+    m_xProps->getPropertyValue( ITEMS ) >>= sItems;
+    if( getMultiSelect() )
+        throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Attribute use invalid." ), uno::Reference< uno::XInterface >() );
+    uno::Any aRet;
+    if ( sSelection.getLength() )
+        aRet = uno::makeAny( sItems[ sSelection[ 0 ] ] );
+    return aRet;
+}
+
+void SAL_CALL
+ScVbaListBox::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
+{
+    if( getMultiSelect() )
+    {
+        throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Attribute use invalid." ), uno::Reference< uno::XInterface >() );
+    }
+    rtl::OUString sValue = getAnyAsString( _value );
+    uno::Sequence< rtl::OUString > sList;
+    m_xProps->getPropertyValue( ITEMS ) >>= sList;
+    uno::Sequence< sal_Int16 > nList;
+    sal_Int16 nLength = static_cast<sal_Int16>( sList.getLength() );
+    sal_Int16 nValue = -1;
+    sal_Int16 i = 0;
+    for( i = 0; i < nLength; i++ )
+    {
+        if( sList[i].equals( sValue ) )
+        {
+            nValue = i;
+            break;
+        }
+    }
+    if( nValue == -1 )
+        throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Attribute use invalid." ), uno::Reference< uno::XInterface >() );
+
+    uno::Sequence< sal_Int16 > nSelectedIndices(1);
+    nSelectedIndices[ 0 ] = nValue;
+    m_xProps->setPropertyValue( SELECTEDITEMS, uno::makeAny( nSelectedIndices ) );
+    m_xProps->setPropertyValue( TEXT, uno::makeAny( sValue ) );
+}
+
+::rtl::OUString SAL_CALL
+ScVbaListBox::getText() throw (uno::RuntimeException)
+{
+    rtl::OUString result;
+    getValue() >>= result;
+    return result;
+}
+
+void SAL_CALL
+ScVbaListBox::setText( const ::rtl::OUString& _text ) throw (uno::RuntimeException)
+{
+    setValue( uno::makeAny( _text ) ); // seems the same
+}
+
+sal_Bool SAL_CALL
+ScVbaListBox::getMultiSelect() throw (css::uno::RuntimeException)
+{
+    sal_Bool bMultiSelect = sal_False;
+    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiSelection" ) ) ) >>= bMultiSelect;
+    return bMultiSelect;
+}
+
+void SAL_CALL
+ScVbaListBox::setMultiSelect( sal_Bool _multiselect ) throw (css::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiSelection" ) ), uno::makeAny( _multiselect ) );
+}
+
+css::uno::Any SAL_CALL
+ScVbaListBox::Selected( sal_Int32 index ) throw (css::uno::RuntimeException)
+{
+    uno::Sequence< rtl::OUString > sList;
+    m_xProps->getPropertyValue( ITEMS ) >>= sList;
+    sal_Int16 nLength = static_cast< sal_Int16 >( sList.getLength() );
+    // no choice but to do a horror cast as internally
+    // the indices are but sal_Int16
+    sal_Int16 nIndex = static_cast< sal_Int16 >( index );
+    if( nIndex < 0 || nIndex >= nLength )
+        throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Error Number." ), uno::Reference< uno::XInterface >() );
+    m_nIndex = nIndex;
+    return uno::makeAny( uno::Reference< XPropValue > ( new ScVbaPropValue( this ) ) );
+}
+
+// Methods
+void SAL_CALL
+ScVbaListBox::AddItem( const uno::Any& pvargItem, const uno::Any& pvargIndex ) throw (uno::RuntimeException)
+{
+    mpListHelper->AddItem( pvargItem, pvargIndex );
+        }
+
+void SAL_CALL
+ScVbaListBox::removeItem( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    mpListHelper->removeItem( index );
+}
+
+void SAL_CALL
+ScVbaListBox::Clear(  ) throw (uno::RuntimeException)
+{
+    mpListHelper->Clear();
+}
+
+// this is called when something like the following vba code is used
+// to set the selected state of particular entries in the Listbox
+// ListBox1.Selected( 3 ) = false
+//PropListener
+void
+ScVbaListBox::setValueEvent( const uno::Any& value )
+{
+    sal_Bool bValue = sal_False;
+    if( !(value >>= bValue) )
+        throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Invalid type\n. need boolean." ), uno::Reference< uno::XInterface >() );
+    uno::Sequence< sal_Int16 > nList;
+    m_xProps->getPropertyValue( SELECTEDITEMS ) >>= nList;
+    sal_Int16 nLength = static_cast<sal_Int16>( nList.getLength() );
+    sal_Int16 nIndex = m_nIndex;
+    for( sal_Int16 i = 0; i < nLength; i++ )
+    {
+        if( nList[i] == nIndex )
+        {
+            if( bValue )
+                return;
+            else
+            {
+                for( ; i < nLength - 1; i++ )
+                {
+                    nList[i] = nList[i + 1];
+                }
+                nList.realloc( nLength - 1 );
+                //m_xProps->setPropertyValue( sSourceName, uno::makeAny( nList ) );
+        m_xProps->setPropertyValue( SELECTEDITEMS, uno::makeAny( nList ) );
+                return;
+            }
+        }
+    }
+    if( bValue )
+    {
+        if( getMultiSelect() )
+        {
+            nList.realloc( nLength + 1 );
+            nList[nLength] = nIndex;
+        }
+        else
+        {
+            nList.realloc( 1 );
+            nList[0] = nIndex;
+        }
+        //m_xProps->setPropertyValue( sSourceName, uno::makeAny( nList ) );
+        m_xProps->setPropertyValue( SELECTEDITEMS, uno::makeAny( nList ) );
+    }
+}
+
+// this is called when something like the following vba code is used
+// to determine the selected state of particular entries in the Listbox
+// msgbox ListBox1.Selected( 3 )
+
+css::uno::Any
+ScVbaListBox::getValueEvent()
+{
+    uno::Sequence< sal_Int16 > nList;
+    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "SelectedItems" ) ) ) >>= nList;
+    sal_Int32 nLength = nList.getLength();
+    sal_Int32 nIndex = m_nIndex;
+
+    for( sal_Int32 i = 0; i < nLength; i++ )
+    {
+        if( nList[i] == nIndex )
+            return uno::makeAny( sal_True );
+    }
+
+    return uno::makeAny( sal_False );
+}
+
+void SAL_CALL
+ScVbaListBox::setRowSource( const rtl::OUString& _rowsource ) throw (uno::RuntimeException)
+{
+    ScVbaControl::setRowSource( _rowsource );
+    mpListHelper->setRowSource( _rowsource );
+}
+
+sal_Int32 SAL_CALL
+ScVbaListBox::getListCount() throw (uno::RuntimeException)
+{
+    return mpListHelper->getListCount();
+}
+
+uno::Any SAL_CALL
+ScVbaListBox::List( const ::uno::Any& pvargIndex, const uno::Any& pvarColumn ) throw (uno::RuntimeException)
+{
+    return mpListHelper->List( pvargIndex, pvarColumn );
+}
+
+rtl::OUString&
+ScVbaListBox::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaListBox") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaListBox::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ScVbaListBox" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbalistbox.hxx b/vbahelper/source/msforms/vbalistbox.hxx
new file mode 100644
index 0000000..e653338
--- /dev/null
+++ b/vbahelper/source/msforms/vbalistbox.hxx
@@ -0,0 +1,90 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbalistbox.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_LISTBOX_HXX
+#define SC_VBA_LISTBOX_HXX
+#include <cppuhelper/implbase2.hxx>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/script/XDefaultProperty.hpp>
+#include <ooo/vba/msforms/XListBox.hpp>
+#include <com/sun/star/beans/PropertyAttribute.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbapropvalue.hxx>
+#include "vbalistcontrolhelper.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper2<ScVbaControl, ov::msforms::XListBox, css::script::XDefaultProperty > ListBoxImpl_BASE;
+class ScVbaListBox : public ListBoxImpl_BASE
+    ,public PropListener
+{
+    std::auto_ptr< ListControlHelper > mpListHelper;
+    rtl::OUString sSourceName;
+    rtl::OUString msDftPropName;
+
+    sal_Int16 m_nIndex;
+
+public:
+    ScVbaListBox( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
+
+    // Attributes
+    virtual css::uno::Any SAL_CALL getListIndex() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setListIndex( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getListCount() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const ::rtl::OUString& _text ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getMultiSelect() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMultiSelect( sal_Bool _multiselect ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Selected( ::sal_Int32 index ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual void SAL_CALL AddItem( const css::uno::Any& pvargItem, const css::uno::Any& pvargIndex ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL removeItem( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Clear(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL List( const css::uno::Any& pvargIndex, const css::uno::Any& pvarColumn ) throw (css::uno::RuntimeException);
+    // XControl
+    virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
+
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+
+    //PropListener
+    virtual void setValueEvent( const css::uno::Any& value );
+    virtual css::uno::Any getValueEvent();
+
+
+};
+
+#endif //
diff --git a/vbahelper/source/msforms/vbalistcontrolhelper.cxx b/vbahelper/source/msforms/vbalistcontrolhelper.cxx
new file mode 100644
index 0000000..76763b4
--- /dev/null
+++ b/vbahelper/source/msforms/vbalistcontrolhelper.cxx
@@ -0,0 +1,146 @@
+#include <vbalistcontrolhelper.hxx>
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+const static rtl::OUString ITEMS( RTL_CONSTASCII_USTRINGPARAM("StringItemList") );
+
+void SAL_CALL
+ListControlHelper::AddItem( const uno::Any& pvargItem, const uno::Any& pvargIndex ) throw (uno::RuntimeException)
+{
+    if ( pvargItem.hasValue()  )
+    {
+        uno::Sequence< rtl::OUString > sList;
+        m_xProps->getPropertyValue( ITEMS ) >>= sList;
+
+        sal_Int32 nIndex = sList.getLength();
+
+        if ( pvargIndex.hasValue() )
+            pvargIndex >>= nIndex;
+
+        rtl::OUString sString = getAnyAsString( pvargItem );
+
+        // if no index specified or item is to be appended to end of
+        // list just realloc the array and set the last item
+        if ( nIndex  == sList.getLength() )
+        {
+            sal_Int32 nOldSize = sList.getLength();
+            sList.realloc( nOldSize + 1 );
+            sList[ nOldSize ] = sString;
+        }
+        else
+        {
+            // just copy those elements above the one to be inserted
+            std::vector< rtl::OUString > sVec;
+            // reserve just the amount we need to copy
+            sVec.reserve( sList.getLength() - nIndex );
+
+            // point at first element to copy
+            rtl::OUString* pString = sList.getArray() + nIndex;
+            const rtl::OUString* pEndString = sList.getArray() + sList.getLength();
+            // insert the new element
+            sVec.push_back( sString );
+            // copy elements
+            for ( ; pString != pEndString; ++pString )
+                sVec.push_back( *pString );
+
+            sList.realloc(  sList.getLength() + 1 );
+
+            // point at first element to be overwritten
+            pString = sList.getArray() + nIndex;
+            pEndString = sList.getArray() + sList.getLength();
+            std::vector< rtl::OUString >::iterator it = sVec.begin();
+            for ( ; pString != pEndString; ++pString, ++it)
+                *pString = *it;
+            //
+        }
+
+        m_xProps->setPropertyValue( ITEMS, uno::makeAny( sList ) );
+
+    }
+}
+
+void SAL_CALL
+ListControlHelper::removeItem( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    sal_Int32 nIndex = 0;
+    // for int index
+    if ( index >>= nIndex  )
+    {
+        uno::Sequence< rtl::OUString > sList;
+        m_xProps->getPropertyValue( ITEMS ) >>= sList;
+        if( nIndex < 0 || nIndex > ( sList.getLength() - 1 ) )
+            throw uno::RuntimeException( rtl::OUString::createFromAscii( "Invalid index" ), uno::Reference< uno::XInterface > () );
+        if( sList.hasElements() )
+        {
+            if( sList.getLength() == 1 )
+            {
+                Clear();
+                return;
+            }
+            for( sal_Int32 i = nIndex; i < ( sList.getLength()-1 ); i++ )
+            {
+                sList[i] = sList[i+1];
+            }
+            sList.realloc(  sList.getLength() - 1 );
+        }
+
+        m_xProps->setPropertyValue( ITEMS, uno::makeAny( sList ) );
+    }
+}
+
+void SAL_CALL
+ListControlHelper::Clear(  ) throw (uno::RuntimeException)
+{
+    // urk, setValue doesn't seem to work !!
+    //setValue( uno::makeAny( sal_Int16() ) );
+    m_xProps->setPropertyValue( ITEMS, uno::makeAny( uno::Sequence< rtl::OUString >() ) );
+}
+
+void SAL_CALL
+ListControlHelper::setRowSource( const rtl::OUString& _rowsource ) throw (uno::RuntimeException)
+{
+    if ( _rowsource.getLength() == 0 )
+        Clear();
+}
+
+sal_Int32 SAL_CALL
+ListControlHelper::getListCount() throw (uno::RuntimeException)
+{
+    uno::Sequence< rtl::OUString > sList;
+    m_xProps->getPropertyValue( ITEMS ) >>= sList;
+    return sList.getLength();
+}
+
+uno::Any SAL_CALL
+ListControlHelper::List( const ::uno::Any& pvargIndex, const uno::Any& pvarColumn ) throw (uno::RuntimeException)
+{
+    uno::Sequence< rtl::OUString > sList;
+    m_xProps->getPropertyValue( ITEMS ) >>= sList;
+    sal_Int16 nLength = static_cast< sal_Int16 >( sList.getLength() );
+    uno::Any aRet;
+    if ( pvargIndex.hasValue() )
+    {
+        sal_Int16 nIndex = -1;
+        pvargIndex >>= nIndex;
+        if( nIndex < 0 || nIndex >= nLength )
+            throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Bad row Index" ), uno::Reference< uno::XInterface >() );
+        aRet <<= sList[ nIndex ];
+    }
+    else if ( pvarColumn.hasValue() ) // pvarColumn on its own would be bad
+            throw uno::RuntimeException( rtl::OUString::createFromAscii(
+                    "Bad column Index" ), uno::Reference< uno::XInterface >() );
+    else // List() ( e.g. no args )
+    {
+        uno::Sequence< uno::Sequence< rtl::OUString > > sReturnArray( nLength );
+        for ( sal_Int32 i = 0; i < nLength; ++i )
+        {
+            sReturnArray[ i ].realloc( 10 );
+            sReturnArray[ i ][ 0 ] = sList[ i ];
+        }
+        aRet = uno::makeAny( sReturnArray );
+    }
+    return aRet;
+}
diff --git a/vbahelper/source/msforms/vbalistcontrolhelper.hxx b/vbahelper/source/msforms/vbalistcontrolhelper.hxx
new file mode 100644
index 0000000..d56729d
--- /dev/null
+++ b/vbahelper/source/msforms/vbalistcontrolhelper.hxx
@@ -0,0 +1,20 @@
+#ifndef SC_VBA_LISTCONTROLHELPER
+#define SC_VBA_LISTCONTROLHELPER
+
+#include <vbahelper/vbahelper.hxx>
+
+class ListControlHelper
+{
+    css::uno::Reference< css::beans::XPropertySet > m_xProps;
+
+public:
+    ListControlHelper( const css::uno::Reference< css::beans::XPropertySet >& rxControl ) : m_xProps( rxControl ){}
+    virtual ~ListControlHelper() {}
+    virtual void SAL_CALL AddItem( const css::uno::Any& pvargItem, const css::uno::Any& pvargIndex ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL removeItem( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+        virtual void SAL_CALL setRowSource( const rtl::OUString& _rowsource ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getListCount() throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL List( const css::uno::Any& pvargIndex, const css::uno::Any& pvarColumn ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Clear(  ) throw (css::uno::RuntimeException);
+};
+#endif
diff --git a/vbahelper/source/msforms/vbamultipage.cxx b/vbahelper/source/msforms/vbamultipage.cxx
new file mode 100644
index 0000000..69410db
--- /dev/null
+++ b/vbahelper/source/msforms/vbamultipage.cxx
@@ -0,0 +1,132 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbamultipage.hxx"
+#include <ooo/vba/XCollection.hpp>
+#include "vbapages.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+// uno servicename com.sun.star.awt.UnoControlProgressBarMode
+const rtl::OUString SVALUE( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") );
+const rtl::OUString SVALUEMAX( RTL_CONSTASCII_USTRINGPARAM("ProgressValueMax") );
+const rtl::OUString SSTEP( RTL_CONSTASCII_USTRINGPARAM("Step") );
+
+typedef cppu::WeakImplHelper1< container::XIndexAccess > PagesImpl_Base;
+class PagesImpl : public PagesImpl_Base
+{
+    sal_Int32 mnPages;
+public:
+    PagesImpl( sal_Int32 nPages ) : mnPages( nPages ) {}
+    virtual ::sal_Int32 SAL_CALL getCount() throw (uno::RuntimeException) { return mnPages; }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (lang::IndexOutOfBoundsException, lang::WrappedTargetException, ::uno::RuntimeException)
+    {
+        if ( Index < 0 || Index > mnPages )
+            throw lang::IndexOutOfBoundsException();
+        return uno::makeAny( uno::Reference< uno::XInterface >() );
+    }
+    // XElementAccess
+    virtual uno::Type SAL_CALL getElementType() throw (uno::RuntimeException)
+    {
+        // no Pages object yet #FIXME
+        //return msforms::XPage::static_type(0);
+        return uno::XInterface::static_type(0);
+    }
+    virtual ::sal_Bool SAL_CALL hasElements( ) throw (uno::RuntimeException)
+    {
+        return ( mnPages > 0 );
+    }
+};
+uno::Reference< container::XIndexAccess >
+ScVbaMultiPage::getPages( sal_Int32 nPages )
+{
+    return new PagesImpl( nPages );
+}
+
+ScVbaMultiPage::ScVbaMultiPage( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, const uno::Reference< uno::XInterface >& xDialog ) : MultiPageImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+    mxDialogProps.set( xDialog, uno::UNO_QUERY_THROW );
+    // set dialog step to value of multipage pseudo model
+    setValue(getValue());
+}
+
+// Attributes
+sal_Int32 SAL_CALL
+ScVbaMultiPage::getValue() throw (css::uno::RuntimeException)
+{
+    sal_Int32 nValue = 0;
+    m_xProps->getPropertyValue( SVALUE ) >>= nValue;
+    return nValue;
+}
+
+void SAL_CALL
+ScVbaMultiPage::setValue( const sal_Int32 _value ) throw (::com::sun::star::uno::RuntimeException)
+{
+    // track change in dialog ( dialog value is 1 based, 0 is a special value )
+    m_xProps->setPropertyValue( SVALUE, uno::makeAny( _value ) );
+    mxDialogProps->setPropertyValue( SSTEP, uno::makeAny( _value + 1) );
+}
+
+
+rtl::OUString&
+ScVbaMultiPage::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaMultiPage") );
+    return sImplName;
+}
+
+uno::Any SAL_CALL
+ScVbaMultiPage::Pages( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    sal_Int32 nValue = 0;
+    m_xProps->getPropertyValue( SVALUEMAX ) >>= nValue;
+    uno::Reference< XCollection > xColl( new ScVbaPages( this, mxContext, getPages( nValue ) ) );
+    if ( !index.hasValue() )
+        return uno::makeAny( xColl );
+    return xColl->Item( uno::makeAny( index ), uno::Any() );
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaMultiPage::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.MultiPage" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbamultipage.hxx b/vbahelper/source/msforms/vbamultipage.hxx
new file mode 100644
index 0000000..b0214f6
--- /dev/null
+++ b/vbahelper/source/msforms/vbamultipage.hxx
@@ -0,0 +1,65 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_MULTIPAGE_HXX
+#define SC_VBA_MULTIPAGE_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XMultiPage.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+//#include <cppuhelper/implbase2.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XMultiPage > MultiPageImpl_BASE;
+
+class ScVbaMultiPage : public MultiPageImpl_BASE
+{
+    css::uno::Reference< css::container::XIndexAccess > getPages( sal_Int32 nPages );
+    css::uno::Reference< css::beans::XPropertySet > mxDialogProps;
+public:
+    ScVbaMultiPage( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper, const css::uno::Reference< css::uno::XInterface >& xDialog );
+   // Attributes
+    virtual sal_Int32 SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( sal_Int32 _value ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Pages( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+};
+#endif //SC_VBA_LABEL_HXX
diff --git a/vbahelper/source/msforms/vbapages.cxx b/vbahelper/source/msforms/vbapages.cxx
new file mode 100644
index 0000000..af06cff
--- /dev/null
+++ b/vbahelper/source/msforms/vbapages.cxx
@@ -0,0 +1,80 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbapages.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+ScVbaPages::ScVbaPages( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xPages ) throw( lang::IllegalArgumentException ) : ScVbaPages_BASE( xParent, xContext, xPages )
+{
+}
+
+uno::Type SAL_CALL
+ScVbaPages::getElementType() throw (uno::RuntimeException)
+{
+    // return msforms::XPage::static_type(0);
+    return uno::XInterface::static_type(0);
+}
+
+uno::Any
+ScVbaPages::createCollectionObject( const css::uno::Any& aSource )
+{
+    return aSource;
+}
+
+rtl::OUString&
+ScVbaPages::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaPages") );
+    return sImplName;
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+ScVbaPages::createEnumeration() throw (uno::RuntimeException)
+{
+    return uno::Reference< container::XEnumeration >();
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaPages::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.Pages" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbapages.hxx b/vbahelper/source/msforms/vbapages.hxx
new file mode 100644
index 0000000..b61e21b
--- /dev/null
+++ b/vbahelper/source/msforms/vbapages.hxx
@@ -0,0 +1,64 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_PAGES_HXX
+#define SC_VBA_PAGES_HXX
+
+#include <ooo/vba/office/MsoShapeType.hpp>
+#include <com/sun/star/lang/XEventListener.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <ooo/vba/msforms/XPages.hpp>
+#include <cppuhelper/implbase2.hxx>
+#include <cppuhelper/implbase1.hxx>
+
+#include <vbahelper/vbacollectionimpl.hxx>
+typedef CollTestImplHelper<
+ov::msforms::XPages > ScVbaPages_BASE;
+
+class ScVbaPages : public ScVbaPages_BASE
+{
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+public:
+    ScVbaPages( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xPages ) throw ( css::lang::IllegalArgumentException );
+    virtual ~ScVbaPages() {}
+        // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+     // ScVbaPages_BASE
+     virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+};
+#endif//SC_VBA_SHAPE_HXX
diff --git a/vbahelper/source/msforms/vbaprogressbar.cxx b/vbahelper/source/msforms/vbaprogressbar.cxx
new file mode 100644
index 0000000..27f425f
--- /dev/null
+++ b/vbahelper/source/msforms/vbaprogressbar.cxx
@@ -0,0 +1,78 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbaprogressbar.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+// uno servicename com.sun.star.awt.UnoControlProgressBarMode
+const rtl::OUString SVALUE( RTL_CONSTASCII_USTRINGPARAM("ProgressValue") );
+
+ScVbaProgressBar::ScVbaProgressBar( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ProgressBarImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+uno::Any SAL_CALL
+ScVbaProgressBar::getValue() throw (css::uno::RuntimeException)
+{
+    return m_xProps->getPropertyValue( SVALUE );
+}
+
+void SAL_CALL
+ScVbaProgressBar::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SVALUE,  _value );
+}
+
+rtl::OUString&
+ScVbaProgressBar::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaProgressBar") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaProgressBar::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Label" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbaprogressbar.hxx b/vbahelper/source/msforms/vbaprogressbar.hxx
new file mode 100644
index 0000000..86cbae4
--- /dev/null
+++ b/vbahelper/source/msforms/vbaprogressbar.hxx
@@ -0,0 +1,59 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_PROGRESSBAR_HXX
+#define SC_VBA_PROGRESSBAR_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XProgressBar.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <cppuhelper/implbase2.hxx>
+
+typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XProgressBar, css::script::XDefaultProperty  > ProgressBarImpl_BASE;
+
+class ScVbaProgressBar : public ProgressBarImpl_BASE
+{
+public:
+    ScVbaProgressBar( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+};
+#endif //SC_VBA_LABEL_HXX
diff --git a/vbahelper/source/msforms/vbaradiobutton.cxx b/vbahelper/source/msforms/vbaradiobutton.cxx
new file mode 100644
index 0000000..3ce00bf
--- /dev/null
+++ b/vbahelper/source/msforms/vbaradiobutton.cxx
@@ -0,0 +1,107 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaradiobutton.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbaradiobutton.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+const static rtl::OUString STATE( RTL_CONSTASCII_USTRINGPARAM("State") );
+ScVbaRadioButton::ScVbaRadioButton( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : RadioButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaRadioButton::getCaption() throw (css::uno::RuntimeException)
+{
+    rtl::OUString Label;
+    m_xProps->getPropertyValue( LABEL ) >>= Label;
+    return Label;
+}
+
+void SAL_CALL
+ScVbaRadioButton::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
+}
+
+uno::Any SAL_CALL
+ScVbaRadioButton::getValue() throw (css::uno::RuntimeException)
+{
+    sal_Int16 nValue = -1;
+    m_xProps->getPropertyValue( STATE ) >>= nValue;
+    if( nValue != 0 )
+        nValue = -1;
+//    return uno::makeAny( nValue );
+// I must be missing something MSO says value should be -1 if selected, 0 if not
+// selected
+    return uno::makeAny( ( nValue == -1 ) ? sal_True : sal_False );
+
+}
+
+void SAL_CALL
+ScVbaRadioButton::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
+{
+    sal_Int16 nValue = 0;
+    sal_Bool bValue = sal_False;
+    if( _value >>= nValue )
+    {
+        if( nValue == -1)
+        nValue = 1;
+    }
+    else if ( _value >>= bValue )
+    {
+        if ( bValue )
+            nValue = 1;
+    }
+    m_xProps->setPropertyValue( STATE, uno::makeAny( nValue ) );
+}
+
+rtl::OUString&
+ScVbaRadioButton::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaRadioButton") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaRadioButton::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.RadioButton" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbaradiobutton.hxx b/vbahelper/source/msforms/vbaradiobutton.hxx
new file mode 100644
index 0000000..b13b126
--- /dev/null
+++ b/vbahelper/source/msforms/vbaradiobutton.hxx
@@ -0,0 +1,55 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbaradiobutton.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_RADIOBUTTON_HXX
+#define SC_VBA_RADIOBUTTON_HXX
+#include <ooo/vba/msforms/XRadioButton.hpp>
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <cppuhelper/implbase2.hxx>
+
+typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XRadioButton, css::script::XDefaultProperty > RadioButtonImpl_BASE;
+
+class ScVbaRadioButton : public RadioButtonImpl_BASE
+{
+public:
+    ScVbaRadioButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
+   // Attributes
+    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue(const com::sun::star::uno::Any&) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+
+};
+#endif //SC_VBA_RADIOBUTTON_HXX
diff --git a/vbahelper/source/msforms/vbascrollbar.cxx b/vbahelper/source/msforms/vbascrollbar.cxx
new file mode 100644
index 0000000..3da3230
--- /dev/null
+++ b/vbahelper/source/msforms/vbascrollbar.cxx
@@ -0,0 +1,139 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbascrollbar.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LARGECHANGE( RTL_CONSTASCII_USTRINGPARAM("BlockIncrement") );
+const static rtl::OUString SMALLCHANGE( RTL_CONSTASCII_USTRINGPARAM("LineIncrement") );
+const static rtl::OUString ORIENTATION( RTL_CONSTASCII_USTRINGPARAM("Orientation") );
+const static rtl::OUString SCROLLVALUE( RTL_CONSTASCII_USTRINGPARAM("ScrollValue") );
+const static rtl::OUString SCROLLMAX( RTL_CONSTASCII_USTRINGPARAM("ScrollValueMax") );
+const static rtl::OUString SCROLLMIN( RTL_CONSTASCII_USTRINGPARAM("ScrollValueMin") );
+
+ScVbaScrollBar::ScVbaScrollBar(  const css::uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : ScrollBarImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+uno::Any SAL_CALL
+ScVbaScrollBar::getValue() throw (css::uno::RuntimeException)
+{
+    return  m_xProps->getPropertyValue( SCROLLVALUE );
+}
+
+void SAL_CALL
+ScVbaScrollBar::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SCROLLVALUE, _value );
+}
+
+::sal_Int32 SAL_CALL
+ScVbaScrollBar::getMax() throw (uno::RuntimeException)
+{
+    sal_Int32 nMax = 0;
+    m_xProps->getPropertyValue( SCROLLMAX ) >>= nMax;
+    return nMax;
+}
+
+void SAL_CALL
+ScVbaScrollBar::setMax( sal_Int32 nVal ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SCROLLMAX, uno::makeAny( nVal ) );
+}
+
+::sal_Int32 SAL_CALL
+ScVbaScrollBar::getMin() throw (uno::RuntimeException)
+{
+    sal_Int32 nVal = 0;
+    m_xProps->getPropertyValue( SCROLLMIN ) >>= nVal;
+    return nVal;
+}
+
+void SAL_CALL
+ScVbaScrollBar::setMin( sal_Int32 nVal ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SCROLLMIN, uno::makeAny( nVal ) );
+}
+
+void SAL_CALL
+ScVbaScrollBar::setLargeChange( ::sal_Int32 _largechange ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LARGECHANGE, uno::makeAny( _largechange ) );
+}
+
+::sal_Int32 SAL_CALL
+ScVbaScrollBar::getLargeChange() throw (uno::RuntimeException)
+{
+    sal_Int32 nVal = 0;
+    m_xProps->getPropertyValue( LARGECHANGE ) >>= nVal;
+    return nVal;
+}
+
+::sal_Int32 SAL_CALL
+ScVbaScrollBar::getSmallChange() throw (uno::RuntimeException)
+{
+    sal_Int32 nSmallChange = 0;
+    m_xProps->getPropertyValue( SMALLCHANGE ) >>= nSmallChange;
+    return nSmallChange;
+}
+
+void SAL_CALL
+ScVbaScrollBar::setSmallChange( ::sal_Int32 _smallchange ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SMALLCHANGE, uno::makeAny( _smallchange ) );
+}
+
+rtl::OUString&
+ScVbaScrollBar::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaScrollBar") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaScrollBar::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Frame" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbascrollbar.hxx b/vbahelper/source/msforms/vbascrollbar.hxx
new file mode 100644
index 0000000..459f610
--- /dev/null
+++ b/vbahelper/source/msforms/vbascrollbar.hxx
@@ -0,0 +1,66 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_SCROLLBAR_HXX
+#define SC_VBA_SCROLLBAR_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XScrollBar.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XScrollBar > ScrollBarImpl_BASE;
+
+class ScVbaScrollBar : public ScrollBarImpl_BASE
+{
+public:
+    ScVbaScrollBar( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getMax() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMax( ::sal_Int32 _max ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getMin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMin( ::sal_Int32 _min ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getLargeChange() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setLargeChange( ::sal_Int32 _largechange ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getSmallChange() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSmallChange( ::sal_Int32 _smallchange ) throw (css::uno::RuntimeException);
+
+
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif //SC_VBA_LABEL_HXX
diff --git a/vbahelper/source/msforms/vbaspinbutton.cxx b/vbahelper/source/msforms/vbaspinbutton.cxx
new file mode 100644
index 0000000..c9da8cf
--- /dev/null
+++ b/vbahelper/source/msforms/vbaspinbutton.cxx
@@ -0,0 +1,109 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbaspinbutton.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString ORIENTATION( RTL_CONSTASCII_USTRINGPARAM("Orientation") );
+const static rtl::OUString SPINVALUE( RTL_CONSTASCII_USTRINGPARAM("SpinValue") );
+const static rtl::OUString SPINMAX( RTL_CONSTASCII_USTRINGPARAM("SpinValueMax") );
+const static rtl::OUString SPINMIN( RTL_CONSTASCII_USTRINGPARAM("SpinValueMin") );
+
+ScVbaSpinButton::ScVbaSpinButton(  const css::uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper ) : SpinButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+}
+
+// Attributes
+uno::Any SAL_CALL
+ScVbaSpinButton::getValue() throw (css::uno::RuntimeException)
+{
+    return  m_xProps->getPropertyValue( SPINVALUE );
+}
+
+void SAL_CALL
+ScVbaSpinButton::setValue( const uno::Any& _value ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SPINVALUE, _value );
+}
+
+::sal_Int32 SAL_CALL
+ScVbaSpinButton::getMax() throw (uno::RuntimeException)
+{
+    sal_Int32 nMax = 0;
+    m_xProps->getPropertyValue( SPINMAX ) >>= nMax;
+    return nMax;
+}
+
+void SAL_CALL
+ScVbaSpinButton::setMax( sal_Int32 nVal ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SPINMAX, uno::makeAny( nVal ) );
+}
+
+::sal_Int32 SAL_CALL
+ScVbaSpinButton::getMin() throw (uno::RuntimeException)
+{
+    sal_Int32 nVal = 0;
+    m_xProps->getPropertyValue( SPINMIN ) >>= nVal;
+    return nVal;
+}
+
+void SAL_CALL
+ScVbaSpinButton::setMin( sal_Int32 nVal ) throw (uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( SPINMIN, uno::makeAny( nVal ) );
+}
+
+rtl::OUString&
+ScVbaSpinButton::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaSpinButton") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaSpinButton::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.Frame" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbaspinbutton.hxx b/vbahelper/source/msforms/vbaspinbutton.hxx
new file mode 100644
index 0000000..8f1d6e3
--- /dev/null
+++ b/vbahelper/source/msforms/vbaspinbutton.hxx
@@ -0,0 +1,61 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_SPINBUTTON_HXX
+#define SC_VBA_SPINBUTTON_HXX
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XSpinButton.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XSpinButton > SpinButtonImpl_BASE;
+
+class ScVbaSpinButton : public SpinButtonImpl_BASE
+{
+public:
+    ScVbaSpinButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper  );
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getMax() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMax( ::sal_Int32 _max ) throw (css::uno::RuntimeException);
+    virtual ::sal_Int32 SAL_CALL getMin() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMin( ::sal_Int32 _min ) throw (css::uno::RuntimeException);
+
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif //SC_VBA_SPINBUTTON_HXX
diff --git a/vbahelper/source/msforms/vbatextbox.cxx b/vbahelper/source/msforms/vbatextbox.cxx
new file mode 100644
index 0000000..f657455
--- /dev/null
+++ b/vbahelper/source/msforms/vbatextbox.cxx
@@ -0,0 +1,137 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbatextbox.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/text/XTextRange.hpp>
+
+#include "vbatextbox.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+
+ScVbaTextBox::ScVbaTextBox( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, AbstractGeometryAttributes* pGeomHelper, bool bDialog ) : TextBoxImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper ), mbDialog( bDialog )
+{
+}
+
+// Attributes
+uno::Any SAL_CALL
+ScVbaTextBox::getValue() throw (css::uno::RuntimeException)
+{
+    return uno::makeAny( getText() );
+}
+
+void SAL_CALL
+ScVbaTextBox::setValue( const uno::Any& _value ) throw (css::uno::RuntimeException)
+{
+    rtl::OUString sVal = getAnyAsString( _value );
+    setText( sVal );
+}
+
+//getString() will cause some imfo lose.
+rtl::OUString SAL_CALL
+ScVbaTextBox::getText() throw (css::uno::RuntimeException)
+{
+    uno::Any aValue;
+    aValue = m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Text" ) ) );
+    rtl::OUString sString;
+    aValue >>= sString;
+    return sString;
+}
+
+void SAL_CALL
+ScVbaTextBox::setText( const rtl::OUString& _text ) throw (css::uno::RuntimeException)
+{
+    if ( !mbDialog )
+    {
+    uno::Reference< text::XTextRange > xTextRange( m_xProps, uno::UNO_QUERY_THROW );
+    xTextRange->setString( _text );
+}
+    else
+        m_xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Text") ), uno::makeAny( _text ) );
+}
+
+sal_Int32 SAL_CALL
+ScVbaTextBox::getMaxLength() throw (css::uno::RuntimeException)
+{
+    uno::Any aValue;
+    aValue = m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MaxTextLen" ) ) );
+    sal_Int32 nMaxLength = 0;
+    aValue >>= nMaxLength;
+    return nMaxLength;
+}
+
+void SAL_CALL
+ScVbaTextBox::setMaxLength( sal_Int32 _maxlength ) throw (css::uno::RuntimeException)
+{
+    uno::Any aValue( _maxlength );
+    m_xProps->setPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MaxTextLen" ) ), aValue);
+}
+
+sal_Bool SAL_CALL
+ScVbaTextBox::getMultiline() throw (css::uno::RuntimeException)
+{
+    uno::Any aValue;
+    aValue = m_xProps->getPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiLine" ) ) );
+    sal_Bool bRet = false;
+    aValue >>= bRet;
+    return bRet;
+}
+
+void SAL_CALL
+ScVbaTextBox::setMultiline( sal_Bool _multiline ) throw (css::uno::RuntimeException)
+{
+    uno::Any aValue( _multiline );
+    m_xProps->setPropertyValue
+            (rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "MultiLine" ) ), aValue);
+}
+
+rtl::OUString&
+ScVbaTextBox::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaTextBox") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaTextBox::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.TextBox" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbatextbox.hxx b/vbahelper/source/msforms/vbatextbox.hxx
new file mode 100644
index 0000000..ac2d8e7
--- /dev/null
+++ b/vbahelper/source/msforms/vbatextbox.hxx
@@ -0,0 +1,59 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbatextbox.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_TEXTBOX_HXX
+#define SC_VBA_TEXTBOX_HXX
+#include <cppuhelper/implbase2.hxx>
+#include <ooo/vba/msforms/XTextBox.hpp>
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XTextBox, css::script::XDefaultProperty > TextBoxImpl_BASE;
+
+class ScVbaTextBox : public TextBoxImpl_BASE
+{
+    bool mbDialog;
+public:
+    ScVbaTextBox( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper, bool bDialog = false );
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+    virtual rtl::OUString SAL_CALL getText() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setText( const rtl::OUString& _text ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getMaxLength() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMaxLength( sal_Int32 _maxlength ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getMultiline() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setMultiline( sal_Bool _multiline ) throw (css::uno::RuntimeException);
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif //SC_VBA_TEXTBOX_HXX
diff --git a/vbahelper/source/msforms/vbatogglebutton.cxx b/vbahelper/source/msforms/vbatogglebutton.cxx
new file mode 100644
index 0000000..78948a2
--- /dev/null
+++ b/vbahelper/source/msforms/vbatogglebutton.cxx
@@ -0,0 +1,107 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbatogglebutton.hxx"
+#include <vector>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+const static rtl::OUString LABEL( RTL_CONSTASCII_USTRINGPARAM("Label") );
+const static rtl::OUString TOGGLE( RTL_CONSTASCII_USTRINGPARAM("Toggle") );
+const static rtl::OUString STATE( RTL_CONSTASCII_USTRINGPARAM("State") );
+ScVbaToggleButton::ScVbaToggleButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< uno::XInterface >& xControl, const uno::Reference< frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper ) : ToggleButtonImpl_BASE( xParent, xContext, xControl, xModel, pGeomHelper )
+{
+    OSL_TRACE("ScVbaToggleButton(ctor)");
+    m_xProps->setPropertyValue( TOGGLE, uno::makeAny( sal_True ) );
+}
+
+ScVbaToggleButton::~ScVbaToggleButton()
+{
+    OSL_TRACE("~ScVbaToggleButton(dtor)");
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaToggleButton::getCaption() throw (css::uno::RuntimeException)
+{
+    rtl::OUString Label;
+    m_xProps->getPropertyValue( LABEL ) >>= Label;
+    return Label;
+}
+
+void SAL_CALL
+ScVbaToggleButton::setCaption( const rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( LABEL, uno::makeAny( _caption ) );
+}
+
+uno::Any SAL_CALL
+ScVbaToggleButton::getValue() throw (uno::RuntimeException)
+{
+    sal_Int16 nState = 0;
+        m_xProps->getPropertyValue( STATE ) >>= nState;
+	return uno::makeAny( nState ? sal_Int16( -1 ) : sal_Int16( 0 ) );
+}
+
+void SAL_CALL
+ScVbaToggleButton::setValue( const uno::Any& _value ) throw (uno::RuntimeException)
+{
+    sal_Int16 nState = 0;
+    _value >>= nState;
+        OSL_TRACE( "nState - %d", nState );
+    nState = ( nState == -1 ) ?  1 : 0;
+        OSL_TRACE( "nState - %d", nState );
+    m_xProps->setPropertyValue( STATE, uno::makeAny(  nState ) );
+}
+
+rtl::OUString&
+ScVbaToggleButton::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaToggleButton") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaToggleButton::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ToggleButton" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/msforms/vbatogglebutton.hxx b/vbahelper/source/msforms/vbatogglebutton.hxx
new file mode 100644
index 0000000..1932d51
--- /dev/null
+++ b/vbahelper/source/msforms/vbatogglebutton.hxx
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_TOGGLEBUTTON_HXX
+#define SC_VBA_TOGGLEBUTTON_HXX
+#include <cppuhelper/implbase2.hxx>
+#include <ooo/vba/msforms/XToggleButton.hpp>
+
+#include "vbacontrol.hxx"
+#include <vbahelper/vbahelper.hxx>
+
+typedef cppu::ImplInheritanceHelper2< ScVbaControl, ov::msforms::XToggleButton, css::script::XDefaultProperty  > ToggleButtonImpl_BASE;
+
+class ScVbaToggleButton : public ToggleButtonImpl_BASE
+{
+    rtl::OUString msDftPropName;
+public:
+    ScVbaToggleButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::uno::XInterface >& xControl, const css::uno::Reference< css::frame::XModel >& xModel, ov::AbstractGeometryAttributes* pGeomHelper );
+    ~ScVbaToggleButton();
+   // Attributes
+    virtual css::uno::Any SAL_CALL getValue() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException);
+
+    virtual rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    // XDefaultProperty
+    rtl::OUString SAL_CALL getDefaultPropertyName(  ) throw (css::uno::RuntimeException) { return ::rtl::OUString::createFromAscii("Value"); }
+};
+#endif //SC_VBA_TOGGLEBUTTON_HXX
diff --git a/vbahelper/source/msforms/vbauserform.cxx b/vbahelper/source/msforms/vbauserform.cxx
new file mode 100644
index 0000000..882b5ec
--- /dev/null
+++ b/vbahelper/source/msforms/vbauserform.cxx
@@ -0,0 +1,226 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include <vbahelper/helperdecl.hxx>
+#include "vbauserform.hxx"
+#include <com/sun/star/awt/XControl.hpp>
+#include <com/sun/star/awt/XControlContainer.hpp>
+#include <com/sun/star/beans/PropertyConcept.hpp>
+#include <basic/sbx.hxx>
+#include <basic/sbstar.hxx>
+#include <basic/sbmeth.hxx>
+#include "vbacontrols.hxx"
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+// some little notes
+// XDialog implementation has the following interesting bits
+// a Controls property ( which is an array of the container controls )
+//   each item in the controls array is a XControl, where the model is
+//   basically a property bag
+// additionally the XDialog instance has itself a model
+//     this model has a ControlModels ( array of models ) property
+//     the models in ControlModels can be accessed by name
+// also the XDialog is a XControl ( to access the model above
+
+ScVbaUserForm::ScVbaUserForm( uno::Sequence< uno::Any > const& aArgs, uno::Reference< uno::XComponentContext >const& xContext ) throw ( lang::IllegalArgumentException ) :  ScVbaUserForm_BASE( getXSomethingFromArgs< XHelperInterface >( aArgs, 0 ), xContext, getXSomethingFromArgs< uno::XInterface >( aArgs, 1 ), getXSomethingFromArgs< frame::XModel >( aArgs, 2 ), static_cast< ooo::vba::AbstractGeometryAttributes* >(0) ),  mbDispose( true )
+{
+    m_xDialog.set( m_xControl, uno::UNO_QUERY_THROW );
+    uno::Reference< awt::XControl > xControl( m_xDialog, uno::UNO_QUERY_THROW );
+    m_xProps.set( xControl->getModel(), uno::UNO_QUERY_THROW );
+    setGeometryHelper( new UserFormGeometryHelper( xContext, xControl ) );
+}
+
+ScVbaUserForm::~ScVbaUserForm()
+{
+}
+
+void SAL_CALL
+ScVbaUserForm::Show(  ) throw (uno::RuntimeException)
+{
+    OSL_TRACE("ScVbaUserForm::Show(  )");
+    short aRet = 0;
+        mbDispose = true;
+    if ( m_xDialog.is() )
+        aRet = m_xDialog->execute();
+    OSL_TRACE("ScVbaUserForm::Show() execute returned %d", aRet);
+    if ( mbDispose )
+    {
+        try
+        {
+            uno::Reference< lang::XComponent > xComp( m_xDialog, uno::UNO_QUERY_THROW );
+            m_xDialog = NULL;
+            xComp->dispose();
+            mbDispose = false;
+        }
+        catch( uno::Exception& )
+        {
+        }
+    }
+}
+
+rtl::OUString SAL_CALL
+ScVbaUserForm::getCaption() throw (::com::sun::star::uno::RuntimeException)
+{
+    rtl::OUString sCaption;
+    m_xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ) ) >>= sCaption;
+    return sCaption;
+}
+void
+ScVbaUserForm::setCaption( const ::rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException)
+{
+    m_xProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Title") ), uno::makeAny( _caption ) );
+}
+
+void SAL_CALL
+ScVbaUserForm::Hide(  ) throw (uno::RuntimeException)
+{
+    mbDispose = false;  // hide not dispose
+    if ( m_xDialog.is() )
+        m_xDialog->endExecute();
+}
+
+void SAL_CALL
+ScVbaUserForm::RePaint(  ) throw (uno::RuntimeException)
+{
+    // do nothing
+}
+
+void SAL_CALL
+ScVbaUserForm::UnloadObject(  ) throw (uno::RuntimeException)
+{
+    mbDispose = true;
+    if ( m_xDialog.is() )
+        m_xDialog->endExecute();
+}
+
+rtl::OUString&
+ScVbaUserForm::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaUserForm") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaUserForm::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.UserForm" ) );
+    }
+    return aServiceNames;
+}
+
+uno::Reference< beans::XIntrospectionAccess > SAL_CALL
+ScVbaUserForm::getIntrospection(  ) throw (uno::RuntimeException)
+{
+    return uno::Reference< beans::XIntrospectionAccess >();
+}
+
+uno::Any SAL_CALL
+ScVbaUserForm::invoke( const ::rtl::OUString& /*aFunctionName*/, const uno::Sequence< uno::Any >& /*aParams*/, uno::Sequence< ::sal_Int16 >& /*aOutParamIndex*/, uno::Sequence< uno::Any >& /*aOutParam*/ ) throw (lang::IllegalArgumentException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
+{
+    throw uno::RuntimeException(); // unsupported operation
+}
+
+void SAL_CALL
+ScVbaUserForm::setValue( const ::rtl::OUString& aPropertyName, const uno::Any& aValue ) throw (beans::UnknownPropertyException, script::CannotConvertException, reflection::InvocationTargetException, uno::RuntimeException)
+{
+    uno::Any aObject = getValue( aPropertyName );
+    // The Object *must* support XDefaultProperty here because getValue will
+    // only return properties that are Objects ( e.g. controls )
+    // e.g. Userform1.aControl = something
+    // 'aControl' has to support XDefaultProperty to make sense here
+    uno::Reference< script::XDefaultProperty > xDfltProp( aObject, uno::UNO_QUERY_THROW );
+    rtl::OUString aDfltPropName = xDfltProp->getDefaultPropertyName();
+    uno::Reference< beans::XIntrospectionAccess > xUnoAccess( getIntrospectionAccess( aObject ) );
+    uno::Reference< beans::XPropertySet > xPropSet( xUnoAccess->queryAdapter( ::getCppuType( (const uno::Reference< beans::XPropertySet > *)0 ) ), uno::UNO_QUERY_THROW );
+    xPropSet->setPropertyValue( aDfltPropName, aValue );
+}
+
+uno::Any SAL_CALL
+ScVbaUserForm::getValue( const ::rtl::OUString& aPropertyName ) throw (beans::UnknownPropertyException, uno::RuntimeException)
+{
+    uno::Reference< awt::XControl > xDialogControl( m_xDialog, uno::UNO_QUERY_THROW );
+    uno::Reference< awt::XControlContainer > xContainer( m_xDialog, uno::UNO_QUERY_THROW );
+    uno::Reference< awt::XControl > xControl = xContainer->getControl( aPropertyName );
+    ScVbaControlFactory aFac( mxContext, xControl, m_xModel );
+        uno::Reference< msforms::XControl > xVBAControl( aFac.createControl( xDialogControl->getModel() ) );
+        ScVbaControl* pControl  = dynamic_cast< ScVbaControl* >( xVBAControl.get() );
+        pControl->setGeometryHelper( new UserFormGeometryHelper( mxContext, xControl ) );
+    return uno::makeAny( xVBAControl );
+}
+
+::sal_Bool SAL_CALL
+ScVbaUserForm::hasMethod( const ::rtl::OUString& /*aName*/ ) throw (uno::RuntimeException)
+{
+    return sal_False;
+}
+uno::Any SAL_CALL
+ScVbaUserForm::Controls( const uno::Any& index ) throw (uno::RuntimeException)
+{
+    uno::Reference< awt::XControl > xDialogControl( m_xDialog, uno::UNO_QUERY_THROW );
+    uno::Reference< XCollection > xControls( new ScVbaControls( this, mxContext, xDialogControl ) );
+    if ( index.hasValue() )
+        return uno::makeAny( xControls->Item( index, uno::Any() ) );
+    return uno::makeAny( xControls );
+}
+
+::sal_Bool SAL_CALL
+ScVbaUserForm::hasProperty( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+{
+    uno::Reference< awt::XControl > xControl( m_xDialog, uno::UNO_QUERY );
+    OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xControl.is() );
+    if ( xControl.is() )
+    {
+        uno::Reference< container::XNameAccess > xNameAccess( xControl->getModel(), uno::UNO_QUERY_THROW );
+        sal_Bool bRes =  xNameAccess->hasByName( aName );
+    OSL_TRACE("ScVbaUserForm::hasProperty(%s) %d ---> %d", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr(), xControl.is(), bRes );
+        return bRes;
+    }
+    return sal_False;
+}
+
+namespace userform
+{
+namespace sdecl = comphelper::service_decl;
+sdecl::vba_service_class_<ScVbaUserForm, sdecl::with_args<true> > serviceImpl;
+extern sdecl::ServiceDecl const serviceDecl(
+    serviceImpl,
+    "ScVbaUserForm",
+    "ooo.vba.msforms.UserForm" );
+}
diff --git a/vbahelper/source/msforms/vbauserform.hxx b/vbahelper/source/msforms/vbauserform.hxx
new file mode 100644
index 0000000..be93dc7
--- /dev/null
+++ b/vbahelper/source/msforms/vbauserform.hxx
@@ -0,0 +1,77 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_USERFORM_HXX
+#define SC_VBA_USERFORM_HXX
+
+#include <cppuhelper/implbase1.hxx>
+#include <ooo/vba/msforms/XUserForm.hpp>
+#include <com/sun/star/awt/XDialog.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+
+#include <vbahelper/vbahelperinterface.hxx>
+#include "vbacontrol.hxx"
+
+//typedef InheritedHelperInterfaceImpl1< ov::msforms::XUserForm > ScVbaUserForm_BASE;
+typedef cppu::ImplInheritanceHelper1< ScVbaControl, ov::msforms::XUserForm > ScVbaUserForm_BASE;
+
+class ScVbaUserForm : public ScVbaUserForm_BASE
+{
+private:
+    css::uno::Reference< css::awt::XDialog > m_xDialog;
+    bool mbDispose;
+protected:
+public:
+    ScVbaUserForm( css::uno::Sequence< css::uno::Any > const& aArgs, css::uno::Reference< css::uno::XComponentContext >const& xContext ) throw ( css::lang::IllegalArgumentException );
+    virtual ~ScVbaUserForm();
+    // XUserForm
+    virtual void SAL_CALL RePaint(  ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL Show(  ) throw (css::uno::RuntimeException);
+    // XIntrospection
+    virtual css::uno::Reference< css::beans::XIntrospectionAccess > SAL_CALL getIntrospection(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL invoke( const ::rtl::OUString& aFunctionName, const css::uno::Sequence< css::uno::Any >& aParams, css::uno::Sequence< ::sal_Int16 >& aOutParamIndex, css::uno::Sequence< css::uno::Any >& aOutParam ) throw (css::lang::IllegalArgumentException, css::script::CannotConvertException, css::reflection::InvocationTargetException, css::uno::RuntimeException);
+    virtual void SAL_CALL setValue( const ::rtl::OUString& aPropertyName, const css::uno::Any& aValue ) throw (css::beans::UnknownPropertyException, css::script::CannotConvertException, css::reflection::InvocationTargetException, css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL getValue( const ::rtl::OUString& aPropertyName ) throw (css::beans::UnknownPropertyException, css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL hasMethod( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL hasProperty( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getCaption() throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const ::rtl::OUString& _caption ) throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL Hide(  ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL UnloadObject(  ) throw (css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Controls( const css::uno::Any& index ) throw (css::uno::RuntimeException);
+    //XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif
diff --git a/vbahelper/source/vbahelper/makefile.mk b/vbahelper/source/vbahelper/makefile.mk
new file mode 100644
index 0000000..11f1812
--- /dev/null
+++ b/vbahelper/source/vbahelper/makefile.mk
@@ -0,0 +1,79 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: makefile.mk,v $
+#
+# $Revision: 1.45 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+
+PRJ=..$/../
+PRJNAME=vbahelper
+TARGET=vbahelperbits
+
+ENABLE_EXCEPTIONS := TRUE
+VISIBILITY_HIDDEN=TRUE
+# --- Settings -----------------------------------------------------
+
+.INCLUDE :  settings.mk
+
+SLOFILES=\
+    $(SLO)$/vbahelper.obj \
+    $(SLO)$/vbapropvalue.obj \
+    $(SLO)$/vbacommandbars.obj \
+    $(SLO)$/vbacommandbar.obj \
+    $(SLO)$/vbacommandbarcontrols.obj \
+    $(SLO)$/vbacommandbarcontrol.obj \
+    $(SLO)$/vbacommandbarhelper.obj \
+    $(SLO)$/vbaapplicationbase.obj \
+    $(SLO)$/vbawindowbase.obj \
+    $(SLO)$/vbadocumentbase.obj \
+    $(SLO)$/vbadocumentsbase.obj \
+    $(SLO)$/vbaglobalbase.obj \
+    $(SLO)$/vbafontbase.obj \
+    $(SLO)$/vbadialogbase.obj \
+    $(SLO)$/vbadialogsbase.obj \
+    $(SLO)$/vbashape.obj \
+    $(SLO)$/vbacolorformat.obj \
+    $(SLO)$/vbashapes.obj \
+    $(SLO)$/vbalineformat.obj \
+    $(SLO)$/vbafillformat.obj \
+    $(SLO)$/vbapictureformat.obj \
+    $(SLO)$/vbashaperange.obj \
+    $(SLO)$/vbatextframe.obj \
+    $(SLO)$/vbapagesetupbase.obj \
+
+# --- Targets -------------------------------------------------------
+
+.INCLUDE :  target.mk
+
+ALLTAR : \
+        $(MISC)$/$(TARGET).don \
+
+$(SLOFILES) : $(MISC)$/$(TARGET).don
+
+$(MISC)$/$(TARGET).don : $(SOLARBINDIR)$/oovbaapi.rdb
+        +$(CPPUMAKER) -O$(INCCOM)$/$(TARGET) -BUCR $(SOLARBINDIR)$/oovbaapi.rdb -X$(SOLARBINDIR)$/types.rdb && echo > $@
+        echo $@
diff --git a/vbahelper/source/vbahelper/vbaapplicationbase.cxx b/vbahelper/source/vbahelper/vbaapplicationbase.cxx
new file mode 100644
index 0000000..9f5c78e
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbaapplicationbase.cxx
@@ -0,0 +1,218 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbahelper/vbaapplicationbase.hxx"
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <com/sun/star/frame/XLayoutManager.hpp>
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/document/XDocumentInfoSupplier.hpp>
+#include <com/sun/star/document/XDocumentProperties.hpp>
+#include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+
+#include "vbacommandbars.hxx"
+#include <svx/msvbahelper.hxx>
+
+// start basic includes
+#include <basic/sbx.hxx>
+#include <basic/sbstar.hxx>
+#include <basic/sbuno.hxx>
+#include <basic/sbmeth.hxx>
+#include <basic/sbmod.hxx>
+// end basic includes
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+#define OFFICEVERSION "11.0"
+
+VbaApplicationBase::VbaApplicationBase( const uno::Reference< uno::XComponentContext >& xContext )
+                    : ApplicationBase_BASE( uno::Reference< XHelperInterface >(), xContext )
+{
+}
+
+VbaApplicationBase::~VbaApplicationBase()
+{
+}
+
+sal_Bool SAL_CALL
+VbaApplicationBase::getScreenUpdating() throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
+    return !xModel->hasControllersLocked();
+}
+
+void SAL_CALL
+VbaApplicationBase::setScreenUpdating(sal_Bool bUpdate) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
+    if (bUpdate)
+        xModel->unlockControllers();
+    else
+        xModel->lockControllers();
+}
+
+sal_Bool SAL_CALL
+VbaApplicationBase::getDisplayStatusBar() throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XFrame > xFrame( xModel->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xProps( xFrame, uno::UNO_QUERY_THROW );
+
+    if( xProps.is() ){
+        uno::Reference< frame::XLayoutManager > xLayoutManager( xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("LayoutManager")) ), uno::UNO_QUERY_THROW );
+        rtl::OUString url(RTL_CONSTASCII_USTRINGPARAM( "private:resource/statusbar/statusbar" ));
+        if( xLayoutManager.is() && xLayoutManager->isElementVisible( url ) ){
+            return sal_True;
+        }
+    }
+    return sal_False;
+}
+
+void SAL_CALL
+VbaApplicationBase::setDisplayStatusBar(sal_Bool bDisplayStatusBar) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XFrame > xFrame( xModel->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xProps( xFrame, uno::UNO_QUERY_THROW );
+
+    if( xProps.is() ){
+        uno::Reference< frame::XLayoutManager > xLayoutManager( xProps->getPropertyValue( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("LayoutManager")) ), uno::UNO_QUERY_THROW );
+        rtl::OUString url(RTL_CONSTASCII_USTRINGPARAM( "private:resource/statusbar/statusbar" ));
+        if( xLayoutManager.is() ){
+            if( bDisplayStatusBar && !xLayoutManager->isElementVisible( url ) ){
+                if( !xLayoutManager->showElement( url ) )
+                    xLayoutManager->createElement( url );
+                return;
+            }
+            else if( !bDisplayStatusBar && xLayoutManager->isElementVisible( url ) ){
+                xLayoutManager->hideElement( url );
+                return;
+            }
+        }
+    }
+    return;
+}
+
+uno::Any SAL_CALL
+VbaApplicationBase::CommandBars( const uno::Any& aIndex ) throw (uno::RuntimeException)
+{
+    uno::Reference< XCommandBars > xCommandBars( new ScVbaCommandBars( this, mxContext, uno::Reference< container::XIndexAccess >(), getCurrentDocument() ) );
+    if( aIndex.hasValue() )
+        return uno::makeAny( xCommandBars->Item( aIndex, uno::Any() ) );
+    return uno::makeAny( xCommandBars );
+}
+
+::rtl::OUString SAL_CALL
+VbaApplicationBase::getVersion() throw (uno::RuntimeException)
+{
+    return rtl::OUString(RTL_CONSTASCII_USTRINGPARAM(OFFICEVERSION));
+}
+
+void SAL_CALL VbaApplicationBase::Run( const ::rtl::OUString& MacroName, const uno::Any& varg1, const uno::Any& varg2, const uno::Any& varg3, const uno::Any& varg4, const uno::Any& varg5, const uno::Any& varg6, const uno::Any& varg7, const uno::Any& varg8, const uno::Any& varg9, const uno::Any& varg10, const uno::Any& varg11, const uno::Any& varg12, const uno::Any& varg13, const uno::Any& varg14, const uno::Any& varg15, const uno::Any& varg16, const uno::Any& varg17, const uno::Any& varg18, const uno::Any& varg19, const uno::Any& varg20, const uno::Any& varg21, const uno::Any& varg22, const uno::Any& varg23, const uno::Any& varg24, const uno::Any& varg25, const uno::Any& varg26, const uno::Any& varg27, const uno::Any& varg28, const uno::Any& varg29, const uno::Any& varg30 ) throw (uno::RuntimeException)
+{
+    VBAMacroResolvedInfo aMacroInfo = resolveVBAMacro( getSfxObjShell( getCurrentDocument() ), MacroName );
+    if( aMacroInfo.IsResolved() )
+    {
+        // handle the arguments
+        const uno::Any* aArgsPtrArray[] = { &varg1, &varg2, &varg3, &varg4, &varg5, &varg6, &varg7, &varg8, &varg9, &varg10, &varg11, &varg12, &varg13, &varg14, &varg15, &varg16, &varg17, &varg18, &varg19, &varg20, &varg21, &varg22, &varg23, &varg24, &varg25, &varg26, &varg27, &varg28, &varg29, &varg30 };
+
+        int nArg = sizeof( aArgsPtrArray ) / sizeof( aArgsPtrArray[0] );
+        uno::Sequence< uno::Any > aArgs( nArg );
+
+        const uno::Any** pArg = aArgsPtrArray;
+        const uno::Any** pArgEnd = ( aArgsPtrArray + nArg );
+
+        sal_Int32 nLastArgWithValue = 0;
+        sal_Int32 nArgProcessed = 0;
+
+        for ( ; pArg != pArgEnd; ++pArg, ++nArgProcessed )
+        {
+            aArgs[ nArgProcessed ] =  **pArg;
+            if( (*pArg)->hasValue() )
+                nLastArgWithValue = nArgProcessed;
+        }
+
+        // resize array to position of last param with value
+        aArgs.realloc( nArgProcessed + 1 );
+
+        uno::Any aRet;
+        uno::Any aDummyCaller;
+        executeMacro( aMacroInfo.MacroDocContext(), aMacroInfo.ResolvedMacro(), aArgs, aRet, aDummyCaller );
+    }
+    else
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("The macro doesn't exist") ), uno::Reference< uno::XInterface >() );
+    }
+}
+
+float SAL_CALL VbaApplicationBase::CentimetersToPoints( float _Centimeters ) throw (uno::RuntimeException)
+{
+    // i cm = 28.35 points
+    static const float rate = 28.35f;
+    return ( _Centimeters * rate );
+}
+
+rtl::OUString&
+VbaApplicationBase::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("VbaApplicationBase") );
+    return sImplName;
+}
+uno::Sequence<rtl::OUString>
+VbaApplicationBase::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.VbaApplicationBase" ) );
+    }
+    return aServiceNames;
+}
+
+void VbaApplicationBase::Quit() throw (uno::RuntimeException)
+{
+    // need to stop basic
+    SbMethod* pMeth = StarBASIC::GetActiveMethod();
+    if ( pMeth )
+    {
+        SbModule* pMod = dynamic_cast< SbModule* >( pMeth->GetParent() );
+        if ( pMod )
+        {
+            StarBASIC* pBasic = dynamic_cast< StarBASIC* >( pMod->GetParent() );
+            if ( pBasic )
+                pBasic->QuitAndExitApplication();
+        }
+    }
+}
diff --git a/vbahelper/source/vbahelper/vbacolorformat.cxx b/vbahelper/source/vbahelper/vbacolorformat.cxx
new file mode 100644
index 0000000..52eecd1
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacolorformat.cxx
@@ -0,0 +1,189 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacolorformat.cxx,v $
+ * $Revision: 1.3.146.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <ooo/vba/msforms/XLineFormat.hpp>
+#include "vbacolorformat.hxx"
+
+using namespace ooo::vba;
+using namespace com::sun::star;
+
+sal_Int32
+MsoColorIndizes::getColorIndex( sal_Int32 nIndex )
+{
+    const static sal_Int32 COLORINDIZES[56] =
+    {   HAPICOLOR_BLACK, HAPICOLOR_WITHE, HAPICOLOR_RED, HAPICOLOR_BRIGHTGREEN, HAPICOLOR_BLUE, HAPICOLOR_YELLOW, HAPICOLOR_PINK,
+        HAPICOLOR_TURQUOISE, HAPICOLOR_DARKRED, HAPICOLOR_GREEN, HAPICOLOR_DARKBLUE, HAPICOLOR_DARKYELLOW, HAPICOLOR_VIOLET,
+        HAPICOLOR_TEAL, HAPICOLOR_GRAY_25_PERCENT, HAPICOLOR_GRAY_50_PERCENT, HAPICOLOR_PERIWINCKLE, HAPICOLOR_PLUM,
+        HAPICOLOR_IVORY, HAPICOLOR_LIGHTTURQUOISE, HAPICOLOR_DARKPRUPLE, HAPICOLOR_CORAL, HAPICOLOR_OCEANBLUE, HAPICOLOR_ICEBLUE,
+        HAPICOLOR_GREEN, HAPICOLOR_PINK, HAPICOLOR_YELLOW, HAPICOLOR_TURQUOISE, HAPICOLOR_VIOLET, HAPICOLOR_DARKRED, HAPICOLOR_TEAL,
+        HAPICOLOR_BLUE, HAPICOLOR_SKYBLUE, HAPICOLOR_LIGHTTURQUOISE, HAPICOLOR_LIGHTGREEN, HAPICOLOR_LIGHTYELLOW, HAPICOLOR_PALEBLUE,
+        HAPICOLOR_ROSE, HAPICOLOR_LAVENDER, HAPICOLOR_TAN, HAPICOLOR_LIGHTBLUE, HAPICOLOR_AQUA, HAPICOLOR_LIME, HAPICOLOR_GOLD,
+        HAPICOLOR_LIGHTORANGE, HAPICOLOR_ORANGE, HAPICOLOR_BLUEGRAY, HAPICOLOR_GRAY_40_PERCENT, HAPICOLOR_DARKTEAL,
+        HAPICOLOR_SEAGREEN, HAPICOLOR_NONAME, HAPICOLOR_OLIVEGREEN, HAPICOLOR_BROWN, HAPICOLOR_PLUM, HAPICOLOR_INDIGO,
+        HAPICOLOR_GRAY_80_PERCENT
+    };
+    return COLORINDIZES[nIndex];
+}
+ScVbaColorFormat::ScVbaColorFormat( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< XHelperInterface > xInternalParent, const uno::Reference< drawing::XShape > xShape, const sal_Int16 nColorFormatType ) : ScVbaColorFormat_BASE( xParent, xContext ), m_xInternalParent( xInternalParent ), m_xShape( xShape ), m_nColorFormatType( nColorFormatType )
+{
+    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
+    m_nFillFormatBackColor = 0;
+    try
+    {
+        uno::Reference< ov::msforms::XFillFormat > xFillFormat( xInternalParent, uno::UNO_QUERY_THROW );
+        m_pFillFormat = ( ScVbaFillFormat* )( xFillFormat.get() );
+    }catch ( uno::RuntimeException  e )
+    {
+        m_pFillFormat = NULL;
+    }
+}
+
+void
+ScVbaColorFormat::setColorFormat( sal_Int16 _ntype )
+{
+    m_nColorFormatType = _ntype;
+}
+
+// Attribute
+sal_Int32 SAL_CALL
+ScVbaColorFormat::getRGB() throw (uno::RuntimeException)
+{
+    sal_Int32 nRGB = 0;
+    switch( m_nColorFormatType )
+    {
+    case ColorFormatType::LINEFORMAT_FORECOLOR:
+        m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("LineColor") ) >>= nRGB;
+        break;
+    case ColorFormatType::LINEFORMAT_BACKCOLOR:
+        //TODO BackColor not supported
+        // m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("Color"), uno::makeAny( nRGB ) );
+        break;
+    case ColorFormatType::FILLFORMAT_FORECOLOR:
+        m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("FillColor") ) >>= nRGB;
+        break;
+    case ColorFormatType::FILLFORMAT_BACKCOLOR:
+        nRGB = m_nFillFormatBackColor;
+        break;
+    default:
+        throw uno::RuntimeException( rtl::OUString::createFromAscii("Second parameter of ColorFormat is wrong."), uno::Reference< uno::XInterface >() );
+    }
+    nRGB = OORGBToXLRGB( nRGB );
+    return nRGB;
+}
+
+void SAL_CALL
+ScVbaColorFormat::setRGB( sal_Int32 _rgb ) throw (uno::RuntimeException)
+{
+    sal_Int32 nRGB = XLRGBToOORGB( _rgb );
+    switch( m_nColorFormatType )
+    {
+    case ColorFormatType::LINEFORMAT_FORECOLOR:
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineColor" ), uno::makeAny( nRGB ) );
+        break;
+    case ColorFormatType::LINEFORMAT_BACKCOLOR:
+        // TODO BackColor not supported
+        break;
+    case ColorFormatType::FILLFORMAT_FORECOLOR:
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillColor" ), uno::makeAny( nRGB ) );
+        if( m_pFillFormat )
+        {
+            m_pFillFormat->setForeColorAndInternalStyle(nRGB);
+        }
+        break;
+    case ColorFormatType::FILLFORMAT_BACKCOLOR:
+        m_nFillFormatBackColor = nRGB;
+        if( m_pFillFormat )
+        {
+            m_pFillFormat->setForeColorAndInternalStyle(nRGB);
+        }
+        break;
+    default:
+        throw uno::RuntimeException( rtl::OUString::createFromAscii("Second parameter of ColorFormat is wrong."), uno::Reference< uno::XInterface >() );
+    }
+}
+
+sal_Int32 SAL_CALL
+ScVbaColorFormat::getSchemeColor() throw (uno::RuntimeException)
+{
+    sal_Int32 nColor = getRGB();
+    // #TODO I guess the number of elements is determined by the correct scheme
+    // the implementation here seems to be a rehash of color index ( which seems to be a
+    // different thing ) - I would guess we need to know/import etc. the correct color scheme
+    // or at least find out a little more
+    sal_Int32 i = 0;
+    for( ; i < 56; i++ )
+    {
+        if( nColor == MsoColorIndizes::getColorIndex(i) )
+       break;
+    }
+
+    if( i == 56 ) // this is most likely an error condition
+        --i;
+    return i;
+    // #TODO figure out what craziness is this,
+    // the 56 colors seems incorrect, as in default XL ( 2003 ) there are 80 colors
+/*
+    if( i == 56 )
+    {
+        i = -2;
+    }
+
+    return ( i + 2 );
+*/
+}
+
+void SAL_CALL
+ScVbaColorFormat::setSchemeColor( sal_Int32 _schemecolor ) throw (uno::RuntimeException)
+{
+    // the table is 0 based
+    sal_Int32 nColor = MsoColorIndizes::getColorIndex( _schemecolor );
+    // nColor is already xl RGB
+    setRGB( nColor );
+}
+
+
+rtl::OUString&
+ScVbaColorFormat::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaColorFormat") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaColorFormat::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.ColorFormat" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbacolorformat.hxx b/vbahelper/source/vbahelper/vbacolorformat.hxx
new file mode 100644
index 0000000..cb53c13
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacolorformat.hxx
@@ -0,0 +1,128 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbacolorformat.hxx,v $
+ * $Revision: 1.3.146.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_XCOLORFORMAT_HXX
+#define SC_VBA_XCOLORFORMAT_HXX
+
+#include <com/sun/star/drawing/XShape.hpp>
+#include <ooo/vba/msforms/XColorFormat.hpp>
+#include <ooo/vba/msforms/XFillFormat.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include "vbafillformat.hxx"
+
+typedef InheritedHelperInterfaceImpl1< ov::msforms::XColorFormat > ScVbaColorFormat_BASE;
+
+class ColorFormatType
+{
+public:
+    const static sal_Int16 LINEFORMAT_FORECOLOR = 1;
+    const static sal_Int16 LINEFORMAT_BACKCOLOR = 2;
+    const static sal_Int16 FILLFORMAT_FORECOLOR = 3;
+    const static sal_Int16 FILLFORMAT_BACKCOLOR = 4;
+    const static sal_Int16 THREEDFORMAT_EXTRUSIONCOLOR = 5;
+};
+
+struct MsoColorIndizes
+{
+    const static sal_Int32 HAPICOLOR_BLACK = 0;
+    const static sal_Int32 HAPICOLOR_WITHE = 16777215;
+    const static sal_Int32 HAPICOLOR_RED = 16711680;
+    const static sal_Int32 HAPICOLOR_BRIGHTGREEN = 65280;
+    const static sal_Int32 HAPICOLOR_BLUE = 255;
+    const static sal_Int32 HAPICOLOR_YELLOW = 16776960;
+    const static sal_Int32 HAPICOLOR_PINK = 16711935;
+    const static sal_Int32 HAPICOLOR_TURQUOISE = 65535;
+    const static sal_Int32 HAPICOLOR_DARKRED = 8388608;
+    const static sal_Int32 HAPICOLOR_GREEN = 32768;
+    const static sal_Int32 HAPICOLOR_DARKBLUE = 128;
+    const static sal_Int32 HAPICOLOR_DARKYELLOW = 8421376;
+    const static sal_Int32 HAPICOLOR_VIOLET = 8388736;
+    const static sal_Int32 HAPICOLOR_TEAL = 32896;
+    const static sal_Int32 HAPICOLOR_GRAY_25_PERCENT = 12632256;
+    const static sal_Int32 HAPICOLOR_GRAY_50_PERCENT = 8421504;
+    const static sal_Int32 HAPICOLOR_PERIWINCKLE = 10066431;
+    const static sal_Int32 HAPICOLOR_PLUM = 10040166;
+    const static sal_Int32 HAPICOLOR_IVORY = 16777164;
+    const static sal_Int32 HAPICOLOR_LIGHTTURQUOISE = 13434879;
+    const static sal_Int32 HAPICOLOR_DARKPRUPLE = 6684774;
+    const static sal_Int32 HAPICOLOR_CORAL = 16744576;
+    const static sal_Int32 HAPICOLOR_OCEANBLUE = 26316;
+    const static sal_Int32 HAPICOLOR_ICEBLUE = 13421823;
+    const static sal_Int32 HAPICOLOR_SKYBLUE = 52479;
+    const static sal_Int32 HAPICOLOR_LIGHTGREEN = 13434828;
+    const static sal_Int32 HAPICOLOR_LIGHTYELLOW = 16777113;
+    const static sal_Int32 HAPICOLOR_PALEBLUE = 10079487;
+    const static sal_Int32 HAPICOLOR_ROSE = 16751052;
+    const static sal_Int32 HAPICOLOR_LAVENDER = 13408767;
+    const static sal_Int32 HAPICOLOR_TAN = 16764057;
+    const static sal_Int32 HAPICOLOR_LIGHTBLUE = 3368703;
+    const static sal_Int32 HAPICOLOR_AQUA = 3394764;
+    const static sal_Int32 HAPICOLOR_LIME = 10079232;
+    const static sal_Int32 HAPICOLOR_GOLD = 16763904;
+    const static sal_Int32 HAPICOLOR_LIGHTORANGE = 16750848;
+    const static sal_Int32 HAPICOLOR_ORANGE = 16737792;
+    const static sal_Int32 HAPICOLOR_BLUEGRAY = 6710937;
+    const static sal_Int32 HAPICOLOR_GRAY_40_PERCENT = 9868950;
+    const static sal_Int32 HAPICOLOR_DARKTEAL = 13158;
+    const static sal_Int32 HAPICOLOR_SEAGREEN = 3381606;
+    const static sal_Int32 HAPICOLOR_NONAME = 13056;
+    const static sal_Int32 HAPICOLOR_OLIVEGREEN = 3355392;
+    const static sal_Int32 HAPICOLOR_BROWN = 10040064;
+    const static sal_Int32 HAPICOLOR_INDIGO = 3355545;
+    const static sal_Int32 HAPICOLOR_GRAY_80_PERCENT = 3355443;
+
+    static sal_Int32 getColorIndex( sal_Int32 nIndex );
+
+};
+
+class ScVbaColorFormat : public ScVbaColorFormat_BASE
+{
+private:
+    css::uno::Reference< ov::XHelperInterface > m_xInternalParent;
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+    ScVbaFillFormat *m_pFillFormat;
+    sal_Int16 m_nColorFormatType;
+    sal_Int32 m_nFillFormatBackColor;
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    void setColorFormat( sal_Int16 nType );
+public:
+    ScVbaColorFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< ov::XHelperInterface > xInternalParent, const css::uno::Reference< css::drawing::XShape > xShape, const sal_Int16 nColorFormatType );
+
+    // Attributes
+    virtual sal_Int32 SAL_CALL getRGB() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setRGB( sal_Int32 _rgb ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getSchemeColor() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setSchemeColor( sal_Int32 _schemecolor ) throw (css::uno::RuntimeException);
+
+};
+
+#endif//SC_VBA_XCOLORFORMAT_HXX
diff --git a/vbahelper/source/vbahelper/vbacommandbar.cxx b/vbahelper/source/vbahelper/vbacommandbar.cxx
new file mode 100644
index 0000000..84ec5ea
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbar.cxx
@@ -0,0 +1,212 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbacommandbar.hxx"
+#include "vbacommandbarcontrols.hxx"
+#include <com/sun/star/ui/XModuleUIConfigurationManagerSupplier.hpp>
+#include <com/sun/star/frame/XFrame.hpp>
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/frame/XLayoutManager.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/container/XNameContainer.hpp>
+#include <ooo/vba/office/MsoBarType.hpp>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+ScVbaCommandBar::ScVbaCommandBar( const uno::Reference< ov::XHelperInterface > xParent, const uno::Reference< uno::XComponentContext > xContext, VbaCommandBarHelperRef pHelper, const uno::Reference< container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Bool bIsMenu, sal_Bool bTemporary ) throw( uno::RuntimeException ) : CommandBar_BASE( xParent, xContext ), pCBarHelper( pHelper ), m_xBarSettings( xBarSettings ), m_sResourceUrl( sResourceUrl ), m_bIsMenu( bIsMenu ), m_bTemporary( bTemporary )
+{
+}
+
+::rtl::OUString SAL_CALL
+ScVbaCommandBar::getName() throw ( uno::RuntimeException )
+{
+    // This will get a "NULL length string" when Name is not set.
+    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
+    uno::Any aName = xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("UIName") );
+    rtl::OUString sName;
+    aName >>= sName;
+    if( sName.getLength() < 1 )
+    {
+        if( m_bIsMenu )
+        {
+            if( m_sResourceUrl.equalsAscii( ITEM_MENUBAR_URL ) )
+            {
+                if( pCBarHelper->getModuleId().equalsAscii("com.sun.star.sheet.SpreadsheetDocument") )
+                    sName = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Worksheet Menu Bar") );
+                else if( pCBarHelper->getModuleId().equalsAscii("com.sun.star.text.TextDocument") )
+                    sName = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Menu Bar") );
+                return sName;
+            }
+        }
+        // Toolbar name
+        uno::Reference< container::XNameAccess > xNameAccess = pCBarHelper->getPersistentWindowState();
+        if( xNameAccess->hasByName( m_sResourceUrl ) )
+        {
+            uno::Sequence< beans::PropertyValue > aToolBar;
+            xNameAccess->getByName( m_sResourceUrl ) >>= aToolBar;
+            getPropertyValue( aToolBar, rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("UIName") ) ) >>= sName;
+        }
+    }
+    return sName;
+}
+void SAL_CALL
+ScVbaCommandBar::setName( const ::rtl::OUString& _name ) throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xPropertySet( m_xBarSettings, uno::UNO_QUERY_THROW );
+    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("UIName"), uno::makeAny( _name ) );
+
+    pCBarHelper->ApplyChange( m_sResourceUrl, m_xBarSettings );
+}
+::sal_Bool SAL_CALL
+ScVbaCommandBar::getVisible() throw (uno::RuntimeException)
+{
+    // menu bar is allways visible in OOo
+    if( m_bIsMenu )
+        return sal_True;
+
+    sal_Bool bVisible = sal_False;
+    try
+    {
+        uno::Reference< container::XNameAccess > xNameAccess = pCBarHelper->getPersistentWindowState();
+        if( xNameAccess->hasByName( m_sResourceUrl ) )
+        {
+            uno::Sequence< beans::PropertyValue > aToolBar;
+            xNameAccess->getByName( m_sResourceUrl ) >>= aToolBar;
+            getPropertyValue( aToolBar, rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Visible") ) ) >>= bVisible;
+        }
+    }
+    catch ( uno::Exception e )
+    {
+    }
+    return bVisible;
+}
+void SAL_CALL
+ScVbaCommandBar::setVisible( ::sal_Bool _visible ) throw (uno::RuntimeException)
+{
+    try
+    {
+        uno::Reference< frame::XLayoutManager > xLayoutManager = pCBarHelper->getLayoutManager();
+        if( _visible )
+        {
+            xLayoutManager->createElement( m_sResourceUrl );
+            xLayoutManager->showElement( m_sResourceUrl );
+        }
+        else
+        {
+            xLayoutManager->hideElement( m_sResourceUrl );
+            xLayoutManager->destroyElement( m_sResourceUrl );
+        }
+    }
+    catch( uno::Exception e )
+    {
+        OSL_TRACE( "SetVisible get an exception\n" );
+    }
+}
+
+::sal_Bool SAL_CALL
+ScVbaCommandBar::getEnabled() throw (uno::RuntimeException)
+{
+    // emulated with Visible
+    return getVisible();
+}
+
+void SAL_CALL
+ScVbaCommandBar::setEnabled( sal_Bool _enabled ) throw (uno::RuntimeException)
+{
+    // emulated with Visible
+    setVisible( _enabled );
+}
+
+void SAL_CALL
+ScVbaCommandBar::Delete(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    pCBarHelper->removeSettings( m_sResourceUrl );
+    uno::Reference< container::XNameContainer > xNameContainer( pCBarHelper->getPersistentWindowState(), uno::UNO_QUERY_THROW );
+    if( xNameContainer->hasByName( m_sResourceUrl ) )
+    {
+        xNameContainer->removeByName( m_sResourceUrl );
+    }
+}
+uno::Any SAL_CALL
+ScVbaCommandBar::Controls( const uno::Any& aIndex ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    uno::Reference< awt::XMenu > xMenu;
+    if( m_bIsMenu )
+    {
+        uno::Reference< frame::XLayoutManager > xLayoutManager = pCBarHelper->getLayoutManager();
+        uno::Reference< beans::XPropertySet > xPropertySet( xLayoutManager->getElement( m_sResourceUrl ), uno::UNO_QUERY_THROW );
+        xMenu.set( xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("XMenuBar") ), uno::UNO_QUERY );
+    }
+    uno::Reference< XCommandBarControls > xCommandBarControls( new ScVbaCommandBarControls( this, mxContext, m_xBarSettings, pCBarHelper, m_xBarSettings, m_sResourceUrl, xMenu ) );
+    if( aIndex.hasValue() )
+    {
+        return xCommandBarControls->Item( aIndex, uno::Any() );
+    }
+    return uno::makeAny( xCommandBarControls );
+}
+
+sal_Int32 SAL_CALL
+ScVbaCommandBar::Type() throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // #FIXME support msoBarTypePopup
+    sal_Int32 nType = office::MsoBarType::msoBarTypePopup;
+    nType = m_bIsMenu? office::MsoBarType::msoBarTypeNormal : office::MsoBarType::msoBarTypeMenuBar;
+    return nType;
+}
+
+uno::Any SAL_CALL
+ScVbaCommandBar::FindControl( const uno::Any& /*aType*/, const uno::Any& /*aId*/, const uno::Any& /*aTag*/, const uno::Any& /*aVisible*/, const uno::Any& /*aRecursive*/ ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // alwayse fail to find control
+    return uno::makeAny( uno::Reference< XCommandBarControl > () );
+}
+
+rtl::OUString&
+ScVbaCommandBar::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBar") );
+    return sImplName;
+}
+uno::Sequence<rtl::OUString>
+ScVbaCommandBar::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBar" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbacommandbar.hxx b/vbahelper/source/vbahelper/vbacommandbar.hxx
new file mode 100644
index 0000000..edecba2
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbar.hxx
@@ -0,0 +1,83 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_COMMANDBAR_HXX
+#define SC_VBA_COMMANDBAR_HXX
+
+#include <ooo/vba/XCommandBar.hpp>
+#include <com/sun/star/ui/XUIConfigurationManager.hpp>
+#include <com/sun/star/ui/XUIConfigurationPersistence.hpp>
+#include <com/sun/star/container/XIndexContainer.hpp>
+#include <com/sun/star/beans/PropertyValues.hpp>
+
+#include <vbahelper/vbahelperinterface.hxx>
+#include "vbacommandbarhelper.hxx"
+
+#include <map>
+
+typedef InheritedHelperInterfaceImpl1< ov::XCommandBar > CommandBar_BASE;
+
+class ScVbaCommandBar : public CommandBar_BASE
+{
+private:
+    VbaCommandBarHelperRef pCBarHelper;
+    css::uno::Reference< css::container::XIndexAccess > m_xBarSettings;
+    rtl::OUString   m_sResourceUrl;
+    sal_Bool        m_bIsMenu;
+    sal_Bool        m_bTemporary;
+
+public:
+    ScVbaCommandBar( const css::uno::Reference< ov::XHelperInterface > xParent, const css::uno::Reference< css::uno::XComponentContext > xContext, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Bool bIsMenu, sal_Bool bTemporary = sal_True ) throw( css::uno::RuntimeException );
+
+    sal_Bool IsMenu() { return m_bIsMenu; }
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getName() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setName( const ::rtl::OUString& _name ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( ::sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getEnabled() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEnabled( ::sal_Bool _enabled ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual void SAL_CALL Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Controls( const css::uno::Any& aIndex ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL Type(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL FindControl( const css::uno::Any& aType, const css::uno::Any& aId, const css::uno::Any& aTag, const css::uno::Any& aVisible, const css::uno::Any& aRecursive ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+#endif//SC_VBA_COMMANDBAR_HXX
diff --git a/vbahelper/source/vbahelper/vbacommandbarcontrol.cxx b/vbahelper/source/vbahelper/vbacommandbarcontrol.cxx
new file mode 100644
index 0000000..a107679
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbarcontrol.cxx
@@ -0,0 +1,259 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbacommandbarcontrol.hxx"
+#include "vbacommandbarcontrols.hxx"
+#include <vbahelper/vbahelper.hxx>
+#include <svx/msvbahelper.hxx>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+ScVbaCommandBarControl::ScVbaCommandBarControl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl ) throw (css::uno::RuntimeException) : CommandBarControl_BASE( xParent, xContext ), pCBarHelper( pHelper ), m_sResourceUrl( sResourceUrl ), m_xCurrentSettings( xSettings ), m_xBarSettings( xBarSettings ), m_nPosition( 0 ), m_bTemporary( sal_True )
+{
+}
+
+ScVbaCommandBarControl::ScVbaCommandBarControl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Int32 nPosition, sal_Bool bTemporary ) throw (css::uno::RuntimeException) : CommandBarControl_BASE( xParent, xContext ), pCBarHelper( pHelper ), m_sResourceUrl( sResourceUrl ), m_xCurrentSettings( xSettings ), m_xBarSettings( xBarSettings ), m_nPosition( nPosition ), m_bTemporary( bTemporary )
+{
+    m_xCurrentSettings->getByIndex( nPosition ) >>= m_aPropertyValues;
+}
+
+void ScVbaCommandBarControl::ApplyChange() throw ( uno::RuntimeException )
+{
+    uno::Reference< container::XIndexContainer > xIndexContainer( m_xCurrentSettings, uno::UNO_QUERY_THROW );
+    xIndexContainer->replaceByIndex( m_nPosition, uno::makeAny( m_aPropertyValues ) );
+    pCBarHelper->ApplyChange( m_sResourceUrl, m_xBarSettings );
+}
+
+::rtl::OUString SAL_CALL
+ScVbaCommandBarControl::getCaption() throw ( uno::RuntimeException )
+{
+    // "Label" always empty
+    rtl::OUString sCaption;
+    getPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("Label") ) >>= sCaption;
+    return sCaption;
+}
+
+void SAL_CALL
+ScVbaCommandBarControl::setCaption( const ::rtl::OUString& _caption ) throw (uno::RuntimeException)
+{
+    rtl::OUString sCaption = _caption.replace('&','~');
+    setPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("Label"), uno::makeAny( sCaption ) );
+    ApplyChange();
+}
+
+::rtl::OUString SAL_CALL
+ScVbaCommandBarControl::getOnAction() throw (uno::RuntimeException)
+{
+    rtl::OUString sCommandURL;
+    getPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("CommandURL") ) >>= sCommandURL;
+    return sCommandURL;
+}
+
+void SAL_CALL
+ScVbaCommandBarControl::setOnAction( const ::rtl::OUString& _onaction ) throw (uno::RuntimeException)
+{
+    // get the current model
+    uno::Reference< frame::XModel > xModel( pCBarHelper->getModel() );
+    VBAMacroResolvedInfo aResolvedMacro = ooo::vba::resolveVBAMacro( getSfxObjShell( xModel ), _onaction, true );
+    if ( aResolvedMacro.IsResolved() )
+    {
+        rtl::OUString aCommandURL = ooo::vba::makeMacroURL( aResolvedMacro.ResolvedMacro() );
+        OSL_TRACE(" ScVbaCommandBarControl::setOnAction: %s", rtl::OUStringToOString( aCommandURL, RTL_TEXTENCODING_UTF8 ).getStr() );
+        setPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("CommandURL"), uno::makeAny( aCommandURL ) );
+        ApplyChange();
+    }
+}
+
+::sal_Bool SAL_CALL
+ScVbaCommandBarControl::getVisible() throw (uno::RuntimeException)
+{
+    sal_Bool bVisible = sal_True;
+    uno::Any aValue = getPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("IsVisible") );
+    if( aValue.hasValue() )
+        aValue >>= bVisible;
+    return bVisible;
+}
+void SAL_CALL
+ScVbaCommandBarControl::setVisible( ::sal_Bool _visible ) throw (uno::RuntimeException)
+{
+    uno::Any aValue = getPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("IsVisible") );
+    if( aValue.hasValue() )
+    {
+        setPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii("IsVisible"), uno::makeAny( _visible ) );
+        ApplyChange();
+    }
+}
+
+::sal_Bool SAL_CALL
+ScVbaCommandBarControl::getEnabled() throw (uno::RuntimeException)
+{
+    sal_Bool bEnabled = sal_True;
+    if( m_xParentMenu.is() )
+    {
+        // currently only the menu in the MenuBat support Enable/Disable
+        // FIXME: how to support the menu item in Toolbar
+        bEnabled = m_xParentMenu->isItemEnabled( m_xParentMenu->getItemId( sal::static_int_cast< sal_Int16 >( m_nPosition ) ) );
+    }
+    else
+    {
+        // emulated with Visible
+        bEnabled = getVisible();
+    }
+    return bEnabled;
+}
+
+void SAL_CALL
+ScVbaCommandBarControl::setEnabled( sal_Bool _enabled ) throw (uno::RuntimeException)
+{
+    if( m_xParentMenu.is() )
+    {
+        // currently only the menu in the MenuBat support Enable/Disable
+        m_xParentMenu->enableItem( m_xParentMenu->getItemId( sal::static_int_cast< sal_Int16 >( m_nPosition ) ), _enabled );
+    }
+    else
+    {
+        // emulated with Visible
+        setVisible( _enabled );
+    }
+}
+
+void SAL_CALL
+ScVbaCommandBarControl::Delete(  ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    if( m_xCurrentSettings.is() )
+    {
+        uno::Reference< container::XIndexContainer > xIndexContainer( m_xCurrentSettings, uno::UNO_QUERY_THROW );
+        xIndexContainer->removeByIndex( m_nPosition );
+
+        pCBarHelper->ApplyChange( m_sResourceUrl, m_xBarSettings );
+    }
+}
+
+uno::Any SAL_CALL
+ScVbaCommandBarControl::Controls( const uno::Any& aIndex ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // only Popup Menu has controls
+    uno::Reference< container::XIndexAccess > xSubMenu;
+    getPropertyValue( m_aPropertyValues, rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_CONTAINER ) ) >>= xSubMenu;
+    if( !xSubMenu.is() )
+        throw uno::RuntimeException();
+
+    uno::Reference< awt::XMenu > xMenu;
+    if( m_xParentMenu.is() )
+    {
+        sal_Int16 nItemId = m_xParentMenu->getItemId( sal::static_int_cast< sal_Int16 >( m_nPosition ) );
+        xMenu.set( m_xParentMenu->getPopupMenu( nItemId ), uno::UNO_QUERY );
+    }
+
+    uno::Reference< XCommandBarControls > xCommandBarControls( new ScVbaCommandBarControls( this, mxContext, xSubMenu, pCBarHelper, m_xBarSettings, m_sResourceUrl, xMenu ) );
+    if( aIndex.hasValue() )
+    {
+        return xCommandBarControls->Item( aIndex, uno::Any() );
+    }
+    return uno::makeAny( xCommandBarControls );
+}
+
+rtl::OUString&
+ScVbaCommandBarControl::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBarControl") );
+    return sImplName;
+}
+
+uno::Sequence<rtl::OUString>
+ScVbaCommandBarControl::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBarControl" ) );
+    }
+    return aServiceNames;
+}
+
+//////////// ScVbaCommandBarPopup //////////////////////////////
+ScVbaCommandBarPopup::ScVbaCommandBarPopup( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Int32 nPosition, sal_Bool bTemporary, const css::uno::Reference< css::awt::XMenu >& xMenu ) throw (css::uno::RuntimeException) : CommandBarPopup_BASE( xParent, xContext, xSettings, pHelper, xBarSettings, sResourceUrl )
+{
+    m_nPosition = nPosition;
+    m_bTemporary = bTemporary;
+    m_xCurrentSettings->getByIndex( m_nPosition ) >>= m_aPropertyValues;
+    m_xParentMenu = xMenu;
+}
+
+rtl::OUString&
+ScVbaCommandBarPopup::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBarPopup") );
+    return sImplName;
+}
+uno::Sequence<rtl::OUString>
+ScVbaCommandBarPopup::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBarPopup" ) );
+    }
+    return aServiceNames;
+}
+
+//////////// ScVbaCommandBarButton //////////////////////////////
+ScVbaCommandBarButton::ScVbaCommandBarButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Int32 nPosition, sal_Bool bTemporary, const css::uno::Reference< css::awt::XMenu >& xMenu ) throw (css::uno::RuntimeException) : CommandBarButton_BASE( xParent, xContext, xSettings, pHelper, xBarSettings, sResourceUrl )
+{
+    m_nPosition = nPosition;
+    m_bTemporary = bTemporary;
+    m_xCurrentSettings->getByIndex( m_nPosition ) >>= m_aPropertyValues;
+    m_xParentMenu = xMenu;
+}
+
+rtl::OUString&
+ScVbaCommandBarButton::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBarButton") );
+    return sImplName;
+}
+uno::Sequence<rtl::OUString>
+ScVbaCommandBarButton::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBarButton" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbacommandbarcontrol.hxx b/vbahelper/source/vbahelper/vbacommandbarcontrol.hxx
new file mode 100644
index 0000000..e3beccf
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbarcontrol.hxx
@@ -0,0 +1,122 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_COMMANDBARCONTROL_HXX
+#define SC_VBA_COMMANDBARCONTROL_HXX
+
+#include <ooo/vba/XCommandBarControl.hpp>
+#include <ooo/vba/XCommandBarPopup.hpp>
+#include <ooo/vba/XCommandBarButton.hpp>
+#include <ooo/vba/office/MsoControlType.hpp>
+#include <com/sun/star/awt/XMenu.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include "vbacommandbarhelper.hxx"
+#include <cppuhelper/implbase1.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ov::XCommandBarControl > CommandBarControl_BASE;
+
+class ScVbaCommandBarControl : public CommandBarControl_BASE
+{
+protected:
+    VbaCommandBarHelperRef pCBarHelper;
+    rtl::OUString       m_sResourceUrl;
+    css::uno::Reference< css::container::XIndexAccess >          m_xCurrentSettings;
+    css::uno::Reference< css::container::XIndexAccess >          m_xBarSettings;
+    css::uno::Sequence< css::beans::PropertyValue >              m_aPropertyValues;
+    css::uno::Reference< css::awt::XMenu >                        m_xParentMenu;
+
+    sal_Int32           m_nPosition;
+    sal_Bool            m_bTemporary;
+
+private:
+    void ApplyChange() throw (css::uno::RuntimeException);
+
+public:
+    ScVbaCommandBarControl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl ) throw (css::uno::RuntimeException);
+    ScVbaCommandBarControl( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Int32 nPosition, sal_Bool bTemporary ) throw (css::uno::RuntimeException);
+
+    // Attributes
+    virtual ::rtl::OUString SAL_CALL getCaption() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setCaption( const ::rtl::OUString& _caption ) throw (css::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getOnAction() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setOnAction( const ::rtl::OUString& _onaction ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( ::sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual ::sal_Bool SAL_CALL getEnabled() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEnabled( ::sal_Bool _enabled ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException)
+    {
+        return ov::office::MsoControlType::msoControlButton;
+    }
+
+    // Methods
+    virtual void SAL_CALL Delete(  ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Controls( const css::uno::Any& aIndex ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+typedef cppu::ImplInheritanceHelper1< ScVbaCommandBarControl, ov::XCommandBarPopup > CommandBarPopup_BASE;
+class ScVbaCommandBarPopup : public CommandBarPopup_BASE
+{
+public:
+    ScVbaCommandBarPopup( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Int32 nPosition, sal_Bool bTemporary, const css::uno::Reference< css::awt::XMenu >& xMenu ) throw (css::uno::RuntimeException);
+
+    virtual sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException)
+    {
+        return ov::office::MsoControlType::msoControlPopup;
+    }
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+typedef cppu::ImplInheritanceHelper1< ScVbaCommandBarControl, ov::XCommandBarButton > CommandBarButton_BASE;
+class ScVbaCommandBarButton : public CommandBarButton_BASE
+{
+public:
+    ScVbaCommandBarButton( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xSettings, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, sal_Int32 nPosition, sal_Bool bTemporary, const css::uno::Reference< css::awt::XMenu >& xMenu ) throw (css::uno::RuntimeException);
+
+    virtual sal_Int32 SAL_CALL getType() throw (css::uno::RuntimeException)
+    {
+        return ov::office::MsoControlType::msoControlButton;
+    }
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif//SC_VBA_COMMANDBARCONTROL_HXX
diff --git a/vbahelper/source/vbahelper/vbacommandbarcontrols.cxx b/vbahelper/source/vbahelper/vbacommandbarcontrols.cxx
new file mode 100644
index 0000000..481dd30
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbarcontrols.cxx
@@ -0,0 +1,255 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbacommandbarcontrols.hxx"
+#include "vbacommandbarcontrol.hxx"
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > CommandBarControlEnumeration_BASE;
+class CommandBarControlEnumeration : public CommandBarControlEnumeration_BASE
+{
+    //uno::Reference< uno::XComponentContext > m_xContext;
+    ScVbaCommandBarControls* m_pCommandBarControls;
+    sal_Int32 m_nCurrentPosition;
+public:
+    CommandBarControlEnumeration( ScVbaCommandBarControls* pCommandBarControls ) : m_pCommandBarControls( pCommandBarControls ), m_nCurrentPosition( 0 ) {}
+    virtual sal_Bool SAL_CALL hasMoreElements() throw ( uno::RuntimeException )
+    {
+        if( m_nCurrentPosition < m_pCommandBarControls->getCount() )
+            return sal_True;
+        return sal_False;
+    }
+    virtual uno::Any SAL_CALL nextElement() throw ( container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        if( hasMoreElements() )
+        {
+            return m_pCommandBarControls->createCollectionObject( uno::makeAny( m_nCurrentPosition++ ) );
+        }
+        else
+            throw container::NoSuchElementException();
+    }
+};
+
+ScVbaCommandBarControls::ScVbaCommandBarControls( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess>& xIndexAccess, VbaCommandBarHelperRef pHelper, const uno::Reference< container::XIndexAccess>& xBarSettings, const rtl::OUString& sResourceUrl, const uno::Reference< awt::XMenu >& xMenu  ) throw (uno::RuntimeException) : CommandBarControls_BASE( xParent, xContext, xIndexAccess ), pCBarHelper( pHelper ), m_xBarSettings( xBarSettings ), m_sResourceUrl( sResourceUrl ), m_xMenu( xMenu )
+{
+    m_bIsMenu = sResourceUrl.equalsAscii( ITEM_MENUBAR_URL ) ? sal_True : sal_False;
+}
+
+uno::Sequence< beans::PropertyValue > ScVbaCommandBarControls::CreateMenuItemData( const rtl::OUString& sCommandURL, const rtl::OUString& sHelpURL, const rtl::OUString& sLabel, sal_uInt16 nType, const uno::Any& aSubMenu )
+{
+    uno::Sequence< beans::PropertyValue > aProps(5);
+
+    aProps[0].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_COMMANDURL );
+    aProps[0].Value <<= sCommandURL;
+    aProps[1].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_HELPURL );
+    aProps[1].Value <<= sHelpURL;
+    aProps[2].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_LABEL );
+    aProps[2].Value <<= sLabel;
+    aProps[3].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_TYPE );
+    aProps[3].Value <<= nType;
+    aProps[4].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_CONTAINER );
+    aProps[4].Value = aSubMenu;
+
+    return aProps;
+}
+
+uno::Sequence< beans::PropertyValue > ScVbaCommandBarControls::CreateToolbarItemData( const rtl::OUString& sCommandURL, const rtl::OUString& sHelpURL, const rtl::OUString& sLabel, sal_uInt16 nType, const uno::Any& aSubMenu, sal_Bool isVisible, sal_Int32 nStyle )
+{
+    uno::Sequence< beans::PropertyValue > aProps(7);
+
+    aProps[0].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_COMMANDURL );
+    aProps[0].Value <<= sCommandURL;
+    aProps[1].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_HELPURL );
+    aProps[1].Value <<= sHelpURL;
+    aProps[2].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_LABEL );
+    aProps[2].Value <<= sLabel;
+    aProps[3].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_TYPE );
+    aProps[3].Value <<= nType;
+    aProps[4].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_CONTAINER );
+    aProps[4].Value = aSubMenu;
+    aProps[5].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_ISVISIBLE );
+    aProps[5].Value <<= isVisible;
+    aProps[6].Name = rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_STYLE );
+    aProps[6].Value <<= nStyle;
+
+    return aProps;
+}
+
+// XEnumerationAccess
+uno::Type SAL_CALL
+ScVbaCommandBarControls::getElementType() throw ( uno::RuntimeException )
+{
+    return XCommandBarControl::static_type( 0 );
+}
+
+uno::Reference< container::XEnumeration >
+ScVbaCommandBarControls::createEnumeration() throw ( uno::RuntimeException )
+{
+    return uno::Reference< container::XEnumeration >( new CommandBarControlEnumeration( this ) );
+}
+
+uno::Any
+ScVbaCommandBarControls::createCollectionObject( const uno::Any& aSource )
+{
+    sal_Int32 nPosition = -1;
+    aSource >>= nPosition;
+    uno::Sequence< beans::PropertyValue > aProps;
+    m_xIndexAccess->getByIndex( nPosition ) >>= aProps;
+    uno::Reference< container::XIndexAccess > xSubMenu;
+    getPropertyValue( aProps, rtl::OUString::createFromAscii( ITEM_DESCRIPTOR_CONTAINER ) ) >>= xSubMenu;
+    ScVbaCommandBarControl* pNewCommandBarControl = NULL;
+    if( xSubMenu.is() )
+        pNewCommandBarControl = new ScVbaCommandBarPopup( this, mxContext, m_xIndexAccess, pCBarHelper, m_xBarSettings, m_sResourceUrl, nPosition, sal_True, m_xMenu );
+    else
+        pNewCommandBarControl = new ScVbaCommandBarButton( this, mxContext, m_xIndexAccess, pCBarHelper, m_xBarSettings, m_sResourceUrl, nPosition, sal_True, m_xMenu );
+
+    return uno::makeAny( uno::Reference< XCommandBarControl > ( pNewCommandBarControl ) );
+}
+
+// Methods
+uno::Any SAL_CALL
+ScVbaCommandBarControls::Item( const uno::Any& aIndex, const uno::Any& /*aIndex*/ ) throw (uno::RuntimeException)
+{
+    sal_Int32 nPosition = -1;
+    if( aIndex.getValueTypeClass() == uno::TypeClass_STRING )
+    {
+        rtl::OUString sName;
+        aIndex >>= sName;
+        nPosition = VbaCommandBarHelper::findControlByName( m_xIndexAccess, sName );
+    }
+    else
+    {
+        aIndex >>= nPosition;
+    }
+
+    if( nPosition < 0 || nPosition >= getCount() )
+    {
+        throw uno::RuntimeException();
+    }
+
+    return createCollectionObject( uno::makeAny( nPosition ) );
+}
+
+uno::Reference< XCommandBarControl > SAL_CALL
+ScVbaCommandBarControls::Add( const uno::Any& Type, const uno::Any& Id, const uno::Any& Parameter, const uno::Any& Before, const uno::Any& Temporary ) throw (script::BasicErrorException, uno::RuntimeException)
+{
+    // Parameter is not supported
+    // the following name needs to be individually created;
+    rtl::OUString sLabel( rtl::OUString::createFromAscii("Custom") );
+    rtl::OUString sCommandUrl = rtl::OUString::createFromAscii( CUSTOM_MENU_STR ) + sLabel;
+    sal_Int32 nType = office::MsoControlType::msoControlButton;
+    sal_Int32 nPosition = 0;
+    sal_Bool bTemporary = sal_True;
+
+    if( Type.hasValue() )
+    {
+        Type >>= nType;
+    }
+
+    if( nType != office::MsoControlType::msoControlButton &&
+        nType != office::MsoControlType::msoControlPopup )
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+
+    if( Id.hasValue() || Parameter.hasValue( ) )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+
+    if( Before.hasValue() )
+        Before >>= nPosition;
+    else
+        nPosition = m_xIndexAccess->getCount();
+
+    if( Temporary.hasValue() )
+        Temporary >>= bTemporary;
+
+    uno::Any aSubMenu;
+    if( nType == office::MsoControlType::msoControlPopup )
+    {
+        // it is a Popmenu
+        uno::Reference< lang::XSingleComponentFactory > xSCF( m_xBarSettings, uno::UNO_QUERY_THROW );
+        aSubMenu <<= xSCF->createInstanceWithContext( mxContext );
+    }
+
+    // create control
+    uno::Sequence< beans::PropertyValue > aProps;
+    rtl::OUString sHelpUrl;
+    sal_uInt16 nItemType = 0;
+    if( IsMenu() )
+    {
+        aProps = CreateMenuItemData( sCommandUrl, sHelpUrl, sLabel, nItemType, aSubMenu );
+    }
+    else
+    {
+        sal_Bool isVisible = sal_True;
+        sal_Int32 nStyle = 0;
+        aProps = CreateToolbarItemData( sCommandUrl, sHelpUrl, sLabel, nItemType, aSubMenu, isVisible, nStyle );
+    }
+
+
+    uno::Reference< container::XIndexContainer > xIndexContainer( m_xIndexAccess, uno::UNO_QUERY_THROW );
+    xIndexContainer->insertByIndex( nPosition, uno::makeAny( aProps ) );
+
+    pCBarHelper->ApplyChange( m_sResourceUrl, m_xBarSettings );
+
+    // sometimes it would crash if passing m_xMenu instead of uno::Reference< awt::XMenu >() in Linux.
+    ScVbaCommandBarControl* pNewCommandBarControl = NULL;
+    if( nType == office::MsoControlType::msoControlPopup )
+        pNewCommandBarControl = new ScVbaCommandBarPopup( this, mxContext, m_xIndexAccess, pCBarHelper, m_xBarSettings, m_sResourceUrl, nPosition, bTemporary, uno::Reference< awt::XMenu >() );
+    else
+        pNewCommandBarControl = new ScVbaCommandBarButton( this, mxContext, m_xIndexAccess, pCBarHelper, m_xBarSettings, m_sResourceUrl, nPosition, bTemporary, uno::Reference< awt::XMenu >() );
+
+    return uno::Reference< XCommandBarControl >( pNewCommandBarControl );
+}
+
+// XHelperInterface
+rtl::OUString&
+ScVbaCommandBarControls::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBarControls") );
+    return sImplName;
+}
+uno::Sequence<rtl::OUString>
+ScVbaCommandBarControls::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBarControls" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbacommandbarcontrols.hxx b/vbahelper/source/vbahelper/vbacommandbarcontrols.hxx
new file mode 100644
index 0000000..43897b7
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbarcontrols.hxx
@@ -0,0 +1,75 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_COMMANDBARCONTROLS_HXX
+#define SC_VBA_COMMANDBARCONTROLS_HXX
+
+#include <ooo/vba/XCommandBarControls.hpp>
+#include <com/sun/star/awt/XMenu.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbacollectionimpl.hxx>
+#include "vbacommandbarhelper.hxx"
+
+typedef CollTestImplHelper< ov::XCommandBarControls > CommandBarControls_BASE;
+
+class ScVbaCommandBarControls : public CommandBarControls_BASE
+{
+private:
+    VbaCommandBarHelperRef pCBarHelper;
+    css::uno::Reference< css::container::XIndexAccess >          m_xBarSettings;
+    rtl::OUString       m_sResourceUrl;
+    css::uno::Reference< css::awt::XMenu >                        m_xMenu;
+    sal_Bool m_bIsMenu;
+
+    css::uno::Sequence< css::beans::PropertyValue > CreateMenuItemData( const rtl::OUString& sCommandURL, const rtl::OUString& sHelpURL, const rtl::OUString& sLabel, sal_uInt16 nType, const css::uno::Any& aSubMenu );
+    css::uno::Sequence< css::beans::PropertyValue > CreateToolbarItemData( const rtl::OUString& sCommandURL, const rtl::OUString& sHelpURL, const rtl::OUString& sLabel, sal_uInt16 nType, const css::uno::Any& aSubMenu, sal_Bool isVisible, sal_Int32 nStyle );
+
+public:
+    ScVbaCommandBarControls( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess, VbaCommandBarHelperRef pHelper, const css::uno::Reference< css::container::XIndexAccess >& xBarSettings, const rtl::OUString& sResourceUrl, const css::uno::Reference< css::awt::XMenu >& xMenu ) throw( css::uno::RuntimeException );
+    sal_Bool IsMenu(){ return m_bIsMenu; }
+
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+    // Methods
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& Index, const css::uno::Any& /*Index2*/ ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::XCommandBarControl > SAL_CALL Add( const css::uno::Any& Type, const css::uno::Any& Id, const css::uno::Any& Parameter, const css::uno::Any& Before, const css::uno::Any& Temporary ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif//SC_VBA_COMMANDBARCONTROLS_HXX
diff --git a/vbahelper/source/vbahelper/vbacommandbarhelper.cxx b/vbahelper/source/vbahelper/vbacommandbarhelper.cxx
new file mode 100644
index 0000000..374cc4b
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbarhelper.cxx
@@ -0,0 +1,282 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbacommandbarhelper.hxx"
+#include <com/sun/star/ui/XUIConfigurationManagerSupplier.hpp>
+#include <com/sun/star/ui/XUIConfigurationStorage.hpp>
+#include <com/sun/star/ui/XModuleUIConfigurationManager.hpp>
+#include <com/sun/star/ui/XUIConfigurationPersistence.hpp>
+#include <com/sun/star/ui/XUIElement.hpp>
+#ifndef _COM_SUN_STAR_UI_UIElementType_HPP_
+#include <com/sun/star/ui/UIElementType.hpp>
+#endif
+#include <comphelper/processfactory.hxx>
+#include <vbahelper/vbahelper.hxx>
+#include <time.h>
+#include <map>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+#define CREATEOUSTRING(asciistr) rtl::OUString::createFromAscii(asciistr)
+
+typedef std::map< rtl::OUString, rtl::OUString > MSO2OOCommandbarMap;
+
+class MSO2OOCommandbarHelper
+{
+private:
+    static MSO2OOCommandbarHelper* pMSO2OOCommandbarHelper;
+    MSO2OOCommandbarMap maBuildinToolbarMap;
+
+    MSO2OOCommandbarHelper()
+    {
+        // Buildin toolbars
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Standard"),CREATEOUSTRING("private:resource/toolbar/standardbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Formatting"),CREATEOUSTRING("private:resource/toolbar/formatobjectbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Drawing"),CREATEOUSTRING("private:resource/toolbar/drawbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Toolbar List"),CREATEOUSTRING("private:resource/toolbar/toolbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Forms"),CREATEOUSTRING("private:resource/toolbar/formcontrols") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Form Controls"),CREATEOUSTRING("private:resource/toolbar/formcontrols") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Full Screen"),CREATEOUSTRING("private:resource/toolbar/fullscreenbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Chart"),CREATEOUSTRING("private:resource/toolbar/flowchartshapes") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("Picture"),CREATEOUSTRING("private:resource/toolbar/graphicobjectbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("WordArt"),CREATEOUSTRING("private:resource/toolbar/fontworkobjectbar") ) );
+        maBuildinToolbarMap.insert( std::make_pair( CREATEOUSTRING("3-D Settings"),CREATEOUSTRING("private:resource/toolbar/extrusionobjectbar") ) );
+    }
+
+public:
+    virtual ~MSO2OOCommandbarHelper() {};
+    static MSO2OOCommandbarHelper* getMSO2OOCommandbarHelper()
+    {
+        if( pMSO2OOCommandbarHelper == NULL )
+        {
+            pMSO2OOCommandbarHelper = new MSO2OOCommandbarHelper();
+        }
+        return pMSO2OOCommandbarHelper;
+    }
+
+    rtl::OUString findBuildinToolbar( const rtl::OUString& sToolbarName )
+    {
+        MSO2OOCommandbarMap::iterator it = maBuildinToolbarMap.begin();
+        for(; it != maBuildinToolbarMap.end(); it++ )
+        {
+            rtl::OUString sName = it->first;
+            if( sName.equalsIgnoreAsciiCase( sToolbarName ) )
+                return it->second;
+        }
+        return rtl::OUString();
+    }
+};
+
+MSO2OOCommandbarHelper* MSO2OOCommandbarHelper::pMSO2OOCommandbarHelper = NULL;
+
+
+VbaCommandBarHelper::VbaCommandBarHelper( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::frame::XModel >& xModel ) throw (css::uno::RuntimeException) : mxContext( xContext ), mxModel( xModel )
+{
+    Init();
+}
+
+void VbaCommandBarHelper::Init( ) throw (css::uno::RuntimeException)
+{
+    uno::Reference< css::ui::XUIConfigurationManagerSupplier > xUICfgSupplier( mxModel, uno::UNO_QUERY_THROW );
+    m_xDocCfgMgr = xUICfgSupplier->getUIConfigurationManager();
+
+    uno::Reference< lang::XServiceInfo > xServiceInfo( mxModel, uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.sheet.SpreadsheetDocument") ) ) )
+    {
+        maModuleId = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.sheet.SpreadsheetDocument") );
+    }
+    else if( xServiceInfo->supportsService( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextDocument" ) ) ) )
+    {
+        maModuleId = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextDocument") );
+    }
+
+    if( maModuleId.getLength() == 0 )
+    {
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    }
+
+    uno::Reference< lang::XMultiServiceFactory > xServiceManager( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+    css::uno::Reference< css::ui::XModuleUIConfigurationManagerSupplier > xUICfgMgrSupp( xServiceManager->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.ui.ModuleUIConfigurationManagerSupplier" ))), uno::UNO_QUERY_THROW );
+
+    m_xAppCfgMgr.set( xUICfgMgrSupp->getUIConfigurationManager( maModuleId ), uno::UNO_QUERY_THROW );
+
+    css::uno::Reference< css::container::XNameAccess > xNameAccess( xServiceManager->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.ui.WindowStateConfiguration" ))), uno::UNO_QUERY_THROW );
+
+    m_xWindowState.set( xNameAccess->getByName( maModuleId ), uno::UNO_QUERY_THROW );
+}
+
+css::uno::Reference< css::container::XIndexAccess > VbaCommandBarHelper::getSettings( const rtl::OUString& sResourceUrl ) throw (css::uno::RuntimeException)
+{
+    if( m_xDocCfgMgr->hasSettings( sResourceUrl ) )
+        return m_xDocCfgMgr->getSettings( sResourceUrl, sal_True );
+    else if( m_xAppCfgMgr->hasSettings( sResourceUrl ) )
+        return m_xAppCfgMgr->getSettings( sResourceUrl, sal_True );
+    else
+    {
+        css::uno::Reference< css::container::XIndexAccess > xSettings( m_xAppCfgMgr->createSettings( ), uno::UNO_QUERY_THROW );
+        return xSettings;
+    }
+}
+
+void VbaCommandBarHelper::removeSettings( const rtl::OUString& sResourceUrl ) throw (css::uno::RuntimeException)
+{
+    if( m_xDocCfgMgr->hasSettings( sResourceUrl ) )
+        m_xDocCfgMgr->removeSettings( sResourceUrl );
+    else if( m_xAppCfgMgr->hasSettings( sResourceUrl ) )
+        m_xAppCfgMgr->removeSettings( sResourceUrl );
+
+    // persistChanges();
+}
+
+void VbaCommandBarHelper::ApplyChange( const rtl::OUString& sResourceUrl, const css::uno::Reference< css::container::XIndexAccess >& xSettings, sal_Bool bTemporary ) throw (css::uno::RuntimeException)
+{
+    if( m_xDocCfgMgr->hasSettings( sResourceUrl ) )
+    {
+        m_xDocCfgMgr->replaceSettings( sResourceUrl, xSettings );
+    }
+    else
+    {
+        m_xDocCfgMgr->insertSettings( sResourceUrl, xSettings );
+    }
+    if( !bTemporary )
+    {
+        persistChanges();
+    }
+}
+
+sal_Bool VbaCommandBarHelper::persistChanges() throw (css::uno::RuntimeException)
+{
+    uno::Reference< css::ui::XUIConfigurationPersistence > xConfigPersistence( m_xDocCfgMgr, uno::UNO_QUERY_THROW );
+    sal_Bool result = sal_False;
+    if( xConfigPersistence->isModified() )
+    {
+        xConfigPersistence->store();
+        result = sal_True;
+    }
+    return result;
+}
+
+uno::Reference< frame::XLayoutManager > VbaCommandBarHelper::getLayoutManager() throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XFrame > xFrame( getModel()->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xPropertySet( xFrame, uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XLayoutManager > xLayoutManager( xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("LayoutManager") ), uno::UNO_QUERY_THROW );
+    return xLayoutManager;
+}
+
+sal_Bool VbaCommandBarHelper::hasToolbar( const rtl::OUString& sResourceUrl, const rtl::OUString& sName ) throw (css::uno::RuntimeException)
+{
+    if( m_xDocCfgMgr->hasSettings( sResourceUrl ) )
+    {
+        rtl::OUString sUIName;
+        uno::Reference< beans::XPropertySet > xPropertySet( m_xDocCfgMgr->getSettings( sResourceUrl, sal_False ), uno::UNO_QUERY_THROW );
+        xPropertySet->getPropertyValue( rtl::OUString::createFromAscii(ITEM_DESCRIPTOR_UINAME) ) >>= sUIName;
+        if( sName.equalsIgnoreAsciiCase( sUIName ) )
+            return sal_True;
+    }
+    return sal_False;
+}
+
+// return the resource url if found
+rtl::OUString VbaCommandBarHelper::findToolbarByName( const css::uno::Reference< css::container::XNameAccess >& xNameAccess, const rtl::OUString& sName ) throw (css::uno::RuntimeException)
+{
+    rtl::OUString sResourceUrl;
+
+    // check if it is an buildin toolbar
+    sResourceUrl = MSO2OOCommandbarHelper::getMSO2OOCommandbarHelper()->findBuildinToolbar( sName );
+    if( sResourceUrl.getLength() > 0 )
+        return sResourceUrl;
+
+    uno::Sequence< ::rtl::OUString > allNames = xNameAccess->getElementNames();
+    for( sal_Int32 i = 0; i < allNames.getLength(); i++ )
+    {
+        sResourceUrl = allNames[i];
+        if(sResourceUrl.indexOf( rtl::OUString::createFromAscii( ITEM_TOOLBAR_URL ) ) == 0 )
+        {
+            if( hasToolbar( sResourceUrl, sName ) )
+                return sResourceUrl;
+        }
+    }
+
+    // the customize toolbars creating during importing, shoud found there.
+    static rtl::OUString sToolbarPrefix( RTL_CONSTASCII_USTRINGPARAM( "private:resource/toolbar/custom_" ) );
+    sResourceUrl = sToolbarPrefix.concat( sName );
+    if( hasToolbar( sResourceUrl, sName ) )
+        return sResourceUrl;
+
+    return rtl::OUString();
+}
+
+// if found, return the position of the control. if not found, return -1
+sal_Int32 VbaCommandBarHelper::findControlByName( const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess, const rtl::OUString& sName ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 nCount = xIndexAccess->getCount();
+    css::uno::Sequence< css::beans::PropertyValue > aProps;
+    for( sal_Int32 i = 0; i < nCount; i++ )
+    {
+        rtl::OUString sLabel;
+        xIndexAccess->getByIndex( i ) >>= aProps;
+        getPropertyValue( aProps, rtl::OUString::createFromAscii(ITEM_DESCRIPTOR_LABEL) ) >>= sLabel;
+        // handle the hotkey character '~'
+        rtl::OUString sNewLabel;
+        sal_Int32 index = sLabel.indexOf( sal_Unicode('~') );
+        if( index < 0 )
+            sNewLabel = sLabel;
+        else if( index == 0 )
+            sNewLabel = sLabel.copy( index + 1);
+        else if( index == sNewLabel.getLength() - 1 )
+            sNewLabel = sLabel.copy(0, index );
+        else
+            sNewLabel = sLabel.copy( 0, index ) + sLabel.copy( index + 1 );
+        OSL_TRACE("VbaCommandBarHelper::findControlByName, control name: %s", rtl::OUStringToOString( sNewLabel, RTL_TEXTENCODING_UTF8 ).getStr() );
+        if( sName.equalsIgnoreAsciiCase( sNewLabel ) )
+            return i;
+    }
+
+    // not found
+    return -1;
+}
+
+rtl::OUString VbaCommandBarHelper::generateCustomURL()
+{
+    rtl::OUString url = rtl::OUString::createFromAscii( ITEM_TOOLBAR_URL );
+    url += rtl::OUString::createFromAscii( CUSTOM_TOOLBAR_STR );
+
+    // use a random number to minimize possible clash with existing custom toolbars
+    srand( unsigned( time( NULL ) ));
+    url += rtl::OUString::valueOf( sal_Int64( rand() ), 16 );
+    return url;
+}
diff --git a/vbahelper/source/vbahelper/vbacommandbarhelper.hxx b/vbahelper/source/vbahelper/vbacommandbarhelper.hxx
new file mode 100644
index 0000000..e6b0358
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbarhelper.hxx
@@ -0,0 +1,110 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef VBA_COMMANDBARHELPER_HXX
+#define VBA_COMMANDBARHELPER_HXX
+
+#include <vbahelper/vbahelperinterface.hxx>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/ui/XUIConfigurationManager.hpp>
+#include <com/sun/star/ui/XModuleUIConfigurationManagerSupplier.hpp>
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/frame/XLayoutManager.hpp>
+#include <boost/shared_ptr.hpp>
+
+
+static const char ITEM_DESCRIPTOR_COMMANDURL[]  = "CommandURL";
+static const char ITEM_DESCRIPTOR_HELPURL[]     = "HelpURL";
+static const char ITEM_DESCRIPTOR_CONTAINER[]   = "ItemDescriptorContainer";
+static const char ITEM_DESCRIPTOR_LABEL[]       = "Label";
+static const char ITEM_DESCRIPTOR_TYPE[]        = "Type";
+static const char ITEM_DESCRIPTOR_STYLE[]       = "Style";
+static const char ITEM_DESCRIPTOR_ISVISIBLE[]   = "IsVisible";
+static const char ITEM_DESCRIPTOR_RESOURCEURL[] = "ResourceURL";
+static const char ITEM_DESCRIPTOR_UINAME[]		= "UIName";
+
+static const char ITEM_MENUBAR_URL[] = "private:resource/menubar/menubar";
+static const char ITEM_TOOLBAR_URL[] = "private:resource/toolbar/";
+
+static const char CUSTOM_TOOLBAR_STR[] = "custom_toolbar_";
+static const char CUSTOM_MENU_STR[] = "vnd.openoffice.org:CustomMenu";
+
+class VbaCommandBarHelper;
+typedef ::boost::shared_ptr< VbaCommandBarHelper > VbaCommandBarHelperRef;
+
+class VbaCommandBarHelper
+{
+private:
+    css::uno::Reference< css::uno::XComponentContext > mxContext;
+    css::uno::Reference< css::frame::XModel > mxModel;
+    css::uno::Reference< css::ui::XUIConfigurationManager > m_xDocCfgMgr; // current document
+    css::uno::Reference< css::ui::XUIConfigurationManager > m_xAppCfgMgr;
+    css::uno::Reference< css::container::XNameAccess > m_xWindowState;
+    rtl::OUString maModuleId;
+
+    void Init() throw (css::uno::RuntimeException);
+    sal_Bool hasToolbar( const rtl::OUString& sResourceUrl, const rtl::OUString& sName )  throw (css::uno::RuntimeException);
+public:
+    VbaCommandBarHelper( const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::frame::XModel >& xModel ) throw( css::uno::RuntimeException );
+
+    css::uno::Reference< css::frame::XModel > getModel() { return mxModel; }
+
+    css::uno::Reference< css::ui::XUIConfigurationManager > getDocCfgManager() throw (css::uno::RuntimeException)
+    {
+        return m_xDocCfgMgr;
+    }
+    css::uno::Reference< css::ui::XUIConfigurationManager > getAppCfgManager() throw (css::uno::RuntimeException)
+    {
+        return m_xAppCfgMgr;
+    }
+    css::uno::Reference< css::container::XNameAccess > getPersistentWindowState() throw (css::uno::RuntimeException)
+    {
+        return m_xWindowState;
+    }
+    sal_Bool persistChanges() throw (css::uno::RuntimeException);
+    css::uno::Reference< css::container::XIndexAccess > getSettings( const rtl::OUString& sResourceUrl ) throw (css::uno::RuntimeException);
+    void removeSettings( const rtl::OUString& sResourceUrl ) throw (css::uno::RuntimeException);
+    void ApplyChange( const rtl::OUString& sResourceUrl, const css::uno::Reference< css::container::XIndexAccess >& xSettings, sal_Bool bTemporary = sal_True ) throw (css::uno::RuntimeException);
+
+    css::uno::Reference< css::frame::XLayoutManager > getLayoutManager() throw (css::uno::RuntimeException);
+
+    const rtl::OUString getModuleId(){ return maModuleId; }
+    rtl::OUString findToolbarByName( const css::uno::Reference< css::container::XNameAccess >& xNameAccess, const rtl::OUString& sName ) throw (css::uno::RuntimeException);
+    static sal_Int32 findControlByName( const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess, const rtl::OUString& sName ) throw (css::uno::RuntimeException);
+    static rtl::OUString generateCustomURL();
+};
+
+#endif//VBA_COMMANDBARHELPER_HXX
diff --git a/vbahelper/source/vbahelper/vbacommandbars.cxx b/vbahelper/source/vbahelper/vbacommandbars.cxx
new file mode 100644
index 0000000..c11313e
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbars.cxx
@@ -0,0 +1,237 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/ui/XUIConfigurationManagerSupplier.hpp>
+#include <com/sun/star/ui/XUIConfigurationStorage.hpp>
+#include <com/sun/star/ui/XModuleUIConfigurationManager.hpp>
+#include <com/sun/star/ui/XUIConfigurationPersistence.hpp>
+
+#include "vbacommandbars.hxx"
+#include "vbacommandbar.hxx"
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > CommandBarEnumeration_BASE;
+
+class CommandBarEnumeration : public CommandBarEnumeration_BASE
+{
+    uno::Reference< XHelperInterface > m_xParent;
+    uno::Reference< uno::XComponentContext > m_xContext;
+    VbaCommandBarHelperRef pCBarHelper;
+    uno::Sequence< rtl::OUString > m_sNames;
+    sal_Int32 m_nCurrentPosition;
+public:
+    CommandBarEnumeration( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, VbaCommandBarHelperRef pHelper) throw ( uno::RuntimeException ) : m_xParent( xParent ), m_xContext( xContext ), pCBarHelper( pHelper ) , m_nCurrentPosition( 0 )
+    {
+        uno::Reference< container::XNameAccess > xNameAccess = pCBarHelper->getPersistentWindowState();
+        m_sNames = xNameAccess->getElementNames();
+    }
+    virtual sal_Bool SAL_CALL hasMoreElements() throw ( uno::RuntimeException )
+    {
+        if( m_nCurrentPosition < m_sNames.getLength() )
+            return sal_True;
+        return sal_False;
+    }
+    virtual uno::Any SAL_CALL nextElement() throw ( container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException )
+    {
+        // FIXME: should be add menubar
+        if( hasMoreElements() )
+        {
+            rtl::OUString sResourceUrl( m_sNames[ m_nCurrentPosition++ ] );
+            if( sResourceUrl.indexOf( rtl::OUString::createFromAscii("private:resource/toolbar/") ) != -1 )
+            {
+                uno::Reference< container::XIndexAccess > xCBarSetting = pCBarHelper->getSettings( sResourceUrl );
+                uno::Reference< XCommandBar > xCommandBar( new ScVbaCommandBar( m_xParent, m_xContext, pCBarHelper, xCBarSetting, sResourceUrl, sal_False, sal_False ) );
+             }
+             else
+                return nextElement();
+        }
+        else
+            throw container::NoSuchElementException();
+        return uno::Any();
+    }
+};
+
+ScVbaCommandBars::ScVbaCommandBars( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xIndexAccess, const uno::Reference< frame::XModel >& xModel ) throw ( uno::RuntimeException ) : CommandBars_BASE( xParent, xContext, xIndexAccess )
+{
+    pCBarHelper.reset( new VbaCommandBarHelper( mxContext, xModel ) );
+    m_xNameAccess = pCBarHelper->getPersistentWindowState();
+}
+
+ScVbaCommandBars::~ScVbaCommandBars()
+{
+}
+
+// XEnumerationAccess
+uno::Type SAL_CALL
+ScVbaCommandBars::getElementType() throw ( uno::RuntimeException )
+{
+    return XCommandBar::static_type( 0 );
+}
+
+uno::Reference< container::XEnumeration >
+ScVbaCommandBars::createEnumeration() throw ( uno::RuntimeException )
+{
+    return uno::Reference< container::XEnumeration >( new CommandBarEnumeration( this, mxContext, pCBarHelper ) );
+}
+
+uno::Any
+ScVbaCommandBars::createCollectionObject( const uno::Any& aSource )
+{
+    // aSource should be a name at this time, because of the class is API wrapper.
+    rtl::OUString sResourceUrl;
+    uno::Reference< container::XIndexAccess > xBarSettings;
+    rtl::OUString sBarName;
+    sal_Bool bMenu = sal_False;
+    if( aSource >>= sBarName )
+    {
+        if( sBarName.equalsIgnoreAsciiCase( rtl::OUString::createFromAscii("Worksheet Menu Bar") )
+            || sBarName.equalsIgnoreAsciiCase( rtl::OUString::createFromAscii("Menu Bar") ) )
+        {
+            // menu bar
+            sResourceUrl = rtl::OUString::createFromAscii( ITEM_MENUBAR_URL );
+            bMenu = sal_True;
+        }
+        else
+        {
+            sResourceUrl = pCBarHelper->findToolbarByName( m_xNameAccess, sBarName );
+            bMenu = sal_False;
+        }
+    }
+
+    if( sResourceUrl.getLength() )
+        xBarSettings = pCBarHelper->getSettings( sResourceUrl );
+    else
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Toolbar do not exist") ), uno::Reference< uno::XInterface >() );
+
+    return uno::Any( uno::Reference< XCommandBar >( new ScVbaCommandBar( this, mxContext, pCBarHelper, xBarSettings, sResourceUrl, bMenu, sal_False ) ) );
+}
+
+// XCommandBars
+uno::Reference< XCommandBar > SAL_CALL
+ScVbaCommandBars::Add( const css::uno::Any& Name, const css::uno::Any& /*Position*/, const css::uno::Any& /*MenuBar*/, const css::uno::Any& Temporary ) throw (css::script::BasicErrorException, css::uno::RuntimeException)
+{
+    // FIXME: only support to add Toolbar
+    // Position - MsoBar MenuBar - sal_Bool
+    // Currently only the Name is supported.
+    rtl::OUString sName;
+    if( Name.hasValue() )
+        Name >>= sName;
+
+    rtl::OUString sResourceUrl;
+    if( sName.getLength() )
+    {
+        sResourceUrl = pCBarHelper->findToolbarByName( m_xNameAccess, sName );
+        if( sResourceUrl.getLength() )
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Toolbar exists") ), uno::Reference< uno::XInterface >() );
+    }
+    else
+    {
+        sName = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Custom1") );
+    }
+
+    sal_Bool bTemporary = sal_False;
+    if( Temporary.hasValue() )
+        Temporary >>= bTemporary;
+
+    sResourceUrl = VbaCommandBarHelper::generateCustomURL();
+    uno::Reference< container::XIndexAccess > xBarSettings( pCBarHelper->getSettings( sResourceUrl ), uno::UNO_QUERY_THROW );
+    uno::Reference< XCommandBar > xCBar( new ScVbaCommandBar( this, mxContext, pCBarHelper, xBarSettings, sResourceUrl, sal_False, bTemporary ) );
+    xCBar->setName( sName );
+    return xCBar;
+}
+sal_Int32 SAL_CALL
+ScVbaCommandBars::getCount() throw(css::uno::RuntimeException)
+{
+    // Filter out all toolbars from the window collection
+    sal_Int32 nCount = 1; // there is a Menubar in OOo
+    uno::Sequence< ::rtl::OUString > allNames = m_xNameAccess->getElementNames();
+    for( sal_Int32 i = 0; i < allNames.getLength(); i++ )
+    {
+        if(allNames[i].indexOf( rtl::OUString::createFromAscii("private:resource/toolbar/") ) != -1 )
+        {
+            nCount++;
+        }
+    }
+    return nCount;
+}
+
+// ScVbaCollectionBaseImpl
+uno::Any SAL_CALL
+ScVbaCommandBars::Item( const uno::Any& aIndex, const uno::Any& /*aIndex2*/ ) throw( uno::RuntimeException )
+{
+    if( aIndex.getValueTypeClass() == uno::TypeClass_STRING )
+    {
+        return createCollectionObject( aIndex );
+    }
+
+    // hardcode if "aIndex = 1" that would return "main menu".
+    sal_Int16 nIndex = 0;
+    aIndex >>= nIndex;
+    if( nIndex == 1 )
+    {
+        uno::Any aSource;
+        if( pCBarHelper->getModuleId().equalsAscii( "com.sun.star.sheet.SpreadsheetDocument" ) )
+            aSource <<= rtl::OUString::createFromAscii( "Worksheet Menu Bar" );
+        else if( pCBarHelper->getModuleId().equalsAscii("com.sun.star.text.TextDocument") )
+            aSource <<= rtl::OUString::createFromAscii( "Menu Bar" );
+        if( aSource.hasValue() )
+            return createCollectionObject( aSource );
+    }
+    return uno::Any();
+}
+
+// XHelperInterface
+rtl::OUString&
+ScVbaCommandBars::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaCommandBars") );
+    return sImplName;
+}
+uno::Sequence<rtl::OUString>
+ScVbaCommandBars::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.CommandBars" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbacommandbars.hxx b/vbahelper/source/vbahelper/vbacommandbars.hxx
new file mode 100644
index 0000000..2c0cc3f
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbacommandbars.hxx
@@ -0,0 +1,71 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#ifndef SC_VBA_COMMANDBARS_HXX
+#define SC_VBA_COMMANDBARS_HXX
+
+#include <ooo/vba/XCommandBar.hpp>
+#include <ooo/vba/XCommandBars.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <cppuhelper/implbase1.hxx>
+#include <vbahelper/vbahelperinterface.hxx>
+#include <vbahelper/vbacollectionimpl.hxx>
+#include "vbacommandbarhelper.hxx"
+
+typedef CollTestImplHelper< ov::XCommandBars > CommandBars_BASE;
+
+class ScVbaCommandBars : public CommandBars_BASE
+{
+private:
+    VbaCommandBarHelperRef pCBarHelper;
+
+public:
+    ScVbaCommandBars( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess >& xIndexAccess, const css::uno::Reference< css::frame::XModel >& xModel ) throw (css::uno::RuntimeException);
+    virtual ~ScVbaCommandBars();
+
+    // XCommandBars
+    virtual css::uno::Reference< ov::XCommandBar > SAL_CALL Add( const css::uno::Any& Name, const css::uno::Any& Position, const css::uno::Any& MenuBar, const css::uno::Any& Temporary ) throw (css::script::BasicErrorException, css::uno::RuntimeException);
+    // XEnumerationAccess
+    virtual css::uno::Type SAL_CALL getElementType() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration() throw (css::uno::RuntimeException);
+    virtual css::uno::Any createCollectionObject( const css::uno::Any& aSource );
+
+    virtual sal_Int32 SAL_CALL getCount() throw(css::uno::RuntimeException);
+    virtual css::uno::Any SAL_CALL Item( const css::uno::Any& aIndex, const css::uno::Any& /*aIndex2*/ ) throw( css::uno::RuntimeException);
+    // XHelperInterface
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+};
+
+#endif//SC_VBA_COMMANDBARS_HXX
diff --git a/vbahelper/source/vbahelper/vbadialogbase.cxx b/vbahelper/source/vbahelper/vbadialogbase.cxx
new file mode 100644
index 0000000..23df8ae
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbadialogbase.cxx
@@ -0,0 +1,50 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialog.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/vbadialogbase.hxx>
+#include <vbahelper/vbahelper.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+// fails silently
+void
+VbaDialogBase::Show() throw(uno::RuntimeException)
+{
+    rtl::OUString aURL;
+    if ( m_xModel.is() )
+    {
+        aURL = mapIndexToName( mnIndex );
+        if( aURL.getLength() == 0  )
+            throw uno::RuntimeException(
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( " Unable to open the specified dialog " ) ),
+                uno::Reference< XInterface > () );
+        dispatchRequests( m_xModel, aURL );
+    }
+}
diff --git a/vbahelper/source/vbahelper/vbadialogsbase.cxx b/vbahelper/source/vbahelper/vbadialogsbase.cxx
new file mode 100644
index 0000000..3675985
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbadialogsbase.cxx
@@ -0,0 +1,46 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbadialogs.cxx,v $
+ * $Revision: 1.5 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/vbadialogsbase.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+::sal_Int32
+VbaDialogsBase::getCount() throw (uno::RuntimeException)
+{
+    //#TODO #FIXEME
+    return 0;
+}
+
+uno::Any
+VbaDialogsBase::Item( const uno::Any& /* &aItem */) throw (uno::RuntimeException)
+{
+    return uno::Any();
+}
diff --git a/vbahelper/source/vbahelper/vbadocumentbase.cxx b/vbahelper/source/vbahelper/vbadocumentbase.cxx
new file mode 100644
index 0000000..d8a4936
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbadocumentbase.cxx
@@ -0,0 +1,227 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/vbadocumentbase.hxx>
+#include <vbahelper/helperdecl.hxx>
+#include <comphelper/unwrapargs.hxx>
+
+#include <com/sun/star/util/XModifiable.hpp>
+#include <com/sun/star/util/XProtectable.hpp>
+#include <com/sun/star/util/XCloseable.hpp>
+#include <com/sun/star/frame/XStorable.hpp>
+#include <com/sun/star/frame/XFrame.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+
+#include <tools/urlobj.hxx>
+#include <osl/file.hxx>
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+VbaDocumentBase::VbaDocumentBase( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext) :VbaDocumentBase_BASE( xParent, xContext ), mxModel(NULL)
+{
+}
+
+VbaDocumentBase::VbaDocumentBase( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, uno::Reference< frame::XModel > xModel ) : VbaDocumentBase_BASE( xParent, xContext ),  mxModel( xModel )
+{
+}
+
+VbaDocumentBase::VbaDocumentBase( uno::Sequence< uno::Any> const & args,
+    uno::Reference< uno::XComponentContext> const & xContext ) : VbaDocumentBase_BASE( getXSomethingFromArgs< XHelperInterface >( args, 0 ), xContext ),  mxModel( getXSomethingFromArgs< frame::XModel >( args, 1 ) )
+{
+}
+
+::rtl::OUString
+VbaDocumentBase::getName() throw (uno::RuntimeException)
+{
+    rtl::OUString sName = getModel()->getURL();
+    if ( sName.getLength() )
+    {
+
+        INetURLObject aURL( getModel()->getURL() );
+        ::osl::File::getSystemPathFromFileURL( aURL.GetLastName(), sName );
+    }
+    else
+    {
+        const static rtl::OUString sTitle( RTL_CONSTASCII_USTRINGPARAM("Title" ) );
+        // process "UntitledX - $(PRODUCTNAME)"
+        uno::Reference< frame::XFrame > xFrame( getModel()->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
+        uno::Reference< beans::XPropertySet > xProps( xFrame, uno::UNO_QUERY_THROW );
+        xProps->getPropertyValue(sTitle ) >>= sName;
+        sal_Int32 pos = 0;
+        sName = sName.getToken(0,' ',pos);
+    }
+    return sName;
+}
+::rtl::OUString
+VbaDocumentBase::getPath() throw (uno::RuntimeException)
+{
+       INetURLObject aURL( getModel()->getURL() );
+    rtl::OUString sURL( aURL.GetMainURL( INetURLObject::DECODE_TO_IURI ) );
+    sURL = sURL.copy( 0, sURL.getLength() - aURL.GetLastName().getLength() - 1 );
+        rtl::OUString sPath;
+    ::osl::File::getSystemPathFromFileURL( sURL, sPath );
+    return sPath;
+}
+
+::rtl::OUString
+VbaDocumentBase::getFullName() throw (uno::RuntimeException)
+{
+        rtl::OUString sPath;
+    ::osl::File::getSystemPathFromFileURL( getModel()->getURL(), sPath );
+    return sPath;
+}
+
+void
+VbaDocumentBase::Close( const uno::Any &rSaveArg, const uno::Any &rFileArg,
+                      const uno::Any &rRouteArg ) throw (uno::RuntimeException)
+{
+    sal_Bool bSaveChanges = sal_False;
+    rtl::OUString aFileName;
+    sal_Bool bRouteWorkbook = sal_True;
+
+    rSaveArg >>= bSaveChanges;
+    sal_Bool bFileName =  ( rFileArg >>= aFileName );
+    rRouteArg >>= bRouteWorkbook;
+    uno::Reference< frame::XStorable > xStorable( getModel(), uno::UNO_QUERY_THROW );
+    uno::Reference< util::XModifiable > xModifiable( getModel(), uno::UNO_QUERY_THROW );
+
+    if( bSaveChanges )
+    {
+        if( xStorable->isReadonly() )
+        {
+            throw uno::RuntimeException(::rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM( "Unable to save to a read only file ") ),
+                            uno::Reference< XInterface >() );
+        }
+        if( bFileName )
+            xStorable->storeAsURL( aFileName, uno::Sequence< beans::PropertyValue >(0) );
+        else
+            xStorable->store();
+    }
+    else
+        xModifiable->setModified( false );
+
+    uno::Reference< util::XCloseable > xCloseable( getModel(), uno::UNO_QUERY );
+
+    if( xCloseable.is() )
+        // use close(boolean DeliverOwnership)
+
+        // The boolean parameter DeliverOwnership tells objects vetoing the close process that they may
+        // assume ownership if they object the closure by throwing a CloseVetoException
+        // Here we give up ownership. To be on the safe side, catch possible veto exception anyway.
+        xCloseable->close(sal_True);
+    // If close is not supported by this model - try to dispose it.
+    // But if the model disagree with a reset request for the modify state
+    // we shouldn't do so. Otherwhise some strange things can happen.
+    else
+    {
+        uno::Reference< lang::XComponent > xDisposable ( getModel(), uno::UNO_QUERY );
+        if ( xDisposable.is() )
+            xDisposable->dispose();
+    }
+}
+
+void
+VbaDocumentBase::Protect( const uno::Any &aPassword ) throw (uno::RuntimeException)
+{
+    rtl::OUString rPassword;
+    uno::Reference< util::XProtectable > xProt( getModel(), uno::UNO_QUERY_THROW );
+    SC_VBA_FIXME(("Workbook::Protect stub"));
+    if(  aPassword >>= rPassword )
+        xProt->protect( rPassword );
+    else
+        xProt->protect( rtl::OUString() );
+}
+
+void
+VbaDocumentBase::Unprotect( const uno::Any &aPassword ) throw (uno::RuntimeException)
+{
+    rtl::OUString rPassword;
+    uno::Reference< util::XProtectable > xProt( getModel(), uno::UNO_QUERY_THROW );
+    if( !xProt->isProtected() )
+        throw uno::RuntimeException(::rtl::OUString(
+            RTL_CONSTASCII_USTRINGPARAM( "File is already unprotected" ) ),
+            uno::Reference< XInterface >() );
+    else
+    {
+        if( aPassword >>= rPassword )
+            xProt->unprotect( rPassword );
+        else
+            xProt->unprotect( rtl::OUString() );
+    }
+}
+
+void
+VbaDocumentBase::setSaved( sal_Bool bSave ) throw (uno::RuntimeException)
+{
+    uno::Reference< util::XModifiable > xModifiable( getModel(), uno::UNO_QUERY_THROW );
+    xModifiable->setModified( bSave );
+}
+
+sal_Bool
+VbaDocumentBase::getSaved() throw (uno::RuntimeException)
+{
+    uno::Reference< util::XModifiable > xModifiable( getModel(), uno::UNO_QUERY_THROW );
+    return xModifiable->isModified();
+}
+
+void
+VbaDocumentBase::Save() throw (uno::RuntimeException)
+{
+    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM(".uno:Save"));
+    uno::Reference< frame::XModel > xModel = getModel();
+    dispatchRequests(xModel,url);
+}
+
+void
+VbaDocumentBase::Activate() throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XFrame > xFrame( getModel()->getCurrentController()->getFrame(), uno::UNO_QUERY_THROW );
+    xFrame->activate();
+}
+
+rtl::OUString&
+VbaDocumentBase::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("VbaDocumentBase") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+VbaDocumentBase::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.VbaDocumentBase" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbadocumentsbase.cxx b/vbahelper/source/vbahelper/vbadocumentsbase.cxx
new file mode 100644
index 0000000..a1e8fd8
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbadocumentsbase.cxx
@@ -0,0 +1,304 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/vbadocumentsbase.hxx>
+#include <comphelper/processfactory.hxx>
+#include <cppuhelper/implbase1.hxx>
+#include <cppuhelper/implbase3.hxx>
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/frame/XComponentLoader.hpp>
+#include <com/sun/star/lang/XComponent.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/frame/XFrame.hpp>
+#include <com/sun/star/frame/FrameSearchFlag.hpp>
+#include <com/sun/star/util/XModifiable.hpp>
+#include <com/sun/star/frame/XStorable.hpp>
+#include <com/sun/star/lang/DisposedException.hpp>
+#include <com/sun/star/beans/PropertyVetoException.hpp>
+#include <com/sun/star/util/XCloseable.hpp>
+#include <com/sun/star/lang/IndexOutOfBoundsException.hpp>
+#include <com/sun/star/document/XTypeDetection.hpp>
+#include <com/sun/star/document/MacroExecMode.hpp>
+#include <com/sun/star/uri/XUriReference.hpp>
+#include <com/sun/star/uri/XUriReferenceFactory.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <sfx2/objsh.hxx>
+#include <tools/urlobj.hxx>
+#include <vbahelper/vbahelper.hxx>
+#include <hash_map>
+#include <osl/file.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+static const rtl::OUString sSpreadsheetDocument( rtl::OUString::createFromAscii( "com.sun.star.sheet.SpreadsheetDocument" ) );
+static const rtl::OUString sTextDocument( rtl::OUString::createFromAscii( "com.sun.star.text.TextDocument" ) );
+
+typedef  std::hash_map< rtl::OUString,
+sal_Int32, ::rtl::OUStringHash,
+::std::equal_to< ::rtl::OUString > > NameIndexHash;
+
+typedef std::vector < uno::Reference< frame::XModel > > Documents;
+
+typedef ::cppu::WeakImplHelper1< container::XEnumeration > DocumentsEnumImpl_BASE;
+
+// #FIXME clearly this is a candidate for some sort of helper base class as
+// this is a copy of SelectedSheetsEnum ( vbawindow.cxx )
+
+class DocumentsEnumImpl : public DocumentsEnumImpl_BASE
+{
+    uno::Reference< uno::XComponentContext > m_xContext;
+    Documents m_documents;
+    Documents::const_iterator m_it;
+
+public:
+    DocumentsEnumImpl( const uno::Reference< uno::XComponentContext >& xContext, const Documents& docs ) throw ( uno::RuntimeException ) :  m_xContext( xContext ), m_documents( docs )
+    {
+        m_it = m_documents.begin();
+    }
+    DocumentsEnumImpl( const uno::Reference< uno::XComponentContext >& xContext ) throw ( uno::RuntimeException ) :  m_xContext( xContext )
+    {
+        uno::Reference< lang::XMultiComponentFactory > xSMgr(
+            m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+        uno::Reference< frame::XDesktop > xDesktop
+            (xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"), m_xContext), uno::UNO_QUERY_THROW );
+        uno::Reference< container::XEnumeration > mxComponents = xDesktop->getComponents()->createEnumeration();
+        while( mxComponents->hasMoreElements() )
+        {
+            uno::Reference< frame::XModel > xNext( mxComponents->nextElement(), uno::UNO_QUERY );
+            if ( xNext.is() )
+                m_documents.push_back( xNext );
+        }
+        m_it = m_documents.begin();
+    }
+    // XEnumeration
+    virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+    {
+        return m_it != m_documents.end();
+    }
+
+    virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( !hasMoreElements() )
+        {
+            throw container::NoSuchElementException();
+        }
+        return makeAny( *(m_it++) );
+    }
+};
+
+// #FIXME clearly this is also a candidate for some sort of helper base class as
+// a very similar one is used in vbawindow ( SelectedSheetsEnumAccess )
+// Maybe a template base class that does all of the operations on the hashmap
+// and vector only, and the sub-class does everything else
+// => ctor, createEnumeration & factory method need be defined ( to be called
+// by getByIndex, getByName )
+typedef ::cppu::WeakImplHelper3< container::XEnumerationAccess
+    , com::sun::star::container::XIndexAccess
+    , com::sun::star::container::XNameAccess
+    > DocumentsAccessImpl_BASE;
+
+class DocumentsAccessImpl : public DocumentsAccessImpl_BASE
+{
+    uno::Reference< uno::XComponentContext > m_xContext;
+    Documents m_documents;
+    NameIndexHash namesToIndices;
+    VbaDocumentsBase::DOCUMENT_TYPE meDocType;
+public:
+    DocumentsAccessImpl( const uno::Reference< uno::XComponentContext >& xContext, VbaDocumentsBase::DOCUMENT_TYPE eDocType ) throw (uno::RuntimeException) :m_xContext( xContext ), meDocType( eDocType )
+    {
+        uno::Reference< container::XEnumeration > xEnum = new DocumentsEnumImpl( m_xContext );
+        sal_Int32 nIndex=0;
+        while( xEnum->hasMoreElements() )
+        {
+            uno::Reference< lang::XServiceInfo > xServiceInfo( xEnum->nextElement(), uno::UNO_QUERY );
+            if ( xServiceInfo.is()
+                && (  ( xServiceInfo->supportsService( sSpreadsheetDocument ) && meDocType == VbaDocumentsBase::EXCEL_DOCUMENT )
+                || ( xServiceInfo->supportsService( sTextDocument ) && meDocType == VbaDocumentsBase::WORD_DOCUMENT ) ) )
+            {
+                uno::Reference< frame::XModel > xModel( xServiceInfo, uno::UNO_QUERY_THROW ); // that the spreadsheetdocument is a xmodel is a given
+                m_documents.push_back( xModel );
+                INetURLObject aURL( xModel->getURL() );
+                namesToIndices[ aURL.GetLastName() ] = nIndex++;
+            }
+        }
+
+    }
+
+    //XEnumerationAccess
+    virtual uno::Reference< container::XEnumeration > SAL_CALL createEnumeration(  ) throw (uno::RuntimeException)
+    {
+        return new DocumentsEnumImpl( m_xContext, m_documents );
+    }
+    // XIndexAccess
+    virtual ::sal_Int32 SAL_CALL getCount(  ) throw (uno::RuntimeException)
+    {
+        return m_documents.size();
+    }
+    virtual uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw ( lang::IndexOutOfBoundsException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        if ( Index < 0
+            || static_cast< Documents::size_type >(Index) >= m_documents.size() )
+            throw lang::IndexOutOfBoundsException();
+        return makeAny( m_documents[ Index ] ); // returns xspreadsheetdoc
+    }
+
+    //XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return frame::XModel::static_type(0);
+    }
+
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return (m_documents.size() > 0);
+    }
+
+    //XNameAccess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        NameIndexHash::const_iterator it = namesToIndices.find( aName );
+        if ( it == namesToIndices.end() )
+            throw container::NoSuchElementException();
+        return makeAny( m_documents[ it->second ] );
+
+    }
+
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< ::rtl::OUString > names( namesToIndices.size() );
+        ::rtl::OUString* pString = names.getArray();
+        NameIndexHash::const_iterator it = namesToIndices.begin();
+        NameIndexHash::const_iterator it_end = namesToIndices.end();
+        for ( ; it != it_end; ++it, ++pString )
+            *pString = it->first;
+        return names;
+    }
+
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        NameIndexHash::const_iterator it = namesToIndices.find( aName );
+        return (it != namesToIndices.end());
+    }
+
+};
+
+VbaDocumentsBase::VbaDocumentsBase( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< css::uno::XComponentContext >& xContext, DOCUMENT_TYPE eDocType ) throw (uno::RuntimeException) : VbaDocumentsBase_BASE( xParent, xContext, uno::Reference< container::XIndexAccess >( new DocumentsAccessImpl( xContext, eDocType ) ) ), meDocType( eDocType )
+{
+}
+
+uno::Any SAL_CALL
+VbaDocumentsBase::Add() throw (uno::RuntimeException)
+{
+    uno::Reference< lang::XMultiComponentFactory > xSMgr(
+        mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+     uno::Reference< frame::XComponentLoader > xLoader(
+        xSMgr->createInstanceWithContext(
+            ::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"),
+                mxContext), uno::UNO_QUERY_THROW );
+    rtl::OUString sURL;
+    if( meDocType == WORD_DOCUMENT )
+        sURL = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("private:factory/swriter") );
+    else if( meDocType == EXCEL_DOCUMENT )
+        sURL = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("private:factory/scalc") );
+    else
+        throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+    uno::Reference< lang::XComponent > xComponent = xLoader->loadComponentFromURL(
+                                       sURL ,
+                                       rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("_blank") ), 0,
+                                       uno::Sequence< beans::PropertyValue >(0) );
+    return uno::makeAny( xComponent );
+}
+
+void
+VbaDocumentsBase::Close() throw (uno::RuntimeException)
+{
+// #FIXME this *MUST* be wrong documents::close surely closes ALL documents
+// in the collection, use of getCurrentDocument here is totally wrong
+/*
+    uno::Reference< lang::XMultiComponentFactory > xSMgr(
+        mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XModel > xModel( getCurrentDocument(), uno::UNO_QUERY_THROW );
+    rtl::OUString url = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( ".uno:CloseDoc"));
+    dispatchRequests(xModel,url);
+*/
+}
+
+// #TODO# #FIXME# can any of the unused params below be used?
+uno::Any
+VbaDocumentsBase::Open( const rtl::OUString& rFileName, const uno::Any& ReadOnly, const uno::Sequence< beans::PropertyValue >& rProps ) throw (uno::RuntimeException)
+{
+    // we need to detect if this is a URL, if not then assume its a file path
+        rtl::OUString aURL;
+        INetURLObject aObj;
+    aObj.SetURL( rFileName );
+    bool bIsURL = aObj.GetProtocol() != INET_PROT_NOT_VALID;
+    if ( bIsURL )
+        aURL = rFileName;
+    else
+        osl::FileBase::getFileURLFromSystemPath( rFileName, aURL );
+    uno::Reference< lang::XMultiComponentFactory > xSMgr(
+        mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XDesktop > xDesktop
+        (xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop")                    , mxContext),
+        uno::UNO_QUERY_THROW );
+    uno::Reference< frame::XComponentLoader > xLoader(
+        xSMgr->createInstanceWithContext(
+        ::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"),
+        mxContext),
+        uno::UNO_QUERY_THROW );
+
+    uno::Sequence< beans::PropertyValue > sProps( rProps );
+    sProps.realloc( sProps.getLength() + 1 );
+    sProps[ sProps.getLength() - 1 ].Name = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("MacroExecutionMode") );
+    sProps[ sProps.getLength() - 1 ].Value <<= uno::makeAny( document::MacroExecMode::ALWAYS_EXECUTE_NO_WARN );
+
+    sal_Int32 nIndex = sProps.getLength() - 1;
+
+    if ( ReadOnly.hasValue()  )
+    {
+        sal_Bool bIsReadOnly = sal_False; ReadOnly >>= bIsReadOnly;
+        if ( bIsReadOnly )
+        {
+            static const rtl::OUString sReadOnly( RTL_CONSTASCII_USTRINGPARAM("ReadOnly") );
+            sProps.realloc( sProps.getLength() + 1 );
+            sProps[ nIndex ].Name = sReadOnly;
+            sProps[ nIndex++ ].Value = uno::makeAny( (sal_Bool)sal_True );
+        }
+    }
+
+    uno::Reference< lang::XComponent > xComponent = xLoader->loadComponentFromURL( aURL,
+        rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("_default") ),
+        frame::FrameSearchFlag::CREATE,
+        sProps);
+    return uno::makeAny( xComponent );
+}
diff --git a/vbahelper/source/vbahelper/vbafillformat.cxx b/vbahelper/source/vbahelper/vbafillformat.cxx
new file mode 100644
index 0000000..bb09a7c
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbafillformat.cxx
@@ -0,0 +1,201 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbafillformat.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/awt/Gradient.hpp>
+#include <com/sun/star/awt/GradientStyle.hpp>
+#include <ooo/vba/office/MsoGradientStyle.hpp>
+#include "vbafillformat.hxx"
+#include "vbacolorformat.hxx"
+
+using namespace ooo::vba;
+using namespace com::sun::star;
+
+ScVbaFillFormat::ScVbaFillFormat( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape > xShape ) : ScVbaFillFormat_BASE( xParent, xContext ), m_xShape( xShape )
+{
+    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
+    m_nFillStyle = drawing::FillStyle_SOLID;
+    m_nForeColor = 0;
+    m_nBackColor = 0;
+    m_nGradientAngle = 0;
+}
+
+void
+ScVbaFillFormat::setFillStyle( drawing::FillStyle nFillStyle ) throw (uno::RuntimeException)
+{
+    m_nFillStyle = nFillStyle;
+    if( m_nFillStyle == drawing::FillStyle_GRADIENT )
+    {
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillStyle"), uno::makeAny( drawing::FillStyle_GRADIENT ) );
+        awt::Gradient aGradient;
+        // AXIAL
+        // RADIAL
+        // ELLIPTICAL
+        // SQUARE
+        // RECT
+        aGradient.Style = awt::GradientStyle_LINEAR;
+        aGradient.StartColor = ForeColor()->getRGB();
+        aGradient.EndColor = BackColor()->getRGB();
+        aGradient.Angle = m_nGradientAngle;
+        aGradient.Border = 0;
+        aGradient.XOffset = 0;
+        aGradient.YOffset = 0;
+        aGradient.StartIntensity = 100;
+        aGradient.EndIntensity = 100;
+        aGradient.StepCount = 1;
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillGradient"), uno::makeAny( aGradient ) );
+    }
+    else if( m_nFillStyle == drawing::FillStyle_SOLID )
+    {
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillStyle"), uno::makeAny(drawing::FillStyle_SOLID) );
+    }
+}
+
+void
+ScVbaFillFormat::setForeColorAndInternalStyle( sal_Int32 nForeColor ) throw (css::uno::RuntimeException)
+{
+    m_nForeColor = nForeColor;
+    setFillStyle( m_nFillStyle );
+}
+
+// Attributes
+sal_Bool SAL_CALL
+ScVbaFillFormat::getVisible() throw (uno::RuntimeException)
+{
+    drawing::FillStyle nFillStyle;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("FillStyle") ) >>= nFillStyle;
+    if( nFillStyle == drawing::FillStyle_NONE )
+        return sal_False;
+    return sal_True;
+}
+
+void SAL_CALL
+ScVbaFillFormat::setVisible( sal_Bool _visible ) throw (uno::RuntimeException)
+{
+    drawing::FillStyle aFillStyle;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("FillStyle") ) >>= aFillStyle;
+    if( !_visible )
+    {
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("FillStyle"), uno::makeAny( drawing::FillStyle_NONE ) );
+    }
+    else
+    {
+        if( aFillStyle == drawing::FillStyle_NONE )
+        {
+            setFillStyle( m_nFillStyle );
+        }
+    }
+}
+
+double SAL_CALL
+ScVbaFillFormat::getTransparency() throw (uno::RuntimeException)
+{
+    sal_Int16 nTransparence = 0;
+    double dTransparence = 0;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "FillTransparence" ) ) >>= nTransparence;
+    dTransparence = static_cast<double>( nTransparence );
+    dTransparence /= 100;
+    return dTransparence;
+}
+
+void SAL_CALL
+ScVbaFillFormat::setTransparency( double _transparency ) throw (uno::RuntimeException)
+{
+    sal_Int16 nTransparence = static_cast< sal_Int16 >( _transparency * 100 );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillTransparence" ), uno::makeAny( nTransparence ) );
+}
+
+
+// Methods
+void SAL_CALL
+ScVbaFillFormat::Solid() throw (uno::RuntimeException)
+{
+    setFillStyle( drawing::FillStyle_SOLID );
+}
+
+void SAL_CALL
+ScVbaFillFormat::TwoColorGradient( sal_Int32 style, sal_Int32 /*variant*/ ) throw (uno::RuntimeException)
+{
+    if( style == office::MsoGradientStyle::msoGradientHorizontal )
+    {
+        m_nGradientAngle = 0;
+        setFillStyle( drawing::FillStyle_GRADIENT );
+    }
+    else if( style == office::MsoGradientStyle::msoGradientVertical )
+    {
+        m_nGradientAngle = 900;
+        setFillStyle( drawing::FillStyle_GRADIENT );
+    }
+    else if( style == office::MsoGradientStyle::msoGradientDiagonalDown )
+    {
+        m_nGradientAngle = 450;
+        setFillStyle( drawing::FillStyle_GRADIENT );
+    }
+    else if( style == office::MsoGradientStyle::msoGradientDiagonalUp )
+    {
+        m_nGradientAngle = 900 + 450;
+        setFillStyle( drawing::FillStyle_GRADIENT );
+    }
+}
+
+uno::Reference< msforms::XColorFormat > SAL_CALL
+ScVbaFillFormat::BackColor() throw (uno::RuntimeException)
+{
+    if( !m_xColorFormat.is() )
+        m_xColorFormat.set( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ColorFormatType::FILLFORMAT_BACKCOLOR ) );
+    return m_xColorFormat;
+}
+
+uno::Reference< msforms::XColorFormat > SAL_CALL
+ScVbaFillFormat::ForeColor() throw (uno::RuntimeException)
+{
+    if( !m_xColorFormat.is() )
+        m_xColorFormat.set( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ColorFormatType::FILLFORMAT_FORECOLOR ) );
+    return m_xColorFormat;
+}
+
+
+rtl::OUString&
+ScVbaFillFormat::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaFillFormat") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaFillFormat::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.FillFormat" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbafillformat.hxx b/vbahelper/source/vbahelper/vbafillformat.hxx
new file mode 100644
index 0000000..f03fcfb
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbafillformat.hxx
@@ -0,0 +1,74 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbafillformat.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_XFILLFORMAT_HXX
+#define SC_VBA_XFILLFORMAT_HXX
+
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/drawing/FillStyle.hpp>
+#include <ooo/vba/msforms/XFillFormat.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ov::msforms::XFillFormat > ScVbaFillFormat_BASE;
+
+class ScVbaFillFormat : public ScVbaFillFormat_BASE
+{
+private:
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+    css::uno::Reference< ov::msforms::XColorFormat > m_xColorFormat;
+    css::drawing::FillStyle m_nFillStyle;
+    sal_Int32 m_nForeColor;
+    sal_Int32 m_nBackColor;
+    sal_Int16 m_nGradientAngle;
+private:
+    void setFillStyle( css::drawing::FillStyle nFillStyle ) throw (css::uno::RuntimeException);
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+
+public:
+    ScVbaFillFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape > xShape );
+
+    void setForeColorAndInternalStyle( sal_Int32 nForeColor ) throw (css::uno::RuntimeException);
+    // Attributes
+    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getTransparency() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTransparency( double _transparency ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual void SAL_CALL Solid() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL TwoColorGradient( sal_Int32 style, sal_Int32 variant ) throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL BackColor() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL ForeColor() throw (css::uno::RuntimeException);
+
+};
+
+#endif//SC_VBA_XFILLFORMAT_HXX
diff --git a/vbahelper/source/vbahelper/vbafontbase.cxx b/vbahelper/source/vbahelper/vbafontbase.cxx
new file mode 100644
index 0000000..50099c5
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbafontbase.cxx
@@ -0,0 +1,307 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbafont.cxx,v $
+ * $Revision: 1.7 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/beans/XProperty.hpp>
+#include <com/sun/star/awt/FontWeight.hpp>
+#include <com/sun/star/awt/FontUnderline.hpp>
+#include <com/sun/star/awt/FontStrikeout.hpp>
+#include <com/sun/star/awt/FontSlant.hpp>
+#include <com/sun/star/text/XSimpleText.hpp>
+#include <vbahelper/vbafontbase.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+VbaFontBase::VbaFontBase( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< css::container::XIndexAccess >& xPalette, uno::Reference< beans::XPropertySet > xPropertySet  ) throw ( uno::RuntimeException ) : VbaFontBase_BASE( xParent, xContext ), mxFont( xPropertySet, css::uno::UNO_QUERY_THROW ), mxPalette( xPalette )
+{
+}
+
+VbaFontBase::~VbaFontBase()
+{
+}
+
+
+void SAL_CALL
+VbaFontBase::setSuperscript( const uno::Any& aValue ) throw ( uno::RuntimeException )
+{
+    sal_Bool bValue = sal_False;
+    aValue >>= bValue;
+    sal_Int16 nValue = NORMAL;
+    sal_Int8 nValue2 = NORMALHEIGHT;
+
+        if( bValue )
+    {
+        nValue = SUPERSCRIPT;
+            nValue2 = SUPERSCRIPTHEIGHT;
+    }
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharEscapement" ) ), ( uno::Any )nValue );
+	mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharEscapementHeight" ) ), ( uno::Any )nValue2 );
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getSuperscript() throw ( uno::RuntimeException )
+{
+    short nValue = 0;
+    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharEscapement" ) ) ) >>= nValue;
+    return uno::makeAny( ( nValue == SUPERSCRIPT ) );
+}
+
+void SAL_CALL
+VbaFontBase::setSubscript( const uno::Any& aValue ) throw ( uno::RuntimeException )
+{
+    sal_Bool bValue = sal_False;
+    aValue >>= bValue;
+    sal_Int16 nValue = NORMAL;
+    sal_Int8 nValue2 = NORMALHEIGHT;
+
+        if( bValue )
+    {
+        nValue= SUBSCRIPT;
+            nValue2 = SUBSCRIPTHEIGHT;
+    }
+
+	mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharEscapementHeight" ) ), ( uno::Any )nValue2 );
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharEscapement" ) ), ( uno::Any )nValue );
+
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getSubscript() throw ( uno::RuntimeException )
+{
+    short nValue = NORMAL;
+    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharEscapement" ) ) ) >>= nValue;
+    return uno::makeAny( ( nValue == SUBSCRIPT ) );
+}
+
+void SAL_CALL
+VbaFontBase::setSize( const uno::Any& aValue ) throw( uno::RuntimeException )
+{
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharHeight" ) ), aValue );
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getSize() throw ( uno::RuntimeException )
+{
+        return mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharHeight" ) ) );
+}
+
+void SAL_CALL
+VbaFontBase::setColorIndex( const uno::Any& _colorindex ) throw( uno::RuntimeException )
+{
+    sal_Int32 nIndex = 0;
+    _colorindex >>= nIndex;
+
+    --nIndex; // OOo indices are zero bases
+
+    // setColor expects colors in XL RGB values
+    // #FIXME this is daft we convert OO RGB val to XL RGB val and
+    // then back again to OO RGB value
+    setColor( OORGBToXLRGB(mxPalette->getByIndex( nIndex )) );
+}
+
+
+uno::Any SAL_CALL
+VbaFontBase::getColorIndex() throw ( uno::RuntimeException )
+{
+    sal_Int32 nColor = 0;
+
+    XLRGBToOORGB( getColor() ) >>= nColor;
+    sal_Int32 nElems = mxPalette->getCount();
+    sal_Int32 nIndex = -1;
+    for ( sal_Int32 count=0; count<nElems; ++count )
+	{
+        sal_Int32 nPaletteColor = 0;
+        mxPalette->getByIndex( count ) >>= nPaletteColor;
+        if ( nPaletteColor == nColor )
+        {
+            nIndex = count + 1; // 1 based
+            break;
+        }
+    }
+    return uno::makeAny( nIndex );
+}
+
+void SAL_CALL
+VbaFontBase::setBold( const uno::Any& aValue ) throw( uno::RuntimeException )
+{
+    sal_Bool bValue = sal_False;
+    aValue >>= bValue;
+    double fBoldValue = awt::FontWeight::NORMAL;
+    if( bValue )
+        fBoldValue = awt::FontWeight::BOLD;
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharWeight" ) ), ( uno::Any )fBoldValue );
+
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getBold() throw ( uno::RuntimeException )
+{
+    double fValue = 0.0;
+    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharWeight" ) ) ) >>= fValue;
+    return uno::makeAny( fValue == awt::FontWeight::BOLD );
+}
+
+void SAL_CALL
+VbaFontBase::setStrikethrough( const uno::Any& aValue ) throw ( uno::RuntimeException )
+{
+    sal_Bool bValue = sal_False;
+    aValue >>= bValue;
+    short nValue = awt::FontStrikeout::NONE;
+    if( bValue )
+        nValue = awt::FontStrikeout::SINGLE;
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharStrikeout" ) ), ( uno::Any )nValue );
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getStrikethrough() throw ( uno::RuntimeException )
+{
+    short nValue = 0;
+    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharStrikeout" ) ) ) >>= nValue;
+    return uno::Any( nValue == awt::FontStrikeout::SINGLE );
+}
+
+void  SAL_CALL
+VbaFontBase::setShadow( const uno::Any& aValue ) throw ( uno::RuntimeException )
+{
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharShadowed" ) ), aValue );
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getShadow() throw (uno::RuntimeException)
+{
+    return mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharShadowed" ) ) );
+}
+
+void  SAL_CALL
+VbaFontBase::setItalic( const uno::Any& aValue ) throw ( uno::RuntimeException )
+{
+    sal_Bool bValue = sal_False;
+    aValue >>= bValue;
+    short nValue = awt::FontSlant_NONE;
+    if( bValue )
+        nValue = awt::FontSlant_ITALIC;
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharPosture" ) ), ( uno::Any )nValue );
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getItalic() throw ( uno::RuntimeException )
+{
+
+    awt::FontSlant aFS;
+    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharPosture" ) ) ) >>= aFS;
+    return uno::makeAny( aFS == awt::FontSlant_ITALIC );
+}
+
+void  SAL_CALL
+VbaFontBase::setName( const uno::Any& aValue ) throw ( uno::RuntimeException )
+{
+    rtl::OUString sString;
+    aValue >>= sString;
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharFontName" ) ), aValue);
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getName() throw ( uno::RuntimeException )
+{
+    return mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharFontName" ) ) );
+}
+uno::Any
+VbaFontBase::getColor() throw (uno::RuntimeException)
+{
+    uno::Any aAny;
+    aAny = OORGBToXLRGB( mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharColor" ) ) ) );
+    return aAny;
+}
+
+void
+VbaFontBase::setColor( const uno::Any& _color  ) throw (uno::RuntimeException)
+{
+    mxFont->setPropertyValue(  rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharColor" ) ) , XLRGBToOORGB(_color));
+}
+
+void SAL_CALL
+VbaFontBase::setUnderline( const uno::Any& /*aValue*/ ) throw ( uno::RuntimeException )
+{
+/*
+    // default
+    sal_Int32 nValue = excel::XlUnderlineStyle::xlUnderlineStyleNone;
+    aValue >>= nValue;
+    switch ( nValue )
+    {
+// NOTE:: #TODO #FIMXE
+// xlUnderlineStyleDoubleAccounting & xlUnderlineStyleSingleAccounting
+// don't seem to be supported in Openoffice.
+// The import filter converts them to single or double underlines as appropriate
+// So, here at the moment we are similarly silently converting
+// xlUnderlineStyleSingleAccounting to xlUnderlineStyleSingle.
+
+        case excel::XlUnderlineStyle::xlUnderlineStyleNone:
+            nValue = awt::FontUnderline::NONE;
+            break;
+        case excel::XlUnderlineStyle::xlUnderlineStyleSingle:
+        case excel::XlUnderlineStyle::xlUnderlineStyleSingleAccounting:
+            nValue = awt::FontUnderline::SINGLE;
+            break;
+        case excel::XlUnderlineStyle::xlUnderlineStyleDouble:
+        case excel::XlUnderlineStyle::xlUnderlineStyleDoubleAccounting:
+            nValue = awt::FontUnderline::DOUBLE;
+            break;
+        default:
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Unknown value for Underline")), uno::Reference< uno::XInterface >() );
+    }
+
+    mxFont->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharUnderline" ) ), ( uno::Any )nValue );
+*/
+
+}
+
+uno::Any SAL_CALL
+VbaFontBase::getUnderline() throw ( uno::RuntimeException )
+{
+    sal_Int32 nValue = awt::FontUnderline::NONE;
+    mxFont->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "CharUnderline" ) ) ) >>= nValue;
+/*
+    switch ( nValue )
+    {
+        case  awt::FontUnderline::DOUBLE:
+            nValue = excel::XlUnderlineStyle::xlUnderlineStyleDouble;
+            break;
+        case  awt::FontUnderline::SINGLE:
+            nValue = excel::XlUnderlineStyle::xlUnderlineStyleSingle;
+            break;
+        case  awt::FontUnderline::NONE:
+            nValue = excel::XlUnderlineStyle::xlUnderlineStyleNone;
+            break;
+        default:
+            throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Unknown value retrieved for Underline") ), uno::Reference< uno::XInterface >() );
+
+    }
+*/
+    return uno::makeAny( nValue );
+}
diff --git a/vbahelper/source/vbahelper/vbaglobalbase.cxx b/vbahelper/source/vbahelper/vbaglobalbase.cxx
new file mode 100644
index 0000000..8f0d9d0
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbaglobalbase.cxx
@@ -0,0 +1,124 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile$
+ *
+ *  $Revision$
+ *
+ *  last change: $Author$ $Date$
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+#include "vbahelper/vbaglobalbase.hxx"
+
+#include <cppuhelper/component_context.hxx>
+#include <comphelper/processfactory.hxx>
+#include <com/sun/star/container/XNameContainer.hpp>
+
+using namespace com::sun::star;
+using namespace ooo::vba;
+
+rtl::OUString sApplication( RTL_CONSTASCII_USTRINGPARAM("Application") );
+
+VbaGlobalsBase::VbaGlobalsBase(
+const uno::Reference< ov::XHelperInterface >& xParent,
+const uno::Reference< uno::XComponentContext >& xContext, const rtl::OUString& sDocCtxName )
+:  Globals_BASE( xParent, xContext )
+{
+    // overwrite context with custom one ( that contains the application )
+    ::cppu::ContextEntry_Init aHandlerContextInfo[] =
+    {
+        ::cppu::ContextEntry_Init( sApplication, uno::Any() ),
+        ::cppu::ContextEntry_Init( sDocCtxName, uno::Any() ),
+    };
+
+    mxContext = ::cppu::createComponentContext( aHandlerContextInfo, sizeof( aHandlerContextInfo ) / sizeof( aHandlerContextInfo[0] ), xContext );
+
+}
+
+
+void
+VbaGlobalsBase::init(  const uno::Sequence< beans::PropertyValue >& aInitArgs )
+{
+    sal_Int32 nLen = aInitArgs.getLength();
+    for ( sal_Int32 nIndex = 0; nIndex < nLen; ++nIndex )
+    {
+        uno::Reference< container::XNameContainer > xNameContainer( mxContext, uno::UNO_QUERY_THROW );
+        if ( aInitArgs[ nIndex ].Name.equals( sApplication ) )
+        {
+            xNameContainer->replaceByName( sApplication, aInitArgs[ nIndex ].Value );
+            uno::Reference< XHelperInterface > xParent( aInitArgs[ nIndex ].Value, uno::UNO_QUERY );
+            mxParent = xParent;
+        }
+        else
+            xNameContainer->replaceByName( aInitArgs[ nIndex ].Name, aInitArgs[ nIndex ].Value );
+    }
+}
+
+uno::Reference< uno::XInterface > SAL_CALL
+VbaGlobalsBase::createInstance( const ::rtl::OUString& aServiceSpecifier ) throw (uno::Exception, uno::RuntimeException)
+{
+    uno::Reference< uno::XInterface > xReturn;
+
+    if ( hasServiceName( aServiceSpecifier ) )
+        xReturn = mxContext->getServiceManager()->createInstanceWithContext( aServiceSpecifier, mxContext );
+    return xReturn;
+}
+
+uno::Reference< uno::XInterface > SAL_CALL
+VbaGlobalsBase::createInstanceWithArguments( const ::rtl::OUString& ServiceSpecifier, const uno::Sequence< uno::Any >& Arguments ) throw (uno::Exception, uno::RuntimeException)
+{
+
+    uno::Reference< uno::XInterface > xReturn;
+
+    if ( hasServiceName( ServiceSpecifier ) )
+        xReturn = mxContext->getServiceManager()->createInstanceWithArgumentsAndContext( ServiceSpecifier, Arguments, mxContext );
+    return xReturn;
+}
+
+uno::Sequence< ::rtl::OUString > SAL_CALL
+VbaGlobalsBase::getAvailableServiceNames(  ) throw (uno::RuntimeException)
+{
+    static const rtl::OUString names[] = {
+    // common
+        ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM ( "ooo.vba.msforms.UserForm" ) ),
+      };
+    static uno::Sequence< rtl::OUString > serviceNames( names, sizeof( names )/ sizeof( names[0] ) );
+    return serviceNames;
+}
+
+bool
+VbaGlobalsBase::hasServiceName( const rtl::OUString& serviceName )
+{
+    uno::Sequence< rtl::OUString > sServiceNames( getAvailableServiceNames() );
+    sal_Int32 nLen = sServiceNames.getLength();
+    for ( sal_Int32 index = 0; index < nLen; ++index )
+    {
+        if ( sServiceNames[ index ].equals( serviceName ) )
+            return true;
+    }
+    return false;
+}
diff --git a/vbahelper/source/vbahelper/vbahelper.cxx b/vbahelper/source/vbahelper/vbahelper.cxx
new file mode 100644
index 0000000..4a0eb6d
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbahelper.cxx
@@ -0,0 +1,1199 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbahelper.cxx,v $
+ * $Revision: 1.5.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <cppuhelper/bootstrap.hxx>
+#include <com/sun/star/util/XURLTransformer.hpp>
+#include <com/sun/star/frame/XDispatchProvider.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/frame/XFrame.hpp>
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/frame/XController.hpp>
+#include <com/sun/star/script/XDefaultProperty.hpp>
+#include <com/sun/star/uno/XComponentContext.hpp>
+#include <com/sun/star/lang/XMultiComponentFactory.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/beans/XIntrospection.hpp>
+#include <ooo/vba/msforms/XShape.hpp>
+
+#include <comphelper/processfactory.hxx>
+
+#include <sfx2/objsh.hxx>
+#include <sfx2/viewfrm.hxx>
+#include <sfx2/dispatch.hxx>
+#include <sfx2/app.hxx>
+#include <svtools/stritem.hxx>
+#include <svtools/eitem.hxx>
+#include <svtools/intitem.hxx>
+#include <svtools/itemset.hxx>
+//#include <svtools/itempool.hxx>
+#include <sfx2/docfac.hxx>
+#include <sfx2/viewfac.hxx>
+
+#include <basic/sbx.hxx>
+#include <basic/sbstar.hxx>
+#include <basic/basmgr.hxx>
+#include <basic/sbmod.hxx>
+#include <basic/sbmeth.hxx>
+#include <rtl/math.hxx>
+#include <sfx2/viewsh.hxx>
+#include <math.h>
+#include <tools/urlobj.hxx>
+#include <osl/file.hxx>
+#include <toolkit/awt/vclxwindow.hxx>
+#include <toolkit/helper/vclunohelper.hxx>
+#include <com/sun/star/frame/XModel2.hpp>
+#include <com/sun/star/lang/XUnoTunnel.hpp>
+#include <vcl/window.hxx>
+#include <vcl/syswin.hxx>
+#include <tools/diagnose_ex.h>
+
+#ifndef OOVBA_DLLIMPLEMENTATION
+#define OOVBA_DLLIMPLEMENTATION
+#endif
+
+#include <vbahelper/vbahelper.hxx>
+#include <sfx2/app.hxx>
+// #FIXME needs service
+//#include "vbashape.hxx"
+//#include "unonames.hxx"
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+#define NAME_HEIGHT "Height"
+#define NAME_WIDTH "Width"
+
+#define POINTTO100THMILLIMETERFACTOR 35.27778
+
+
+void unoToSbxValue( SbxVariable* pVar, const uno::Any& aValue );
+
+uno::Any sbxToUnoValue( SbxVariable* pVar );
+
+
+namespace ooo
+{
+namespace vba
+{
+
+uno::Reference< lang::XMultiServiceFactory > getVBAServiceFactory( SfxObjectShell* pShell )
+{
+    uno::Any aUnoVar;
+    if ( !pShell || ! pShell->GetBasicManager()->GetGlobalUNOConstant( "VBAGlobals", aUnoVar ) )
+        throw lang::IllegalArgumentException();
+    uno::Reference< lang::XMultiServiceFactory > xVBAFactory( aUnoVar, uno::UNO_QUERY_THROW );
+    return xVBAFactory;
+}
+
+css::uno::Reference< css::uno::XInterface > createVBAUnoAPIService( SfxObjectShell* pShell, const sal_Char* _pAsciiName ) throw (css::uno::RuntimeException)
+{
+    OSL_PRECOND( pShell, "createVBAUnoAPIService: no shell!" );
+    ::rtl::OUString sVarName( ::rtl::OUString::createFromAscii( _pAsciiName ) );
+    return getVBAServiceFactory( pShell )->createInstance( sVarName );
+}
+
+css::uno::Reference< css::uno::XInterface > createVBAUnoAPIServiceWithArgs( SfxObjectShell* pShell, const sal_Char* _pAsciiName, const uno::Sequence< uno::Any >& aArgs ) throw ( css::uno::RuntimeException )
+{
+    OSL_PRECOND( pShell, "createVBAUnoAPIService: no shell!" );
+    ::rtl::OUString sVarName( ::rtl::OUString::createFromAscii( _pAsciiName ) );
+    uno::Reference< uno::XInterface > xIf = getVBAServiceFactory( pShell )->createInstanceWithArguments( sVarName, aArgs  );
+    return xIf;
+}
+// helper method to determine if the view ( calc ) is in print-preview mode
+bool isInPrintPreview( SfxViewFrame* pView )
+{
+    sal_uInt16 nViewNo = SID_VIEWSHELL1 - SID_VIEWSHELL0;
+    if ( pView->GetObjectShell()->GetFactory().GetViewFactoryCount() >
+nViewNo && !pView->GetObjectShell()->IsInPlaceActive() )
+    {
+        SfxViewFactory &rViewFactory =
+            pView->GetObjectShell()->GetFactory().GetViewFactory(nViewNo);
+        if (  pView->GetCurViewId() == rViewFactory.GetOrdinal() )
+            return true;
+    }
+    return false;
+}
+#if 0
+namespace excel // all in this namespace probably can be moved to sc
+{
+
+
+const ::rtl::OUString REPLACE_CELLS_WARNING(  RTL_CONSTASCII_USTRINGPARAM( "ReplaceCellsWarning"));
+class PasteCellsWarningReseter
+{
+private:
+    bool bInitialWarningState;
+    static uno::Reference< beans::XPropertySet > getGlobalSheetSettings() throw ( uno::RuntimeException )
+    {
+        static uno::Reference< beans::XPropertySet > xTmpProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+        static uno::Reference<uno::XComponentContext > xContext( xTmpProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY_THROW );
+        static uno::Reference<lang::XMultiComponentFactory > xServiceManager(
+                xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+        static uno::Reference< beans::XPropertySet > xProps( xServiceManager->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.sheet.GlobalSheetSettings" ) ) ,xContext ), uno::UNO_QUERY_THROW );
+        return xProps;
+    }
+
+    bool getReplaceCellsWarning() throw ( uno::RuntimeException )
+    {
+        sal_Bool res = sal_False;
+        getGlobalSheetSettings()->getPropertyValue( REPLACE_CELLS_WARNING ) >>= res;
+        return ( res == sal_True );
+    }
+
+    void setReplaceCellsWarning( bool bState ) throw ( uno::RuntimeException )
+    {
+        getGlobalSheetSettings()->setPropertyValue( REPLACE_CELLS_WARNING, uno::makeAny( bState ) );
+    }
+public:
+    PasteCellsWarningReseter() throw ( uno::RuntimeException )
+    {
+        bInitialWarningState = getReplaceCellsWarning();
+        if ( bInitialWarningState )
+            setReplaceCellsWarning( false );
+    }
+    ~PasteCellsWarningReseter()
+    {
+        if ( bInitialWarningState )
+        {
+            // don't allow dtor to throw
+            try
+            {
+                setReplaceCellsWarning( true );
+            }
+            catch ( uno::Exception& /*e*/ ){}
+        }
+    }
+};
+
+void
+implnPaste()
+{
+    PasteCellsWarningReseter resetWarningBox;
+    ScTabViewShell* pViewShell = getCurrentBestViewShell();
+    if ( pViewShell )
+    {
+        pViewShell->PasteFromSystem();
+        pViewShell->CellContentChanged();
+    }
+}
+
+
+void
+implnCopy()
+{
+    ScTabViewShell* pViewShell = getCurrentBestViewShell();
+    if ( pViewShell )
+        pViewShell->CopyToClip(NULL,false,false,true);
+}
+
+void
+implnCut()
+{
+    ScTabViewShell* pViewShell =  getCurrentBestViewShell();
+    if ( pViewShell )
+        pViewShell->CutToClip( NULL, TRUE );
+}
+void implnPasteSpecial(SfxViewShell* pViewShell, USHORT nFlags,USHORT nFunction,sal_Bool bSkipEmpty, sal_Bool bTranspose)
+{
+    PasteCellsWarningReseter resetWarningBox;
+    sal_Bool bAsLink(sal_False), bOtherDoc(sal_False);
+    InsCellCmd eMoveMode = INS_NONE;
+
+    if ( !pTabViewShell )
+        // none active, try next best
+        pTabViewShell = getCurrentBestViewShell();
+    if ( pTabViewShell )
+    {
+        ScViewData* pView = pTabViewShell->GetViewData();
+        Window* pWin = ( pView != NULL ) ? pView->GetActiveWin() : NULL;
+        if ( pView && pWin )
+        {
+            if ( bAsLink && bOtherDoc )
+                pTabViewShell->PasteFromSystem(0);//SOT_FORMATSTR_ID_LINK
+            else
+            {
+                ScTransferObj* pOwnClip = ScTransferObj::GetOwnClipboard( pWin );
+                ScDocument* pDoc = NULL;
+                if ( pOwnClip )
+                    pDoc = pOwnClip->GetDocument();
+                pTabViewShell->PasteFromClip( nFlags, pDoc,
+                    nFunction, bSkipEmpty, bTranspose, bAsLink,
+                    eMoveMode, IDF_NONE, TRUE );
+                pTabViewShell->CellContentChanged();
+            }
+        }
+    }
+
+}
+
+ScDocShell*
+getDocShell( css::uno::Reference< css::frame::XModel>& xModel )
+{
+    uno::Reference< uno::XInterface > xIf( xModel, uno::UNO_QUERY_THROW );
+    ScModelObj* pModel = dynamic_cast< ScModelObj* >( xIf.get() );
+    ScDocShell* pDocShell = NULL;
+    if ( pModel )
+        pDocShell = (ScDocShell*)pModel->GetEmbeddedObject();
+    return pDocShell;
+
+}
+
+ScTabViewShell*
+getBestViewShell(  css::uno::Reference< css::frame::XModel>& xModel )
+{
+    ScDocShell* pDocShell = getDocShell( xModel );
+    if ( pDocShell )
+        return pDocShell->GetBestViewShell();
+    return NULL;
+}
+
+ScTabViewShell*
+getCurrentBestViewShell()
+{
+    uno::Reference< frame::XModel > xModel = getCurrentDocument();
+    return getBestViewShell( xModel );
+}
+
+SfxViewFrame*
+getCurrentViewFrame()
+{
+    ScTabViewShell* pViewShell = getCurrentBestViewShell();
+    if ( pViewShell )
+        return pViewShell->GetViewFrame();
+    return NULL;
+}
+};
+
+#endif
+const double Millimeter::factor =  35.27778;
+
+uno::Reference< beans::XIntrospectionAccess >
+getIntrospectionAccess( const uno::Any& aObject ) throw (uno::RuntimeException)
+{
+    static uno::Reference< beans::XIntrospection > xIntrospection;
+    if( !xIntrospection.is() )
+    {
+        uno::Reference< lang::XMultiServiceFactory > xFactory( comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+        xIntrospection.set( xFactory->createInstance( rtl::OUString::createFromAscii("com.sun.star.beans.Introspection") ), uno::UNO_QUERY_THROW );
+    }
+    return xIntrospection->inspect( aObject );
+}
+
+uno::Reference< script::XTypeConverter >
+getTypeConverter( const uno::Reference< uno::XComponentContext >& xContext ) throw (uno::RuntimeException)
+{
+    static uno::Reference< script::XTypeConverter > xTypeConv( xContext->getServiceManager()->createInstanceWithContext( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.script.Converter") ), xContext ), uno::UNO_QUERY_THROW );
+    return xTypeConv;
+}
+const uno::Any&
+aNULL()
+{
+	static  uno::Any aNULLL = uno::makeAny( uno::Reference< uno::XInterface >() );
+    return aNULLL;
+}
+
+void dispatchExecute(SfxViewShell* pViewShell, USHORT nSlot, SfxCallMode nCall)
+{
+    SfxViewFrame* pViewFrame = NULL;
+    if ( pViewShell )
+        pViewFrame = pViewShell->GetViewFrame();
+    if ( pViewFrame )
+    {
+        SfxDispatcher* pDispatcher = pViewFrame->GetDispatcher();
+        if( pDispatcher )
+        {
+            pDispatcher->Execute( nSlot , nCall );
+        }
+    }
+}
+
+void
+dispatchRequests (uno::Reference< frame::XModel>& xModel,rtl::OUString & aUrl, uno::Sequence< beans::PropertyValue >& sProps )
+{
+
+    util::URL  url ;
+    url.Complete = aUrl;
+    rtl::OUString emptyString = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "" ));
+    uno::Reference<frame::XController> xController = xModel->getCurrentController();
+    uno::Reference<frame::XFrame> xFrame = xController->getFrame();
+    uno::Reference<frame::XDispatchProvider> xDispatchProvider (xFrame,uno::UNO_QUERY_THROW);
+    try
+    {
+        uno::Reference< beans::XPropertySet > xProps( ::comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+        uno::Reference<uno::XComponentContext > xContext( xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), uno::UNO_QUERY_THROW  );
+        if ( !xContext.is() )
+        {
+            return ;
+        }
+
+        uno::Reference<lang::XMultiComponentFactory > xServiceManager(
+                xContext->getServiceManager() );
+        if ( !xServiceManager.is() )
+        {
+            return ;
+        }
+        uno::Reference<util::XURLTransformer> xParser( xServiceManager->createInstanceWithContext(     rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.util.URLTransformer" ) )
+            ,xContext), uno::UNO_QUERY_THROW );
+        if (!xParser.is())
+            return;
+        xParser->parseStrict (url);
+    }
+    catch ( uno::Exception & /*e*/ )
+    {
+        return ;
+    }
+
+    uno::Reference<frame::XDispatch> xDispatcher = xDispatchProvider->queryDispatch(url,emptyString,0);
+
+    uno::Sequence<beans::PropertyValue> dispatchProps(1);
+
+    sal_Int32 nProps = sProps.getLength();
+    beans::PropertyValue* pDest = dispatchProps.getArray();
+    if ( nProps )
+    {
+        dispatchProps.realloc( nProps + 1 );
+        // need to reaccquire pDest after realloc
+        pDest = dispatchProps.getArray();
+        beans::PropertyValue* pSrc = sProps.getArray();
+        for ( sal_Int32 index=0; index<nProps; ++index, ++pSrc, ++pDest )
+            *pDest = *pSrc;
+    }
+
+    (*pDest).Name = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Silent" ));
+    (*pDest).Value <<= (sal_Bool)sal_True;
+
+    if (xDispatcher.is())
+        xDispatcher->dispatch( url, dispatchProps );
+}
+
+void
+dispatchRequests (uno::Reference< frame::XModel>& xModel,rtl::OUString & aUrl)
+{
+    uno::Sequence<beans::PropertyValue> dispatchProps;
+    dispatchRequests( xModel, aUrl, dispatchProps );
+}
+
+
+
+
+ uno::Reference< frame::XModel >
+getCurrentDoc( const rtl::OUString& sKey ) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel;
+    SbxObject* pBasic = dynamic_cast< SbxObject* > ( SFX_APP()->GetBasic() );
+    SbxObject* basicChosen =  pBasic ;
+    if ( basicChosen == NULL)
+    {
+        OSL_TRACE("getModelFromBasic() StarBASIC* is NULL" );
+        return xModel;
+    }
+    SbxObject* p = pBasic;
+    SbxObject* pParent = p->GetParent();
+    SbxObject* pParentParent = pParent ? pParent->GetParent() : NULL;
+
+    if( pParentParent )
+    {
+        basicChosen = pParentParent;
+    }
+    else if( pParent )
+    {
+        basicChosen = pParent;
+    }
+
+
+    uno::Any aModel;
+    SbxVariable *pCompVar = basicChosen->Find(  sKey, SbxCLASS_OBJECT );
+
+    if ( pCompVar )
+    {
+        aModel = sbxToUnoValue( pCompVar );
+        if ( sal_False == ( aModel >>= xModel ) ||
+            !xModel.is() )
+        {
+            throw uno::RuntimeException(
+                rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Can't extract model from basic ( its obviously not set yet ) therefore don't know the current documet context") ), uno::Reference< uno::XInterface >() );
+        }
+        else
+        {
+            OSL_TRACE("Have model points to url %s",
+            ::rtl::OUStringToOString( xModel->getURL(),
+                RTL_TEXTENCODING_ASCII_US ).pData->buffer );
+        }
+    }
+    else
+    {
+        OSL_TRACE("Failed to get %s", rtl::OUStringToOString( sKey, RTL_TEXTENCODING_UTF8 ).getStr() );
+        throw uno::RuntimeException(
+            rtl::OUString(
+                RTL_CONSTASCII_USTRINGPARAM(
+                    "Can't determine the currently selected document") ),
+            uno::Reference< uno::XInterface >() );
+    }
+    return xModel;
+}
+
+ uno::Reference< frame::XModel >
+getCurrentDocCtx( const rtl::OUString& ctxName, const uno::Reference< uno::XComponentContext >& xContext ) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XModel > xModel;
+     // try fallback to calling doc
+     css::uno::Reference< css::container::XNameAccess > xNameAccess( xContext, css::uno::UNO_QUERY_THROW );
+     xModel.set( xNameAccess->getByName( ctxName ), uno::UNO_QUERY_THROW );
+     return xModel;
+}
+
+ uno::Reference< frame::XModel >
+getCurrentExcelDoc( const uno::Reference< uno::XComponentContext >& xContext ) throw (uno::RuntimeException)
+{
+    static const rtl::OUString sThisExcelDoc( RTL_CONSTASCII_USTRINGPARAM("ThisExcelDoc" ) );
+    uno::Reference< frame::XModel > xModel;
+    try
+    {
+        xModel = getCurrentDoc( sThisExcelDoc );
+    }
+    catch( uno::Exception& e )
+    {
+        xModel = getCurrentDocCtx( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ExcelDocumentContext" ) ), xContext );
+    }
+    return xModel;
+}
+
+ uno::Reference< frame::XModel >
+getCurrentWordDoc( const uno::Reference< uno::XComponentContext >& xContext ) throw (uno::RuntimeException)
+{
+    static const rtl::OUString sThisWordDoc( RTL_CONSTASCII_USTRINGPARAM("ThisWordDoc" ) );
+    uno::Reference< frame::XModel > xModel;
+    try
+    {
+        xModel = getCurrentDoc( sThisWordDoc );
+    }
+    catch( uno::Exception& e )
+    {
+        xModel = getCurrentDocCtx( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("WordDocumentContext" ) ), xContext );
+    }
+    return xModel;
+}
+
+sal_Int32
+OORGBToXLRGB( sal_Int32 nCol )
+{
+        sal_Int32 nAutoBits = nCol;
+        nAutoBits &= 0xFF000000;
+    sal_Int32 nRed = nCol;
+    nRed &= 0x00FF0000;
+    nRed >>= 16;
+    sal_Int32 nGreen = nCol;
+    nGreen &= 0x0000FF00;
+    nGreen >>= 8;
+    sal_Int32 nBlue = nCol;
+    nBlue &= 0x000000FF;
+    sal_Int32 nRGB =  ( nAutoBits | (nBlue << 16) | (nGreen << 8) | nRed );
+    return nRGB;
+}
+sal_Int32
+XLRGBToOORGB( sal_Int32 nCol )
+{
+        sal_Int32 nAutoBits = nCol;
+        nAutoBits &= 0xFF000000;
+
+    sal_Int32 nBlue = nCol;
+    nBlue &= 0x00FF0000;
+    nBlue >>= 16;
+    sal_Int32 nGreen = nCol;
+    nGreen &= 0x0000FF00;
+    nGreen >>= 8;
+    sal_Int32 nRed = nCol;
+    nRed &= 0x000000FF;
+    sal_Int32 nRGB =  ( nAutoBits | (nRed << 16) | (nGreen << 8) | nBlue );
+    return nRGB;
+}
+uno::Any
+OORGBToXLRGB( const uno::Any& aCol )
+{
+    sal_Int32 nCol;
+    aCol >>= nCol;
+    nCol = OORGBToXLRGB( nCol );
+    return uno::makeAny( nCol );
+}
+uno::Any
+XLRGBToOORGB(  const uno::Any& aCol )
+{
+    sal_Int32 nCol;
+    aCol >>= nCol;
+    nCol = XLRGBToOORGB( nCol );
+    return uno::makeAny( nCol );
+}
+
+void PrintOutHelper( SfxViewShell* pViewShell, const uno::Any& From, const uno::Any& To, const uno::Any& Copies, const uno::Any& Preview, const uno::Any& /*ActivePrinter*/, const uno::Any& /*PrintToFile*/, const uno::Any& Collate, const uno::Any& PrToFileName, sal_Bool bUseSelection  )
+{
+    sal_Int32 nTo = 0;
+    sal_Int32 nFrom = 0;
+    sal_Int16 nCopies = 1;
+    sal_Bool bPreview = sal_False;
+    sal_Bool bCollate = sal_False;
+    sal_Bool bSelection = bUseSelection;
+    From >>= nFrom;
+    To >>= nTo;
+    Copies >>= nCopies;
+    Preview >>= bPreview;
+    if ( nCopies > 1 ) // Collate only useful when more that 1 copy
+        Collate >>= bCollate;
+
+    rtl::OUString sRange(  RTL_CONSTASCII_USTRINGPARAM( "-" ) );
+    rtl::OUString sFileName;
+
+    if (( nFrom || nTo ) )
+    {
+        if ( nFrom )
+            sRange = ( ::rtl::OUString::valueOf( nFrom ) + sRange );
+        if ( nTo )
+            sRange += ::rtl::OUString::valueOf( nTo );
+    }
+
+    if (  PrToFileName.getValue() )
+    {
+        PrToFileName >>= sFileName;
+    }
+    SfxViewFrame* pViewFrame = NULL;
+    if ( pViewShell )
+        pViewFrame = pViewShell->GetViewFrame();
+    if ( pViewFrame )
+    {
+        SfxAllItemSet aArgs( SFX_APP()->GetPool() );
+
+        SfxBoolItem sfxCollate( SID_PRINT_COLLATE, bCollate );
+        aArgs.Put( sfxCollate, sfxCollate.Which() );
+        SfxInt16Item sfxCopies( SID_PRINT_COPIES, nCopies );
+        aArgs.Put( sfxCopies, sfxCopies.Which() );
+        if ( sFileName.getLength() )
+        {
+            SfxStringItem sfxFileName( SID_FILE_NAME, sFileName);
+            aArgs.Put( sfxFileName, sfxFileName.Which() );
+
+        }
+        if (  sRange.getLength() )
+        {
+            SfxStringItem sfxRange( SID_PRINT_PAGES, sRange );
+            aArgs.Put( sfxRange, sfxRange.Which() );
+        }
+        SfxBoolItem sfxSelection( SID_SELECTION, bSelection );
+        aArgs.Put( sfxSelection, sfxSelection.Which() );
+        SfxBoolItem sfxAsync( SID_ASYNCHRON, sal_False );
+        aArgs.Put( sfxAsync, sfxAsync.Which() );
+        SfxDispatcher* pDispatcher = pViewFrame->GetDispatcher();
+
+        if ( pDispatcher )
+        {
+            if ( bPreview )
+            {
+                if ( !pViewFrame->GetFrame()->IsInPlace() )
+                {
+                    // #TODO is this necessary ( calc specific )
+//					SC_MOD()->InputEnterHandler();
+                    pViewFrame->GetDispatcher()->Execute( SID_VIEWSHELL1, SFX_CALLMODE_SYNCHRON );
+                    while ( isInPrintPreview( pViewFrame ) )
+                        Application::Yield();
+                }
+            }
+            else
+                pDispatcher->Execute( (USHORT)SID_PRINTDOC, (SfxCallMode)SFX_CALLMODE_SYNCHRON, aArgs );
+        }
+
+    }
+
+    // #FIXME #TODO
+    // 1 ActivePrinter ( how/can we switch a printer via API? )
+    // 2 PrintToFile ( ms behaviour if this option is specified but no
+    //   filename supplied 'PrToFileName' then the user will be prompted )
+    // 3 Need to check behaviour of Selected sheets with range ( e.g. From & To
+    //    values ) in oOO these options are mutually exclusive
+    // 4 There is a pop up to do with transparent objects in the print source
+    //   should be able to disable that via configuration for the duration
+    //   of this method
+}
+
+ void PrintPreviewHelper( const css::uno::Any& /*EnableChanges*/, SfxViewShell* pViewShell )
+{
+    dispatchExecute( pViewShell, SID_VIEWSHELL1 );
+}
+
+rtl::OUString getAnyAsString( const uno::Any& pvargItem ) throw ( uno::RuntimeException )
+{
+    uno::Type aType = pvargItem.getValueType();
+    uno::TypeClass eTypeClass = aType.getTypeClass();
+    rtl::OUString sString;
+    switch ( eTypeClass )
+    {
+        case uno::TypeClass_BOOLEAN:
+        {
+            sal_Bool bBool = sal_False;
+            pvargItem >>= bBool;
+            sString = rtl::OUString::valueOf( bBool );
+            break;
+        }
+        case uno::TypeClass_STRING:
+            pvargItem >>= sString;
+            break;
+        case uno::TypeClass_FLOAT:
+            {
+                float aFloat = 0;
+                pvargItem >>= aFloat;
+                sString = rtl::OUString::valueOf( aFloat );
+                break;
+            }
+        case uno::TypeClass_DOUBLE:
+            {
+                double aDouble = 0;
+                pvargItem >>= aDouble;
+                sString = rtl::OUString::valueOf( aDouble );
+                break;
+            }
+        case uno::TypeClass_SHORT:
+        case uno::TypeClass_LONG:
+        case uno::TypeClass_BYTE:
+            {
+                sal_Int32 aNum = 0;
+                pvargItem >>= aNum;
+                sString = rtl::OUString::valueOf( aNum );
+                break;
+            }
+
+        case uno::TypeClass_HYPER:
+            {
+                sal_Int64 aHyper = 0;
+                pvargItem >>= aHyper;
+                sString = rtl::OUString::valueOf( aHyper );
+                break;
+            }
+        default:
+			throw uno::RuntimeException( rtl::OUString::createFromAscii( "Invalid type, can't convert" ), uno::Reference< uno::XInterface >() );
+    }
+    return sString;
+}
+
+
+rtl::OUString
+ContainerUtilities::getUniqueName( const uno::Sequence< ::rtl::OUString >&  _slist, const rtl::OUString& _sElementName, const ::rtl::OUString& _sSuffixSeparator)
+{
+    return getUniqueName(_slist, _sElementName, _sSuffixSeparator, sal_Int32(2));
+}
+
+rtl::OUString
+ContainerUtilities::getUniqueName( const uno::Sequence< rtl::OUString >& _slist, const rtl::OUString _sElementName, const rtl::OUString& _sSuffixSeparator, sal_Int32 _nStartSuffix)
+{
+    sal_Int32 a = _nStartSuffix;
+    rtl::OUString scompname = _sElementName;
+    bool bElementexists = true;
+    sal_Int32 nLen = _slist.getLength();
+    if ( nLen == 0 )
+        return _sElementName;
+
+    while (bElementexists == true)
+    {
+        for (sal_Int32 i = 0; i < nLen; i++)
+        {
+            if (FieldInList(_slist, scompname) == -1)
+            {
+                return scompname;
+            }
+        }
+        scompname = _sElementName + _sSuffixSeparator + rtl::OUString::valueOf( a++ );
+    }
+    return rtl::OUString();
+}
+
+sal_Int32
+ContainerUtilities::FieldInList( const uno::Sequence< rtl::OUString >& SearchList, const rtl::OUString& SearchString )
+{
+    sal_Int32 FieldLen = SearchList.getLength();
+    sal_Int32 retvalue = -1;
+    for (sal_Int32 i = 0; i < FieldLen; i++)
+    {
+        // I wonder why comparing lexicographically is done
+        // when its a match is whats interesting?
+        //if (SearchList[i].compareTo(SearchString) == 0)
+        if ( SearchList[i].equals( SearchString ) )
+        {
+            retvalue = i;
+            break;
+        }
+    }
+    return retvalue;
+
+}
+bool NeedEsc(sal_Unicode cCode)
+{
+    String sEsc(RTL_CONSTASCII_USTRINGPARAM(".^$+\\|{}()"));
+    return (STRING_NOTFOUND != sEsc.Search(cCode));
+}
+
+rtl::OUString VBAToRegexp(const rtl::OUString &rIn, bool bForLike )
+{
+    rtl::OUStringBuffer sResult;
+    const sal_Unicode *start = rIn.getStr();
+    const sal_Unicode *end = start + rIn.getLength();
+
+    int seenright = 0;
+    if ( bForLike )
+        sResult.append(static_cast<sal_Unicode>('^'));
+
+    while (start < end)
+    {
+        switch (*start)
+        {
+            case '?':
+                sResult.append(static_cast<sal_Unicode>('.'));
+                start++;
+                break;
+            case '*':
+                sResult.append(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM(".*")));
+                start++;
+                break;
+            case '#':
+                sResult.append(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("[0-9]")));
+                start++;
+                break;
+            case '~':
+                sResult.append(static_cast<sal_Unicode>('\\'));
+                sResult.append(*(++start));
+                start++;
+                break;
+                // dump the ~ and escape the next characture
+            case ']':
+                sResult.append(static_cast<sal_Unicode>('\\'));
+                sResult.append(*start++);
+                break;
+            case '[':
+                sResult.append(*start++);
+                seenright = 0;
+                while (start < end && !seenright)
+                {
+                    switch (*start)
+                    {
+                        case '[':
+                        case '?':
+                        case '*':
+                        sResult.append(static_cast<sal_Unicode>('\\'));
+                        sResult.append(*start);
+                            break;
+                        case ']':
+                        sResult.append(*start);
+                            seenright = 1;
+                            break;
+                        case '!':
+                            sResult.append(static_cast<sal_Unicode>('^'));
+                            break;
+                        default:
+                        if (NeedEsc(*start))
+                            sResult.append(static_cast<sal_Unicode>('\\'));
+                        sResult.append(*start);
+                            break;
+                    }
+                    start++;
+                }
+                break;
+            default:
+                if (NeedEsc(*start))
+                    sResult.append(static_cast<sal_Unicode>('\\'));
+                sResult.append(*start++);
+        }
+    }
+
+    if ( bForLike )
+        sResult.append(static_cast<sal_Unicode>('$'));
+
+    return sResult.makeStringAndClear( );
+}
+
+double getPixelTo100thMillimeterConversionFactor( css::uno::Reference< css::awt::XDevice >& xDevice, sal_Bool bVertical)
+{
+    double fConvertFactor = 1.0;
+    if( bVertical )
+    {
+        fConvertFactor = xDevice->getInfo().PixelPerMeterY/100000;
+    }
+    else
+    {
+        fConvertFactor = xDevice->getInfo().PixelPerMeterX/100000;
+    }
+    return fConvertFactor;
+}
+
+double PointsToPixels( css::uno::Reference< css::awt::XDevice >& xDevice, double fPoints, sal_Bool bVertical)
+{
+    double fConvertFactor = getPixelTo100thMillimeterConversionFactor( xDevice, bVertical );
+    return fPoints * POINTTO100THMILLIMETERFACTOR * fConvertFactor;
+}
+double PixelsToPoints( css::uno::Reference< css::awt::XDevice >& xDevice, double fPixels, sal_Bool bVertical)
+{
+    double fConvertFactor = getPixelTo100thMillimeterConversionFactor( xDevice, bVertical );
+    return (fPixels/fConvertFactor)/POINTTO100THMILLIMETERFACTOR;
+}
+
+ConcreteXShapeGeometryAttributes::ConcreteXShapeGeometryAttributes( const css::uno::Reference< css::uno::XComponentContext >& /*xContext*/, const css::uno::Reference< css::drawing::XShape >& xShape )
+{
+    m_pShapeHelper.reset( new ShapeHelper( xShape ) );
+}
+
+sal_Int32 getPointerStyle( const uno::Reference< frame::XModel >& xModel )
+{
+
+    sal_Int32 nPointerStyle( POINTER_ARROW );
+    try
+    {
+        const uno::Reference< frame::XController > xController( xModel->getCurrentController(),     uno::UNO_SET_THROW );
+        const uno::Reference< frame::XFrame >      xFrame     ( xController->getFrame(),        uno::UNO_SET_THROW );
+        const uno::Reference< awt::XWindow >       xWindow    ( xFrame->getContainerWindow(),   uno::UNO_SET_THROW );
+        // why the heck isn't there an XWindowPeer::getPointer, but a setPointer only?
+        const Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
+        if ( pWindow )
+            nPointerStyle = pWindow->GetSystemWindow()->GetPointer().GetStyle();
+    }
+    catch( const uno::Exception& )
+    {
+        DBG_UNHANDLED_EXCEPTION();
+    }
+    return nPointerStyle;
+}
+
+// #FIXME this method looks wrong, shouldn't it just affect calc *or* writer
+// document/frame/window(s) but not both ( and depending on what api called
+// this )
+void setCursorHelper( const uno::Reference< frame::XModel >& xModel, const Pointer& rPointer, sal_Bool bOverWrite )
+{
+    ::std::vector< uno::Reference< frame::XController > > aControllers;
+
+    uno::Reference< frame::XModel2 > xModel2( xModel, uno::UNO_QUERY );
+    if ( xModel2.is() )
+    {
+        const uno::Reference< container::XEnumeration > xEnumControllers( xModel2->getControllers(), uno::UNO_SET_THROW );
+        while ( xEnumControllers->hasMoreElements() )
+        {
+            const uno::Reference< frame::XController > xController( xEnumControllers->nextElement(), uno::UNO_QUERY_THROW );
+            aControllers.push_back( xController );
+        }
+    }
+    else
+    {
+        if ( xModel.is() )
+        {
+            const uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_SET_THROW );
+            aControllers.push_back( xController );
+        }
+    }
+
+    for (   ::std::vector< uno::Reference< frame::XController > >::const_iterator controller = aControllers.begin();
+            controller != aControllers.end();
+            ++controller
+        )
+    {
+        const uno::Reference< frame::XFrame >      xFrame     ( (*controller)->getFrame(),       uno::UNO_SET_THROW   );
+        const uno::Reference< awt::XWindow >       xWindow    ( xFrame->getContainerWindow(),    uno::UNO_SET_THROW   );
+
+        Window* pWindow = VCLUnoHelper::GetWindow( xWindow );
+        OSL_ENSURE( pWindow, "ScVbaApplication::setCursor: no window!" );
+        if ( !pWindow )
+            continue;
+
+        pWindow->GetSystemWindow()->SetPointer( rPointer );
+        pWindow->GetSystemWindow()->EnableChildPointerOverwrite( bOverWrite );
+    }
+}
+
+void setDefaultPropByIntrospection( const uno::Any& aObj, const uno::Any& aValue  ) throw ( uno::RuntimeException )
+{
+    uno::Reference< beans::XIntrospectionAccess > xUnoAccess( getIntrospectionAccess( aObj ) );
+
+    // #MAYBE #FIXME sort of a bit of a hack,
+    uno::Reference<  script::XDefaultProperty > xDflt( aObj, uno::UNO_QUERY_THROW );
+    uno::Reference< beans::XPropertySet > xPropSet;
+
+    if ( xUnoAccess.is() )
+        xPropSet.set( xUnoAccess->queryAdapter( ::getCppuType( (const uno::Reference< beans::XPropertySet > *)0 ) ), uno::UNO_QUERY);
+
+    if ( xPropSet.is() )
+        xPropSet->setPropertyValue( xDflt->getDefaultPropertyName(), aValue );
+    else
+        throw uno::RuntimeException();
+}
+
+uno::Any getPropertyValue( const uno::Sequence< beans::PropertyValue >& aProp, const rtl::OUString& aName )
+{
+    uno::Any result;
+    for ( sal_Int32 i = 0; i < aProp.getLength(); i++ )
+    {
+        if ( aProp[i].Name.equals(aName) )
+        {
+            aProp[i].Value >>= result;
+            return result;
+        }
+    }
+    return result;
+}
+
+sal_Bool setPropertyValue( uno::Sequence< beans::PropertyValue >& aProp, const rtl::OUString& aName, const uno::Any& aValue )
+{
+    for ( sal_Int32 i = 0; i < aProp.getLength(); i++ )
+    {
+        if ( aProp[i].Name.equals(aName) )
+        {
+            aProp[i].Value = aValue;
+            return sal_True;
+        }
+    }
+    return sal_False;
+}
+
+#define VBA_LEFT "PositionX"
+#define VBA_TOP "PositionY"
+UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComponentContext >& /*xContext*/, const uno::Reference< awt::XControl >& xControl )
+{
+    mxModel.set( xControl->getModel(), uno::UNO_QUERY_THROW );
+}
+    double UserFormGeometryHelper::getLeft()
+    {
+    sal_Int32 nLeft = 0;
+    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ) ) >>= nLeft;
+    return Millimeter::getInPoints( nLeft );
+    }
+    void UserFormGeometryHelper::setLeft( double nLeft )
+    {
+        mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_LEFT ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nLeft ) ) );
+    }
+    double UserFormGeometryHelper::getTop()
+    {
+    sal_Int32 nTop = 0;
+    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( VBA_TOP ) ) ) >>= nTop;
+    return Millimeter::getInPoints( nTop );
+    }
+    void UserFormGeometryHelper::setTop( double nTop )
+    {
+    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	VBA_TOP ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nTop ) ) );
+    }
+    double UserFormGeometryHelper::getHeight()
+    {
+    sal_Int32 nHeight = 0;
+    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( NAME_HEIGHT ) ) ) >>= nHeight;
+    return Millimeter::getInPoints( nHeight );
+    }
+    void UserFormGeometryHelper::setHeight( double nHeight )
+    {
+    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_HEIGHT ) ), uno::makeAny( Millimeter::getInHundredthsOfOneMillimeter( nHeight ) ) );
+    }
+    double UserFormGeometryHelper::getWidth()
+    {
+    sal_Int32 nWidth = 0;
+    mxModel->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_WIDTH ) ) ) >>= nWidth;
+    return Millimeter::getInPoints( nWidth );
+    }
+    void UserFormGeometryHelper::setWidth( double nWidth)
+    {
+    mxModel->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 	NAME_WIDTH ) ), uno::makeAny(  Millimeter::getInHundredthsOfOneMillimeter( nWidth ) ) );
+    }
+
+    double ConcreteXShapeGeometryAttributes::getLeft()
+    {
+        return m_pShapeHelper->getLeft();
+    }
+    void ConcreteXShapeGeometryAttributes::setLeft( double nLeft )
+    {
+        m_pShapeHelper->setLeft( nLeft );
+    }
+    double ConcreteXShapeGeometryAttributes::getTop()
+    {
+        return m_pShapeHelper->getTop();
+    }
+    void ConcreteXShapeGeometryAttributes::setTop( double nTop )
+    {
+        m_pShapeHelper->setTop( nTop );
+    }
+
+    double ConcreteXShapeGeometryAttributes::getHeight()
+    {
+        return m_pShapeHelper->getHeight();
+    }
+    void ConcreteXShapeGeometryAttributes::setHeight( double nHeight )
+    {
+        m_pShapeHelper->setHeight( nHeight );
+    }
+    double ConcreteXShapeGeometryAttributes::getWidth()
+    {
+        return m_pShapeHelper->getWidth();
+    }
+    void ConcreteXShapeGeometryAttributes::setWidth( double nWidth)
+    {
+        m_pShapeHelper->setWidth( nWidth );
+    }
+
+
+    ShapeHelper::ShapeHelper( const css::uno::Reference< css::drawing::XShape >& _xShape) throw (css::script::BasicErrorException ) : xShape( _xShape )
+    {
+        if( !xShape.is() )
+            throw css::uno::RuntimeException( rtl::OUString::createFromAscii("No valid shape for helper"), css::uno::Reference< css::uno::XInterface >() );
+    }
+
+    double ShapeHelper::getHeight()
+    {
+            return  Millimeter::getInPoints(xShape->getSize().Height);
+        }
+
+
+        void ShapeHelper::setHeight(double _fheight) throw ( css::script::BasicErrorException )
+    {
+        try
+        {
+            css::awt::Size aSize = xShape->getSize();
+            aSize.Height = Millimeter::getInHundredthsOfOneMillimeter(_fheight);
+            xShape->setSize(aSize);
+        }
+        catch ( css::uno::Exception& /*e*/)
+        {
+            throw css::script::BasicErrorException( rtl::OUString(), css::uno::Reference< css::uno::XInterface >(), SbERR_METHOD_FAILED, rtl::OUString() );
+            }
+    }
+
+
+    double ShapeHelper::getWidth()
+    {
+        return Millimeter::getInPoints(xShape->getSize().Width);
+        }
+
+    void ShapeHelper::setWidth(double _fWidth) throw ( css::script::BasicErrorException )
+    {
+        try
+        {
+            css::awt::Size aSize = xShape->getSize();
+            aSize.Width = Millimeter::getInHundredthsOfOneMillimeter(_fWidth);
+            xShape->setSize(aSize);
+        }
+        catch (css::uno::Exception& /*e*/)
+        {
+            throw css::script::BasicErrorException( rtl::OUString(), css::uno::Reference< css::uno::XInterface >(), SbERR_METHOD_FAILED, rtl::OUString() );
+        }
+    }
+
+
+    double ShapeHelper::getLeft()
+    {
+        return Millimeter::getInPoints(xShape->getPosition().X);
+    }
+
+
+    void ShapeHelper::setLeft(double _fLeft)
+    {
+        css::awt::Point aPoint = xShape->getPosition();
+        aPoint.X = Millimeter::getInHundredthsOfOneMillimeter(_fLeft);
+        xShape->setPosition(aPoint);
+    }
+
+
+    double ShapeHelper::getTop()
+    {
+            return Millimeter::getInPoints(xShape->getPosition().Y);
+    }
+
+
+    void ShapeHelper::setTop(double _fTop)
+    {
+        css::awt::Point aPoint = xShape->getPosition();
+        aPoint.Y = Millimeter::getInHundredthsOfOneMillimeter(_fTop);
+        xShape->setPosition(aPoint);
+    }
+
+    void DebugHelper::exception( const rtl::OUString&  DetailedMessage, const css::uno::Exception& ex,  int err, const rtl::OUString& /*additionalArgument*/ ) throw( css::script::BasicErrorException )
+    {
+        // #TODO #FIXME ( do we want to support additionalArg here )
+        throw css::script::BasicErrorException( DetailedMessage.concat( rtl::OUString::createFromAscii(" ") ).concat( ex.Message ), css::uno::Reference< css::uno::XInterface >(), err, rtl::OUString() );
+    }
+
+    void DebugHelper::exception( int err,  const rtl::OUString& additionalArgument ) throw( css::script::BasicErrorException )
+    {
+        exception( rtl::OUString(), css::uno::Exception(), err, additionalArgument );
+    }
+    void DebugHelper::exception( css::uno::Exception& ex ) throw( css::script::BasicErrorException )
+    {
+        exception( rtl::OUString(), ex, SbERR_INTERNAL_ERROR, rtl::OUString() );
+    }
+
+    Millimeter::Millimeter():m_nMillimeter(0) {}
+
+    Millimeter::Millimeter(double mm):m_nMillimeter(mm) {}
+
+    void Millimeter::set(double mm) { m_nMillimeter = mm; }
+    void Millimeter::setInPoints(double points)
+    {
+        m_nMillimeter = points * 0.352777778;
+        // 25.4mm / 72
+    }
+
+    void Millimeter::setInHundredthsOfOneMillimeter(double hmm)
+    {
+        m_nMillimeter = hmm / 100;
+    }
+
+    double Millimeter::get()
+    {
+        return m_nMillimeter;
+    }
+    double Millimeter::getInHundredthsOfOneMillimeter()
+    {
+        return m_nMillimeter * 100;
+    }
+    double Millimeter::getInPoints()
+    {
+        return m_nMillimeter * 2.834645669; // 72 / 25.4mm
+    }
+
+    sal_Int32 Millimeter::getInHundredthsOfOneMillimeter(double points)
+    {
+        sal_Int32 mm = static_cast<sal_Int32>(points * factor);
+        return mm;
+    }
+
+    double Millimeter::getInPoints(int _hmm)
+    {
+        double points = double( static_cast<double>(_hmm) / factor);
+        return points;
+    }
+
+        SfxObjectShell* getSfxObjShell( const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException)
+        {
+            SfxObjectShell* pFoundShell = NULL;
+            if ( xModel.is() )
+            {
+                uno::Reference< lang::XUnoTunnel >  xObjShellTunnel( xModel, uno::UNO_QUERY_THROW );
+                pFoundShell = reinterpret_cast<SfxObjectShell*>( xObjShellTunnel->getSomething(SfxObjectShell::getUnoTunnelId()));
+            }
+            if ( !pFoundShell )
+                throw uno::RuntimeException();
+            return pFoundShell;
+        }
+
+} // openoffice
+} //org
diff --git a/vbahelper/source/vbahelper/vbahelper.cxx.rej b/vbahelper/source/vbahelper/vbahelper.cxx.rej
new file mode 100644
index 0000000..8c0391e
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbahelper.cxx.rej
@@ -0,0 +1,45 @@
+***************
+*** 67,73 ****
+  #include <toolkit/awt/vclxwindow.hxx>
+  #include <toolkit/helper/vclunohelper.hxx>
+  #include <com/sun/star/frame/XModel2.hpp>
+- #include <com/sun/star/lang/XUnoTunnel.hpp>
+  #include <vcl/window.hxx>
+  #include <vcl/syswin.hxx>
+  #include <tools/diagnose_ex.h>
+--- 67,72 ----
+  #include <toolkit/awt/vclxwindow.hxx>
+  #include <toolkit/helper/vclunohelper.hxx>
+  #include <com/sun/star/frame/XModel2.hpp>
+  #include <vcl/window.hxx>
+  #include <vcl/syswin.hxx>
+  #include <tools/diagnose_ex.h>
+*************** UserFormGeometryHelper::UserFormGeometryHelper( const uno::Reference< uno::XComp
+*** 1117,1135 ****
+		double points = double( static_cast<double>(_hmm) / factor);
+		return points;
+	}
+-
+-         SfxObjectShell* getSfxObjShell( const uno::Reference< frame::XModel >& xModel ) throw (uno::RuntimeException)
+-         {
+-             SfxObjectShell* pFoundShell = NULL;
+-             if ( xModel.is() )
+-             {
+-                 uno::Reference< lang::XUnoTunnel >  xObjShellTunnel( xModel, uno::UNO_QUERY_THROW );
+-                 pFoundShell = reinterpret_cast<SfxObjectShell*>( xObjShellTunnel->getSomething(SfxObjectShell::getUnoTunnelId()));
+-             }
+-             if ( !pFoundShell )
+-                 throw uno::RuntimeException();
+-             return pFoundShell;
+-         }
+
+  } // openoffice
+  } //org
+--- 1116,1122 ----
+		double points = double( static_cast<double>(_hmm) / factor);
+		return points;
+	}
++
+
+  } // openoffice
+  } //org
diff --git a/vbahelper/source/vbahelper/vbalineformat.cxx b/vbahelper/source/vbahelper/vbalineformat.cxx
new file mode 100644
index 0000000..c4515c5
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbalineformat.cxx
@@ -0,0 +1,456 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbalineformat.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <ooo/vba/office/MsoArrowheadStyle.hpp>
+#include <ooo/vba/office/MsoArrowheadLength.hpp>
+#include <ooo/vba/office/MsoArrowheadWidth.hpp>
+#include <ooo/vba/office/MsoLineDashStyle.hpp>
+#include <com/sun/star/drawing/LineStyle.hpp>
+#include <com/sun/star/drawing/LineDash.hpp>
+#include "vbalineformat.hxx"
+#include "vbacolorformat.hxx"
+
+using namespace ooo::vba;
+using namespace com::sun::star;
+
+ScVbaLineFormat::ScVbaLineFormat( const uno::Reference< ov::XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape > xShape ) : ScVbaLineFormat_BASE( xParent, xContext ), m_xShape( xShape )
+{
+    m_xPropertySet.set( xShape, uno::UNO_QUERY_THROW );
+    m_nLineDashStyle = office::MsoLineDashStyle::msoLineSolid;
+    m_nLineWeight = 1;
+}
+
+sal_Int32
+ScVbaLineFormat::calculateArrowheadSize()
+{
+    return 0;
+}
+
+sal_Int32
+ScVbaLineFormat::convertLineStartEndNameToArrowheadStyle( rtl::OUString sLineName )
+{
+    sal_Int32 nLineType = office::MsoArrowheadStyle::msoArrowheadNone;
+    if (sLineName.equals(rtl::OUString::createFromAscii("Small Arrow")) ||
+        sLineName.equals(rtl::OUString::createFromAscii("Arrow")) ||
+        sLineName.equals(rtl::OUString::createFromAscii("msArrowEnd")) ||
+        sLineName.equals(rtl::OUString::createFromAscii("Double Arrow")))
+    {
+        // msoArrowheadTriangle
+        nLineType = office::MsoArrowheadStyle::msoArrowheadTriangle;
+    }
+    else if (sLineName.equals(rtl::OUString::createFromAscii("Square 45")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("Square")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("msArrowDiamondEnd")))
+    {
+        // msoArrowheadDiamond
+        nLineType = office::MsoArrowheadStyle::msoArrowheadDiamond;
+    }
+    else if (sLineName.equals(rtl::OUString::createFromAscii("Circle")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("msArrowOvalEnd")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("Dimension Lines")) )
+    {
+        // msoArrowheadOval
+        nLineType = office::MsoArrowheadStyle::msoArrowheadOval;
+    }
+    else if (sLineName.equals(rtl::OUString::createFromAscii("Arrow concave")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("msArrowStealthEnd")))
+    {
+        // msoArrowheadStealth
+        nLineType = office::MsoArrowheadStyle::msoArrowheadStealth;
+    }
+    else if (sLineName.equals(rtl::OUString::createFromAscii("Rounded short Arrow")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("Rounded large Arrow")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("Symmetric Arrow")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("msArrowOpenEnd")) ||
+             sLineName.equals(rtl::OUString::createFromAscii("Line Arrow")))
+    {
+        // msoArrowheadOpen
+        nLineType = office::MsoArrowheadStyle::msoArrowheadOpen;
+    }
+    else
+    {
+        // msoArrowheadNone
+        nLineType = office::MsoArrowheadStyle::msoArrowheadNone;
+    }
+    return nLineType;
+}
+
+rtl::OUString
+ScVbaLineFormat::convertArrowheadStyleToLineStartEndName( sal_Int32 nArrowheadStyle ) throw (uno::RuntimeException)
+{
+    switch( nArrowheadStyle )
+    {
+        case office::MsoArrowheadStyle::msoArrowheadNone:
+            return rtl::OUString(rtl::OUString::createFromAscii( "" ) );
+        case office::MsoArrowheadStyle::msoArrowheadStealth:
+            return rtl::OUString::createFromAscii( "Arrow concave" );
+        case office::MsoArrowheadStyle::msoArrowheadOpen:
+            return rtl::OUString::createFromAscii("Line Arrow" );
+        case office::MsoArrowheadStyle::msoArrowheadOval:
+            return  rtl::OUString::createFromAscii("Circle" );
+        case office::MsoArrowheadStyle::msoArrowheadDiamond:
+            return rtl::OUString::createFromAscii( "Square 45" );
+        case office::MsoArrowheadStyle::msoArrowheadTriangle:
+            return rtl::OUString::createFromAscii( "Arrow" );
+        default:
+            throw uno::RuntimeException( rtl::OUString::createFromAscii("Invalid Arrow Style!"), uno::Reference< uno::XInterface >() );
+    }
+}
+
+// Attributes
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getBeginArrowheadStyle() throw (uno::RuntimeException)
+{
+    sal_Int32 nLineType = office::MsoArrowheadStyle::msoArrowheadNone;
+    rtl::OUString sLineName;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStartName" ) ) >>= sLineName;
+    if( ( sLineName.getLength() > 7 ) && ( sLineName.indexOf( rtl::OUString::createFromAscii( "msArray" ) ) ) != -1 )
+    {
+        sal_Int32 nIndex = sLineName.indexOf( rtl::OUString::createFromAscii(" ") );
+        rtl::OUString sName = sLineName.copy( 0, nIndex );
+        //sal_Int32 nSize = sLineName.copy( nIndex + 1 ).toInt32();
+        nLineType = convertLineStartEndNameToArrowheadStyle( sName );
+    }
+    else
+    {
+        nLineType = convertLineStartEndNameToArrowheadStyle( sLineName );
+    }
+    return nLineType;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setBeginArrowheadStyle( sal_Int32 _beginarrowheadstyle ) throw (uno::RuntimeException)
+{
+    rtl::OUString sArrayName = convertArrowheadStyleToLineStartEndName( _beginarrowheadstyle );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStartName" ), uno::makeAny( sArrayName ) );
+}
+
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getBeginArrowheadLength() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL
+ScVbaLineFormat::setBeginArrowheadLength( sal_Int32 /*_beginarrowheadlength*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getBeginArrowheadWidth() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL
+ScVbaLineFormat::setBeginArrowheadWidth( sal_Int32 /*_beginarrowheadwidth*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getEndArrowheadStylel() throw (uno::RuntimeException)
+{
+    return 0;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setEndArrowheadStylel( sal_Int32 /*_endarrowheadstylel*/ ) throw (uno::RuntimeException)
+{
+}
+
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getEndArrowheadLength() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL
+ScVbaLineFormat::setEndArrowheadLength( sal_Int32 /*_endarrowheadlength*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getEndArrowheadWidth() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+void SAL_CALL
+ScVbaLineFormat::setEndArrowheadWidth( sal_Int32 /*_endarrowheadwidth*/ ) throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString::createFromAscii("Property 'EndArrowheadWidth' is not supported."), uno::Reference< uno::XInterface >() );
+}
+
+double SAL_CALL
+ScVbaLineFormat::getWeight() throw (uno::RuntimeException)
+{
+    sal_Int32 nLineWidth=0;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineWidth") ) >>= nLineWidth;
+    double dLineWidth = Millimeter::getInPoints( nLineWidth );
+    return dLineWidth;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setWeight( double _weight ) throw (uno::RuntimeException)
+{
+    if( _weight < 0 )
+        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parameter: Must be positv."), uno::Reference< uno::XInterface >() );
+    if( _weight == 0 )
+        _weight = 0.5;
+    m_nLineWeight = _weight;
+    Millimeter aMillimeter;
+    aMillimeter.setInPoints( _weight );
+
+    sal_Int32 nLineWidth = static_cast<sal_Int32>( aMillimeter.getInHundredthsOfOneMillimeter() );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineWidth" ), uno::makeAny( nLineWidth ) );
+    setDashStyle( m_nLineDashStyle );
+}
+
+sal_Bool SAL_CALL
+ScVbaLineFormat::getVisible() throw (uno::RuntimeException)
+{
+    drawing::LineStyle aLineStyle;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ) ) >>= aLineStyle;
+    if( aLineStyle == drawing::LineStyle_NONE )
+    {
+        return sal_False;
+    }
+    return sal_True;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setVisible( sal_Bool _visible ) throw (uno::RuntimeException)
+{
+    drawing::LineStyle aLineStyle;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ) ) >>= aLineStyle;
+    if( !_visible )
+    {
+        aLineStyle = drawing::LineStyle_NONE;
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( aLineStyle ) );
+    }
+    else
+    {
+        if( aLineStyle == drawing::LineStyle_NONE )
+        {
+            setDashStyle( m_nLineDashStyle );
+        }
+    }
+}
+
+double SAL_CALL
+ScVbaLineFormat::getTransparency() throw (uno::RuntimeException)
+{
+    sal_Int16 nTransparency = 0;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineTransparence" ) ) >>= nTransparency;
+    double fTransparency = static_cast<double>( nTransparency );
+    return fTransparency / 100;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setTransparency( double _transparency ) throw (uno::RuntimeException)
+{
+    sal_Int16 nTransparency = static_cast<sal_Int16>( _transparency * 100 );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineTransparence" ), uno::makeAny( nTransparency ) );
+}
+
+sal_Int16 SAL_CALL
+ScVbaLineFormat::getStyle() throw (uno::RuntimeException)
+{
+    //OpenOffice.org only supports one LineStyle (other than the DashStyles)
+    //Therefore we can only return the SingleLine
+    return 1;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setStyle( sal_Int16 /*_style */) throw (uno::RuntimeException)
+{
+    //OpenOffice.org only supports one LineStyle (other than the DashStyles)
+    //Therefore we do not set the LineStyle, because it maybe is already set
+    //to Dashed or Single Line. Setting the 'Visible' or 'DashStyle' properties
+    //will be done with the according methods.
+}
+
+sal_Int32 SAL_CALL
+ScVbaLineFormat::getDashStyle() throw (uno::RuntimeException)
+{
+    drawing::LineStyle eLineStyle;
+    //LineStyle integer in Xray
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ) ) >>= eLineStyle;
+    if( eLineStyle == drawing::LineStyle_SOLID )
+        m_nLineDashStyle = office::MsoLineDashStyle::msoLineSolid;
+    else
+    {
+        drawing::LineDash aLineDash;
+        m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "LineDash" ) ) >>= aLineDash;
+        if( aLineDash.Dots == 0 )
+        {
+            //LineDash
+            //LineLongDash
+            m_nLineDashStyle = office::MsoLineDashStyle::msoLineDash;
+            if( aLineDash.Distance > 0 && ( aLineDash.DashLen / aLineDash.Distance > 1 ) )
+            {
+                m_nLineDashStyle = office::MsoLineDashStyle::msoLineLongDash;
+            }
+        }
+        else if( aLineDash.Dots == 1 )
+        {
+            // LineDashDot
+            // LineLongDashDot
+            // LineSquareDot
+            // LineRoundDot ! not supported
+            m_nLineDashStyle = office::MsoLineDashStyle::msoLineDashDot;
+            if( aLineDash.Dashes == 0 )
+            {
+                m_nLineDashStyle = office::MsoLineDashStyle::msoLineSquareDot;
+            }
+            else
+            {
+                if( aLineDash.Distance > 0 && ( aLineDash.DashLen / aLineDash.Distance > 1 ) )
+                {
+                    m_nLineDashStyle = office::MsoLineDashStyle::msoLineLongDashDot;
+                }
+            }
+        }
+        else if( aLineDash.Dots == 2 )
+        {
+            // LineDashDotDot
+            m_nLineDashStyle = office::MsoLineDashStyle::msoLineDashDotDot;
+        }
+    }
+
+    return m_nLineDashStyle;
+}
+
+void SAL_CALL
+ScVbaLineFormat::setDashStyle( sal_Int32 _dashstyle ) throw (uno::RuntimeException)
+{
+    m_nLineDashStyle = _dashstyle;
+    if( _dashstyle == office::MsoLineDashStyle::msoLineSolid )
+    {
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( drawing::LineStyle_SOLID  ));
+    }
+    else
+    {
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( drawing::LineStyle_DASH ) );
+        drawing::LineDash  pLineDash;
+        Millimeter aMillimeter( m_nLineWeight );
+        sal_Int32 nPixel = static_cast< sal_Int32 >( aMillimeter.getInHundredthsOfOneMillimeter() );
+        switch( _dashstyle )
+        {
+        case office::MsoLineDashStyle::msoLineDashDot:
+            pLineDash.Dots = 1;
+            pLineDash.DotLen = nPixel;
+            pLineDash.Dashes = 1;
+            pLineDash.DashLen = 5 * nPixel;
+            pLineDash.Distance = 4 * nPixel;
+            break;
+        case office::MsoLineDashStyle::msoLineLongDashDot:
+            pLineDash.Dots = 1;
+            pLineDash.DotLen = nPixel;
+            pLineDash.Dashes = 1;
+            pLineDash.DashLen = 10 * nPixel;
+            pLineDash.Distance = 4 * nPixel;
+            break;
+        case office::MsoLineDashStyle::msoLineDash:
+            pLineDash.Dots = 0;
+            pLineDash.DotLen = 0;
+            pLineDash.Dashes = 1;
+            pLineDash.DashLen = 6 * nPixel;
+            pLineDash.Distance = 4 * nPixel;
+            break;
+        case office::MsoLineDashStyle::msoLineDashDotDot:
+            pLineDash.Dots = 2;
+            pLineDash.DotLen = nPixel;
+            pLineDash.Dashes = 1;
+            pLineDash.DashLen = 10 * nPixel;
+            pLineDash.Distance = 3 * nPixel;
+            break;
+        case office::MsoLineDashStyle::msoLineLongDash:
+            pLineDash.Dots = 0;
+            pLineDash.DotLen = 0;
+            pLineDash.Dashes = 1;
+            pLineDash.DashLen = 10 * nPixel;
+            pLineDash.Distance = 4 * nPixel;
+            break;
+        case office::MsoLineDashStyle::msoLineSquareDot:
+            pLineDash.Dots = 1;
+            pLineDash.DotLen = nPixel;
+            pLineDash.Dashes = 0;
+            pLineDash.DashLen = 0;
+            pLineDash.Distance = nPixel;
+            break;
+        case office::MsoLineDashStyle::msoLineRoundDot:
+            pLineDash.Dots = 1;
+            pLineDash.DotLen = nPixel;
+            pLineDash.Dashes = 0;
+            pLineDash.DashLen = 0;
+            pLineDash.Distance = nPixel;
+            break;
+        default:
+            throw uno::RuntimeException( rtl::OUString::createFromAscii("this MsoLineDashStyle is not supported."), uno::Reference< uno::XInterface >() );
+        }
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "LineDash" ), uno::makeAny( pLineDash ) );
+    }
+}
+
+// Methods
+uno::Reference< msforms::XColorFormat > SAL_CALL
+ScVbaLineFormat::BackColor() throw (uno::RuntimeException)
+{
+    return uno::Reference< msforms::XColorFormat >( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ::ColorFormatType::LINEFORMAT_BACKCOLOR ) );
+}
+
+uno::Reference< msforms::XColorFormat > SAL_CALL
+ScVbaLineFormat::ForeColor() throw (uno::RuntimeException)
+{
+    return uno::Reference< msforms::XColorFormat >( new ScVbaColorFormat( getParent(), mxContext, this, m_xShape, ::ColorFormatType::LINEFORMAT_FORECOLOR ) );
+}
+
+
+rtl::OUString&
+ScVbaLineFormat::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaLineFormat") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaLineFormat::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.LineFormat" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbalineformat.hxx b/vbahelper/source/vbahelper/vbalineformat.hxx
new file mode 100644
index 0000000..57f487c
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbalineformat.hxx
@@ -0,0 +1,85 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbalineformat.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_XLINEFORMAT_HXX
+#define SC_VBA_XLINEFORMAT_HXX
+
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <ooo/vba/msforms/XLineFormat.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ov::msforms::XLineFormat > ScVbaLineFormat_BASE;
+
+class ScVbaLineFormat : public ScVbaLineFormat_BASE
+{
+private:
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+    sal_Int32 m_nLineDashStyle;
+    double m_nLineWeight;
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+    sal_Int32 convertLineStartEndNameToArrowheadStyle( rtl::OUString sLineName );
+    rtl::OUString convertArrowheadStyleToLineStartEndName( sal_Int32 nArrowheadStyle ) throw (css::uno::RuntimeException);
+    sal_Int32 calculateArrowheadSize();
+public:
+    ScVbaLineFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::drawing::XShape > xShape );
+
+    // Attributes
+    virtual sal_Int32 SAL_CALL getBeginArrowheadStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setBeginArrowheadStyle( sal_Int32 _beginarrowheadstyle ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getBeginArrowheadLength() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setBeginArrowheadLength( sal_Int32 _beginarrowheadlength ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getBeginArrowheadWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setBeginArrowheadWidth( sal_Int32 _beginarrowheadwidth ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getEndArrowheadStylel() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEndArrowheadStylel( sal_Int32 _endarrowheadstylel ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getEndArrowheadLength() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEndArrowheadLength( sal_Int32 _endarrowheadlength ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getEndArrowheadWidth() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setEndArrowheadWidth( sal_Int32 _endarrowheadwidth ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getWeight() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setWeight( double _weight ) throw (css::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL getVisible() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setVisible( sal_Bool _visible ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getTransparency() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setTransparency( double _transparency ) throw (css::uno::RuntimeException);
+    virtual sal_Int16 SAL_CALL getStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setStyle( sal_Int16 _style ) throw (css::uno::RuntimeException);
+    virtual sal_Int32 SAL_CALL getDashStyle() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setDashStyle( sal_Int32 _dashstyle ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL BackColor() throw (css::uno::RuntimeException);
+    virtual css::uno::Reference< ov::msforms::XColorFormat > SAL_CALL ForeColor() throw (css::uno::RuntimeException);
+};
+
+#endif//SC_VBA_XLINEFORMAT_HXX
diff --git a/vbahelper/source/vbahelper/vbapagesetupbase.cxx b/vbahelper/source/vbahelper/vbapagesetupbase.cxx
new file mode 100644
index 0000000..25339a0
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbapagesetupbase.cxx
@@ -0,0 +1,324 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile$
+ * $Revision$
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/vbapagesetupbase.hxx>
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+VbaPageSetupBase::VbaPageSetupBase(const uno::Reference< XHelperInterface >& xParent,
+                const uno::Reference< uno::XComponentContext >& xContext ) throw (uno::RuntimeException): VbaPageSetupBase_BASE( xParent, xContext )
+{
+}
+
+double SAL_CALL VbaPageSetupBase::getTopMargin() throw (css::uno::RuntimeException)
+{
+    sal_Bool headerOn = sal_False;
+    sal_Int32 topMargin = 0;
+    sal_Int32 headerHeight = 0;
+
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")));
+        aValue >>= headerOn;
+
+        aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")));
+        aValue >>= topMargin;
+
+        if( headerOn )
+        {
+            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight")));
+            aValue >>= headerHeight;
+            topMargin = topMargin + headerHeight;
+        }
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+    return Millimeter::getInPoints( topMargin );
+}
+
+void SAL_CALL VbaPageSetupBase::setTopMargin( double margin ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 topMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
+    sal_Bool headerOn = sal_False;
+    sal_Int32 headerHeight = 0;
+
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderIsOn")));
+        aValue >>= headerOn;
+
+        if( headerOn )
+        {
+            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("HeaderHeight")));
+            aValue >>= headerHeight;
+            topMargin -= headerHeight;
+        }
+
+        aValue <<= topMargin;
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")), aValue );
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
+
+double SAL_CALL VbaPageSetupBase::getBottomMargin() throw (css::uno::RuntimeException)
+{
+    sal_Bool footerOn = sal_False;
+    sal_Int32 bottomMargin = 0;
+    sal_Int32 footerHeight = 0;
+
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")));
+        aValue >>= footerOn;
+
+        aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")));
+        aValue >>= bottomMargin;
+
+        if( footerOn )
+        {
+            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight")));
+            aValue >>= footerHeight;
+            bottomMargin += footerHeight;
+        }
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+    return Millimeter::getInPoints( bottomMargin );
+}
+
+void SAL_CALL VbaPageSetupBase::setBottomMargin( double margin ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 bottomMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
+    sal_Bool footerOn = sal_False;
+    sal_Int32 footerHeight = 0;
+
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterIsOn")));
+        aValue >>= footerOn;
+
+        if( footerOn )
+        {
+            aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("FooterHeight")));
+            aValue >>= footerHeight;
+            bottomMargin -= footerHeight;
+        }
+
+        aValue <<= bottomMargin;
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")), aValue );
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
+
+double SAL_CALL VbaPageSetupBase::getRightMargin() throw (css::uno::RuntimeException)
+{
+    sal_Int32 rightMargin = 0;
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin")));
+        aValue >>= rightMargin;
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+    return Millimeter::getInPoints( rightMargin );;
+}
+
+void SAL_CALL VbaPageSetupBase::setRightMargin( double margin ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 rightMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
+    try
+    {
+        uno::Any aValue;
+        aValue <<= rightMargin;
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("RightMargin")), aValue );
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+}
+
+double SAL_CALL VbaPageSetupBase::getLeftMargin() throw (css::uno::RuntimeException)
+{
+    sal_Int32 leftMargin = 0;
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin")));
+        aValue >>= leftMargin;
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+    return Millimeter::getInPoints( leftMargin );;
+}
+
+void SAL_CALL VbaPageSetupBase::setLeftMargin( double margin ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 leftMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
+    try
+    {
+        uno::Any aValue;
+        aValue <<= leftMargin;
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("LeftMargin")), aValue );
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
+
+double SAL_CALL VbaPageSetupBase::getHeaderMargin() throw (css::uno::RuntimeException)
+{
+    sal_Int32 headerMargin = 0;
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")));
+        aValue >>= headerMargin;
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+    return Millimeter::getInPoints( headerMargin );;
+}
+
+void SAL_CALL VbaPageSetupBase::setHeaderMargin( double margin ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 headerMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
+    try
+    {
+        uno::Any aValue;
+        aValue <<= headerMargin;
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("TopMargin")), aValue );
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
+
+double SAL_CALL VbaPageSetupBase::getFooterMargin() throw (css::uno::RuntimeException)
+{
+    sal_Int32 footerMargin = 0;
+    try
+    {
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")));
+        aValue >>= footerMargin;
+    }
+    catch( uno::Exception& )
+    {
+    }
+
+    return Millimeter::getInPoints( footerMargin );;
+}
+
+void SAL_CALL VbaPageSetupBase::setFooterMargin( double margin ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 footerMargin = Millimeter::getInHundredthsOfOneMillimeter( margin );
+    try
+    {
+        uno::Any aValue;
+        aValue <<= footerMargin;
+        mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("BottomMargin")), aValue );
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
+
+sal_Int32 SAL_CALL VbaPageSetupBase::getOrientation() throw (css::uno::RuntimeException)
+{
+    sal_Int32 orientation = mnOrientPortrait;
+    try
+    {
+        sal_Bool isLandscape = sal_False;
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("IsLandscape")));
+        aValue >>= isLandscape;
+
+        if( isLandscape )
+        {
+            orientation = mnOrientLandscape;
+        }
+    }
+    catch( uno::Exception& )
+    {
+    }
+    return orientation;
+}
+
+void SAL_CALL VbaPageSetupBase::setOrientation( sal_Int32 orientation ) throw (css::uno::RuntimeException)
+{
+    if( ( orientation != mnOrientPortrait ) &&
+        ( orientation != mnOrientLandscape ) )
+    {
+        DebugHelper::exception(SbERR_BAD_PARAMETER, rtl::OUString() );
+    }
+
+    try
+    {
+        sal_Bool isLandscape = sal_False;
+        uno::Any aValue = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("IsLandscape")));
+        aValue >>= isLandscape;
+
+        sal_Bool switchOrientation = sal_False;
+        if(( isLandscape && orientation != mnOrientLandscape ) ||
+            ( !isLandscape && orientation != mnOrientPortrait ))
+        {
+            switchOrientation = sal_True;
+        }
+
+        if( switchOrientation )
+        {
+            aValue <<= !isLandscape;
+            uno::Any aHeight = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Height")));
+            uno::Any aWidth = mxPageProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Width")));
+            mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("IsLandscape")), aValue );
+            mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Width")),  aHeight );
+            mxPageProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Height")), aWidth );
+        }
+
+        if( isLandscape )
+        {
+            orientation = mnOrientLandscape;
+        }
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
diff --git a/vbahelper/source/vbahelper/vbapictureformat.cxx b/vbahelper/source/vbahelper/vbapictureformat.cxx
new file mode 100644
index 0000000..0d79fc1
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbapictureformat.cxx
@@ -0,0 +1,147 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbapictureformat.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbapictureformat.hxx"
+
+using namespace ooo::vba;
+using namespace com::sun::star;
+
+ScVbaPictureFormat::ScVbaPictureFormat( const css::uno::Reference< ov::XHelperInterface >& xParent,
+    const css::uno::Reference< css::uno::XComponentContext >& xContext,
+    uno::Reference< drawing::XShape > xShape )
+    throw( lang::IllegalArgumentException ) : ScVbaPictureFormat_BASE( xParent, xContext ), m_xShape( xShape )
+{
+    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
+}
+
+void
+ScVbaPictureFormat::checkParameterRangeInDouble( double nRange, double nMin, double nMax ) throw (css::uno::RuntimeException)
+{
+    if( nRange < nMin )
+    {
+        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parameter out of range, value is too small.") , uno::Reference< uno::XInterface >() );
+    }
+    if( nRange > nMax )
+    {
+        throw uno::RuntimeException( rtl::OUString::createFromAscii("Parameter out of range, value is too high.") , uno::Reference< uno::XInterface >() );
+    }
+}
+
+// Attributes
+double SAL_CALL
+ScVbaPictureFormat::getBrightness() throw (uno::RuntimeException)
+{
+    sal_Int16 nLuminance = 0;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("AdjustLuminance") ) >>= nLuminance;
+    double fBrightness = static_cast< double >( nLuminance );
+    fBrightness = ( fBrightness +100 ) / 200;
+    return fBrightness;
+}
+
+void SAL_CALL
+ScVbaPictureFormat::setBrightness( double _brightness ) throw (uno::RuntimeException)
+{
+    checkParameterRangeInDouble( _brightness, 0.0, 1.0 );
+    double fLuminance = _brightness * 200 - 100;
+    sal_Int16 nLuminance = static_cast< sal_Int16 >( fLuminance );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("AdjustLuminance"), uno::makeAny( nLuminance ) );
+}
+
+double SAL_CALL
+ScVbaPictureFormat::getContrast() throw (uno::RuntimeException)
+{
+    sal_Int16 nContrast = 0;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("AdjustContrast") ) >>= nContrast;
+    double fContrast = static_cast< double >( nContrast );
+    fContrast = ( fContrast + 100 ) / 200;
+    return fContrast;
+}
+
+void SAL_CALL
+ScVbaPictureFormat::setContrast( double _contrast ) throw (uno::RuntimeException)
+{
+    checkParameterRangeInDouble( _contrast, 0.0, 1.0 );
+    double fContrast = _contrast * 200 - 100;
+    sal_Int16 nContrast = static_cast< sal_Int16 >( fContrast );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii("AdjustContrast"), uno::makeAny( nContrast ) );
+}
+
+
+// Methods
+void SAL_CALL
+ScVbaPictureFormat::IncrementBrightness( double increment ) throw (uno::RuntimeException)
+{
+    double fBrightness = getBrightness();
+    fBrightness += increment;
+    if( fBrightness < 0 )
+    {
+        fBrightness = 0.0;
+    }
+    if( fBrightness > 1 )
+    {
+        fBrightness = 1;
+    }
+    setBrightness( fBrightness );
+}
+
+void SAL_CALL
+ScVbaPictureFormat::IncrementContrast( double increment ) throw (uno::RuntimeException)
+{
+    double nContrast = getContrast();
+    nContrast += increment;
+    if( increment < 0 )
+    {
+        increment = 0.0;
+    }
+    if( increment > 1 )
+    {
+        increment = 1.0;
+    }
+    setContrast( nContrast );
+}
+
+
+rtl::OUString&
+ScVbaPictureFormat::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaPictureFormat") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaPictureFormat::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.PictureFormat" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbapictureformat.hxx b/vbahelper/source/vbahelper/vbapictureformat.hxx
new file mode 100644
index 0000000..0c15b58
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbapictureformat.hxx
@@ -0,0 +1,64 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbapictureformat.hxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef SC_VBA_PICTUREFORMAT_HXX
+#define SC_VBA_PICTUREFORMAT_HXX
+
+#include <com/sun/star/drawing/XShape.hpp>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <ooo/vba/msforms/XPictureFormat.hpp>
+#include <vbahelper/vbahelperinterface.hxx>
+
+typedef InheritedHelperInterfaceImpl1< ov::msforms::XPictureFormat > ScVbaPictureFormat_BASE;
+
+class ScVbaPictureFormat : public ScVbaPictureFormat_BASE
+{
+private:
+    css::uno::Reference< css::drawing::XShape > m_xShape;
+    css::uno::Reference< css::beans::XPropertySet > m_xPropertySet;
+protected:
+    virtual rtl::OUString& getServiceImplName();
+    virtual css::uno::Sequence<rtl::OUString> getServiceNames();
+private:
+    void checkParameterRangeInDouble( double nRange, double nMin, double nMax ) throw (css::uno::RuntimeException);
+public:
+    ScVbaPictureFormat( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, css::uno::Reference< css::drawing::XShape > xShape ) throw( css::lang::IllegalArgumentException );
+
+    // Attributes
+    virtual double SAL_CALL getBrightness() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setBrightness( double _brightness ) throw (css::uno::RuntimeException);
+    virtual double SAL_CALL getContrast() throw (css::uno::RuntimeException);
+    virtual void SAL_CALL setContrast( double _contrast ) throw (css::uno::RuntimeException);
+
+    // Methods
+    virtual void SAL_CALL IncrementBrightness( double increment ) throw (css::uno::RuntimeException);
+    virtual void SAL_CALL IncrementContrast( double increment ) throw (css::uno::RuntimeException);
+};
+
+#endif//SC_VBA_PICTUREFORMAT_HXX
diff --git a/vbahelper/source/vbahelper/vbapropvalue.cxx b/vbahelper/source/vbahelper/vbapropvalue.cxx
new file mode 100644
index 0000000..da7d9db
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbapropvalue.cxx
@@ -0,0 +1,48 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbapropvalue.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include "vbahelper/vbapropvalue.hxx"
+
+using namespace com::sun::star;
+
+ScVbaPropValue::ScVbaPropValue( PropListener* pListener ) : m_pListener( pListener )
+{
+}
+
+css::uno::Any SAL_CALL
+ScVbaPropValue::getValue() throw (css::uno::RuntimeException)
+{
+    return m_pListener->getValueEvent();
+}
+
+void SAL_CALL
+ScVbaPropValue::setValue( const css::uno::Any& _value ) throw (css::uno::RuntimeException)
+{
+    m_pListener->setValueEvent( _value );
+}
diff --git a/vbahelper/source/vbahelper/vbashape.cxx b/vbahelper/source/vbahelper/vbashape.cxx
new file mode 100644
index 0000000..0728ec6
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbashape.cxx
@@ -0,0 +1,676 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbashape.cxx,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include<ooo/vba/office/MsoZOrderCmd.hpp>
+#include<ooo/vba/office/MsoScaleFrom.hpp>
+#include<com/sun/star/container/XNamed.hpp>
+#include<com/sun/star/drawing/ConnectorType.hpp>
+#include <com/sun/star/lang/XEventListener.hpp>
+#include<com/sun/star/drawing/XDrawPagesSupplier.hpp>
+#include<com/sun/star/drawing/XDrawPages.hpp>
+#include<com/sun/star/view/XSelectionSupplier.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/lang/XMultiServiceFactory.hpp>
+#include <com/sun/star/text/TextContentAnchorType.hpp>
+#include <ooo/vba/word/WdRelativeHorizontalPosition.hpp>
+#include <ooo/vba/word/WdRelativeVerticalPosition.hpp>
+
+#include <comphelper/processfactory.hxx>
+#include <vos/mutex.hxx>
+#include <vcl/svapp.hxx>
+#include <svx/unopage.hxx>
+#include <svx/unoshape.hxx>
+
+#include <vbahelper/vbashape.hxx>
+#include <vbahelper/vbatextframe.hxx>
+#include "vbalineformat.hxx"
+#include "vbafillformat.hxx"
+#include "vbapictureformat.hxx"
+#include <vbahelper/vbashaperange.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+using namespace ::vos;
+
+ScVbaShape::ScVbaShape( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape >& xShape, const uno::Reference< drawing::XShapes >& xShapes, const uno::Reference< frame::XModel >& xModel, sal_Int32 nType ) throw( lang::IllegalArgumentException ) : ScVbaShape_BASE( xParent, xContext ), m_xShape( xShape ), m_xShapes( xShapes ), m_nType( nType ), m_xModel( xModel )
+{
+    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
+    m_pShapeHelper.reset( new ShapeHelper( m_xShape ) );
+    addListeners();
+}
+
+ScVbaShape::ScVbaShape( const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< drawing::XShape >& xShape, const uno::Reference< frame::XModel >& xModel ) throw( lang::IllegalArgumentException ) : ScVbaShape_BASE( uno::Reference< XHelperInterface >(), xContext ), m_xShape( xShape ), m_xModel( xModel )
+{
+    // add listener
+    addListeners();
+}
+
+ScVbaShape::~ScVbaShape()
+{
+    // dtor must never ever throw
+    /*try
+    {
+        removeShapeListener();
+        removeShapesListener();
+    }
+    catch( uno::Exception& )
+    {
+    }*/
+}
+
+void SAL_CALL
+ScVbaShape::disposing( const lang::EventObject& rEventObject ) throw( uno::RuntimeException )
+{
+    try
+    {
+    uno::Reference< drawing::XShapes > xShapes( rEventObject.Source, uno::UNO_QUERY );
+    uno::Reference< drawing::XShape > xShape( rEventObject.Source, uno::UNO_QUERY );
+    if ( xShapes.is() )
+        removeShapesListener();
+    if ( xShape.is() )
+        removeShapeListener();
+    }
+    catch( uno::Exception& )
+    {
+    }
+}
+
+
+void ScVbaShape::addListeners()
+{
+    uno::Reference< lang::XComponent > xComponent( m_xShape, uno::UNO_QUERY );
+    if ( xComponent.is() )
+        xComponent->addEventListener( this );
+
+    xComponent.set( m_xShapes, uno::UNO_QUERY );
+    if ( xComponent.is() )
+        xComponent->addEventListener( this );
+}
+
+void
+ScVbaShape::removeShapeListener() throw( uno::RuntimeException )
+{
+    if( m_xShape.is() )
+    {
+        uno::Reference< lang::XComponent > xComponent( m_xShape, uno::UNO_QUERY_THROW );
+        xComponent->removeEventListener( this );
+    }
+    m_xShape = NULL;
+    m_xPropertySet = NULL;
+}
+
+void
+ScVbaShape::removeShapesListener() throw( uno::RuntimeException )
+{
+    if( m_xShapes.is() )
+    {
+        uno::Reference< lang::XComponent > xComponent( m_xShapes, uno::UNO_QUERY_THROW );
+        xComponent->removeEventListener( this );
+    }
+    m_xShapes = NULL;
+}
+
+sal_Int32
+ScVbaShape::getType( const css::uno::Reference< drawing::XShape > xShape ) throw (uno::RuntimeException)
+{
+    rtl::OUString sShapeType;
+    uno::Reference< drawing::XShapeDescriptor > xShapeDescriptor( xShape, uno::UNO_QUERY_THROW );
+    sShapeType = xShapeDescriptor->getShapeType();
+    OSL_TRACE("ScVbaShape::getType: %s", rtl::OUStringToOString( sShapeType, RTL_TEXTENCODING_UTF8 ).getStr() );
+    // office::MsoShapeType::msoDiagram to "com.sun.star.drawing.GroupShape"
+    if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.GroupShape" ) ) )
+        return office::MsoShapeType::msoGroup;
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.GraphicObjectShape" ) ) )
+        return office::MsoShapeType::msoPicture;
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.ControlShape" ) ) ||
+            sShapeType.equals( rtl::OUString::createFromAscii( "FrameShape" ) ) )
+        return office::MsoShapeType::msoOLEControlObject;
+    // OOo don't support office::MsoShapeType::msoComment as a Shape.
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.OLE2Shape" ) ) )
+        return office::MsoShapeType::msoChart;
+    // Art characters office::MsoShapeType::msoTextEffect, in OOo corresponding to "com.sun.star.drawing.CustomShape"
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.ConnectorShape" ) ) )
+    {
+        enum drawing::ConnectorType connectorType;
+        uno::Reference< beans::XPropertySet > xPropertySet( xShape, uno::UNO_QUERY_THROW );
+        xPropertySet->getPropertyValue( rtl::OUString::createFromAscii("EdgeKind")) >>= connectorType;
+        if( connectorType == drawing::ConnectorType_CURVE )
+            return office::MsoShapeType::msoFreeform;
+        else if( connectorType == drawing::ConnectorType_LINE )
+            return office::MsoShapeType::msoLine;
+        else
+            return office::MsoShapeType::msoAutoShape;
+    }
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.LineShape" ) ) )
+        return office::MsoShapeType::msoLine;
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.CustomShape" ) ) ||
+            sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.RectangleShape") ) )
+        return office::MsoShapeType::msoAutoShape;
+    else if( sShapeType.equals( rtl::OUString::createFromAscii( "com.sun.star.drawing.TextShape" ) ) )
+        return office::MsoShapeType::msoTextBox;
+    else
+        throw uno::RuntimeException( rtl::OUString::createFromAscii( "the shape type do not be supported: " ) + sShapeType, uno::Reference< uno::XInterface >() );
+}
+
+// Attributes
+rtl::OUString SAL_CALL
+ScVbaShape::getName() throw (uno::RuntimeException)
+{
+    rtl::OUString sName;
+    uno::Reference< container::XNamed > xNamed( m_xShape, uno::UNO_QUERY_THROW );
+    sName = xNamed->getName();
+    return sName;
+}
+
+void SAL_CALL
+ScVbaShape::setName( const rtl::OUString& _name ) throw (uno::RuntimeException)
+{
+    uno::Reference< container::XNamed > xNamed( m_xShape, uno::UNO_QUERY_THROW );
+    xNamed->setName( _name );
+}
+
+double SAL_CALL
+ScVbaShape::getHeight() throw (uno::RuntimeException)
+{
+    return m_pShapeHelper->getHeight();
+}
+
+void SAL_CALL
+ScVbaShape::setHeight( double _height ) throw (uno::RuntimeException)
+{
+    m_pShapeHelper->setHeight( _height );
+}
+
+double SAL_CALL
+ScVbaShape::getWidth() throw (uno::RuntimeException)
+{
+    return m_pShapeHelper->getWidth();
+}
+
+void SAL_CALL
+ScVbaShape::setWidth( double _width ) throw (uno::RuntimeException)
+{
+    m_pShapeHelper->setWidth( _width );
+}
+
+double SAL_CALL
+ScVbaShape::getLeft() throw (uno::RuntimeException)
+{
+    return m_pShapeHelper->getLeft();
+}
+
+void SAL_CALL
+ScVbaShape::setLeft( double _left ) throw (uno::RuntimeException)
+{
+    m_pShapeHelper->setLeft( _left );
+}
+
+double SAL_CALL
+ScVbaShape::getTop() throw (uno::RuntimeException)
+{
+    return m_pShapeHelper->getTop();
+}
+
+void SAL_CALL
+ScVbaShape::setTop( double _top ) throw (uno::RuntimeException)
+{
+    return m_pShapeHelper->setTop( _top );
+}
+
+sal_Bool SAL_CALL
+ScVbaShape::getVisible() throw (uno::RuntimeException)
+{
+    //UNO Shapes are always visible
+    return sal_True;
+}
+
+void SAL_CALL
+ScVbaShape::setVisible( sal_Bool /*_visible*/ ) throw (uno::RuntimeException)
+{
+    //UNO Shapes are always visible
+}
+
+sal_Int32 SAL_CALL
+ScVbaShape::getZOrderPosition() throw (uno::RuntimeException)
+{
+    sal_Int32 nZOrderPosition = 0;
+    uno::Any aZOrderPosition =  m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ) );
+    aZOrderPosition >>= nZOrderPosition;
+    return nZOrderPosition + 1;
+}
+
+sal_Int32 SAL_CALL
+ScVbaShape::getType() throw (uno::RuntimeException)
+{
+    return m_nType;
+}
+
+double SAL_CALL
+ScVbaShape::getRotation() throw (uno::RuntimeException)
+{
+    double dRotation = 0;
+    sal_Int32 nRotation = 0;
+    m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "RotateAngle" ) ) >>= nRotation;
+    dRotation = static_cast< double >( nRotation /100 );
+    return dRotation;
+}
+
+void SAL_CALL
+ScVbaShape::setRotation( double _rotation ) throw (uno::RuntimeException)
+{
+    sal_Int32 nRotation = static_cast < sal_Int32 > ( _rotation * 100 );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "RotateAngle" ), uno::makeAny( nRotation ) );
+}
+
+uno::Reference< msforms::XLineFormat > SAL_CALL
+ScVbaShape::getLine() throw (uno::RuntimeException)
+{
+    // TODO should ongly return line
+    return uno::Reference< msforms::XLineFormat >( new ScVbaLineFormat( this, mxContext, m_xShape ) );
+}
+
+uno::Reference< msforms::XFillFormat > SAL_CALL
+ScVbaShape::getFill() throw (uno::RuntimeException)
+{
+    return uno::Reference< msforms::XFillFormat >( new ScVbaFillFormat( this, mxContext, m_xShape ) );
+}
+
+uno::Reference<  msforms::XPictureFormat > SAL_CALL
+ScVbaShape::getPictureFormat() throw (uno::RuntimeException)
+{
+    return uno::Reference< msforms::XPictureFormat >( new ScVbaPictureFormat( this, mxContext, m_xShape ) );
+}
+
+// Methods
+uno::Any SAL_CALL
+ScVbaShape::TextFrame() throw (uno::RuntimeException)
+{
+    uno::Reference< lang::XServiceInfo > xServiceInfo( m_xModel, uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.sheet.SpreadsheetDocument" ) ) ) )
+    {
+        uno::Reference< lang::XMultiServiceFactory > xSF( comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+        uno::Sequence< uno::Any > aArgs(2);
+        aArgs[0] = uno::makeAny( getParent() );
+        aArgs[1] <<= m_xShape;
+        uno::Reference< uno::XInterface > xTextFrame( xSF->createInstanceWithArguments( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.excel.TextFrame") ) , aArgs ) , uno::UNO_QUERY_THROW );
+        return uno::makeAny( xTextFrame );
+    }
+
+    return uno::makeAny( uno::Reference< msforms::XTextFrame >( new VbaTextFrame( this, mxContext, m_xShape ) ) );
+}
+
+void SAL_CALL
+ScVbaShape::Delete() throw (uno::RuntimeException)
+{
+    OGuard aGuard( Application::GetSolarMutex() );
+    m_xShapes->remove( m_xShape );
+}
+
+void SAL_CALL
+ScVbaShape::ZOrder( sal_Int32 ZOrderCmd ) throw (uno::RuntimeException)
+{
+    sal_Int32 nOrderPositon;
+    uno::Any aOrderPostion = m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ) );
+    aOrderPostion >>= nOrderPositon;
+    switch( ZOrderCmd )
+    {
+    case office::MsoZOrderCmd::msoBringToFront:
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( SAL_MAX_INT32 ) );
+        break;
+    case office::MsoZOrderCmd::msoSendToBack:
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( (sal_Int32)0 ) );
+        break;
+    case office::MsoZOrderCmd::msoBringForward:
+        nOrderPositon += 1;
+        m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( nOrderPositon ) );
+        break;
+    case office::MsoZOrderCmd::msoSendBackward:
+        if( nOrderPositon > 0 )
+        {
+            nOrderPositon -= 1;
+            m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "ZOrder" ), uno::makeAny( nOrderPositon ) );
+        }
+        break;
+    // below two commands use with Writer for text and image object.
+    case office::MsoZOrderCmd::msoBringInFrontOfText:
+    case office::MsoZOrderCmd::msoSendBehindText:
+        throw uno::RuntimeException( rtl::OUString::createFromAscii( "This ZOrderCmd is not implemented, it is use with writer." ), uno::Reference< uno::XInterface >() );
+    default:
+        throw uno::RuntimeException( rtl::OUString::createFromAscii( "Invalid Parameter." ), uno::Reference< uno::XInterface >() );
+    }
+}
+
+void SAL_CALL
+ScVbaShape::IncrementRotation( double Increment ) throw (uno::RuntimeException)
+{
+    double nCurrentRotation = getRotation();
+    nCurrentRotation += Increment;
+    setRotation(nCurrentRotation);
+}
+
+void SAL_CALL
+ScVbaShape::IncrementLeft( double Increment ) throw (uno::RuntimeException)
+{
+    double nCurrentLeft = getLeft();
+    nCurrentLeft += Increment;
+    setLeft(nCurrentLeft);
+}
+
+void SAL_CALL
+ScVbaShape::IncrementTop( double Increment ) throw (uno::RuntimeException)
+{
+    double nCurrentTop = getTop();
+    nCurrentTop += Increment;
+    setTop(nCurrentTop);
+}
+
+void SAL_CALL
+ScVbaShape::ScaleHeight( double Factor, sal_Bool /*RelativeToOriginalSize*/, sal_Int32 Scale ) throw (uno::RuntimeException)
+{
+    double nHeight = getHeight();
+    double nNewHeight = nHeight * Factor;
+    if( Scale == office::MsoScaleFrom::msoScaleFromTopLeft )
+    {
+        setHeight(nNewHeight);
+    }
+    else if( Scale == office::MsoScaleFrom::msoScaleFromBottomRight )
+    {
+        double nDeltaHeight = nNewHeight - nHeight;
+        double nNewTop = getTop() - nDeltaHeight;
+        setTop(nNewTop);
+        setHeight(nNewHeight);
+    }
+    else if( Scale == office::MsoScaleFrom::msoScaleFromMiddle )
+    {
+        double nDeltaHeight = (nNewHeight - nHeight) / 2;
+        double nNewTop = getTop() - nDeltaHeight;
+        setTop(nNewTop);
+        setHeight(nNewHeight);
+    }
+    else
+    {
+        throw uno::RuntimeException( rtl::OUString::createFromAscii( "ScaleHeight.Scale wrong value is given." ) , uno::Reference< uno::XInterface >() );
+    }
+}
+
+void SAL_CALL
+ScVbaShape::ScaleWidth( double Factor, sal_Bool /*RelativeToOriginalSize*/, sal_Int32 Scale ) throw (uno::RuntimeException)
+{
+    double nWidth = getWidth();
+    double nNewWidth = nWidth * Factor;
+    if( Scale == office::MsoScaleFrom::msoScaleFromTopLeft )
+    {
+        setWidth(nNewWidth);
+    }
+    else if( Scale == office::MsoScaleFrom::msoScaleFromBottomRight )
+    {
+        double nDeltaWidth = nNewWidth - nWidth;
+        double nNewLeft = getLeft() - nDeltaWidth;
+        setLeft(nNewLeft);
+        setWidth(nNewWidth);
+    }
+    else if( Scale == office::MsoScaleFrom::msoScaleFromMiddle )
+    {
+        double nDeltaWidth = (nNewWidth - nWidth) / 2;
+        double nNewLeft = getLeft() - nDeltaWidth;
+        setLeft(nNewLeft);
+        setWidth(nNewWidth);
+    }
+    else
+    {
+        throw uno::RuntimeException( rtl::OUString::createFromAscii( "ScaleHeight.Scale wrong value is given." ) , uno::Reference< uno::XInterface >() );
+    }
+}
+
+void SAL_CALL
+ScVbaShape::Select( const uno::Any& /*Replace*/ ) throw ( uno::RuntimeException )
+{
+    uno::Reference< view::XSelectionSupplier > xSelectSupp( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    xSelectSupp->select( uno::makeAny( m_xShape ) );
+}
+
+// This method should not be part of Shape, what we reall need to do is...
+// dynamically create the appropriate objects e.g. TextBox, Oval, Picture etc.
+// ( e.g. the ones that really do have ShapeRange as an attribute )
+uno::Any SAL_CALL
+ScVbaShape::ShapeRange( const uno::Any& index ) throw ( uno::RuntimeException )
+{
+    // perhaps we should store a reference to the Shapes Collection
+    // in this class
+    // but anyway this method should not even be in this class
+    // #TODO not sure what the parent of the Shapes collection should be
+
+    XNamedObjectCollectionHelper< drawing::XShape >::XNamedVec aVec;
+    aVec.push_back( m_xShape );
+    uno::Reference< container::XIndexAccess > xIndexAccess( new XNamedObjectCollectionHelper< drawing::XShape >( aVec ) );
+    uno::Reference< container::XChild > xChild( m_xShape, uno::UNO_QUERY_THROW );
+    // #FIXME for want of a better parent, setting this
+    uno::Reference< msforms::XShapeRange > xShapeRange( new ScVbaShapeRange( mxParent, mxContext, xIndexAccess,  uno::Reference< drawing::XDrawPage >( xChild->getParent(), uno::UNO_QUERY_THROW ), m_xModel ) );
+    if ( index.hasValue() )
+        return xShapeRange->Item( index, uno::Any() );
+    return uno::makeAny( xShapeRange );
+}
+
+sal_Bool SAL_CALL
+ScVbaShape::getLockAspectRatio() throw (uno::RuntimeException)
+{
+    // FIXME:
+    return sal_False;
+}
+
+void SAL_CALL
+ScVbaShape::setLockAspectRatio( sal_Bool /*_lockaspectratio*/ ) throw (uno::RuntimeException)
+{
+    // FIXME:
+}
+
+sal_Bool SAL_CALL
+ScVbaShape::getLockAnchor() throw (uno::RuntimeException)
+{
+    // FIXME:
+    return sal_True;
+}
+
+void SAL_CALL
+ScVbaShape::setLockAnchor( sal_Bool /*_lockanchor*/ ) throw (uno::RuntimeException)
+{
+    // FIXME:
+}
+
+sal_Int32 SAL_CALL
+ScVbaShape::getRelativeHorizontalPosition() throw (uno::RuntimeException)
+{
+    sal_Int32 nRelativeHorizontalPosition = word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionMargin;
+    text::TextContentAnchorType eType = text::TextContentAnchorType_AT_PARAGRAPH;
+    m_xPropertySet->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("AnchorType") ) ) >>= eType;
+
+    switch( eType )
+    {
+        case text::TextContentAnchorType_AT_PARAGRAPH:
+        {
+            nRelativeHorizontalPosition = word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionColumn;
+            break;
+        }
+        case text::TextContentAnchorType_AT_PAGE:
+        {
+            nRelativeHorizontalPosition = word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionPage;
+            break;
+        }
+        case text::TextContentAnchorType_AT_CHARACTER:
+        {
+            nRelativeHorizontalPosition = word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionCharacter;
+            break;
+        }
+        case text::TextContentAnchorType_AT_FRAME:
+        case text::TextContentAnchorType_AS_CHARACTER:
+        {
+            nRelativeHorizontalPosition = word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionMargin;
+            break;
+        }
+        default:
+        {
+            nRelativeHorizontalPosition = word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionMargin;
+        }
+    }
+    return nRelativeHorizontalPosition;
+}
+
+void SAL_CALL
+ScVbaShape::setRelativeHorizontalPosition( ::sal_Int32 _relativehorizontalposition ) throw (uno::RuntimeException)
+{
+    text::TextContentAnchorType eType = text::TextContentAnchorType_AT_PARAGRAPH;
+    switch( _relativehorizontalposition )
+    {
+        case word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionCharacter:
+        {
+            eType = text::TextContentAnchorType_AT_CHARACTER;
+            break;
+        }
+        case word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionColumn:
+        case word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionMargin:
+        {
+            eType = text::TextContentAnchorType_AT_PARAGRAPH;
+            break;
+        }
+        case word::WdRelativeHorizontalPosition::wdRelativeHorizontalPositionPage:
+        {
+            eType = text::TextContentAnchorType_AT_PAGE;
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+        }
+    }
+    m_xPropertySet->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("AnchorType") ), uno::makeAny( eType ) );
+}
+
+sal_Int32 SAL_CALL
+ScVbaShape::getRelativeVerticalPosition() throw (uno::RuntimeException)
+{
+    sal_Int32 nRelativeVerticalPosition = word::WdRelativeVerticalPosition::wdRelativeVerticalPositionMargin;
+    text::TextContentAnchorType eType = text::TextContentAnchorType_AT_PARAGRAPH;
+    m_xPropertySet->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("AnchorType") ) ) >>= eType;
+
+    switch( eType )
+    {
+        case text::TextContentAnchorType_AT_PARAGRAPH:
+        {
+            nRelativeVerticalPosition = word::WdRelativeVerticalPosition::wdRelativeVerticalPositionParagraph;
+            break;
+        }
+        case text::TextContentAnchorType_AT_PAGE:
+        {
+            nRelativeVerticalPosition = word::WdRelativeVerticalPosition::wdRelativeVerticalPositionPage;
+            break;
+        }
+        case text::TextContentAnchorType_AT_CHARACTER:
+        {
+            nRelativeVerticalPosition = word::WdRelativeVerticalPosition::wdRelativeVerticalPositionLine;
+            break;
+        }
+        case text::TextContentAnchorType_AT_FRAME:
+        case text::TextContentAnchorType_AS_CHARACTER:
+        {
+            nRelativeVerticalPosition = word::WdRelativeVerticalPosition::wdRelativeVerticalPositionMargin;
+            break;
+        }
+        default:
+        {
+            nRelativeVerticalPosition = word::WdRelativeVerticalPosition::wdRelativeVerticalPositionMargin;
+        }
+    }
+    return nRelativeVerticalPosition;
+}
+
+void SAL_CALL
+ScVbaShape::setRelativeVerticalPosition( ::sal_Int32 _relativeverticalposition ) throw (uno::RuntimeException)
+{
+    text::TextContentAnchorType eType = text::TextContentAnchorType_AT_PARAGRAPH;
+    switch( _relativeverticalposition )
+    {
+        case word::WdRelativeVerticalPosition::wdRelativeVerticalPositionLine:
+        {
+            eType = text::TextContentAnchorType_AT_CHARACTER;
+            break;
+        }
+        case word::WdRelativeVerticalPosition::wdRelativeVerticalPositionParagraph:
+        case word::WdRelativeVerticalPosition::wdRelativeVerticalPositionMargin:
+        {
+            eType = text::TextContentAnchorType_AT_PARAGRAPH;
+            break;
+        }
+        case word::WdRelativeVerticalPosition::wdRelativeVerticalPositionPage:
+        {
+            eType = text::TextContentAnchorType_AT_PAGE;
+            break;
+        }
+        default:
+        {
+            DebugHelper::exception(SbERR_BAD_ARGUMENT, rtl::OUString());
+        }
+    }
+    m_xPropertySet->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("AnchorType") ), uno::makeAny( eType ) );
+}
+
+uno::Any SAL_CALL
+ScVbaShape::WrapFormat() throw (uno::RuntimeException)
+{
+    uno::Reference< lang::XServiceInfo > xServiceInfo( m_xModel, uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextDocument" ) ) ) )
+    {
+        uno::Reference< lang::XMultiServiceFactory > xSF( comphelper::getProcessServiceFactory(), uno::UNO_QUERY_THROW );
+        uno::Sequence< uno::Any > aArgs(2);
+        aArgs[0] = uno::makeAny( getParent() );
+        aArgs[1] <<= m_xShape;
+        uno::Reference< uno::XInterface > xWrapFormat( xSF->createInstanceWithArguments( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.word.WrapFormat") ) , aArgs ) , uno::UNO_QUERY_THROW );
+        return uno::makeAny( xWrapFormat );
+    }
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+
+rtl::OUString&
+ScVbaShape::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaShape") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaShape::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.Shape" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbashaperange.cxx b/vbahelper/source/vbahelper/vbashaperange.cxx
new file mode 100644
index 0000000..ffdcf0c
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbashaperange.cxx
@@ -0,0 +1,382 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbashaperange.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/drawing/XShapeGrouper.hpp>
+#include <com/sun/star/drawing/XDrawPage.hpp>
+#include<com/sun/star/view/XSelectionSupplier.hpp>
+
+#include <vbahelper/vbahelper.hxx>
+#include <vbahelper/vbashaperange.hxx>
+#include <vbahelper/vbashape.hxx>
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+class VbShapeRangeEnumHelper : public EnumerationHelper_BASE
+{
+        uno::Reference< XCollection > m_xParent;
+        uno::Reference<container::XIndexAccess > m_xIndexAccess;
+        sal_Int32 nIndex;
+public:
+    VbShapeRangeEnumHelper( const uno::Reference< XCollection >& xParent,  const uno::Reference< container::XIndexAccess >& xIndexAccess ) : m_xParent( xParent ), m_xIndexAccess( xIndexAccess ), nIndex( 0 ) {}
+        virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+        {
+                return ( nIndex < m_xIndexAccess->getCount() );
+        }
+        virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+        {
+                ScVbaShapeRange* pCollectionImpl = dynamic_cast< ScVbaShapeRange* >(m_xParent.get());
+                if ( pCollectionImpl && hasMoreElements() )
+                    return pCollectionImpl->createCollectionObject(  m_xIndexAccess->getByIndex( nIndex++ ) );
+                throw container::NoSuchElementException();
+        }
+
+};
+
+ScVbaShapeRange::ScVbaShapeRange( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< container::XIndexAccess >& xShapes, const uno::Reference< drawing::XDrawPage >& xDrawPage, const uno::Reference< frame::XModel >& xModel  ) : ScVbaShapeRange_BASE( xParent, xContext, xShapes ), m_xDrawPage( xDrawPage ), m_nShapeGroupCount(0), m_xModel( xModel )
+{
+}
+
+// Methods
+void SAL_CALL
+ScVbaShapeRange::Select(  ) throw (uno::RuntimeException)
+{
+    uno::Reference< view::XSelectionSupplier > xSelectSupp( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    xSelectSupp->select( uno::makeAny( getShapes() ) );
+}
+
+uno::Reference< msforms::XShape > SAL_CALL
+ScVbaShapeRange::Group() throw (uno::RuntimeException)
+{
+    uno::Reference< drawing::XShapeGrouper > xShapeGrouper( m_xDrawPage, uno::UNO_QUERY_THROW );
+    uno::Reference< drawing::XShapeGroup > xShapeGroup( xShapeGrouper->group( getShapes() ), uno::UNO_QUERY_THROW );
+    uno::Reference< drawing::XShape > xShape( xShapeGroup, uno::UNO_QUERY_THROW );
+    return uno::Reference< msforms::XShape >( new ScVbaShape( getParent(), mxContext, xShape, getShapes(), m_xModel, office::MsoShapeType::msoGroup ) );
+}
+
+uno::Reference< drawing::XShapes >
+ScVbaShapeRange::getShapes() throw (uno::RuntimeException)
+{
+    if ( !m_xShapes.is() )
+    {
+        uno::Reference< lang::XMultiServiceFactory > xMSF( mxContext->getServiceManager(), uno::UNO_QUERY_THROW );
+        m_xShapes.set( xMSF->createInstance( rtl::OUString::createFromAscii( "com.sun.star.drawing.ShapeCollection" ) ), uno::UNO_QUERY_THROW );
+        sal_Int32 nLen = m_xIndexAccess->getCount();
+        for ( sal_Int32 index = 0; index < nLen; ++index )
+            m_xShapes->add( uno::Reference< drawing::XShape >( m_xIndexAccess->getByIndex( index ), uno::UNO_QUERY_THROW ) );
+
+    }
+    return m_xShapes;
+}
+
+
+void SAL_CALL
+ScVbaShapeRange::IncrementRotation( double Increment ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->IncrementRotation( Increment );
+    }
+}
+
+void SAL_CALL
+ScVbaShapeRange::IncrementLeft( double Increment ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->IncrementLeft( Increment );
+    }
+}
+
+void SAL_CALL
+ScVbaShapeRange::IncrementTop( double Increment ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->IncrementTop( Increment );
+    }
+}
+
+double SAL_CALL ScVbaShapeRange::getHeight() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getHeight( );
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setHeight( double _height ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setHeight( _height );
+    }
+}
+
+double SAL_CALL ScVbaShapeRange::getWidth() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getWidth( );
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setWidth( double _width ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setWidth( _width );
+    }
+}
+
+double SAL_CALL ScVbaShapeRange::getLeft() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getLeft();
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setLeft( double _left ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setLeft( _left );
+    }
+}
+
+double SAL_CALL ScVbaShapeRange::getTop() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getTop();
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setTop( double _top ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setTop( _top );
+    }
+}
+
+uno::Reference< ov::msforms::XLineFormat > SAL_CALL ScVbaShapeRange::getLine() throw (css::uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getLine();
+    }
+    throw uno::RuntimeException();
+}
+
+uno::Reference< ov::msforms::XFillFormat > SAL_CALL ScVbaShapeRange::getFill() throw (css::uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getFill();
+    }
+    throw uno::RuntimeException();
+}
+
+::sal_Bool SAL_CALL ScVbaShapeRange::getLockAspectRatio() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getLockAspectRatio();
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setLockAspectRatio( ::sal_Bool _lockaspectratio ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setLockAspectRatio( _lockaspectratio );
+    }
+}
+
+::sal_Bool SAL_CALL ScVbaShapeRange::getLockAnchor() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getLockAnchor();
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setLockAnchor( ::sal_Bool _lockanchor ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setLockAnchor( _lockanchor );
+    }
+}
+
+::sal_Int32 SAL_CALL ScVbaShapeRange::getRelativeHorizontalPosition() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getRelativeHorizontalPosition();
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setRelativeHorizontalPosition( ::sal_Int32 _relativehorizontalposition ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setRelativeHorizontalPosition( _relativehorizontalposition );
+    }
+}
+
+::sal_Int32 SAL_CALL ScVbaShapeRange::getRelativeVerticalPosition() throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->getRelativeVerticalPosition();
+    }
+    throw uno::RuntimeException();
+}
+
+void SAL_CALL ScVbaShapeRange::setRelativeVerticalPosition( ::sal_Int32 _relativeverticalposition ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        xShape->setRelativeVerticalPosition( _relativeverticalposition );
+    }
+}
+
+uno::Any SAL_CALL ScVbaShapeRange::TextFrame(  ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->TextFrame();
+    }
+    throw uno::RuntimeException();
+}
+
+uno::Any SAL_CALL ScVbaShapeRange::WrapFormat(  ) throw (css::uno::RuntimeException)
+{
+    sal_Int32 nLen = getCount();
+    for ( sal_Int32 index = 1; index <= nLen; ++index )
+    {
+        uno::Reference< msforms::XShape > xShape( Item( uno::makeAny( index ), uno::Any() ), uno::UNO_QUERY_THROW );
+        return xShape->WrapFormat();
+    }
+    throw uno::RuntimeException();
+}
+
+uno::Type SAL_CALL
+ScVbaShapeRange::getElementType() throw (uno::RuntimeException)
+{
+    return msforms::XShape::static_type(0);
+}
+
+uno::Reference< container::XEnumeration > SAL_CALL
+ScVbaShapeRange::createEnumeration() throw (uno::RuntimeException)
+{
+    return new VbShapeRangeEnumHelper( this, m_xIndexAccess );
+}
+
+uno::Any
+ScVbaShapeRange:: createCollectionObject( const css::uno::Any& aSource )
+{
+    uno::Reference< drawing::XShape > xShape( aSource, uno::UNO_QUERY_THROW );
+    // #TODO  #FIXME Shape parent should always be the sheet the shapes belong
+    // to
+    uno::Reference< msforms::XShape > xVbShape( new ScVbaShape( uno::Reference< XHelperInterface >(), mxContext, xShape, getShapes(), m_xModel, ScVbaShape::getType( xShape ) ) );
+        return uno::makeAny( xVbShape );
+}
+
+rtl::OUString&
+ScVbaShapeRange::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaShapeRange") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaShapeRange::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.ShapeRange" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbashapes.cxx b/vbahelper/source/vbahelper/vbashapes.cxx
new file mode 100644
index 0000000..e3e684e
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbashapes.cxx
@@ -0,0 +1,491 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbashapes.cxx,v $
+ * $Revision: 1.3.32.1 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <com/sun/star/container/XNamed.hpp>
+#include <com/sun/star/view/XSelectionSupplier.hpp>
+#include <com/sun/star/text/WrapTextMode.hpp>
+#include <ooo/vba/msforms/XShapeRange.hpp>
+#include <ooo/vba/office/MsoAutoShapeType.hpp>
+#include <ooo/vba/office/MsoTextOrientation.hpp>
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#include <com/sun/star/text/XText.hpp>
+#include <com/sun/star/text/XTextDocument.hpp>
+#include <com/sun/star/text/XTextContent.hpp>
+#include <com/sun/star/text/TextContentAnchorType.hpp>
+#include <com/sun/star/text/HoriOrientation.hpp>
+#include <com/sun/star/text/VertOrientation.hpp>
+#include <com/sun/star/text/RelOrientation.hpp>
+#include <com/sun/star/text/SizeType.hpp>
+#include <com/sun/star/text/WritingMode.hpp>
+#include <com/sun/star/drawing/LineStyle.hpp>
+
+#include <vbahelper/vbahelper.hxx>
+#include <vbahelper/vbashape.hxx>
+#include <vbahelper/vbashapes.hxx>
+#include <vbahelper/vbashaperange.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+class VbShapeEnumHelper : public EnumerationHelper_BASE
+{
+        uno::Reference<msforms::XShapes > m_xParent;
+        uno::Reference<container::XIndexAccess > m_xIndexAccess;
+        sal_Int32 nIndex;
+public:
+    VbShapeEnumHelper( const uno::Reference< msforms::XShapes >& xParent,  const uno::Reference< container::XIndexAccess >& xIndexAccess ) : m_xParent( xParent ), m_xIndexAccess( xIndexAccess ), nIndex( 0 ) {}
+        virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (uno::RuntimeException)
+        {
+                return ( nIndex < m_xIndexAccess->getCount() );
+        }
+        virtual uno::Any SAL_CALL nextElement(  ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+        {
+                ScVbaShapes* pShapes = dynamic_cast< ScVbaShapes* >(m_xParent.get());
+                if ( pShapes && hasMoreElements() )
+                    return pShapes->createCollectionObject(  m_xIndexAccess->getByIndex( nIndex++ ) );
+                throw container::NoSuchElementException();
+        }
+
+};
+
+void ScVbaShapes::initBaseCollection()
+{
+    if ( m_xNameAccess.is() ) // already has NameAccess
+        return;
+    // no NameAccess then use ShapeCollectionHelper
+    XNamedObjectCollectionHelper< drawing::XShape >::XNamedVec mShapes;
+    sal_Int32 nLen = m_xIndexAccess->getCount();
+    mShapes.reserve( nLen );
+    for ( sal_Int32 index=0; index<nLen; ++index )
+        mShapes.push_back( uno::Reference< drawing::XShape >( m_xIndexAccess->getByIndex( index ) , uno::UNO_QUERY ) );
+    uno::Reference< container::XIndexAccess > xShapes( new XNamedObjectCollectionHelper< drawing::XShape >( mShapes ) );
+    m_xIndexAccess.set( xShapes, uno::UNO_QUERY );
+    m_xNameAccess.set( xShapes, uno::UNO_QUERY );
+}
+
+ScVbaShapes::ScVbaShapes( const css::uno::Reference< ov::XHelperInterface >& xParent, const css::uno::Reference< css::uno::XComponentContext >& xContext, const css::uno::Reference< css::container::XIndexAccess > xShapes, const uno::Reference< frame::XModel>& xModel ): ScVbaShapes_BASE( xParent, xContext, xShapes ), m_nNewShapeCount(0), m_xModel( xModel )
+{
+    m_xShapes.set( xShapes, uno::UNO_QUERY_THROW );
+    m_xDrawPage.set( xShapes, uno::UNO_QUERY_THROW );
+    initBaseCollection();
+}
+
+uno::Reference< container::XEnumeration >
+ScVbaShapes::createEnumeration() throw (uno::RuntimeException)
+{
+    return new VbShapeEnumHelper( this,  m_xIndexAccess );
+}
+
+uno::Any
+ScVbaShapes::createCollectionObject( const css::uno::Any& aSource ) throw (uno::RuntimeException)
+{
+    if( aSource.hasValue() )
+    {
+        uno::Reference< drawing::XShape > xShape( aSource, uno::UNO_QUERY_THROW );
+        return uno::makeAny( uno::Reference< msforms::XShape >( new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, m_xModel, ScVbaShape::getType( xShape ) ) ) );
+    }
+    return uno::Any();
+}
+
+uno::Type
+ScVbaShapes::getElementType() throw (uno::RuntimeException)
+{
+    return ooo::vba::msforms::XShape::static_type(0);
+}
+rtl::OUString&
+ScVbaShapes::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("ScVbaShapes") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+ScVbaShapes::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msform.Shapes" ) );
+    }
+    return aServiceNames;
+}
+
+css::uno::Reference< css::container::XIndexAccess >
+ScVbaShapes::getShapesByArrayIndices( const uno::Any& Index  ) throw (uno::RuntimeException)
+{
+    if ( Index.getValueTypeClass() != uno::TypeClass_SEQUENCE )
+        throw uno::RuntimeException();
+
+    uno::Reference< script::XTypeConverter > xConverter = getTypeConverter(mxContext);
+    uno::Any aConverted;
+    aConverted = xConverter->convertTo( Index, getCppuType((uno::Sequence< uno::Any >*)0) );
+
+    uno::Sequence< uno::Any > sIndices;
+    aConverted >>= sIndices;
+    XNamedObjectCollectionHelper< drawing::XShape >::XNamedVec mShapes;
+    sal_Int32 nElems = sIndices.getLength();
+    for( sal_Int32 index = 0; index < nElems; ++index )
+    {
+        uno::Reference< drawing::XShape > xShape;
+        if ( sIndices[ index ].getValueTypeClass() == uno::TypeClass_STRING )
+        {
+            rtl::OUString sName;
+            sIndices[ index ] >>= sName;
+            xShape.set( m_xNameAccess->getByName( sName ), uno::UNO_QUERY );
+        }
+        else
+        {
+            sal_Int32 nIndex = 0;
+            sIndices[ index ] >>= nIndex;
+            // adjust for 1 based mso indexing
+            xShape.set( m_xIndexAccess->getByIndex( nIndex - 1 ), uno::UNO_QUERY );
+
+        }
+        // populate map with drawing::XShapes
+        if ( xShape.is() )
+            mShapes.push_back( xShape );
+    }
+    uno::Reference< container::XIndexAccess > xIndexAccess( new XNamedObjectCollectionHelper< drawing::XShape >( mShapes ) );
+    return xIndexAccess;
+}
+
+uno::Any SAL_CALL
+ScVbaShapes::Item( const uno::Any& Index, const uno::Any& Index2 ) throw (uno::RuntimeException)
+{
+    // I don't think we need to support Array of indices for shapes
+/*
+    if ( Index.getValueTypeClass() == uno::TypeClass_SEQUENCE )
+    {
+        uno::Reference< container::XIndexAccess > xIndexAccess( getShapesByArrayIndices( Index ) );
+        // return new collection instance
+        uno::Reference< XCollection > xShapesCollection(  new ScVbaShapes( this->getParent(), mxContext, xIndexAccess ) );
+        return uno::makeAny( xShapesCollection );
+    }
+*/
+    return 	ScVbaShapes_BASE::Item( Index, Index2 );
+}
+
+uno::Reference< msforms::XShapeRange > SAL_CALL
+ScVbaShapes::Range( const uno::Any& shapes ) throw (css::uno::RuntimeException)
+{
+    // shapes, can be an index or an array of indices
+    uno::Reference< container::XIndexAccess > xShapes;
+    if ( shapes.getValueTypeClass() == uno::TypeClass_SEQUENCE )
+        xShapes = getShapesByArrayIndices( shapes );
+    else
+    {
+        // wrap single index into a sequence
+        uno::Sequence< uno::Any > sIndices(1);
+        sIndices[ 0 ] = shapes;
+        uno::Any aIndex;
+        aIndex <<= sIndices;
+        xShapes = getShapesByArrayIndices( aIndex );
+    }
+    return new ScVbaShapeRange(  getParent(), mxContext, xShapes, m_xDrawPage, m_xModel );
+}
+
+void SAL_CALL
+ScVbaShapes::SelectAll() throw (uno::RuntimeException)
+{
+    uno::Reference< view::XSelectionSupplier > xSelectSupp( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    try
+    {
+        xSelectSupp->select( uno::makeAny( m_xShapes ) );
+    }
+    // viewuno.cxx ScTabViewObj::select will throw IllegalArgumentException
+    // if one of the shapes is no 'markable' e.g. a button
+    // the method still works
+    catch( lang::IllegalArgumentException& )
+    {
+    }
+}
+
+uno::Reference< drawing::XShape >
+ScVbaShapes::createShape( rtl::OUString service ) throw (css::uno::RuntimeException)
+{
+    uno::Reference< lang::XMultiServiceFactory > xMSF( m_xModel, uno::UNO_QUERY_THROW );
+    uno::Reference< drawing::XShape > xShape( xMSF->createInstance( service ), uno::UNO_QUERY_THROW );
+    return xShape;
+}
+
+uno::Any
+ScVbaShapes::AddRectangle( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, uno::Any aRange ) throw (css::uno::RuntimeException)
+{
+    rtl::OUString sCreateShapeName( rtl::OUString::createFromAscii( "com.sun.star.drawing.RectangleShape" ) );
+    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( startX );
+    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( startY );
+    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( nLineWidth );
+    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( nLineHeight );
+
+    uno::Reference< drawing::XShape > xShape( createShape( sCreateShapeName ), uno::UNO_QUERY_THROW );
+    m_xShapes->add( xShape );
+
+    rtl::OUString sName = createName( rtl::OUString::createFromAscii( "Rectangle" ) );
+    setDefaultShapeProperties( xShape );
+    setShape_NameProperty( xShape, sName );
+
+    awt::Point aMovePositionIfRange(0, 0);
+    awt::Point position;
+    position.X = nXPos - aMovePositionIfRange.X;
+    position.Y = nYPos - aMovePositionIfRange.Y;
+    xShape->setPosition( position );
+
+    awt::Size size;
+    size.Height = nHeight;
+    size.Width = nWidth;
+    xShape->setSize( size );
+
+    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, m_xModel, ScVbaShape::getType( xShape ) );
+    pScVbaShape->setRange( aRange );
+    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
+}
+
+uno::Any
+ScVbaShapes::AddEllipse( sal_Int32 startX, sal_Int32 startY, sal_Int32 nLineWidth, sal_Int32 nLineHeight, uno::Any aRange ) throw (css::uno::RuntimeException)
+{
+    rtl::OUString sCreateShapeName( rtl::OUString::createFromAscii( "com.sun.star.drawing.EllipseShape" ) );
+    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( startX );
+    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( startY );
+    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( nLineWidth );
+    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( nLineHeight );
+
+    uno::Reference< drawing::XShape > xShape( createShape( sCreateShapeName ), uno::UNO_QUERY_THROW );
+    m_xShapes->add( xShape );
+
+    awt::Point aMovePositionIfRange( 0, 0 );
+    //TODO helperapi using a writer document
+    /*
+    XDocument xDocument = (XDocument)getParent();
+    if (AnyConverter.isVoid(_aRange))
+    {
+        _aRange = xDocument.Range(new Integer(0), new Integer(1));
+        // Top&Left in Word is Top&Left of the paper and not the writeable area.
+        aMovePositionIfRange = calculateTopLeftMargin((HelperInterfaceAdaptor)xDocument);
+    }
+
+    setShape_AnchorTypeAndRangeProperty(xShape, _aRange);
+    */
+    rtl::OUString name = createName( rtl::OUString::createFromAscii( "Oval" ));
+    setDefaultShapeProperties(xShape);
+    setShape_NameProperty(xShape, name);
+
+    awt::Point position;
+    position.X = nXPos - aMovePositionIfRange.X;
+    position.Y = nYPos - aMovePositionIfRange.Y;
+    xShape->setPosition(position);
+
+    awt::Size size;
+    size.Height = nHeight;
+    size.Width = nWidth;
+    xShape->setSize(size);
+
+    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, m_xModel, ScVbaShape::getType( xShape ) );
+    pScVbaShape->setRange( aRange );
+    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
+}
+
+//helpeapi calc
+uno::Any SAL_CALL
+ScVbaShapes::AddLine( sal_Int32 StartX, sal_Int32 StartY, sal_Int32 endX, sal_Int32 endY ) throw (uno::RuntimeException)
+{
+    sal_Int32 nLineWidth = endX - StartX;
+    sal_Int32 nLineHeight = endY - StartY;
+
+    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( nLineHeight );
+    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( nLineWidth );
+    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( StartX );
+    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( StartY );
+
+    uno::Reference< drawing::XShape > xShape( createShape( rtl::OUString::createFromAscii("com.sun.star.drawing.LineShape") ), uno::UNO_QUERY_THROW );
+    m_xShapes->add( xShape );
+
+    awt::Point aMovePositionIfRange( 0, 0 );
+
+    rtl::OUString name = createName( rtl::OUString::createFromAscii( "Line" ) );
+    setDefaultShapeProperties(xShape);
+    setShape_NameProperty(xShape, name);
+
+    awt::Point position;
+    position.X = nXPos - aMovePositionIfRange.X;
+    position.Y = nYPos - aMovePositionIfRange.Y;
+    xShape->setPosition(position);
+
+    awt::Size size;
+    size.Height = nHeight;
+    size.Width = nWidth;
+    xShape->setSize(size);
+
+    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, m_xModel, ScVbaShape::getType( xShape ) );
+    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
+}
+
+uno::Any SAL_CALL
+ScVbaShapes::AddShape( sal_Int32 _nType, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (uno::RuntimeException)
+{
+    uno::Any _aAnchor;
+    if (_nType == office::MsoAutoShapeType::msoShapeRectangle)
+    {
+        return AddRectangle(_nLeft, _nTop, _nWidth, _nHeight, _aAnchor);
+    }
+    else if (_nType == office::MsoAutoShapeType::msoShapeOval)
+    {
+        return AddEllipse(_nLeft, _nTop, _nWidth, _nHeight, _aAnchor);
+    }
+    return uno::Any();
+}
+
+uno::Any SAL_CALL
+ScVbaShapes::AddTextbox( sal_Int32 _nOrientation, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (uno::RuntimeException)
+{
+    uno::Reference< lang::XServiceInfo > xServiceInfo( m_xModel, uno::UNO_QUERY_THROW );
+    if( xServiceInfo->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.text.TextDocument" ) ) ) )
+    {
+        return AddTextboxInWriter( _nOrientation, _nLeft, _nTop, _nWidth, _nHeight );
+    }
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+uno::Any
+ScVbaShapes::AddTextboxInWriter( sal_Int32 /*_nOrientation*/, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (uno::RuntimeException)
+{
+    rtl::OUString sCreateShapeName( rtl::OUString::createFromAscii( "com.sun.star.drawing.TextShape" ) );
+    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( _nLeft );
+    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( _nTop );
+    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( _nWidth );
+    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( _nHeight );
+
+    uno::Reference< drawing::XShape > xShape( createShape( sCreateShapeName ), uno::UNO_QUERY_THROW );
+    m_xShapes->add( xShape );
+
+    setDefaultShapeProperties(xShape);
+
+    rtl::OUString sName =  createName( rtl::OUString::createFromAscii( "Text Box") );
+    setShape_NameProperty( xShape, sName );
+
+    awt::Size size;
+    size.Height = nHeight;
+    size.Width = nWidth;
+    xShape->setSize(size);
+
+    uno::Reference< beans::XPropertySet > xShapeProps( xShape, uno::UNO_QUERY_THROW );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "AnchorType" ), uno::makeAny( text::TextContentAnchorType_AT_PAGE ) );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "HoriOrientRelation" ), uno::makeAny( text::RelOrientation::PAGE_LEFT ) );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "HoriOrient" ), uno::makeAny( text::HoriOrientation::NONE ) );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "HoriOrientPosition" ), uno::makeAny( nXPos ) );
+
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "VertOrientRelation" ), uno::makeAny( text::RelOrientation::PAGE_FRAME ) );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "VertOrient" ), uno::makeAny( text::VertOrientation::NONE ) );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "VertOrientPosition" ), uno::makeAny( nYPos ) );
+
+    // set to visible
+    drawing::LineStyle aLineStyle = drawing::LineStyle_SOLID;
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "LineStyle" ), uno::makeAny( aLineStyle ) );
+    // set to font
+    sal_Int16 nLayerId = 1;
+    rtl::OUString sLayerName = rtl::OUString::createFromAscii("Heaven");
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "LayerID" ), uno::makeAny( nLayerId ) );
+    xShapeProps->setPropertyValue( rtl::OUString::createFromAscii( "LayerName" ), uno::makeAny( sLayerName ) );
+
+
+    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, m_xModel, ScVbaShape::getType( xShape ) );
+    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
+}
+
+uno::Any
+ScVbaShapes::AddShape( const rtl::OUString& sService, const rtl::OUString& sName, sal_Int32 _nLeft, sal_Int32 _nTop, sal_Int32 _nWidth, sal_Int32 _nHeight ) throw (uno::RuntimeException)
+{
+    sal_Int32 nXPos = Millimeter::getInHundredthsOfOneMillimeter( _nLeft );
+    sal_Int32 nYPos = Millimeter::getInHundredthsOfOneMillimeter( _nTop );
+    sal_Int32 nWidth = Millimeter::getInHundredthsOfOneMillimeter( _nWidth );
+    sal_Int32 nHeight = Millimeter::getInHundredthsOfOneMillimeter( _nHeight );
+
+    uno::Reference< drawing::XShape > xShape( createShape( sService ), uno::UNO_QUERY_THROW );
+    m_xShapes->add( xShape );
+
+    setDefaultShapeProperties(xShape);
+    setShape_NameProperty( xShape, sName );
+
+    awt::Point aMovePositionIfRange( 0, 0 );
+    awt::Point position;
+    position.X = nXPos - aMovePositionIfRange.X;
+    position.Y = nYPos - aMovePositionIfRange.Y;
+    xShape->setPosition(position);
+
+    awt::Size size;
+    size.Height = nHeight;
+    size.Width = nWidth;
+    xShape->setSize(size);
+
+    ScVbaShape *pScVbaShape = new ScVbaShape( getParent(), mxContext, xShape, m_xShapes, m_xModel, ScVbaShape::getType( xShape ) );
+    return uno::makeAny( uno::Reference< msforms::XShape > ( pScVbaShape ) );
+}
+void
+ScVbaShapes::setDefaultShapeProperties( uno::Reference< drawing::XShape > xShape ) throw (uno::RuntimeException)
+{
+    uno::Reference< beans::XPropertySet > xPropertySet( xShape, uno::UNO_QUERY_THROW );
+    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillStyle" ), uno::makeAny( rtl::OUString::createFromAscii( "SOLID" ) ) );
+    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "FillColor"), uno::makeAny( sal_Int32(0xFFFFFF) )  );
+    xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextWordWrap"), uno::makeAny( text::WrapTextMode_THROUGHT )  );
+    //not find in OOo2.3
+    //xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "Opaque"), uno::makeAny( sal_True )  );
+}
+
+void
+ScVbaShapes::setShape_NameProperty( uno::Reference< css::drawing::XShape > xShape, rtl::OUString sName )
+{
+    uno::Reference< beans::XPropertySet > xPropertySet( xShape, uno::UNO_QUERY_THROW );
+    try
+    {
+        xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "Name" ), uno::makeAny( sName ) );
+    }
+    catch( script::BasicErrorException e )
+    {
+    }
+}
+
+rtl::OUString
+ScVbaShapes::createName( rtl::OUString sName )
+{
+    sal_Int32 nActNumber = 1 + m_nNewShapeCount;
+    m_nNewShapeCount++;
+    sName += rtl::OUString::valueOf( nActNumber );
+    return sName;
+}
+
+#if 0
+//TODO helperapi using a writer document
+awt::Point
+calculateTopLeftMargin( uno::Reference< XHelperInterface > xDocument )
+{
+    awt::Point aPoint( 0, 0 );
+    uno::Reference< frame::XModel > xModel( xDocument, uno::UNO_QUERY_THROW );
+    return awt::Point();
+}
+#endif
diff --git a/vbahelper/source/vbahelper/vbatextframe.cxx b/vbahelper/source/vbahelper/vbatextframe.cxx
new file mode 100644
index 0000000..a3c4625
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbatextframe.cxx
@@ -0,0 +1,168 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: vbatextframe.cxx,v $
+ * $Revision: 1.3 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/helperdecl.hxx>
+#include <com/sun/star/drawing/TextFitToSizeType.hpp>
+#include <com/sun/star/text/XText.hpp>
+#include <vbahelper/vbatextframe.hxx>
+
+using namespace ::ooo::vba;
+using namespace ::com::sun::star;
+
+VbaTextFrame::VbaTextFrame( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, uno::Reference< drawing::XShape > xShape ) : VbaTextFrame_BASE( xParent, xContext ), m_xShape( xShape )
+{
+    m_xPropertySet.set( m_xShape, uno::UNO_QUERY_THROW );
+}
+
+void
+VbaTextFrame::setAsMSObehavior()
+{
+    //set property TextWordWrap default as False.
+    // TextFitToSize control the text content. it seems we should set the default as False.
+    // com.sun.star.drawing.TextFitToSizeType.NONE
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextWordWrap" ), uno::makeAny( sal_False ) );
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextFitToSize" ), uno::makeAny( drawing::TextFitToSizeType_NONE ) );
+}
+
+sal_Int32 VbaTextFrame::getMargin( rtl::OUString sMarginType )
+{
+    sal_Int32 nMargin = 0;
+    uno::Any aMargin = m_xPropertySet->getPropertyValue( sMarginType );
+    aMargin >>= nMargin;
+    return nMargin;
+}
+
+void VbaTextFrame::setMargin( rtl::OUString sMarginType, float fMargin )
+{
+    sal_Int32 nMargin = Millimeter::getInHundredthsOfOneMillimeter( fMargin );
+    m_xPropertySet->setPropertyValue( sMarginType, uno::makeAny( nMargin ) );
+}
+
+// Attributes
+sal_Bool SAL_CALL
+VbaTextFrame::getAutoSize() throw (uno::RuntimeException)
+{
+    // I don't know why, but in OOo, TextAutoGrowHeight is the property control autosize. not TextFitToSize.
+    // TextFitToSize control the text content.
+    // and in mso, there isnot option TextWordWrap which means auto wrap. the default is False.
+    sal_Bool bAutosize = sal_False;
+    uno::Any aTextAutoGrowHeight = m_xPropertySet->getPropertyValue( rtl::OUString::createFromAscii( "TextAutoGrowHeight" ) );
+    aTextAutoGrowHeight >>= bAutosize;
+    return bAutosize;
+}
+
+void SAL_CALL
+VbaTextFrame::setAutoSize( sal_Bool _autosize ) throw (uno::RuntimeException)
+{
+    setAsMSObehavior();
+    m_xPropertySet->setPropertyValue( rtl::OUString::createFromAscii( "TextAutoGrowHeight" ), uno::makeAny( _autosize ) );
+}
+
+float SAL_CALL
+VbaTextFrame::getMarginBottom() throw (uno::RuntimeException)
+{
+    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextLowerDistance" ) );
+    float fMargin = (float)Millimeter::getInPoints( nMargin );
+    return fMargin;
+}
+
+void SAL_CALL
+VbaTextFrame::setMarginBottom( float _marginbottom ) throw (uno::RuntimeException)
+{
+    setMargin( rtl::OUString::createFromAscii( "TextLowerDistance" ), _marginbottom );
+}
+
+float SAL_CALL
+VbaTextFrame::getMarginTop() throw (uno::RuntimeException)
+{
+    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextUpperDistance" ) );
+    float fMargin = (float)Millimeter::getInPoints( nMargin );
+    return fMargin;
+}
+
+void SAL_CALL
+VbaTextFrame::setMarginTop( float _margintop ) throw (uno::RuntimeException)
+{
+    setMargin( rtl::OUString::createFromAscii( "TextUpperDistance" ), _margintop );
+}
+
+float SAL_CALL
+VbaTextFrame::getMarginLeft() throw (uno::RuntimeException)
+{
+    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextLeftDistance" ) );
+    float fMargin = (float)Millimeter::getInPoints( nMargin );
+    return fMargin;
+}
+
+void SAL_CALL
+VbaTextFrame::setMarginLeft( float _marginleft ) throw (uno::RuntimeException)
+{
+    setMargin( rtl::OUString::createFromAscii( "TextLeftDistance" ), _marginleft );
+}
+
+float SAL_CALL
+VbaTextFrame::getMarginRight() throw (uno::RuntimeException)
+{
+    sal_Int32 nMargin = getMargin( rtl::OUString::createFromAscii( "TextRightDistance" ) );
+    float fMargin = (float)Millimeter::getInPoints( nMargin );
+    return fMargin;
+}
+
+void SAL_CALL
+VbaTextFrame::setMarginRight( float _marginright ) throw (uno::RuntimeException)
+{
+    setMargin( rtl::OUString::createFromAscii( "TextRightDistance" ), _marginright );
+}
+
+
+// Methods
+uno::Any SAL_CALL
+VbaTextFrame::Characters() throw (uno::RuntimeException)
+{
+    throw uno::RuntimeException( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Not implemented") ), uno::Reference< uno::XInterface >() );
+}
+
+rtl::OUString&
+VbaTextFrame::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("VbaTextFrame") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+VbaTextFrame::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.msforms.TextFrame" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/source/vbahelper/vbawindowbase.cxx b/vbahelper/source/vbahelper/vbawindowbase.cxx
new file mode 100644
index 0000000..f99f7a3
--- /dev/null
+++ b/vbahelper/source/vbahelper/vbawindowbase.cxx
@@ -0,0 +1,180 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ *
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile:
+ * $Revision:
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#include <vbahelper/helperdecl.hxx>
+#include <vbahelper/vbawindowbase.hxx>
+#include <com/sun/star/awt/XWindow.hpp>
+#include <com/sun/star/awt/XWindow2.hpp>
+#include <com/sun/star/awt/PosSize.hpp>
+
+using namespace ::com::sun::star;
+using namespace ::ooo::vba;
+
+VbaWindowBase::VbaWindowBase( const uno::Reference< XHelperInterface >& xParent, const uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< frame::XModel >& xModel ) : WindowBaseImpl_BASE( xParent, xContext ), m_xModel( xModel )
+{
+}
+
+VbaWindowBase::VbaWindowBase( uno::Sequence< uno::Any > const & args, uno::Reference< uno::XComponentContext > const & xContext )
+        : WindowBaseImpl_BASE( getXSomethingFromArgs< XHelperInterface >( args, 0 ), xContext ),
+          m_xModel( getXSomethingFromArgs< frame::XModel >( args, 1 ) )
+{
+}
+
+sal_Bool SAL_CALL
+VbaWindowBase::getVisible() throw (uno::RuntimeException)
+{
+    sal_Bool bVisible = sal_True;
+    uno::Reference< frame::XController > xController( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
+    uno::Reference< css::awt::XWindow2 > xWindow2 (xWindow, uno::UNO_QUERY_THROW );
+    if( xWindow2.is() )
+    {
+        bVisible = xWindow2->isVisible();
+    }
+    return bVisible;
+}
+
+void SAL_CALL
+VbaWindowBase::setVisible(sal_Bool _visible) throw (uno::RuntimeException)
+{
+    uno::Reference< frame::XController > xController( m_xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
+    if( xWindow.is() )
+    {
+        xWindow->setVisible( _visible );
+    }
+}
+
+css::awt::Rectangle getPosSize( const uno::Reference< frame::XModel >& xModel )
+{
+    css::awt::Rectangle aRect;
+    uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
+    if( xWindow.is() )
+    {
+        aRect = xWindow->getPosSize();
+    }
+    return aRect;
+}
+
+void setPosSize( const uno::Reference< frame::XModel >& xModel, sal_Int32 nValue, USHORT nFlag )
+{
+    uno::Reference< frame::XController > xController( xModel->getCurrentController(), uno::UNO_QUERY_THROW );
+    uno::Reference< css::awt::XWindow > xWindow (xController->getFrame()->getContainerWindow(), uno::UNO_QUERY_THROW );
+    if( xWindow.is() )
+    {
+        css::awt::Rectangle aRect = xWindow->getPosSize();
+        switch( nFlag )
+        {
+            case css::awt::PosSize::X:
+                xWindow->setPosSize( nValue, aRect.Y,	0, 0, css::awt::PosSize::X );
+                break;
+            case css::awt::PosSize::Y:
+                xWindow->setPosSize( aRect.X, nValue,	0, 0, css::awt::PosSize::Y );
+                break;
+            case css::awt::PosSize::WIDTH:
+                xWindow->setPosSize( 0, 0,	nValue, aRect.Height, css::awt::PosSize::WIDTH );
+                break;
+            case css::awt::PosSize::HEIGHT:
+                xWindow->setPosSize( 0, 0,	aRect.Width, nValue, css::awt::PosSize::HEIGHT );
+                break;
+            default:
+                break;
+        }
+    }
+}
+
+sal_Int32 SAL_CALL
+VbaWindowBase::getHeight() throw (uno::RuntimeException)
+{
+    css::awt::Rectangle aRect = getPosSize(m_xModel);
+    return aRect.Height;
+}
+
+void SAL_CALL
+VbaWindowBase::setHeight( sal_Int32 _height ) throw (uno::RuntimeException)
+{
+    setPosSize(m_xModel, _height, css::awt::PosSize::HEIGHT);
+}
+
+sal_Int32 SAL_CALL
+VbaWindowBase::getLeft() throw (uno::RuntimeException)
+{
+    css::awt::Rectangle aRect = getPosSize(m_xModel);
+    return aRect.X;
+}
+
+void SAL_CALL
+VbaWindowBase::setLeft( sal_Int32 _left ) throw (uno::RuntimeException)
+{
+    setPosSize(m_xModel, _left, css::awt::PosSize::X);
+}
+sal_Int32 SAL_CALL
+VbaWindowBase::getTop() throw (uno::RuntimeException)
+{
+    css::awt::Rectangle aRect = getPosSize(m_xModel);
+    return aRect.Y;
+}
+
+void SAL_CALL
+VbaWindowBase::setTop( sal_Int32 _top ) throw (uno::RuntimeException)
+{
+    setPosSize(m_xModel, _top, css::awt::PosSize::Y);
+}
+sal_Int32 SAL_CALL
+VbaWindowBase::getWidth() throw (uno::RuntimeException)
+{
+    css::awt::Rectangle aRect = getPosSize(m_xModel);
+    return aRect.Width;
+}
+
+void SAL_CALL
+VbaWindowBase::setWidth( sal_Int32 _width ) throw (uno::RuntimeException)
+{
+    setPosSize(m_xModel, _width, css::awt::PosSize::WIDTH);
+}
+
+rtl::OUString&
+VbaWindowBase::getServiceImplName()
+{
+    static rtl::OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("VbaWindowBase") );
+    return sImplName;
+}
+
+uno::Sequence< rtl::OUString >
+VbaWindowBase::getServiceNames()
+{
+    static uno::Sequence< rtl::OUString > aServiceNames;
+    if ( aServiceNames.getLength() == 0 )
+    {
+        aServiceNames.realloc( 1 );
+        aServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("ooo.vba.VbaWindowBase" ) );
+    }
+    return aServiceNames;
+}
diff --git a/vbahelper/util/makefile.mk b/vbahelper/util/makefile.mk
new file mode 100644
index 0000000..4b8e493
--- /dev/null
+++ b/vbahelper/util/makefile.mk
@@ -0,0 +1,104 @@
+#*************************************************************************
+#
+# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+#
+# Copyright 2008 by Sun Microsystems, Inc.
+#
+# OpenOffice.org - a multi-platform office productivity suite
+#
+# $RCSfile: makefile.mk,v $
+#
+# $Revision: 1.24 $
+#
+# This file is part of OpenOffice.org.
+#
+# OpenOffice.org is free software: you can redistribute it and/or modify
+# it under the terms of the GNU Lesser General Public License version 3
+# only, as published by the Free Software Foundation.
+#
+# OpenOffice.org is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU Lesser General Public License version 3 for more details
+# (a copy is included in the LICENSE file that accompanied this code).
+#
+# You should have received a copy of the GNU Lesser General Public License
+# version 3 along with OpenOffice.org.  If not, see
+# <http://www.openoffice.org/license.html>
+# for a copy of the LGPLv3 License.
+#
+#*************************************************************************
+
+PRJ=..
+
+PRJNAME=vbahelper
+TARGET=vbahelper
+
+# --- Settings ---------------------------------------------------
+
+.INCLUDE :  settings.mk
+
+
+TARGET_HELPER=vbahelper
+
+LIB1TARGET=     $(SLB)$/$(TARGET).lib
+LIB1FILES=$(SLB)$/$(TARGET)bits.lib
+
+SHL1TARGET= $(TARGET_HELPER)$(DLLPOSTFIX)
+
+
+# dynamic libraries
+SHL1STDLIBS=       \
+        $(CPPULIB) \
+        $(COMPHELPERLIB) \
+        $(CPPUHELPERLIB) \
+        $(BASICLIB) \
+        $(TOOLSLIB) \
+        $(SALLIB)\
+        $(SFXLIB)	\
+        $(SVTOOLLIB)    \
+        $(SVLLIB) \
+        $(VCLLIB) \
+        $(SVTOOLLIB)    \
+        $(TKLIB) \
+        $(SVXMSFILTERLIB) \
+
+SHL1DEPN=
+SHL1IMPLIB= i$(TARGET_HELPER)
+SHL1USE_EXPORTS=name
+SHL1LIBS=$(LIB1TARGET)
+
+SHL1DEF=$(MISC)$/$(SHL1TARGET).def
+
+DEF1NAME=$(SHL1TARGET)
+DEFLIB1NAME=$(TARGET)
+
+TARGET_MSFORMS=msforms
+SHL2TARGET=$(TARGET_MSFORMS)$(DLLPOSTFIX).uno
+SHL2IMPLIB=     i$(TARGET_MSFORMS)
+
+SHL2VERSIONMAP=$(TARGET_MSFORMS).map
+SHL2DEF=$(MISC)$/$(SHL2TARGET).def
+DEF2NAME=$(SHL2TARGET)
+SHL2STDLIBS= \
+                $(CPPUHELPERLIB) \
+                $(CPPULIB) \
+                $(COMPHELPERLIB) \
+                $(SVLIB) \
+                $(TOOLSLIB) \
+                $(SALLIB)\
+        $(VBAHELPERLIB) \
+                $(SFXLIB)       \
+                $(SVXLIB)       \
+                $(SVTOOLLIB)    \
+                $(SVLLIB) \
+        $(VCLLIB) \
+        $(TKLIB) \
+                $(BASICLIB) \
+
+SHL2DEPN=$(SHL1TARGETN)
+SHL2LIBS=$(SLB)$/$(TARGET_MSFORMS).lib
+
+# --- Targets -----------------------------------------------------------
+
+.INCLUDE :  target.mk
diff --git a/vbahelper/util/msforms.map b/vbahelper/util/msforms.map
new file mode 100644
index 0000000..737cddb
--- /dev/null
+++ b/vbahelper/util/msforms.map
@@ -0,0 +1,9 @@
+OOO_1.1 {
+    global:
+        component_getImplementationEnvironment;
+        component_getFactory;
+        component_writeInfo;
+
+    local:
+        *;
+};
-- 
1.7.0.1

