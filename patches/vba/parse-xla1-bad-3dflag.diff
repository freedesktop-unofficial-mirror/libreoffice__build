diff --git sc/source/core/tool/address.cxx sc/source/core/tool/address.cxx
index e518b27..8966a96 100644
--- sc/source/core/tool/address.cxx
+++ sc/source/core/tool/address.cxx
@@ -235,7 +235,7 @@ lcl_ScRange_Parse_XL_Header( ScRange& r,
                              USHORT& nFlags )
 {
     const sal_Unicode* startTabs, *start = p;
-
+    USHORT nSaveFlags = nFlags;
     // Is this an external reference ?
     rStartTabName.Erase();
     rEndTabName.Erase();
@@ -287,7 +287,13 @@ lcl_ScRange_Parse_XL_Header( ScRange& r,
         }
 
         if( *p++ != '!' )
+        {
+            // bit of a hack ( in fact for a1:d11 ) passed in above
+            // the first tabname will be assigned a1 ??
+            // In anycase if we get here we need to reset the flags ( 
+            nFlags = nSaveFlags;
             return start;   // syntax error
+        }
     }
     else
     {
@@ -614,7 +620,12 @@ lcl_ScRange_Parse_XL_A1( ScRange& r,
 {
     const sal_Unicode* tmp1, *tmp2;
     String aExternDocName, aStartTabName, aEndTabName; // for external link table
-    USHORT nFlags = SCA_VALID | SCA_VALID_TAB, nFlags2 = SCA_VALID_TAB2;
+
+    // nFlags 2 is always shifted << 4 which would imply 
+    // SCA_VALID_TAB2 should be SCA_VALID_TAB ( which would ensure 
+    // Range references have the correct flags set when ScRange::ParseAny 
+    // is called
+    USHORT nFlags = SCA_VALID | SCA_VALID_TAB, nFlags2 = SCA_VALID_TAB;
 
 #if 0
     {
