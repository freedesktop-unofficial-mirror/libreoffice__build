Index: basic/source/runtime/step0.cxx
===================================================================
RCS file: /cvs/script/basic/source/runtime/step0.cxx,v
retrieving revision 1.21
diff -u -r1.21 step0.cxx
--- basic/source/runtime/step0.cxx	7 Sep 2005 21:42:01 -0000	1.21
+++ basic/source/runtime/step0.cxx	10 Oct 2005 09:21:22 -0000
@@ -52,6 +52,10 @@
 
 #include <algorithm>
 
+#ifdef ENABLE_VBA
+bool getDefaultPropName( SbUnoObject* pVar, String& sDfltProp );
+#endif //ENABLE_VBA
+
 #pragma SW_SEGMENT_CLASS( SBRUNTIME, SBRUNTIME_CODE )
 
 void SbiRuntime::StepNOP()
@@ -213,6 +218,42 @@
 		n = refVar->GetFlags();
 		refVar->SetFlag( SBX_WRITE );
 	}
+#ifdef ENABLE_VBA
+	bool bVBAInterop =  SbiRuntime::isVBAEnabled(); 
+
+	// if left side arg is an object or variant and right handside isn't 
+	// either an object or a variant then try and see if a default 
+	// property exists.
+	// to use e.g. Range{"A1") = 34
+	// could equate to Range("A1").Value = 34 
+	// Note: getDefaultPropName() returns the name of the default property
+	//	also the object could change the name of it's default property
+	//	depending on its state so don't cache it. 
+	if ( bVBAInterop
+		&& ( refVar->GetType() == SbxOBJECT || refVar->GetType() == SbxVARIANT )
+		&& ( refVal->GetType() !=  SbxOBJECT ||  refVal->GetType() != SbxVARIANT )
+	)
+	{
+		SbxObject* pObj = PTR_CAST(SbxObject,(SbxVariable*) refVar);
+		if ( !pObj )
+		{
+			SbxBase* pObjVarObj = refVar->GetObject();
+			pObj = PTR_CAST(SbxObject,pObjVarObj);
+		}	
+		if ( pObj && pObj->ISA(SbUnoObject) )
+		{
+			SbUnoObject* pUnoObj = PTR_CAST(SbUnoObject,(SbxObject*)pObj);	
+			String sDfltPropName;
+			if ( getDefaultPropName( pUnoObj, sDfltPropName ) )
+			{
+				SbxVariable* defaultProp = pUnoObj->Find( sDfltPropName , SbxCLASS_PROPERTY );
+				if ( defaultProp )
+					refVar = defaultProp;
+			}
+		}
+	}
+#endif //ENABLE_VBA
+
 	*refVar = *refVal;
 	// #67607 Uno-Structs kopieren
 	checkUnoStructCopy( refVal, refVar );
--- basic.orig/source/classes/sbunoobj.cxx	2005-10-06 23:48:06.000000000 +0100
+++ basic/source/classes/sbunoobj.cxx	2005-10-10 10:25:20.000000000 +0100
@@ -137,6 +137,35 @@
 static OUString defaultNameSpace( RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.") );
 static OUString defaultNameSpaceParent( RTL_CONSTASCII_USTRINGPARAM("org.openoffice") );
 
+#ifdef ENABLE_VBA
+// Gets the default property for an uno object. Note: There is some 
+// redirection built in. The property "_$DefaultProp" specifies the name
+// of the default property. This allows the implementing object to change
+// the name of the default property depending on its state.
+
+bool getDefaultPropName( SbUnoObject* pUnoObj, String& sDfltProp )
+{
+	OUString sName;
+	bool result = false;
+	Any aUnoObj = pUnoObj->getUnoAny();
+	Reference< XPropertySet > xProps( aUnoObj, UNO_QUERY );	
+	if ( xProps.is() )
+	{
+		try
+		{
+			if ( xProps->getPropertyValue( OUString( RTL_CONSTASCII_USTRINGPARAM( "_$DefaultProp" ) ) ) >>= sName )
+			{
+				sDfltProp = sName;
+				result = true;
+			}
+		}
+		catch( Exception& e )
+		{
+		}// swallow exceptions
+	}
+	return result;
+}
+#endif // ENABLE_VBA
 
 Reference< XComponentContext > getComponentContext_Impl( void )
 {
@@ -551,6 +572,20 @@
 			// SbUnoObject instanzieren
 			String aName;
 			SbUnoObject* pSbUnoObject = new SbUnoObject( aName, aValue );
+#ifdef ENABLE_VBA
+			String sDfltPropName;
+			if ( getDefaultPropName( pSbUnoObject, sDfltPropName ) )
+			{
+				SbxVariable* pDefaultProp = pSbUnoObject->Find( 
+					String ( sDfltPropName ), SbxCLASS_PROPERTY );
+				if ( pDefaultProp )
+				{
+					SbUnoProperty* pProp = PTR_CAST(SbUnoProperty,pDefaultProp);
+					if (  pProp )
+						pSbUnoObject->SetDfltProperty( pProp );
+				} 
+			}
+#endif //ENABLE_VBA
 			SbxObjectRef xWrapper = (SbxObject*)pSbUnoObject;
 
 			// #51475 Wenn das Objekt ungueltig ist null liefern
