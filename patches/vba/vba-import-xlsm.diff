diff --git offapi/com/sun/star/document/XVBAImporter.idl offapi/com/sun/star/document/XVBAImporter.idl
new file mode 100644
index 0000000..5893354
--- /dev/null
+++ offapi/com/sun/star/document/XVBAImporter.idl
@@ -0,0 +1,58 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XVBAImporter.idl,v $
+ * $Revision: 1.7 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+#ifndef __com_sun_star_document_XVBAImporter_idl__ 
+#define __com_sun_star_document_XVBAImporter_idl__ 
+ 
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __com_sun_star_io_XInputStream
+#include <com/sun/star/io/XInputStream.idl>
+#endif
+
+//============================================================================= 
+ 
+module com {  module sun {  module star {  module document {  
+ 
+//============================================================================= 
+ 
+/** this interface converts graphic object URLs from one URL space to another.
+ */
+interface XVBAImporter : com::sun::star::uno::XInterface
+{ 
+    boolean importVBA( [in] com::sun::star::io::XInputStream xVBAContainerBlob );
+}; 
+ 
+//============================================================================= 
+ 
+}; }; }; };  
+ 
+#endif 
diff --git offapi/com/sun/star/document/makefile.mk offapi/com/sun/star/document/makefile.mk
index e0a5566..214ba1b 100644
--- offapi/com/sun/star/document/makefile.mk
+++ offapi/com/sun/star/document/makefile.mk
@@ -60,6 +60,7 @@ IDLFILES=\
     FilterOptionsRequest.idl\
     HeaderFooterSettings.idl\
     ImportFilter.idl\
+    XVBAImporter.idl\
     LinkTarget.idl\
     LinkTargets.idl\
     LockFileIgnoreRequest.idl\
diff --git offapi/com/sun/star/sheet/XCodeName.idl offapi/com/sun/star/sheet/XCodeName.idl
new file mode 100644
index 0000000..249b97b
--- /dev/null
+++ offapi/com/sun/star/sheet/XCodeName.idl
@@ -0,0 +1,63 @@
+/*************************************************************************
+ *
+ * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.
+ * 
+ * Copyright 2008 by Sun Microsystems, Inc.
+ *
+ * OpenOffice.org - a multi-platform office productivity suite
+ *
+ * $RCSfile: XExternalSheetName.idl,v $
+ * $Revision: 1.4 $
+ *
+ * This file is part of OpenOffice.org.
+ *
+ * OpenOffice.org is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU Lesser General Public License version 3
+ * only, as published by the Free Software Foundation.
+ *
+ * OpenOffice.org is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU Lesser General Public License version 3 for more details
+ * (a copy is included in the LICENSE file that accompanied this code).
+ *
+ * You should have received a copy of the GNU Lesser General Public License
+ * version 3 along with OpenOffice.org.  If not, see
+ * <http://www.openoffice.org/license.html>
+ * for a copy of the LGPLv3 License.
+ *
+ ************************************************************************/
+
+#ifndef __com_sun_star_sheet_XCodeName_idl__
+#define __com_sun_star_sheet_XCodeName_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+#ifndef __com_sun_star_container_ElementExistException_idl__ 
+#include <com/sun/star/container/ElementExistException.idl> 
+#endif 
+
+//=============================================================================
+
+module com {  module sun {  module star {  module sheet {
+
+//=============================================================================
+
+/** provides a method to set the code name of a sheet
+ */
+interface XCodeName: com::sun::star::uno::XInterface
+{
+    //-------------------------------------------------------------------------
+
+    [ attribute ] string CodeName;
+
+};
+
+//=============================================================================
+
+}; }; }; };
+
+#endif
+
diff --git offapi/com/sun/star/sheet/makefile.mk offapi/com/sun/star/sheet/makefile.mk
index 6d245e7..c2cbed0 100644
--- offapi/com/sun/star/sheet/makefile.mk
+++ offapi/com/sun/star/sheet/makefile.mk
@@ -344,6 +344,7 @@ IDLFILES=\
     XViewPanesSupplier.idl\
     XViewSplitable.idl\
     XVolatileResult.idl\
+    XCodeName.idl\
     _NamedRange.idl
 
 # ------------------------------------------------------------------
diff --git oox/inc/oox/xls/workbookhelper.hxx oox/inc/oox/xls/workbookhelper.hxx
index 7aaad16..c822f34 100644
--- oox/inc/oox/xls/workbookhelper.hxx
+++ oox/inc/oox/xls/workbookhelper.hxx
@@ -42,6 +42,7 @@ namespace com { namespace sun { namespace star {
     namespace container { class XNameContainer; }
     namespace lang { class XMultiServiceFactory; }
     namespace awt { class XDevice; }
+    namespace io { class XInputStream; }
     namespace table { struct CellAddress; }
     namespace table { struct CellRangeAddress; }
     namespace table { class XCell; }
@@ -234,6 +235,7 @@ public:
     void                setCurrentSheetIndex( sal_Int16 nSheet );
     /** Final conversion after importing the workbook. */
     void                finalizeWorkbookImport();
+    bool                importVBA( const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& );
 
     // document model ---------------------------------------------------------
 
diff --git oox/inc/oox/xls/worksheetsettings.hxx oox/inc/oox/xls/worksheetsettings.hxx
index 717ea9d..03ccd0a 100644
--- oox/inc/oox/xls/worksheetsettings.hxx
+++ oox/inc/oox/xls/worksheetsettings.hxx
@@ -129,6 +129,8 @@ public:
     /** Converts the imported worksheet settings. */
     void                finalizeImport();
 
+    /** Applies the codeName. */
+    void                applyImportedCodeName();
 private:
     PhoneticSettings    maPhoneticSett;
     SheetSettingsModel  maSheetSettings;
diff --git oox/source/xls/workbookfragment.cxx oox/source/xls/workbookfragment.cxx
index a372ef7..aae3834 100644
--- oox/source/xls/workbookfragment.cxx
+++ oox/source/xls/workbookfragment.cxx
@@ -56,6 +56,7 @@ using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::Exception;
 using ::com::sun::star::uno::UNO_QUERY;
 using ::com::sun::star::uno::UNO_QUERY_THROW;
+using ::com::sun::star::io::XInputStream;
 using ::com::sun::star::table::CellAddress;
 using ::oox::core::ContextHandlerRef;
 using ::oox::core::FragmentHandlerRef;
@@ -296,6 +297,14 @@ void OoxWorkbookFragment::finalizeImport()
 
     // final conversions, e.g. calculation settings and view settings
     finalizeWorkbookImport();
+
+    OUString aProjectFragmentPath = getFragmentPathFromFirstType( CREATE_MSOFFICE_RELATIONSTYPE( "vbaProject" ) );
+    if ( aProjectFragmentPath.getLength() > 0 )
+    {
+            // attempt to open a stream
+            Reference< XInputStream > xInStrm = getFilter().openInputStream( aProjectFragmentPath );
+            importVBA( xInStrm );
+    }
 }
 
 // private --------------------------------------------------------------------
diff --git oox/source/xls/workbookhelper.cxx oox/source/xls/workbookhelper.cxx
index 1d4641d..88e82c8 100644
--- oox/source/xls/workbookhelper.cxx
+++ oox/source/xls/workbookhelper.cxx
@@ -35,6 +35,7 @@
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/awt/XDevice.hpp>
 #include <com/sun/star/document/XActionLockable.hpp>
+#include <com/sun/star/document/XVBAImporter.hpp>
 #include <com/sun/star/table/CellAddress.hpp>
 #include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
 #include <com/sun/star/sheet/XSpreadsheet.hpp>
@@ -79,12 +80,14 @@ using ::com::sun::star::uno::Exception;
 using ::com::sun::star::uno::UNO_QUERY;
 using ::com::sun::star::uno::UNO_QUERY_THROW;
 using ::com::sun::star::uno::UNO_SET_THROW;
+using ::com::sun::star::io::XInputStream;
 using ::com::sun::star::container::XIndexAccess;
 using ::com::sun::star::container::XNameAccess;
 using ::com::sun::star::container::XNameContainer;
 using ::com::sun::star::lang::XMultiServiceFactory;
 using ::com::sun::star::awt::XDevice;
 using ::com::sun::star::document::XActionLockable;
+using ::com::sun::star::document::XVBAImporter;
 using ::com::sun::star::table::CellAddress;
 using ::com::sun::star::table::CellRangeAddress;
 using ::com::sun::star::table::XCell;
@@ -829,6 +832,18 @@ void WorkbookHelper::finalizeWorkbookImport()
     aDefPageStyle.setProperty< sal_Int16 >( PROP_FirstPageNumber, 0 );
 }
 
+bool WorkbookHelper::importVBA( const Reference< XInputStream >& vbaProjBlob )
+{
+    bool bResult( false );
+    if  ( vbaProjBlob.is() )
+    {
+        Reference< XVBAImporter > xImport( getDocumentFactory()->createInstance( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.document.excel.VBAImporter") ) ), UNO_QUERY );
+        if ( xImport.is() )
+            bResult = ( xImport->importVBA( vbaProjBlob ) == sal_True );
+    }   
+    return bResult;
+}
+
 // document model -------------------------------------------------------------
 
 Reference< XSpreadsheetDocument > WorkbookHelper::getDocument() const
diff --git oox/source/xls/workbooksettings.cxx oox/source/xls/workbooksettings.cxx
index 3473dbc..c02afd0 100644
--- oox/source/xls/workbooksettings.cxx
+++ oox/source/xls/workbooksettings.cxx
@@ -43,6 +43,7 @@
 
 using ::rtl::OUString;
 using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::makeAny;
 using ::com::sun::star::uno::UNO_QUERY;
 using ::com::sun::star::util::Date;
 using ::com::sun::star::util::XNumberFormatsSupplier;
@@ -288,8 +289,14 @@ void WorkbookSettings::finalizeImport()
     {
         case FILTER_OOX:
         case FILTER_BIFF:
+        {
             aPropSet.setProperty( PROP_IgnoreCase,          true );     // always in Excel
             aPropSet.setProperty( PROP_RegularExpressions,  false );    // not supported in Excel
+            rtl::OUString sCodeName = maBookSettings.maCodeName.getLength() ?  maBookSettings.maCodeName : CREATE_OUSTRING("ThisWorkbook");
+                                            
+            if ( aPropSet.getXPropertySet().is() )
+                aPropSet.getXPropertySet()->setPropertyValue( CREATE_OUSTRING("CodeName"),  makeAny( sCodeName ));
+        }
         break;
         case FILTER_UNKNOWN:
         break;
diff --git oox/source/xls/worksheethelper.cxx oox/source/xls/worksheethelper.cxx
index ab2d5c1..909b8da 100644
--- oox/source/xls/worksheethelper.cxx
+++ oox/source/xls/worksheethelper.cxx
@@ -1007,6 +1007,10 @@ void WorksheetData::finalizeWorksheetImport()
     finalizeDrawing();
     finalizeVmlDrawing();
     maComments.finalizeImport();    // after VML drawing
+  
+    // Really I think we should be calling  getWorksheetSettings::finalizeImport
+    // but as this is a late patch, I don't want to risk that
+    getWorksheetSettings().applyImportedCodeName(); 
     lclUpdateProgressBar( mxFinalProgress, 1.0 );
 
     // reset current sheet index in global data
diff --git oox/source/xls/worksheetsettings.cxx oox/source/xls/worksheetsettings.cxx
index c05e471..9eaf195 100644
--- oox/source/xls/worksheetsettings.cxx
+++ oox/source/xls/worksheetsettings.cxx
@@ -30,6 +30,8 @@
 
 #include "oox/xls/worksheetsettings.hxx"
 #include <com/sun/star/util/XProtectable.hpp>
+#include <com/sun/star/sheet/XCodeName.hpp>
+
 #include "oox/helper/attributelist.hxx"
 #include "oox/helper/recordinputstream.hxx"
 #include "oox/xls/biffinputstream.hxx"
@@ -41,6 +43,7 @@ using ::com::sun::star::uno::Exception;
 using ::com::sun::star::uno::Reference;
 using ::com::sun::star::uno::UNO_QUERY_THROW;
 using ::com::sun::star::util::XProtectable;
+using ::com::sun::star::sheet::XCodeName;
 using ::oox::core::CodecHelper;
 
 namespace oox {
@@ -313,6 +316,22 @@ void WorksheetSettings::finalizeImport()
     }
 }
 
+// for some reason currently finalizeImport is not called by WorksheetDataImport
+// as this patch is a late commit I don' want to risk changing the import too  
+// much ( so really this method should be called by 
+// WorsheetSettings::finalizeImport() which in turn should be called by 
+// WorksheetDataImport::finalizeWorksheetImport() )
+void WorksheetSettings::applyImportedCodeName()
+{
+    try 
+    {
+        Reference< XCodeName > xCodeNameSetter( getSheet(), UNO_QUERY_THROW );
+        xCodeNameSetter->setCodeName( maSheetSettings.maCodeName );
+    }
+    catch( Exception& )
+    {
+    }
+}
 // ============================================================================
 
 } // namespace xls
diff --git sc/inc/cellsuno.hxx sc/inc/cellsuno.hxx
index 08962c4..82b1e5c 100644
--- sc/inc/cellsuno.hxx
+++ sc/inc/cellsuno.hxx
@@ -54,6 +54,7 @@
 #include <com/sun/star/sheet/XSpreadsheet.hpp>
 #include <com/sun/star/sheet/XSheetPageBreak.hpp>
 #include <com/sun/star/sheet/XCellRangeMovement.hpp>
+#include <com/sun/star/sheet/XCodeName.hpp>
 #include <com/sun/star/text/XText.hpp>
 #include <com/sun/star/sheet/XPrintAreas.hpp>
 #include <com/sun/star/sheet/XSheetLinkable.hpp>
@@ -1005,7 +1006,8 @@ class ScTableSheetObj : public ScCellRangeObj,
                         public com::sun::star::util::XProtectable,
                         public com::sun::star::sheet::XScenario,
                         public com::sun::star::sheet::XScenarioEnhanced,
-                        public com::sun::star::sheet::XExternalSheetName
+                        public com::sun::star::sheet::XExternalSheetName,
+                        public com::sun::star::sheet::XCodeName
 {
     friend class ScTableSheetsObj;		// fuer insertByName()
 
@@ -1237,6 +1239,10 @@ public:
                                 throw(::com::sun::star::uno::RuntimeException);
     virtual ::com::sun::star::uno::Sequence< sal_Int8 > SAL_CALL getImplementationId()
                                 throw(::com::sun::star::uno::RuntimeException);
+    // XCodeName
+    virtual void SAL_CALL setCodeName( const ::rtl::OUString& aSheetName ) throw (::com::sun::star::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL getCodeName(  ) throw (::com::sun::star::uno::RuntimeException);
+
 };
 
 
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 7f94337..4a8c368 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -1789,7 +1789,7 @@ public:
     void GetSortParam( ScSortParam& rParam, SCTAB nTab );
     void SetSortParam( ScSortParam& rParam, SCTAB nTab );
 
-    com::sun::star::uno::Reference< com::sun::star::document::XVbaEventsHelper > GetVbaEventsHelper();
+    SC_DLLPUBLIC com::sun::star::uno::Reference< com::sun::star::document::XVbaEventsHelper > GetVbaEventsHelper();
 
     /** Should only be GRAM_PODF or GRAM_ODFF. */
     void                SetStorageGrammar( formula::FormulaGrammar::Grammar eGrammar );
diff --git sc/inc/servuno.hxx sc/inc/servuno.hxx
index bf0515d..9c07719 100644
--- sc/inc/servuno.hxx
+++ sc/inc/servuno.hxx
@@ -95,7 +95,8 @@ class ScDocShell;
 #define SC_SERVICE_OPCODEMAPPER 39
 #define SC_SERVICE_VBAOBJECTPROVIDER   40
 #define SC_SERVICE_VBACODENAMEPROVIDER   41
-#define SC_SERVICE_COUNT        42
+#define SC_SERVICE_VBAXLSMIMPORT   42
+#define SC_SERVICE_COUNT        43
 #define SC_SERVICE_INVALID		USHRT_MAX
 
 
diff --git sc/inc/unonames.hxx sc/inc/unonames.hxx
index 9ecc0b2..591887f 100644
--- sc/inc/unonames.hxx
+++ sc/inc/unonames.hxx
@@ -492,6 +492,7 @@
 #define SC_UNO_ISEXECUTELINKENABLED     "IsExecuteLinkEnabled"
 #define SC_UNO_ISCHANGEREADONLYENABLED  "IsChangeReadOnlyEnabled"
 #define SC_UNO_REFERENCEDEVICE          "ReferenceDevice"
+#define SC_UNO_CODENAME                 "CodeName"
 
 //	document properties from FormModel
 #define SC_UNO_APPLYFMDES			"ApplyFormDesignMode"
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index 4ea49f9..096d5b1 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -166,6 +166,17 @@ BOOL ScDocument::SetCodeName( SCTAB nTab, String& rName )
 {
 	if (VALIDTAB(nTab))
 	{
+		for ( SCTAB i=0; i<nMaxTableNumber; i++ )
+		{
+			if ( VALIDTAB( i ) && pTab[ i ] )
+			{
+				String rExistingName;	
+				pTab[i]->GetCodeName( rExistingName );
+				if ( rExistingName ==  rName )
+					return FALSE;
+			}
+		}
+
 		if (pTab[nTab])
 		{
 			pTab[nTab]->SetCodeName( rName );
diff --git sc/source/filter/excel/excimp8.cxx sc/source/filter/excel/excimp8.cxx
index 5c629fd..0d5bea0 100644
--- sc/source/filter/excel/excimp8.cxx
+++ sc/source/filter/excel/excimp8.cxx
@@ -103,6 +103,7 @@
 
 #include <com/sun/star/document/XDocumentProperties.hpp>
 #include <com/sun/star/document/XDocumentPropertiesSupplier.hpp>
+#include <com/sun/star/document/XVbaEventsHelper.hpp>
 #include <com/sun/star/script/ModuleInfo.hpp>
 #include <basic/basmgr.hxx>
 #include <cppuhelper/component_context.hxx>
@@ -309,7 +310,10 @@ void ImportExcel8::ReadBasic( void )
                     }
                 }
 #endif
-
+                // enable VBA events ( now that code is imported )
+                uno::Reference< document::XVbaEventsHelper > xEvt( GetDoc().GetVbaEventsHelper() );
+                if ( xEvt.is() )
+                   xEvt->setIgnoreEvents( sal_False );
             }
         }
     }
diff --git sc/source/ui/unoobj/cellsuno.cxx sc/source/ui/unoobj/cellsuno.cxx
index 1b1c8a0..75b0f36 100644
--- sc/source/ui/unoobj/cellsuno.cxx
+++ sc/source/ui/unoobj/cellsuno.cxx
@@ -6863,6 +6863,7 @@ uno::Any SAL_CALL ScTableSheetObj::queryInterface( const uno::Type& rType ) thro
     SC_QUERYINTERFACE( sheet::XScenarioEnhanced )
     SC_QUERYINTERFACE( sheet::XSheetLinkable )
     SC_QUERYINTERFACE( sheet::XExternalSheetName )
+    SC_QUERYINTERFACE( sheet::XCodeName )
 
     return ScCellRangeObj::queryInterface( rType );
 }
@@ -8697,6 +8698,33 @@ ScTableSheetObj* ScTableSheetObj::getImplementation( const uno::Reference<uno::X
 
 //------------------------------------------------------------------------
 
+rtl::OUString SAL_CALL 
+ScTableSheetObj::getCodeName() throw (uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    ScDocShell* pDocSh = GetDocShell();
+    String aName;
+    if ( pDocSh )
+        pDocSh->GetDocument()->GetCodeName( GetTab_Impl(), aName );
+    return aName;
+}
+
+void SAL_CALL ScTableSheetObj::setCodeName( const rtl::OUString& aNewName ) throw (uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    ScDocShell* pDocSh = GetDocShell();
+    
+    if ( pDocSh )
+    {
+        String aCodeName( aNewName );
+	if ( !pDocSh->GetDocument()->SetCodeName( GetTab_Impl(), aCodeName ) )
+		throw uno::RuntimeException();
+    }
+}
+
+
+//------------------------------------------------------------------------
+
 ScTableColumnObj::ScTableColumnObj( ScDocShell* pDocSh, SCCOL nCol, SCTAB nTab ) :
     ScCellRangeObj( pDocSh, ScRange(nCol,0,nTab, nCol,MAXROW,nTab) ),
     pColPropSet(lcl_GetColumnPropertySet())
diff --git sc/source/ui/unoobj/docuno.cxx sc/source/ui/unoobj/docuno.cxx
index bd7a775..49a8cd8 100644
--- sc/source/ui/unoobj/docuno.cxx
+++ sc/source/ui/unoobj/docuno.cxx
@@ -158,6 +158,7 @@ const SfxItemPropertyMapEntry* lcl_GetDocOptPropertyMap()
         {MAP_CHAR_LEN(SC_UNO_ISCHANGEREADONLYENABLED), 0, &getBooleanCppuType(),                              0, 0},
         {MAP_CHAR_LEN(SC_UNO_REFERENCEDEVICE),   0, &getCppuType((uno::Reference<awt::XDevice>*)0),           beans::PropertyAttribute::READONLY, 0},
         {MAP_CHAR_LEN("BuildId"),                0, &::getCppuType(static_cast< const rtl::OUString * >(0)), 0, 0},
+        {MAP_CHAR_LEN(SC_UNO_CODENAME),        0, &getCppuType(static_cast< const rtl::OUString * >(0)),    0, 0},
 
         {0,0,0,0,0,0}
     };
@@ -1382,6 +1383,12 @@ void SAL_CALL ScModelObj::setPropertyValue(
                 pDoc->SetLanguage( eLatin, eCjk, eCtl );
             }
         }
+        else if ( aString.EqualsAscii( SC_UNO_CODENAME ) )
+        {
+            rtl::OUString sCodeName;
+            if ( aValue >>= sCodeName )
+                pDoc->SetCodeName( sCodeName );
+        } 
         else if ( aString.EqualsAscii( SC_UNO_CJK_CLOCAL ) )
         {
             lang::Locale aLocale;
@@ -1514,6 +1521,12 @@ uno::Any SAL_CALL ScModelObj::getPropertyValue( const rtl::OUString& aPropertyNa
             ScUnoConversion::FillLocale( aLocale, eLatin );
             aRet <<= aLocale;
         }
+        else if ( aString.EqualsAscii( SC_UNO_CODENAME ) )
+        {
+            rtl::OUString sCodeName = pDoc->GetCodeName();
+            aRet <<= sCodeName;
+        } 
+
         else if ( aString.EqualsAscii( SC_UNO_CJK_CLOCAL ) )
         {
             LanguageType eLatin, eCjk, eCtl;
diff --git sc/source/ui/unoobj/servuno.cxx sc/source/ui/unoobj/servuno.cxx
index d4c5cd4..ae68f79 100644
--- sc/source/ui/unoobj/servuno.cxx
+++ sc/source/ui/unoobj/servuno.cxx
@@ -39,6 +39,8 @@
 #include <svx/unonrule.hxx>
 #include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
 #include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/document/XVbaEventsHelper.hpp>
+#include <com/sun/star/document/XVBAImporter.hpp>
 
 #include "servuno.hxx"
 #include "unonames.hxx"
@@ -61,6 +63,10 @@
 // #100263# Support creation of GraphicObjectResolver and EmbeddedObjectResolver
 #include <svx/xmleohlp.hxx>
 #include <svx/xmlgrhlp.hxx>
+#include <unotools/ucbstreamhelper.hxx>
+#include <svtools/fltrcfg.hxx>
+#include <svx/svxmsbas.hxx>
+#include <sfx2/app.hxx>
 
 #include <comphelper/processfactory.hxx>
 #include <com/sun/star/document/XCodeNameQuery.hpp>
@@ -218,6 +224,51 @@ struct ProvNamesId_Type
     sal_uInt16      nType;
 };
 
+class ScXLSMVBAImporter :  public ::cppu::WeakImplHelper1< document::XVBAImporter >
+{
+    ScDocShell* mpDocShell;
+public:
+    ScXLSMVBAImporter( ScDocShell* pDocShell ) : mpDocShell( pDocShell ) {}
+virtual ::sal_Bool SAL_CALL importVBA( const uno::Reference< io::XInputStream >& xVBAContainerBlob ) throw (uno::RuntimeException)
+    {
+        // get SOTStorage
+        SotStorageRef VBAContainer = new SotStorage( utl::UcbStreamHelper::CreateStream( xVBAContainerBlob ), TRUE );
+        SvtFilterOptions* pFilterOpt = SvtFilterOptions::Get();
+        if( mpDocShell  && pFilterOpt )
+        {
+            bool bLoadCode = pFilterOpt->IsLoadExcelBasicCode();
+            bool bLoadExecutable = pFilterOpt->IsLoadExcelBasicExecutable();
+            bool bLoadStrg = pFilterOpt->IsLoadExcelBasicStorage();
+            if( bLoadCode || bLoadStrg )
+            {
+                SvxImportMSVBasic aBasicImport( *mpDocShell, *VBAContainer, bLoadCode, bLoadStrg );
+                bool bAsComment = !bLoadExecutable;
+                if ( !bAsComment )
+                {
+                    uno::Any aGlobs;
+                    uno::Sequence< uno::Any > aArgs(1);
+                    aArgs[ 0 ] <<= mpDocShell->GetModel();
+                    aGlobs <<= ::comphelper::getProcessServiceFactory()->createInstanceWithArguments( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ooo.vba.excel.Globals" ) ), aArgs );
+                    mpDocShell->GetBasicManager()->SetGlobalUNOConstant( "VBAGlobals", aGlobs );
+                    BasicManager* pAppMgr = SFX_APP()->GetBasicManager();
+                    if ( pAppMgr )
+                        pAppMgr->SetGlobalUNOConstant( "ThisExcelDoc", aArgs[ 0 ] );
+                }
+                // need to set the load as comment etc. from options
+                aBasicImport.Import( String(), String::CreateFromAscii("VBA"), bAsComment, TRUE );
+                if ( !bAsComment )
+                {
+                    // enable VBA events ( now that code is imported )
+                    uno::Reference< document::XVbaEventsHelper > xEvt( mpDocShell->GetDocument()->GetVbaEventsHelper() );
+                    if ( xEvt.is() )
+                       xEvt->setIgnoreEvents( sal_False );
+                }
+            }
+        }
+        return sal_True;
+    }
+};
+
 static const ProvNamesId_Type __FAR_DATA aProvNamesId[] =
 {
     { "com.sun.star.sheet.Spreadsheet",                 SC_SERVICE_SHEET },
@@ -267,6 +318,7 @@ static const ProvNamesId_Type __FAR_DATA aProvNamesId[] =
     { SC_SERVICENAME_OPCODEMAPPER,          SC_SERVICE_OPCODEMAPPER },
     { "ooo.vba.VBAObjectModuleObjectProvider", SC_SERVICE_VBAOBJECTPROVIDER }, // SC_SERVICE_VBAOBJECTPROVIDER
     { "ooo.vba.VBACodeNameProvider", SC_SERVICE_VBACODENAMEPROVIDER }, // SC_SERVICE_VBACODENAMEPROVIDER
+    { "com.sun.star.document.excel.VBAImporter", SC_SERVICE_VBAXLSMIMPORT }, // SC_SERVICE_VBAXLSMIMPORT
     // case-correct versions of the service names (#i102468#)
     { "com.sun.star.text.textfield.URL",                SC_SERVICE_URLFIELD },
     { "com.sun.star.text.textfield.PageNumber",         SC_SERVICE_PAGEFIELD },
@@ -330,6 +382,7 @@ static const sal_Char* __FAR_DATA aOldNames[SC_SERVICE_COUNT] =
         "",                                         // SC_SERVICE_OPCODEMAPPER
         "",                                         // SC_SERVICE_VBAOBJECTPROVIDER
         "",                                         // SC_SERVICE_VBACODENAMEPROVIDER
+        "",                                         // SC_SERVICE_VBAXLSIMPORT
     };
 
 
@@ -548,6 +601,12 @@ uno::Reference<uno::XInterface> ScServiceProvider::MakeInstance(
                 xRet.set(static_cast<document::XCodeNameQuery*>(new ScVbaCodeNameProvider( pDocShell )));
             }
             break;
+        case SC_SERVICE_VBAXLSMIMPORT:
+            if ( pDocShell )
+            {
+                xRet.set(static_cast<document::XVBAImporter*>( new ScXLSMVBAImporter( pDocShell ) ) );
+            } 
+            break;
     }
     return xRet;
 }
diff --git sc/util/makefile.mk sc/util/makefile.mk
index 2d0070c..6753669 100644
--- sc/util/makefile.mk
+++ sc/util/makefile.mk
@@ -103,6 +103,7 @@ SHL1STDLIBS=       \
     $(XMLOFFLIB)	\
     $(AVMEDIALIB) \
     $(FORLIB) \
+    $(SVXMSFILTERLIB)		\
     $(FORUILIB)
     
 SHL1LIBS=$(LIB3TARGET) $(LIB4TARGET)
diff --git svx/source/msfilter/msvbasic.cxx svx/source/msfilter/msvbasic.cxx
index 7163037..d146b32 100644
--- svx/source/msfilter/msvbasic.cxx
+++ svx/source/msfilter/msvbasic.cxx
@@ -1256,7 +1256,19 @@ bool VBA_Impl::Open( const String &rToplevel, const String &rSublevel )
 {
     /* beginning test for vba stuff */
     bool bRet = false;
-    SvStorageRef xMacros= xStor->OpenSotStorage( rToplevel,
+    SvStorageRef xMacros;
+    // hack for xlsm if no TopLevel sepecified then just assume the root storage
+    // is the toplevel
+    // #FIXME but... why do this even, I don't see why we can't just store
+    // the root storage of the VBA project when we create this class
+    // note: currently xStor is the level above the level that contains the
+    // vba project :-/
+    // OTOH all of this mess should dissappear when services in oox come
+    // good
+    if ( rToplevel.Len() == 0 )
+        xMacros = xStor;
+    else
+        xMacros = xStor->OpenSotStorage( rToplevel,
                                     STREAM_READWRITE | STREAM_NOCREATE |
                                     STREAM_SHARE_DENYALL );
     if( !xMacros.Is() || SVSTREAM_OK != xMacros->GetError() )
diff --git svx/source/msfilter/svxmsbas.cxx svx/source/msfilter/svxmsbas.cxx
index 5c281b7..7948129 100644
--- svx/source/msfilter/svxmsbas.cxx
+++ svx/source/msfilter/svxmsbas.cxx
@@ -87,6 +87,8 @@ int SvxImportMSVBasic::Import( const String& rStorageName,
                                 const String &rSubStorageName,
                                 BOOL bAsComment, BOOL bStripped )
 {
+
+
     std::vector< String > codeNames;
     return Import(  rStorageName, rSubStorageName, codeNames, bAsComment, bStripped );
 }
@@ -148,8 +150,13 @@ bool SvxImportMSVBasic::ImportForms_Impl(const String& rStorageName,
 
 bool SvxImportMSVBasic::ImportForms_Impl( VBA_Impl& rVBA, const String& rStorageName, const String& rSubStorageName, BOOL bVBAMode )
 {
-    SvStorageRef xVBAStg(rVBA.GetStorage()->OpenSotStorage(rStorageName,
-        STREAM_READWRITE | STREAM_NOCREATE | STREAM_SHARE_DENYALL));
+    SvStorageRef xVBAStg;
+    if ( rStorageName.Len() == 0 )
+        xVBAStg = rVBA.GetStorage();
+    else 
+        xVBAStg = rVBA.GetStorage()->OpenSotStorage(rStorageName,
+        STREAM_READWRITE | STREAM_NOCREATE | STREAM_SHARE_DENYALL);
+
     if (!xVBAStg.Is() || xVBAStg->GetError())
         return false;
 
diff --git sw/source/filter/ww8/ww8par.cxx sw/source/filter/ww8/ww8par.cxx
index 09a35ae..6d62fef 100644
--- sw/source/filter/ww8/ww8par.cxx
+++ sw/source/filter/ww8/ww8par.cxx
@@ -4314,6 +4314,13 @@ ULONG SwWW8ImplReader::CoreLoad(WW8Glossary *pGloss, const SwPosition &rPos)
             WW8Customizations aCustomisations( pTableStream, *pWwFib ); 
             aCustomisations.Import( mpDocShell );
 #endif 
+            if ( !bAsComment )
+            {
+                // enable VBA events ( now that code is imported )
+                uno::Reference< document::XVbaEventsHelper > xEvt( rDoc.GetVbaEventsHelper() );
+                if ( xEvt.is() )
+                    xEvt->setIgnoreEvents( sal_False );
+            }
             if( 2 & nRet )
             {
                 maTracer.Log(sw::log::eContainsVisualBasic);
diff --git vbahelper/inc/vbahelper/vbaaccesshelper.hxx vbahelper/inc/vbahelper/vbaaccesshelper.hxx
index 7047d1f..9ae4ee1 100644
--- vbahelper/inc/vbahelper/vbaaccesshelper.hxx
+++ vbahelper/inc/vbahelper/vbaaccesshelper.hxx
@@ -62,15 +62,21 @@ namespace ooo
         }
 
 
-        VBAHELPER_DLLPRIVATE inline bool isAlienDoc( SfxObjectShell& rDocShell, const char* pMimeType )
+        VBAHELPER_DLLPRIVATE inline bool isAlienDoc( SfxObjectShell& rDocShell, const char* pMimeType, const char* pFilterName=NULL )
         {
             bool bRes( false );
             const SfxFilter *pFilt = rDocShell.GetMedium()->GetFilter();
             if ( pFilt && pFilt->IsAlienFormat() )
+            {
                 bRes = ( pFilt->GetMimeType().CompareToAscii( pMimeType ) == 0 );
+                // if no match and we have a filter name, try that
+                // xlsx and xlsm document currently don't show MimeType
+                if ( pFilterName && !bRes )
+                   bRes = ( pFilt->GetFilterName().CompareToAscii( pFilterName ) == 0 );
+            }
             return bRes;
         }
-        VBAHELPER_DLLPUBLIC inline bool isAlienExcelDoc( SfxObjectShell& rDocShell ) { return isAlienDoc( rDocShell, "application/vnd.ms-excel" ); }
+        VBAHELPER_DLLPUBLIC inline bool isAlienExcelDoc( SfxObjectShell& rDocShell ) { return isAlienDoc( rDocShell, "application/vnd.ms-excel", "Calc MS Excel 2007 XML" ); }
         VBAHELPER_DLLPUBLIC inline bool isAlienWordDoc( SfxObjectShell& rDocShell ) { return isAlienDoc( rDocShell, "application/vnd.ms-word" ); }
 
 	} // openoffice
diff --git vbahelper/source/vbahelper/vbaeventshelperbase.cxx vbahelper/source/vbahelper/vbaeventshelperbase.cxx
index 52aba1f..fca3cd9 100644
--- vbahelper/source/vbahelper/vbaeventshelperbase.cxx
+++ vbahelper/source/vbahelper/vbaeventshelperbase.cxx
@@ -31,7 +31,7 @@
 
 using namespace ::com::sun::star;
 
-VbaEventsHelperBase::VbaEventsHelperBase( const css::uno::Reference< css::uno::XComponentContext >& xContext ) : m_xContext( xContext ), mbIgnoreEvents( sal_False )
+VbaEventsHelperBase::VbaEventsHelperBase( const css::uno::Reference< css::uno::XComponentContext >& xContext ) : m_xContext( xContext ), mbIgnoreEvents( sal_True )
 {
 }
 
