--- /dev/null	2005-06-05 14:44:09.000000000 +0100
+++ svx/source/form/formControlVBAHandler.cxx	2005-09-12 20:49:13.329396166 +0100
@@ -0,0 +1,93 @@
+#include <formControlVBAHandler.hxx>
+#include <comphelper/processfactory.hxx>
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/lang/XMultiComponentFactory.hpp>
+#include <org/openoffice/vba/XVBAToOOEventDescGen.hpp>
+
+using namespace ::com::sun::star;
+using namespace ::com::sun::star::uno;
+using namespace ::com::sun::star::awt;
+using namespace ::com::sun::star::script;
+
+using namespace ::org::openoffice::vba;
+
+FormControlVBAHandler::FormControlVBAHandler( const Reference< XEventAttacherManager >& xEvtAttachMgr, const Reference< XControl >& xControl) : m_xEvtAttachMgr( xEvtAttachMgr ), m_xControl( xControl )
+{
+    Reference < beans::XPropertySet > xProps(
+        ::comphelper::getProcessServiceFactory(), UNO_QUERY_THROW );
+    m_xCtx.set( xProps->getPropertyValue( rtl::OUString(
+        RTL_CONSTASCII_USTRINGPARAM( "DefaultContext" ))), 
+        uno::UNO_QUERY_THROW );
+}
+
+bool
+FormControlVBAHandler::hasEvtBinding( sal_Int32 nPos, const ScriptEventDescriptor& desc )
+{
+    bool result = false;
+    Sequence< ScriptEventDescriptor > sEvts = m_xEvtAttachMgr->getScriptEvents(nPos);
+    ScriptEventDescriptor* pWriteScriptEvents = sEvts.getArray();
+    ScriptEventDescriptor* pEvt = pWriteScriptEvents;
+    sal_Int32 nNumEvts = sEvts.getLength();
+    for ( sal_Int32 index=0; index < nNumEvts; ++pEvt, ++index )
+    {
+        if ( pEvt->EventMethod.equals( desc.EventMethod ) &&
+            pEvt->ListenerType.equals( desc.ListenerType )
+            // Note: if you want multiple bindings e.g. _Click
+            // and a user defined binding ( from property browser )
+            // uncomment the two lines below
+//            && pEvt->ScriptCode.equals( desc.ScriptCode )
+//            && pEvt->ScriptType.equals( desc.ScriptType )
+           )
+        {
+            result = true;
+            break;
+        }
+    }
+    return result;    
+}
+
+bool
+FormControlVBAHandler::createEventBindings( sal_Int32 nPos )
+{
+    //OSL_TRACE("createEventBindings for  %s",
+    //        ::rtl::OUStringToOString( m_sControl, 
+    //            RTL_TEXTENCODING_UTF8 ).getStr() );
+    static Reference< XVBAToOOEventDescGen > xVBAToOOEvtDesc;
+
+    if ( !xVBAToOOEvtDesc.is() )
+    {
+        if ( m_xCtx.is() )
+        {
+            Reference< lang::XMultiComponentFactory > xMFac( 
+                m_xCtx->getServiceManager(), UNO_QUERY );
+            if ( xMFac.is() )
+            {
+                xVBAToOOEvtDesc.set( xMFac->createInstanceWithContext( 
+                    rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( 
+                        "org.openoffice.vba.VBAToOOEventDesc"  ) ), m_xCtx ), 
+                    UNO_QUERY );
+            }
+        }
+    }
+    
+    if ( !xVBAToOOEvtDesc.is() )
+    {
+        OSL_TRACE("Failed to create VBAToOOEventDesc object!!! ");
+        return false;
+    }
+    Sequence< ScriptEventDescriptor > descs = 
+        xVBAToOOEvtDesc->getEventDescriptions( m_xControl );
+
+    sal_Int32 nLen = descs.getLength();
+    const ScriptEventDescriptor* pDesc = descs.getConstArray();
+    for ( sal_Int32 index = 0; index < nLen; ++index, ++pDesc )
+    {
+        // carefull!, don't register the event twice 
+        if ( !hasEvtBinding( nPos, *pDesc ) )
+        {
+            m_xEvtAttachMgr->registerScriptEvent( nPos, *pDesc );
+        }
+    }
+    return true; 
+}
+
