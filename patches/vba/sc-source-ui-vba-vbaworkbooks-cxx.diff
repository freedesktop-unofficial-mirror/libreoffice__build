--- /dev/null	2004-07-26 17:21:14.000000000 +0530
+++ sc/source/ui/vba/vbaworkbooks.cxx	2005-08-02 16:07:37.000000000 +0530
@@ -0,0 +1,262 @@
+#include <comphelper/processfactory.hxx>
+
+#include <cppuhelper/implbase1.hxx>
+
+#include <com/sun/star/frame/XDesktop.hpp>
+#include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
+#include <com/sun/star/container/XEnumerationAccess.hpp>
+#include <com/sun/star/frame/XComponentLoader.hpp>
+#include <com/sun/star/lang/XComponent.hpp>
+#include <com/sun/star/frame/XModel.hpp>
+#include <com/sun/star/frame/XFrame.hpp>
+#include <com/sun/star/frame/FrameSearchFlag.hpp>
+#include <com/sun/star/util/XModifiable.hpp>
+#include <com/sun/star/frame/XStorable.hpp>
+#include <com/sun/star/lang/DisposedException.hpp>
+#include <com/sun/star/beans/PropertyVetoException.hpp>
+#include <com/sun/star/util/XCloseable.hpp>
+
+#include <sfx2/objsh.hxx>
+#include <tools/urlobj.hxx>
+
+#include "vbaglobals.hxx"
+#include "vbaworkbook.hxx"
+#include "vbaworkbooks.hxx"
+
+using namespace ::org::openoffice;
+using namespace ::com::sun::star;
+static uno::Any
+getWorkbook( uno::Reference< uno::XComponentContext >& xContext, const uno::Reference< sheet::XSpreadsheetDocument > &xDoc )
+{
+	// FIXME: fine as long as ScVbaWorkbook is stateless ...
+	uno::Reference< frame::XModel > xModel( xDoc, uno::UNO_QUERY );
+	if( !xModel.is() )
+		return uno::Any();
+
+	ScVbaWorkbook *pWb = new ScVbaWorkbook( xContext, xModel );
+	return uno::Any( uno::Reference< vba::XWorkbook > (pWb) );
+}
+
+typedef ::cppu::WeakImplHelper1< com::sun::star::container::XEnumeration > ScVbaWorkbooksIterator_BASE;
+
+class ScVbaWorkbooksIterator : public ScVbaWorkbooksIterator_BASE
+{
+	uno::Reference< container::XEnumeration > mxComponents;
+	uno::Reference< sheet::XSpreadsheetDocument > mxSpreadsheet;
+	uno::Reference< uno::XComponentContext > m_xContext;
+  public:
+	ScVbaWorkbooksIterator( uno::Reference< uno::XComponentContext >& xContext)
+		: m_xContext( xContext )
+	{
+		uno::Reference< lang::XMultiComponentFactory > xSMgr(
+			m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+		uno::Reference< frame::XDesktop > xDesktop
+			(xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"), m_xContext), uno::UNO_QUERY_THROW );
+		mxComponents = xDesktop->getComponents()->createEnumeration();
+		nextElem();
+	}
+	~ScVbaWorkbooksIterator() {}
+
+	virtual sal_Bool hasMoreElements() throw (uno::RuntimeException)
+	{
+		return mxSpreadsheet.is();
+	}
+	
+	virtual ::com::sun::star::uno::Any nextElement() throw (container::NoSuchElementException,
+															lang::WrappedTargetException,
+															uno::RuntimeException)
+	{
+		uno::Reference< sheet::XSpreadsheetDocument > xNext = nextElem();
+		if( !xNext.is() )
+			throw container::NoSuchElementException();
+		return getWorkbook( m_xContext, xNext );
+	}
+
+	uno::Reference< sheet::XSpreadsheetDocument > nextElem() throw (uno::RuntimeException)
+	{
+		uno::Reference< sheet::XSpreadsheetDocument > xLast = mxSpreadsheet;
+		mxSpreadsheet.clear();
+
+		while( !mxSpreadsheet.is() &&
+			   mxComponents.is() && mxComponents->hasMoreElements() )
+		{
+			uno::Any aElem = mxComponents->nextElement();
+			mxSpreadsheet = uno::Reference< sheet::XSpreadsheetDocument >( aElem, uno::UNO_QUERY );
+		}
+		return xLast;
+	}
+};
+
+// XEnumerationAccess
+uno::Type
+ScVbaWorkbooks::getElementType() throw (uno::RuntimeException)
+{
+	return vba::XWorkbook::static_type(0);
+}
+::sal_Bool
+ScVbaWorkbooks::hasElements() throw (uno::RuntimeException)
+{
+	return sal_True;
+}
+uno::Reference< container::XEnumeration >
+ScVbaWorkbooks::createEnumeration() throw (uno::RuntimeException)
+{
+	return uno::Reference< container::XEnumeration >( new ScVbaWorkbooksIterator(m_xContext) );
+}
+
+
+// XCollection
+uno::Any
+ScVbaWorkbooks::getParent() throw (uno::RuntimeException)
+{
+	uno::Reference< vba::XGlobals > xGlobals = ScVbaGlobals::getGlobalsImpl( m_xContext );
+	uno::Reference< vba::XApplication > xApplication = 
+		xGlobals->getApplication();
+	if ( !xApplication.is() )
+	{
+		throw uno::RuntimeException(
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ScVbaWorkbooks::getParent: Couldn't access Application object" ) ),
+                    uno::Reference< XInterface >() );
+	}
+	return uno::Any(xApplication);
+}
+
+::sal_Int32
+ScVbaWorkbooks::getCreator() throw (uno::RuntimeException)
+{
+	SC_VBA_STUB();
+	return 0;
+}
+uno::Reference< vba::XApplication >
+ScVbaWorkbooks::getApplication() throw (uno::RuntimeException)
+{
+	uno::Reference< vba::XApplication > xApplication = 
+		ScVbaGlobals::getGlobalsImpl( m_xContext )->getApplication();
+
+	if ( !xApplication.is() )
+	{
+		throw uno::RuntimeException(
+                ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ScVbaWorkbooks::getParent: Couldn't access Application object" ) ),
+                    uno::Reference< XInterface >() );
+	}
+	return xApplication;
+}
+::sal_Int32
+ScVbaWorkbooks::getCount() throw (uno::RuntimeException)
+{
+	sal_Int32 nCount;
+	ScVbaWorkbooksIterator aIter(m_xContext);
+
+	for( nCount = 0; aIter.hasMoreElements(); nCount++ )
+		aIter.nextElem();
+
+	return nCount;
+}
+
+uno::Any
+ScVbaWorkbooks::Item( ::sal_Int32 nIndex ) throw (uno::RuntimeException)
+{
+	ScVbaWorkbooksIterator aIter(m_xContext);
+	uno::Reference< sheet::XSpreadsheetDocument > xDoc;
+
+	for( sal_Int32 i = 0; i <= nIndex; i++ )
+		xDoc = aIter.nextElem();
+
+	if( !xDoc.is() )
+		return uno::Any( uno::Reference< vba::XWorkbook >(NULL) );
+	else
+		return uno::Any( getWorkbook( m_xContext, xDoc ) );
+}
+
+uno::Any 
+ScVbaWorkbooks::Add() throw (uno::RuntimeException)
+{
+	uno::Reference< lang::XMultiComponentFactory > xSMgr(
+        m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+	 uno::Reference< frame::XComponentLoader > xLoader(
+        xSMgr->createInstanceWithContext(
+            ::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"),
+                m_xContext), uno::UNO_QUERY_THROW );
+	uno::Reference< lang::XComponent > xComponent = xLoader->loadComponentFromURL(
+									   rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("private:factory/scalc") ),
+									   rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("_blank") ), 0, 
+									   uno::Sequence< beans::PropertyValue >(0) );			   
+    uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( xComponent, uno::UNO_QUERY_THROW );
+    uno::Reference<frame::XModel> xNewModel(xSpreadDoc,uno::UNO_QUERY_THROW);
+                                                                                                                             
+    if( xSpreadDoc.is() )
+        return uno::Any( uno::Reference< vba::XWorkbook >( new ScVbaWorkbook( m_xContext, xNewModel ) ) );
+    return uno::Any();
+}
+
+void
+ScVbaWorkbooks::Close() throw (uno::RuntimeException)
+{
+	uno::Reference< lang::XMultiComponentFactory > xSMgr(
+		m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+	uno::Reference< frame::XDesktop > xDesktop
+		(xSMgr->createInstanceWithContext(
+			::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"), 
+				m_xContext), uno::UNO_QUERY_THROW );
+	uno::Reference< lang::XComponent > xDoc = xDesktop->getCurrentComponent();
+	uno::Reference< frame::XFrame > xFrame = xDesktop->getCurrentFrame();
+	try
+	{
+		uno::Reference< frame::XModel > xModel( xDoc, uno::UNO_QUERY);
+		uno::Reference< sheet::XSpreadsheetDocument > xDocument( xDoc, uno::UNO_QUERY);
+		if( xModel.is() )
+		{
+			uno::Reference< util::XModifiable > xModify( xModel, uno::UNO_QUERY_THROW );
+			uno::Reference< frame::XStorable > xStore( xModel, uno::UNO_QUERY_THROW );
+			uno::Reference< util::XCloseable > xClose( xDocument, uno::UNO_QUERY_THROW );
+			if( xModify->isModified() ) 
+				xStore->store();
+			xClose->close( false );
+		}
+	}
+	catch( com::sun::star::beans::PropertyVetoException & eVeto )
+	{
+		return;
+	}
+	catch( com::sun::star::lang::DisposedException & eDisposed )
+	{
+		return;
+	}
+}
+
+uno::Any
+ScVbaWorkbooks::Open( const uno::Any &aFileName ) throw (uno::RuntimeException)
+{
+	rtl::OUString aURL;
+	aFileName >>= aURL;
+	uno::Reference< lang::XMultiComponentFactory > xSMgr(
+        m_xContext->getServiceManager(), uno::UNO_QUERY_THROW );
+
+	uno::Reference< frame::XDesktop > xDesktop
+    (xSMgr->createInstanceWithContext(::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"), m_xContext),
+                                      uno::UNO_QUERY_THROW );
+                                                                                                                             
+     uno::Reference< frame::XComponentLoader > xLoader(
+        xSMgr->createInstanceWithContext(
+            ::rtl::OUString::createFromAscii("com.sun.star.frame.Desktop"),
+                m_xContext), uno::UNO_QUERY_THROW );
+	uno::Reference< frame::XModel > xModel( xDesktop->getCurrentComponent(),uno::UNO_QUERY);
+	uno::Reference< frame::XFrame > xFrame = xDesktop->getCurrentFrame();
+	rtl::OUString rOldName = xFrame->getName();
+	INetURLObject aURLObject( aURL );
+	rtl::OUString rNewName = aURLObject.GetLastName(); 
+	xFrame->setName( rNewName );
+	uno::Reference< lang::XComponent > xComponent = xLoader->loadComponentFromURL( aURL, 
+																	rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("_blank") ),	
+										   					        frame::FrameSearchFlag::CREATE,
+																	uno::Sequence< beans::PropertyValue >(0));
+	uno::Reference <sheet::XSpreadsheetDocument> xSpreadDoc( xComponent, uno::UNO_QUERY_THROW );
+	uno::Reference<frame::XModel> xNewModel(xSpreadDoc,uno::UNO_QUERY_THROW);
+
+	if( xSpreadDoc.is() )
+		return uno::Any( uno::Reference< vba::XWorkbook >( new ScVbaWorkbook( m_xContext, xNewModel ) ) );
+	return uno::Any();
+}
