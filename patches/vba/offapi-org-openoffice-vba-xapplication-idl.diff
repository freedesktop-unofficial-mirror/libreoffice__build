--- /dev/null	2005-11-18 19:22:12.156310750 +0000
+++ offapi/org/openoffice/vba/XApplication.idl	2005-11-19 10:21:17.000000000 +0000
@@ -0,0 +1,43 @@
+#ifndef __org_openoffice_vba_XApplication_idl__
+#define __org_openoffice_vba_XApplication_idl__
+
+#ifndef __com_sun_star_uno_XInterface_idl__
+#include <com/sun/star/uno/XInterface.idl>
+#endif
+
+module org {  module openoffice {  module vba { 
+
+published interface XRange;
+published interface XWorkbook;
+published interface XWorkbooks;
+published interface XWorksheets;
+published interface XWorksheetFunction;
+published interface XWindow;
+
+published interface XApplication: com::sun::star::uno::XInterface
+{
+	[attribute, readonly] XRange Selection;
+	[attribute, readonly] XWorkbook ActiveWorkbook;
+	[attribute, readonly] XRange ActiveCell;
+	[attribute, readonly] XWindow ActiveWindow;
+	[attribute] long Calculation;
+	//#TODO #FIXME this is more of a placeholder, will return
+	// the value of activeworkbook, in xl 'ThisWorkbook' should return the
+	// workbook in which the 'calling' macro is running. Should be possible
+	// to determine this
+	[attribute, readonly] XWorkbook ThisWorkbook;
+	[attribute] boolean ScreenUpdating;
+	[attribute] any CutCopyMode;
+	any Workbooks( [in] any aIndex );
+	XWorksheetFunction WorksheetFunction();
+	any Evaluate( [in] string Name );
+	any Dialogs( [in] any DialogIndex );
+	// #FIXME #TODO up to 30 args needed
+	double CountA( [in] any arg1 );
+};
+
+}; }; };
+
+#endif
+
+
