--- basic/source/runtime/rtlproto.hxx.orig	2007-12-07 11:07:53.000000000 +0800
+++ basic/source/runtime/rtlproto.hxx	2007-12-10 11:16:13.000000000 +0800
@@ -348,6 +348,7 @@ extern RTLFUNC(CDateFromIso);
 extern RTLFUNC(CompatibilityMode);
 extern RTLFUNC(CDec);
 
+extern RTLFUNC(Partition); // Fong
 
 extern double Now_Impl();
 extern void Wait_Impl( bool bDurationBased, SbxArray& rPar );
--- basic/source/runtime/stdobj.cxx.orig	2007-12-07 11:08:05.000000000 +0800
+++ basic/source/runtime/stdobj.cxx	2007-12-07 11:12:55.000000000 +0800
@@ -424,6 +424,12 @@ static Methods aMethods[] = {
 { "Oct",            SbxSTRING,    1 | _FUNCTION, RTLNAME(Oct),0             },
   { "number",       SbxLONG, 0,NULL,0 },
 
+{ "Partition",      SbxSTRING,    4 | _FUNCTION, RTLNAME(Partition),0       },
+  { "number",   	SbxLONG, 	0,NULL,0 },
+  { "start",     	SbxLONG, 	0,NULL,0 },
+  { "stop",  	    SbxLONG, 	0,NULL,0 },
+  { "interval",     SbxLONG, 	0,NULL,0 },
+  
 { "Pi",				SbxDOUBLE,		  _CPROP,    RTLNAME(PI),0		      	},
 { "Put",            SbxNULL,   3 | _FUNCTION, RTLNAME(Put),0                },
   { "filenumber",   SbxINTEGER, 0,NULL,0 },
--- basic/source/runtime/methods.cxx.orig	2007-12-07 11:08:17.000000000 +0800
+++ basic/source/runtime/methods.cxx	2007-12-10 11:25:43.000000000 +0800
@@ -4458,3 +4458,115 @@ RTLFUNC(FileExists)
 		StarBASIC::Error( SbERR_BAD_ARGUMENT );
 }
 
+RTLFUNC(Partition)
+{
+    (void)pBasic;
+    (void)bWrite;
+    
+	if ( rPar.Count() != 5 )
+	{
+		StarBASIC::Error( SbERR_BAD_ARGUMENT );
+		return;
+	}
+
+	INT32 nNumber = rPar.Get(1)->GetLong();
+	INT32 nStart = rPar.Get(2)->GetLong();
+	INT32 nStop = rPar.Get(3)->GetLong();
+	INT32 nInterval = rPar.Get(4)->GetLong();
+	
+	if( nStart < 0 || nStop <= nStart || nInterval < 1 )
+	{
+		StarBASIC::Error( SbERR_BAD_ARGUMENT );
+		return;
+	}
+
+	// define a space (' ') character and colon(:) character
+	OUString aSpace = OUString::createFromAscii(" ");
+	OUString aColon = OUString::createFromAscii(":");
+
+	OUString aBeforStart = OUString::valueOf(nStart-1);
+	OUString aAfterStop = OUString::valueOf(nStop+1);
+	
+	// the Partition function inserts leading spaces before lowervalue and uppervalue
+    // so that they both have the same number of characters as the string
+    // representation of the value (Stop + 1). This ensures that if you use the output
+    // of the Partition function with several values of Number, the resulting text 
+	// will be handled properly during any subsequent sort operation.
+
+	// The maximun number of characters before lowervalue and uppervalue
+	INT32 nLen1 = aBeforStart.getLength();
+	INT32 nLen2 = aAfterStop.getLength();
+	INT32 nLen = nLen1 >= nLen2 ? nLen1:nLen2;
+
+	OUString aRetStr;
+	OUString aLowerValue;
+	OUString aUpperValue;	
+	OUString aSpaceStr1;
+	OUString aSpaceStr2;
+	if( nNumber < nStart || nNumber > nStop )
+	{
+		// appending the leading spaces for the lowervalue and uppervalue
+		for( INT32 i=0; i< nLen; i++ )
+		{
+			aSpaceStr1 += aSpace;
+		}
+		
+		INT32 start = nNumber < nStart ? nLen1 : nLen2;
+		
+		for( INT32 i=start; i<nLen; i++ )
+		{
+			aSpaceStr2 += aSpace;	
+		}
+
+		if( nNumber < nStart )
+		{
+			aLowerValue = aSpaceStr1;
+			aUpperValue = aSpaceStr2 + aBeforStart;
+		}
+		else
+		{
+			aLowerValue = aSpaceStr2 + aAfterStop;
+			aUpperValue = aSpaceStr1;
+		}
+
+		aRetStr = aLowerValue + aColon + aUpperValue;
+		rPar.Get(0)->PutString(String(aRetStr));
+		return;
+	}
+
+	INT32 nLowerValue;
+	INT32 nUpperValue;
+	for( INT32 i=nStart; i<nStop; i=i+nInterval )
+	{
+		if( nNumber < i+nInterval )
+		{
+			nLowerValue = i;
+			nUpperValue = ( i+nInterval-1 > nStop ) ? nStop : (i+nInterval-1);
+			break;
+		}
+	}
+
+	aLowerValue = OUString::valueOf( nLowerValue );
+	aUpperValue = OUString::valueOf( nUpperValue );
+
+	nLen1 = aLowerValue.getLength();
+	nLen2 = aUpperValue.getLength();
+
+	// appending the leading spaces for the lowervalue and uppervalue
+	for( INT32 i=nLen1; i<nLen; i++ )
+	{
+		aSpaceStr1 += aSpace;
+	}
+	aLowerValue = aSpaceStr1 + aLowerValue;	
+
+	for( INT32 i=nLen2; i<nLen; i++ )
+	{
+		aSpaceStr2 += aSpace;
+	}
+
+	aUpperValue = aSpaceStr2 + aUpperValue;
+
+	aRetStr = aLowerValue + aColon + aUpperValue;
+
+	rPar.Get(0)->PutString(String(aRetStr));
+}
