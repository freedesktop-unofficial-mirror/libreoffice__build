Index: basic/inc/sbstar.hxx
===================================================================
RCS file: /cvs/script/basic/inc/sbstar.hxx,v
retrieving revision 1.11
diff -u -p -u -r1.11 sbstar.hxx
--- basic/inc/sbstar.hxx	13 Apr 2005 08:59:55 -0000	1.11
+++ basic/inc/sbstar.hxx	17 May 2005 14:44:22 -0000
@@ -159,6 +159,7 @@ public:
 	// Highlighting
 	void 			Highlight( const String& rSrc, SbTextPortions& rList );
 
+	SbxArray        *getVBAGlobals( const String & rForName );
 	virtual SbxVariable* Find( const String&, SbxClassType );
 	virtual BOOL Call( const String&, SbxArray* = NULL );
 
Index: basic/source/classes/sb.cxx
===================================================================
RCS file: /cvs/script/basic/source/classes/sb.cxx,v
retrieving revision 1.23
diff -u -p -u -r1.23 sb.cxx
--- basic/source/classes/sb.cxx	13 Apr 2005 09:10:07 -0000	1.23
+++ basic/source/classes/sb.cxx	17 May 2005 14:44:22 -0000
@@ -923,10 +923,52 @@ void StarBASIC::ClearGlobalVars( void )
 // benen Namen gefunden wurde, der Entrypoint "Main" gesucht. Wenn das
 // auch nicht klappt, laeuft die traditionelle Suche ueber Objekte an.
 
+SbxArray *StarBASIC::getVBAGlobals(const String &rForName )
+{
+	if( rForName == String( RTL_CONSTASCII_USTRINGPARAM( "ThisComponent" ) ) )
+		return NULL;
+
+	static String aThisComponent( RTL_CONSTASCII_USTRINGPARAM("ThisComponent") );
+	static String aVBAHook( RTL_CONSTASCII_USTRINGPARAM( "VBAGlobals" ) );
+
+	SbxVariable *pThisComp = Find( aThisComponent, SbxCLASS_OBJECT );
+	if (pThisComp && pThisComp->IsObject())
+	{
+//		fprintf( stderr, "Has valid 'This' ?!\n" );
+		SbxObject *pObj = static_cast<SbxObject *>(pThisComp->GetObject());
+		SbxVariable *vba;
+		if ((vba = pObj->Find( aVBAHook, SbxCLASS_DONTCARE/* SbxCLASS_PROPERTY */ ) ) &&
+			vba->IsObject())
+		{
+//			fprintf( stderr, "Bingo: got VBAHook: FIXME more type checking (?)\n" );
+			return static_cast<SbxArray *>(vba->GetObject());
+		}
+	}
+	return NULL;
+}
+
 SbxVariable* StarBASIC::Find( const String& rName, SbxClassType t )
 {
 	static String aMainStr( RTL_CONSTASCII_USTRINGPARAM("Main") );
 
+//	fprintf( stderr, "StarBASIC::Find '%s' (%d)\n",
+//			 (const sal_Char *) rtl::OUStringToOString( rName, RTL_TEXTENCODING_UTF8 ), t );
+
+	SbxArray *pVBAGlobals = getVBAGlobals( rName );
+	for (USHORT i = 0; pVBAGlobals && i < pVBAGlobals->Count(); i++)
+	{
+		SbxVariable *pElem = pVBAGlobals->Get( i );
+		if (!pElem || !pElem->IsObject()) continue;
+		SbxObject *pVba = static_cast<SbxObject *>(pElem->GetObject());
+		SbxVariable *pVbaVar;
+		if( pVba && (pVbaVar = pVba->Find( rName, t ) ) )
+		{
+//			fprintf( stderr, "  Got VBA var!\n" );
+			return pVbaVar;
+		}
+	}
+//	fprintf( stderr, "  fall through\n" );
+
 	SbxVariable* pRes = NULL;
 	SbModule* pNamed = NULL;
 	// "Extended" search in Runtime Lib
@@ -975,11 +1017,30 @@ SbxVariable* StarBASIC::Find( const Stri
 			pRes = pNamed->Find( aMainStr, SbxCLASS_METHOD );
 	if( !pRes )
 		pRes = SbxObject::Find( rName, t );
+
 	return pRes;
 }
 
 BOOL StarBASIC::Call( const String& rName, SbxArray* pParam )
 {
+//	fprintf( stderr, "StarBASIC::Call '%s'\n",
+//				 (const sal_Char *) rtl::OUStringToOString( rName, RTL_TEXTENCODING_UTF8 ) );
+
+	SbxArray *pVBAGlobals = getVBAGlobals( rName );
+	for (USHORT i = 0; pVBAGlobals && i < pVBAGlobals->Count(); i++)
+	{
+		SbxVariable *pElem = pVBAGlobals->Get( i );
+		if (!pElem || !pElem->IsObject()) continue;
+		SbxObject *pVba = static_cast<SbxObject *>(pElem->GetObject());
+		SbxVariable *pVbaVar;
+		if( pVba && (pVbaVar = pVba->Find( rName, SbxCLASS_DONTCARE ) ) )
+		{
+//			fprintf( stderr, "  Got VBA: call it !\n" );
+			return pVba->Call( rName, pParam );
+		}
+	}
+//	fprintf( stderr, "  fall through\n" );
+
 	BOOL bRes = SbxObject::Call( rName, pParam );
 	if( !bRes )
 	{
