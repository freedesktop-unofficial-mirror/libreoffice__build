diff --git basic/inc/basic/basmgr.hxx basic/inc/basic/basmgr.hxx
index 2674c59..3c4f364 100644
--- basic/inc/basic/basmgr.hxx
+++ basic/inc/basic/basmgr.hxx
@@ -113,9 +113,10 @@ struct LibraryContainerInfo
     ::com::sun::star::uno::Reference< com::sun::star::script::XPersistentLibraryContainer > mxScriptCont;
     ::com::sun::star::uno::Reference< com::sun::star::script::XPersistentLibraryContainer > mxDialogCont;
     OldBasicPassword* mpOldBasicPassword;
+    bool mbVBACompatOn;
 
     LibraryContainerInfo()
-        :mpOldBasicPassword( NULL )
+        :mpOldBasicPassword( NULL ), mbVBACompatOn( false )
     {
     }
 
@@ -127,7 +128,7 @@ struct LibraryContainerInfo
     )
         : mxScriptCont( xScriptCont )
         , mxDialogCont( xDialogCont )
-        , mpOldBasicPassword( pOldBasicPassword )
+        , mpOldBasicPassword( pOldBasicPassword ), mbVBACompatOn( false )
 	{}
 };
 
diff --git basic/source/basmgr/basmgr.cxx basic/source/basmgr/basmgr.cxx
index 1c8962c..0a4ca77 100644
--- basic/source/basmgr/basmgr.cxx
+++ basic/source/basmgr/basmgr.cxx
@@ -61,6 +61,7 @@
 
 // Library API, implemented for XML import/export
 
+#include <com/sun/star/script/XVBACompat.hpp>
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/container/XContainer.hpp>
 #include <com/sun/star/script/XStarBasicAccess.hpp>
@@ -291,6 +292,12 @@ void SAL_CALL BasMgrContainerListenerImpl::elementInserted( const ContainerEvent
 	{
         Reference< XLibraryContainer > xScriptCont( Event.Source, UNO_QUERY );
 		insertLibraryImpl( xScriptCont, mpMgr, Event.Element, aName );
+                Reference<  XVBACompat > xCompat( xScriptCont, UNO_QUERY );
+                if ( xCompat.is() )
+                {
+		    StarBASIC* pLib = mpMgr->GetLib( aName );
+                    pLib->SetVBAEnabled( xCompat->getVBACompatModeOn() );
+                }
 	}
 	else
 	{
@@ -831,6 +838,12 @@ void BasicManager::SetLibraryContainerInfo( const LibraryContainerInfo& rInfo )
 
 	Reference< XLibraryContainer > xScriptCont( mpImpl->maContainerInfo.mxScriptCont.get() );
 	StarBASIC* pStdLib = GetStdLib();
+        Reference< XVBACompat > xCompat( GetScriptLibraryContainer(), UNO_QUERY );
+        if ( xCompat.is() )
+                mpImpl->maContainerInfo.mbVBACompatOn = xCompat->getVBACompatModeOn();    
+	// Std is created regardless of any persisted Libraries, so.. we need
+	// to make sure we set its compat mode here
+	pStdLib->SetVBAEnabled( mpImpl->maContainerInfo.mbVBACompatOn );
 	String aLibName = pStdLib->GetName();
 	if( xScriptCont.is() )
 	{
diff --git basic/source/inc/namecont.hxx basic/source/inc/namecont.hxx
index c099b01..7a99f86 100644
--- basic/source/inc/namecont.hxx
+++ basic/source/inc/namecont.hxx
@@ -113,6 +113,11 @@ NameContainerNameMap;
 
 
 //============================================================================
+class ItemConvertor
+{
+public:
+    virtual bool convert(com::sun::star::uno::Any& item ) = 0;
+};
 
 class NameContainer : public ::cppu::BaseMutex, public NameContainerHelper
 {
@@ -136,7 +141,7 @@ public:
 
 	void setEventSource( ::com::sun::star::uno::XInterface* pxEventSource )
 		{ mpxEventSource = pxEventSource; }
-
+        virtual bool convertContainer( const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor );
     // Methods XElementAccess
     virtual ::com::sun::star::uno::Type SAL_CALL getElementType(  ) 
 		throw(::com::sun::star::uno::RuntimeException);
@@ -251,7 +256,7 @@ protected:
 	sal_Bool        mbOwnBasMgr;
 
     InitMode meInitMode;
-
+    bool mbVBACompatModeOn;
 	void implStoreLibrary( SfxLibrary* pLib,
 							const ::rtl::OUString& aName,
 							const ::com::sun::star::uno::Reference< ::com::sun::star::embed::XStorage >& xStorage );
@@ -334,7 +339,7 @@ protected:
     virtual const sal_Char* SAL_CALL    getOldInfoFileName() const = 0;
     virtual const sal_Char* SAL_CALL    getLibElementFileExtension() const = 0;
     virtual const sal_Char* SAL_CALL    getLibrariesDir() const = 0;
-
+    virtual void convertLibraryEntries() { /*default bogus implementation*/}
     // Handle maLibInfoFileURL and maStorageURL correctly
     void checkStorageURL
     (
@@ -567,6 +572,7 @@ private:
 	sal_Bool mbSharedIndexFile;
 	sal_Bool mbExtension;
 
+	::xmlscript::ObjectModuleDescHash mhCodeNameToObjDesc;
 	// Additional functionality for localisation
 	// Provide modify state including resources
 	virtual sal_Bool isModified( void ) = 0;
@@ -660,6 +666,7 @@ public:
 	virtual void SAL_CALL removeContainerListener( const ::com::sun::star::uno::Reference< 
 		::com::sun::star::container::XContainerListener >& xListener ) 
 			throw (::com::sun::star::uno::RuntimeException);
+        virtual bool convertContainer( const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor );
 
 protected:
 	virtual bool SAL_CALL isLibraryElementValid( ::com::sun::star::uno::Any aElement ) const = 0;
diff --git basic/source/inc/scriptcont.hxx basic/source/inc/scriptcont.hxx
index 1679b30..b9d3415 100644
--- basic/source/inc/scriptcont.hxx
+++ basic/source/inc/scriptcont.hxx
@@ -97,6 +97,7 @@ class SfxScriptLibraryContainer : public SfxLibraryContainer, public OldBasicPas
     virtual const sal_Char* SAL_CALL    getOldInfoFileName() const;
     virtual const sal_Char* SAL_CALL    getLibElementFileExtension() const;
     virtual const sal_Char* SAL_CALL    getLibrariesDir() const;
+    virtual void convertLibraryEntries();
 
 public:
 	SfxScriptLibraryContainer( void );
@@ -161,7 +162,7 @@ public:
     (
         ModifiableHelper& _rModifiable,
         const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xMSF,
-	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI
+	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI, bool bVBACompat
     );
 
 	SfxScriptLibrary
@@ -169,7 +170,7 @@ public:
         ModifiableHelper& _rModifiable,
         const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& xMSF,
 	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI,
-        const ::rtl::OUString& aLibInfoFileURL, const ::rtl::OUString& aStorageURL, sal_Bool ReadOnly
+        const ::rtl::OUString& aLibInfoFileURL, const ::rtl::OUString& aStorageURL, sal_Bool ReadOnly, bool bVBACOmpat
     );
 
     static bool containsValidModule( const ::com::sun::star::uno::Any& _rElement );
diff --git basic/source/runtime/step2.cxx basic/source/runtime/step2.cxx
index 1f659e1..7382974 100644
--- basic/source/runtime/step2.cxx
+++ basic/source/runtime/step2.cxx
@@ -39,6 +39,7 @@
 #include "sbintern.hxx"
 #include "sbunoobj.hxx"
 #include "opcodes.hxx"
+#include "basic/sbobjmod.hxx"
 
 #include <com/sun/star/container/XIndexAccess.hpp>
 #include <com/sun/star/script/XDefaultMethod.hpp>
@@ -708,7 +709,6 @@ void SbiRuntime::StepELEM( UINT32 nOp1, UINT32 nOp2 )
 	// #74254 Jetzt per Liste
 	if( pObj )
 		SaveRef( (SbxVariable*)pObj );
-
 	PushVar( FindElement( pObj, nOp1, nOp2, SbERR_NO_METHOD, FALSE ) );
 }
 
diff --git basic/source/uno/namecont.cxx basic/source/uno/namecont.cxx
index ac96039..52efd0c 100644
--- basic/source/uno/namecont.cxx
+++ basic/source/uno/namecont.cxx
@@ -75,6 +75,7 @@
 #endif
 #include <cppuhelper/exc_hlp.hxx>
 #include <basic/sbmod.hxx>
+#include "sbunoobj.hxx"
 
 #ifndef _COM_SUN_STAR_SCRIPT_MODULEINFO_HPP_
 #include <com/sun/star/script/ModuleInfo.hpp>
@@ -104,12 +105,85 @@ using namespace osl;
 
 using com::sun::star::uno::Reference;
 
+// #TODO move this to SfxLibrary ? probably we need to to gaurantee
+// consistency 
+::xmlscript::ObjectModuleDescHash lcl_getObjModDescHash( SfxLibrary& rLib )
+{
+	uno::Sequence< ::rtl::OUString > sModuleNames = rLib.getElementNames();
+	sal_Int32 nElem = sModuleNames.getLength();
+	::xmlscript::ObjectModuleDescHash hResult;
+	for ( sal_Int32 i = 0; i < nElem; ++i )
+	{
+		ModuleInfo mInfo;
+		rtl::OUString sCodeName( sModuleNames[ i ] );
+		if ( rLib.getByName( sCodeName ) >>= mInfo )
+		{
+			::xmlscript::ObjectModuleDesc aDesc;
+			aDesc.mnModuleType = mInfo.ModuleType;
+			switch ( mInfo.ModuleType )
+			{
+				case ModuleType::Form:
+					aDesc.msObjectName = sCodeName;
+					hResult[ sCodeName ] = aDesc;
+					break;
+				case ModuleType::Document:
+				{
+					Reference< XServiceInfo > xSI( mInfo.ModuleObject, UNO_QUERY );
+					if ( xSI.is() && xSI->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.excel.Workbook" ) ) ) )
+						aDesc.msObjectName = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ThisWorkbook" ) ); 
+					else
+					{
+						SbUnoObjectRef pSbUnoObject = new SbUnoObject( String(), uno::makeAny( mInfo.ModuleObject ) );
+						SbxVariable* pVar = pSbUnoObject->Find( String( RTL_CONSTASCII_USTRINGPARAM("Name") ), SbxCLASS_DONTCARE );
+						if ( pVar )
+						{
+							pVar->Broadcast( SBX_HINT_DATAWANTED );
+							if ( pVar->SbxValue::GetType() == SbxSTRING )
+							{
+								aDesc.msObjectName = pVar->GetString();
+								hResult[ sCodeName ] = aDesc;
+							}
+						}
+					}
+				}
+				case ModuleType::Class:
+				case ModuleType::Normal:
+					break; // no codenames for these
+				default:
+					break; // shouldn't get here ( #TODO assertion or whatever )
+			}
+		}
+	}
+	return hResult;
+}
+
 // #i34411: Flag for error handling during migration 
 static bool GbMigrationSuppressErrors = false;
 
 //============================================================================
 // Implementation class NameContainer
 
+bool 
+NameContainer::convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor )
+{
+        bool bRes = true;
+        uno::Sequence< uno::Any > mCopyValues( mValues );
+	for ( sal_Int32	i = 0; bRes && i < mCopyValues.getLength();  ++i )
+	{
+		if ( !aConvertor.convert( mCopyValues[ i ] ) )
+                {
+			bRes = false;
+                        break;
+                }
+	}
+	if ( bRes )
+        {
+                mValues = mCopyValues;
+		mType = rNewType;
+        }
+	return bRes;
+}
+
 // Methods XElementAccess
 Type NameContainer::getElementType()
 	throw(RuntimeException)
@@ -158,7 +232,7 @@ void NameContainer::replaceByName( const OUString& aName, const Any& aElement )
 	throw(IllegalArgumentException, NoSuchElementException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-    if( mType != aAnyType && aAnyType != getCppuType( static_cast< ModuleInfo* >( NULL ) ) )
+    if( mType != aAnyType )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
@@ -200,7 +274,7 @@ void NameContainer::insertByName( const OUString& aName, const Any& aElement )
 	throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-    if( mType != aAnyType && aAnyType != getCppuType( static_cast< ModuleInfo* >( NULL ) ) )
+    if( mType != aAnyType )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
@@ -339,6 +413,7 @@ SfxLibraryContainer::SfxLibraryContainer( void )
     , mbOasis2OOoFormat( sal_False )
     , mpBasMgr( NULL )
     , mbOwnBasMgr( sal_False )
+    , mbVBACompatModeOn( sal_False )
 {
     DBG_CTOR( SfxLibraryContainer, NULL );
 
@@ -798,11 +873,23 @@ sal_Bool SfxLibraryContainer::init_Impl(
                 OSL_ENSURE( 0, OUStringToOString( e.Message, RTL_TEXTENCODING_ASCII_US ).getStr() );
                 return sal_False;
             }
-
 		    sal_Int32 nLibCount = pLibArray->mnLibCount;
 		    for( sal_Int32 i = 0 ; i < nLibCount ; i++ )
 		    {
 			    ::xmlscript::LibDescriptor& rLib = pLibArray->mpLibs[i];
+        // mbVBACompatMode needs to be setup before createLibrary is called
+		// ( and this is called before the library desc. is read )
+        // this implies we need an xml property at the script-lc.xml
+		//
+
+		if ( rLib.aName.equalsAscii("Standard") )
+		{
+			OSL_TRACE("*** iteration %d have got Standard Library**** VBA MODE is %d", i, rLib.bVBAMode );
+						// can't use the api here ( because setVBACompat will try to 
+						// convert the Libraries )
+           		    	//SfxLibraryContainer::setVBACompatModeOn( rLib.bVBAMode );
+						mbVBACompatModeOn = rLib.bVBAMode;
+		}
 
 			    // Check storage URL
 			    OUString aStorageURL = rLib.aStorageURL;
@@ -897,7 +984,9 @@ sal_Bool SfxLibraryContainer::init_Impl(
 				    if( !pImplLib->mbInitialised && (!bStorage || xLibraryStor.is()) )
 				    {
 					    OUString aIndexFileName;
+						
 					    sal_Bool bLoaded = implLoadLibraryIndexFile( pImplLib, rLib, xLibraryStor, aIndexFileName );
+						OSL_TRACE("** Loaded %s", rtl::OUStringToOString( rLib.aName, RTL_TEXTENCODING_UTF8 ).getStr() );
 					    if( bLoaded && aLibName != rLib.aName )
 					    {
 						    OSL_ENSURE( 0, "Different library names in library"
@@ -1135,6 +1224,7 @@ sal_Bool SfxLibraryContainer::init_Impl(
 						Reference< XNameContainer > xLib = createLibrary( aLibName );
            				SfxLibrary* pNewLib = static_cast< SfxLibrary* >( xLib.get() );
 						pNewLib->mbLoaded = false;
+
 						pNewLib->implSetModified( sal_False );
 						checkStorageURL( aLibFolder, pNewLib->maLibInfoFileURL,
 							pNewLib->maStorageURL, pNewLib->maUnexpandedStorageURL );
@@ -1724,21 +1814,60 @@ void SfxLibraryContainer::implImportLibDescriptor
     {
 	    sal_Int32 nElementCount = rLib.aElementNames.getLength();
 	    const OUString* pElementNames = rLib.aElementNames.getConstArray();
-	    Any aDummyElement = createEmptyLibraryElement();
+	    Any aDummyElement;
+            ::xmlscript::ObjectModuleDescHash::iterator it_end = rLib.hModuleTypeDesc.end();
 	    for( sal_Int32 i = 0 ; i < nElementCount ; i++ )
 	    {
+                    if ( getVBACompatModeOn() ) 
+                    {
+                        ::xmlscript::ObjectModuleDescHash::iterator it = rLib.hModuleTypeDesc.find( pElementNames[i] );
+                    
+                        com::sun::star::script::ModuleInfo mInfo;
+                        mInfo.ModuleType = ModuleType::Normal;
+                        mInfo.ModuleName = pElementNames[i];
+                        if ( it != it_end )
+                        {
+                            mInfo.ModuleType = it->second.mnModuleType;
+                            // hack for userform, needs to know about the document
+                            // well really it needs the dialog library
+                            if (  mInfo.ModuleType == ModuleType::Form )
+                                mInfo.ModuleObject = mxOwnerDocument;
+                            else
+                            {
+                                try
+                                {
+                                    Reference< XMultiServiceFactory> xSF( mxOwnerDocument.get(), uno::UNO_QUERY);
+                                    uno::Reference< container::XNameAccess > xVBACodeNamedObjectAccess;
+    				    if ( xSF.is() )
+				        xVBACodeNamedObjectAccess.set( xSF->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAObjectModuleObjectProvider"))), uno::UNO_QUERY );    
+                                    // get the api object for the codename
+                                    if ( xVBACodeNamedObjectAccess.is() )
+                                        mInfo.ModuleObject.set( xVBACodeNamedObjectAccess->getByName( mInfo.ModuleName ), uno::UNO_QUERY );
+                                }
+                                catch( Exception& e )
+                                { 
+                                    DBG_UNHANDLED_EXCEPTION();
+                                }
+
+                            }
+                        }
+                        aDummyElement <<= mInfo;
+                    }
+                    else
+	                aDummyElement = createEmptyLibraryElement();
 		    pLib->maNameContainer.insertByName( pElementNames[i], aDummyElement );
-	    }
+        }
         pLib->mbPasswordProtected = rLib.bPasswordProtected;
         pLib->mbReadOnly = rLib.bReadOnly;
 		pLib->mbPreload  = rLib.bPreload;
         pLib->implSetModified( sal_False );
 
         pLib->mbInitialised = sal_True;
+        pLib->mhCodeNameToObjDesc = rLib.hModuleTypeDesc;
+
     }
 }
 
-
 // Methods of new XLibraryStorage interface?
 void SfxLibraryContainer::storeLibraries_Impl( const uno::Reference< embed::XStorage >& xStorage, sal_Bool bComplete )
 {
@@ -1851,7 +1980,18 @@ void SfxLibraryContainer::storeLibraries_Impl( const uno::Reference< embed::XSto
 		rLib.bPreload = pImplLib->mbPreload;
 		rLib.bPasswordProtected = pImplLib->mbPasswordProtected;
 		rLib.aElementNames = pImplLib->getElementNames();
-
+		// #FIXME the codenames probably should be in the LibDescriptor 
+		// ok there should be a special code name for the document ( e.g. ThisWorkbook, ThisDocument etc.) this probably should exist in LibDescriptorArray
+		// hmm there possibly could be a problem distinguising that on
+		// excel import ( because it is just another Document Module )
+		// Hmm but also vba mode should only really be relevant for Standand 
+		// Library ( and I would say no other libraries should even exist )
+		// so, leaving for the moment
+		if ( pName->equals( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Standard") ) ) )
+		{
+			rLib.bVBAMode = getVBACompatModeOn();
+			rLib.hModuleTypeDesc = lcl_getObjModDescHash( *pImplLib );
+		}
 		if( pImplLib->implIsModified() || bComplete )
 		{
             // Can we copy the storage?
@@ -2319,13 +2459,29 @@ void SAL_CALL SfxLibraryContainer::loadLibrary( const OUString& Name )
 			}
 
 			Any aAny = importLibraryElement( aFile, xInStream );
+
+            com::sun::star::script::ModuleInfo mInfo;
 			if( pImplLib->hasByName( aElementName ) )
             {
+                if ( getVBACompatModeOn() )
+                {
+				    pImplLib->maNameContainer.getByName( aElementName ) >>= mInfo;
+                    aAny >>= mInfo.ModuleSource; 
+                    aAny <<= mInfo;
+                } 
                 if( aAny.hasValue() )
+                {
 				    pImplLib->maNameContainer.replaceByName( aElementName, aAny );
+                }
             }
 			else
             {
+                if ( getVBACompatModeOn() )
+                {
+                    mInfo.ModuleType = ModuleType::Normal;
+                    aAny >>= mInfo.ModuleSource; 
+                    aAny <<= mInfo;
+                }
 				pImplLib->maNameContainer.insertByName( aElementName, aAny );
             }
 		}
@@ -2725,31 +2881,26 @@ OUString SfxLibraryContainer::expand_url( const OUString& url )
 
 ::sal_Bool SAL_CALL SfxLibraryContainer::getVBACompatModeOn() throw (RuntimeException)
 {
-	sal_Bool bVBACompat = sal_False;
-	BasicManager* pBasMgr = getBasicManager();
-	if( pBasMgr )
-	{
-		// get the standard library
-		String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
-		StarBASIC* pBasic = pBasMgr->GetLib( aLibName );
-		if( pBasic )
-			bVBACompat = pBasic->isVBAEnabled();
-	}
-
-	return bVBACompat;
+	return mbVBACompatModeOn;
 }
 
 void SAL_CALL SfxLibraryContainer::setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (RuntimeException)
 {
-	BasicManager* pBasMgr = getBasicManager();
-	if( pBasMgr )
-	{
-		// get the standard library
-		String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
-		StarBASIC* pBasic = pBasMgr->GetLib( aLibName );
-		if( pBasic )
-			pBasic->SetVBAEnabled( _vbacompatmodeon );
-	}
+    // will need to trigger event so that basicmanager can get it	
+    bool bNeedsConversion = ( mbVBACompatModeOn != _vbacompatmodeon );
+    mbVBACompatModeOn =  ( _vbacompatmodeon == sal_True );
+    // for Dialogs 'convertLibraryEntries' does nothing ( for now ) 
+    // for Scripts the Library's NameContainer needs to be converted as follows
+    // When vba mode is turned off
+    // Userform and Document modules need to be deleted
+    //    String -> Any( ModuleInfo ) to
+    //    String -> Any( String ) 
+    // When vba mode is turned on
+    //    String -> Any( String )  to
+    //    String -> Any( ModuleInfo )
+    // Userform and Document modules need to be created
+    if ( bNeedsConversion )
+        convertLibraryEntries(); // for Dialogs this does nothing ( for now )
 }
 
 // Methods XServiceInfo
@@ -2765,6 +2916,12 @@ void SAL_CALL SfxLibraryContainer::setVBACompatModeOn( ::sal_Bool _vbacompatmode
     return sal_False;
 }
 
+bool SfxLibrary::convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor )
+{
+	return maNameContainer.convertContainer( rNewType, aConvertor );
+}
+
+
 //============================================================================
 
 // Implementation class SfxLibrary
diff --git basic/source/uno/sbservices.cxx basic/source/uno/sbservices.cxx
index a2a4ded..aa076ea 100644
--- basic/source/uno/sbservices.cxx
+++ basic/source/uno/sbservices.cxx
@@ -43,6 +43,7 @@ namespace basic
     //--------------------------------------------------------------------
     extern void createRegistryInfo_SfxDialogLibraryContainer();
     extern void createRegistryInfo_SfxScriptLibraryContainer();
+    extern void createRegistryInfo_PersistedReadOnlyCodeNames();
 
     static void initializeModule()
     {
@@ -54,6 +55,7 @@ namespace basic
             {
                 createRegistryInfo_SfxDialogLibraryContainer();
                 createRegistryInfo_SfxScriptLibraryContainer();
+                createRegistryInfo_PersistedReadOnlyCodeNames();
             }
         }
     }
diff --git basic/source/uno/scriptcont.cxx basic/source/uno/scriptcont.cxx
index 4a46e98..1a84f9f 100644
--- basic/source/uno/scriptcont.cxx
+++ basic/source/uno/scriptcont.cxx
@@ -157,7 +157,7 @@ SfxScriptLibraryContainer::SfxScriptLibraryContainer( const uno::Reference< embe
 SfxLibrary* SfxScriptLibraryContainer::implCreateLibrary( const OUString& aName )
 {
 	(void)aName;	// Only needed for SfxDialogLibrary
-	SfxLibrary* pRet = new SfxScriptLibrary( maModifiable, mxMSF, mxSFI );
+	SfxLibrary* pRet = new SfxScriptLibrary( maModifiable, mxMSF, mxSFI, getVBACompatModeOn() );
 	return pRet;
 }
 
@@ -168,7 +168,7 @@ SfxLibrary* SfxScriptLibraryContainer::implCreateLibraryLink
 	(void)aName;	// Only needed for SfxDialogLibrary
 	SfxLibrary* pRet =
 		new SfxScriptLibrary
-            ( maModifiable, mxMSF, mxSFI, aLibInfoFileURL, StorageURL, ReadOnly );
+            ( maModifiable, mxMSF, mxSFI, aLibInfoFileURL, StorageURL, ReadOnly, getVBACompatModeOn() );
 	return pRet;
 }
 
@@ -1068,6 +1068,11 @@ SfxScriptLibraryContainer:: HasExecutableCode( const ::rtl::OUString& Library )
 
 //============================================================================
 // Service
+class PersistedReadOnlyCodeNames;
+void createRegistryInfo_PersistedReadOnlyCodeNames()
+{
+    static OAutoRegistration< PersistedReadOnlyCodeNames > aAutoRegistration;
+}
 void createRegistryInfo_SfxScriptLibraryContainer()
 {
     static OAutoRegistration< SfxScriptLibraryContainer > aAutoRegistration;
@@ -1121,8 +1126,8 @@ Reference< XInterface > SAL_CALL SfxScriptLibraryContainer::Create
 // Ctor
 SfxScriptLibrary::SfxScriptLibrary( ModifiableHelper& _rModifiable,
                                     const Reference< XMultiServiceFactory >& xMSF,
-                                    const Reference< XSimpleFileAccess >& xSFI )
-	: SfxLibrary( _rModifiable, getCppuType( (const OUString *)0 ), xMSF, xSFI )
+                                    const Reference< XSimpleFileAccess >& xSFI, bool bVBA )
+	: SfxLibrary( _rModifiable, bVBA ? getCppuType( ( const script::ModuleInfo*)0 ) : getCppuType( (const OUString *)0 ), xMSF, xSFI )
     , mbLoadedSource( sal_False )
     , mbLoadedBinary( sal_False )
 {
@@ -1133,8 +1138,8 @@ SfxScriptLibrary::SfxScriptLibrary( ModifiableHelper& _rModifiable,
                                     const Reference< XSimpleFileAccess >& xSFI,
                                     const OUString& aLibInfoFileURL,
                                     const OUString& aStorageURL,
-                                    sal_Bool ReadOnly )
-	: SfxLibrary( _rModifiable, getCppuType( (const OUString *)0 ), xMSF, xSFI,
+                                    sal_Bool ReadOnly, bool bVBA )
+	: SfxLibrary( _rModifiable, bVBA ? getCppuType( ( const script::ModuleInfo*)0 ) : getCppuType( (const OUString *)0 ), xMSF, xSFI,
 						aLibInfoFileURL, aStorageURL, ReadOnly)
     , mbLoadedSource( sal_False )
     , mbLoadedBinary( sal_False )
@@ -1188,7 +1193,193 @@ bool SAL_CALL SfxScriptLibrary::isLibraryElementValid( ::com::sun::star::uno::An
 {
     return SfxScriptLibrary::containsValidModule( aElement );
 }
+typedef ::cppu::WeakImplHelper3< container::XNameAccess, lang::XInitialization, lang::XServiceInfo > ReadOnlyCodeNames_BASE;
+
+// XNameAccess, codename to/from objectnames
+class PersistedReadOnlyCodeNames : ReadOnlyCodeNames_BASE
+{
+typedef std::hash_map< rtl::OUString, rtl::OUString, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > CodeNameHash;
 
+    CodeNameHash mCodeNameToObjectNames;
+public:
+    PersistedReadOnlyCodeNames()
+    {
+    }
+    // Methods - XInitialise
+    virtual void SAL_CALL initialize( const uno::Sequence< uno::Any >& aArguments ) throw (uno::Exception, uno::RuntimeException)
+    {
+        if ( !aArguments.getLength() )
+            throw RuntimeException();
+        Reference< document::XStorageBasedDocument > xDocument( aArguments[ 0 ], uno::UNO_QUERY_THROW ); 
+        Reference< embed::XStorage > xDocStorage; 
+        try
+        {
+            Reference< XMultiServiceFactory > xMSF = comphelper::getProcessServiceFactory();
+            Reference< XServiceInfo > xSI( xDocument, UNO_QUERY_THROW );
+            if ( xSI->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.document.OfficeDocument" ) ) ) )
+                xDocStorage.set( xDocument->getDocumentStorage(), UNO_QUERY_THROW );
+            if ( xDocStorage.is() ) // not a 'real' document
+            {
+                rtl::OUString codeNameDir( RTL_CONSTASCII_USTRINGPARAM("Basic") );
+                rtl::OUString standardDir( RTL_CONSTASCII_USTRINGPARAM("Standard") );
+                rtl::OUString codeNameFile( RTL_CONSTASCII_USTRINGPARAM("script-lb.xml") );
+    
+                uno::Reference< embed::XStorage > xLibrariesStor( xDocStorage->openStorageElement( codeNameDir, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< embed::XStorage > xStandardStor( xLibrariesStor->openStorageElement( standardDir, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< io::XStream > xStream( xStandardStor->openStreamElement( codeNameFile, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< io::XInputStream > xInput( xStream->getInputStream(), UNO_QUERY_THROW );
+                ::xmlscript::LibDescriptor aLib;
+                InputSource source;
+                source.aInputStream = xInput;
+
+                Reference< XParser > xParser( xMSF->createInstance( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.xml.sax.Parser") ) ), UNO_QUERY_THROW );
+                xParser->setDocumentHandler(  ::xmlscript::importLibraryCodeNames( aLib ) );
+                xParser->parseStream( source );
+                
+                ::xmlscript::ObjectModuleDescHash::iterator it_end = aLib.hModuleTypeDesc.end();
+                for ( ::xmlscript::ObjectModuleDescHash::iterator it = aLib.hModuleTypeDesc.begin(); it != it_end; ++it )
+                {
+                    if ( it->second.msObjectName.getLength() > 0 )
+                        mCodeNameToObjectNames[ it->second.msObjectName ] = it->first;
+                }
+            }
+        }
+        catch ( Exception& e )
+        {
+            OSL_TRACE("Urk, should never get here, help!!");
+        }
+    }
+    // Methods - XNameAccess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        ::xmlscript::CodeNameHash::iterator it = mCodeNameToObjectNames.find( aName );
+        if ( it == mCodeNameToObjectNames.end() )
+            throw container::NoSuchElementException();
+        return uno::makeAny( it->second );
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< ::rtl::OUString > sNames( mCodeNameToObjectNames.size() );
+        ::rtl::OUString* pStr = sNames.getArray();
+        ::xmlscript::CodeNameHash::iterator it = mCodeNameToObjectNames.begin();
+        ::xmlscript::CodeNameHash::iterator it_end = mCodeNameToObjectNames.end();
+        for ( ; it != it_end ; ++it, ++pStr )
+            *pStr = it->first;    
+        return sNames;
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        return ( mCodeNameToObjectNames.find( aName ) != mCodeNameToObjectNames.end() );
+    }
+    // Methods - XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return ::getCppuType( (const rtl::OUString *)0 );
+    }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mCodeNameToObjectNames.size() > 0 );
+    }
+    // Methods XServiceInfo
+    virtual ::rtl::OUString SAL_CALL getImplementationName( ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        return getImplementationName_static(); 
+    }
+    virtual ::sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > sNames( getSupportedServiceNames() );
+        rtl::OUString* pStr = sNames.getArray(); 
+        rtl::OUString* pEnd = ( sNames.getArray() + sNames.getLength() ); 
+        for ( ; pStr != pEnd ; ++pStr )
+        {
+            if ( (*pStr).equals( ServiceName ) )
+                return sal_True; 
+        } 
+        return sal_False;
+    }
+    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames( ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        return getSupportedServiceNames_static();
+    }
+    // Service
+    static ::com::sun::star::uno::Sequence< ::rtl::OUString > getSupportedServiceNames_static()
+    {
+        uno::Sequence< rtl::OUString > sServiceNames(1);
+        sServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.PersistedCodeNames"));
+        return sServiceNames;
+    }
+    static ::rtl::OUString getImplementationName_static()
+    {
+         static OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("PersistedReadOnlyCodeNames") );
+         return sImplName;
+    }
+
+    static Reference< XInterface > SAL_CALL Create ( const Reference< XComponentContext >& xServiceManager ) throw( Exception )
+    {
+        Reference< XInterface > xRet =
+        static_cast< XInterface* >( static_cast< OWeakObject* >( new PersistedReadOnlyCodeNames() ));
+        return xRet;
+    }
+};
+class ConvertEntryToVbaEntry : public ItemConvertor
+{
+	virtual bool convert( Any& item )
+	{
+	    // All entries are converted to 'Normal' modules
+	    // Document Modules need to be created externall ( e.g. these are under the control
+	    // of the document itself )
+	    rtl::OUString sSource;
+	    bool bRes = false;
+	
+	    if ( item >>= sSource )
+	    {
+	        script::ModuleInfo mInfo;
+	        mInfo.ModuleSource = sSource;
+	        mInfo.ModuleType = script::ModuleType::Normal;
+	        item <<= mInfo;
+	        bRes = true;
+	    }
+	    return bRes; 
+	}
+};
+
+class ConvertEntryFromVbaEntry : public ItemConvertor
+{
+	bool convert( Any& item )
+	{
+	    bool bRes = false;
+	    script::ModuleInfo mInfo;
+	    if ( item >>= mInfo )
+	    {
+	        item <<= mInfo.ModuleSource;
+	        bRes = true;
+	    }
+	    return bRes;
+	}
+};
+
+void SfxScriptLibraryContainer::convertLibraryEntries()
+{
+    if ( getVBACompatModeOn() )
+    {
+        // going from non-vba to vba        
+        SfxLibrary* pImplLib = getImplLib( String( RTL_CONSTASCII_USTRINGPARAM("Standard") ) );
+        
+	ConvertEntryToVbaEntry converter;
+	bool bRes = pImplLib ? pImplLib->convertContainer( getCppuType( ( const script::ModuleInfo* ) NULL ), converter ) : false;
+    }
+    else
+    { 
+        // going from vba to non-vba        
+        // we must delete all Document modules
+        // what we also must do is warn the user that this is going to happen ( see. Excel )
+        // needs interaction handler love ( perhaps that needs to be passed into the setVBACompat ) 
+        // or perhaps we can access the documents InteractionHandler ?
+        SfxLibrary* pImplLib = getImplLib( String( RTL_CONSTASCII_USTRINGPARAM("Standard") ) );
+	ConvertEntryFromVbaEntry convertor;
+	bool bRes = pImplLib ? pImplLib->convertContainer( getCppuType( ( const rtl::OUString*) NULL ), convertor ) : false;
+    }
+}
 //============================================================================
 
 }   // namespace basic
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 35fd858..8b608f1 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -34,6 +34,7 @@
 
 #include <vcl/prntypes.hxx>
 #include <vcl/timer.hxx>
+#include <com/sun/star/container/XNameAccess.hpp>
 #include <com/sun/star/uno/Reference.hxx>
 #include <vos/ref.hxx>
 #include "scdllapi.h"
@@ -319,7 +320,7 @@ private:
 	Timer				aTrackTimer;
 
     com::sun::star::uno::Reference< com::sun::star::document::XVbaEventsHelper > mxVbaEventsHelper;
-
+        com::sun::star::uno::Reference< com::sun::star::container::XNameAccess > mxCodeNames;
 public:
     ScTabOpList         aTableOpList;		            // list of ScInterpreterTableOpParams currently in use
     ScInterpreterTableOpParams  aLastTableOpParams;     // remember last params
@@ -439,6 +440,7 @@ public:
 								SfxObjectShell* pDocShell = NULL );
 					~ScDocument();
 
+    com::sun::star::uno::Reference< com::sun::star::container::XNameAccess > GetPersistedCodeNames() throw( com::sun::star::uno::RuntimeException );
 	inline ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >
 					GetServiceManager() const { return xServiceManager; }
 
diff --git sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
index 7bd7a09..a9bda22 100644
--- sc/source/core/data/documen2.cxx
+++ sc/source/core/data/documen2.cxx
@@ -263,6 +263,7 @@ ScDocument::ScDocument( ScDocumentMode	eMode,
 
 	aTrackTimer.SetTimeoutHdl( LINK( this, ScDocument, TrackTimeHdl ) );
 	aTrackTimer.SetTimeout( 100 );
+	aDocCodeName = String( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
 }
 
 
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index a94a264..fee5545 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -92,6 +92,9 @@
 #include "postit.hxx"
 #include "tabprotection.hxx"
 #include "externalrefmgr.hxx"
+#include <comphelper/processfactory.hxx>
+
+using namespace ::com::sun::star;
 
 struct ScDefaultAttr
 {
@@ -4485,5 +4488,30 @@ BOOL ScDocument::NeedPageResetAfterTab( SCTAB nTab ) const
 	return FALSE;		// sonst nicht
 }
 
+uno::Reference< container::XNameAccess > 
+ScDocument::GetPersistedCodeNames() throw( uno::RuntimeException )
+{
+    SfxObjectShell* pObjShell = GetDocumentShell();
+    if ( pShell && !mxCodeNames.is() )
+    {
+        uno::Sequence< uno::Any > aArgs( 1 );
+        aArgs[ 0 ] = uno::makeAny( pObjShell->GetModel() );
+        mxCodeNames.set( ::comphelper::getProcessServiceFactory()->createInstanceWithArguments(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.PersistedCodeNames")), aArgs),  uno::UNO_QUERY );
+        if ( mxCodeNames.is() )
+        {
+            rtl::OUString sWorkbook( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
+            if ( mxCodeNames->hasByName( sWorkbook ) )
+            {
+		
+                rtl::OUString sCodeName;
+                mxCodeNames->getByName( sWorkbook ) >>= sCodeName;
+                SetCodeName( sCodeName );
+            }
+        }
+    }
+    return mxCodeNames;
+}
+
+
 
 
diff --git sc/source/filter/xml/xmlsubti.cxx sc/source/filter/xml/xmlsubti.cxx
index c56f867..a7b3c40 100644
--- sc/source/filter/xml/xmlsubti.cxx
+++ sc/source/filter/xml/xmlsubti.cxx
@@ -220,6 +220,7 @@ void ScMyTables::NewSheet(const rtl::OUString& sTableName, const rtl::OUString&
 				uno::Reference <container::XIndexAccess> xIndex( xSheets, uno::UNO_QUERY );
 				if ( xIndex.is() )
 				{
+
                     xCurrentSheet.set(xIndex->getByIndex(nCurrentSheet), uno::UNO_QUERY);
 					if ( xCurrentSheet.is() )
 					{
@@ -246,6 +247,27 @@ void ScMyTables::NewSheet(const rtl::OUString& sTableName, const rtl::OUString&
 									}
 								}
 						}
+
+						ScDocument *pDoc = ScXMLConverter::GetScDocument(rImport.GetModel());
+						// Codenames need to be set as sheets are created and read
+						if ( pDoc  )
+						{
+							String sName;
+							pDoc->GetName( nCurrentSheet, sName );
+							OSL_TRACE("** import processing %s", rtl::OUStringToOString( sName, RTL_TEXTENCODING_UTF8 ).getStr() );
+	                        rtl::OUString sOUName( sName );
+							uno::Reference< container::XNameAccess > xCodeNames( pDoc->GetPersistedCodeNames() );
+							if( xCodeNames.is() && xCodeNames->hasByName( sName ) )
+							{
+								rtl::OUString sOUSCodeName;
+								xCodeNames->getByName( sName ) >>= sOUSCodeName;
+							    OSL_TRACE("** import processing setting codename %s for %s", rtl::OUStringToOString( sOUSCodeName, RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString( sName, RTL_TEXTENCODING_UTF8 ).getStr() );
+								rImport.LockSolarMutex();
+								String sCodeName( sOUSCodeName );
+								pDoc->SetCodeName( nCurrentSheet, sCodeName );		
+								rImport.UnlockSolarMutex();
+							}
+						}
 						rImport.SetTableStyle(sStyleName);
 
                         if ( sStyleName.getLength() )
diff --git sc/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
index 073a68d..31e9003 100644
--- sc/source/ui/docshell/docsh.cxx
+++ sc/source/ui/docshell/docsh.cxx
@@ -131,6 +131,7 @@
 #include "cellsuno.hxx"
 #include <com/sun/star/document/XVbaEventsHelper.hpp>
 #include <com/sun/star/document/VbaEventId.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 using namespace com::sun::star;
 using namespace com::sun::star::document::VbaEventId;
@@ -299,6 +300,14 @@ void ScDocShell::BeforeXMLLoading()
 		ScColumn::bDoubleAlloc = sal_True;
 }
 
+rtl::OUString GetCodeName( ScDocument& aDocument, String& sObjectName )
+{
+    uno::Reference< container::XNameAccess > xCodeNames( aDocument.GetPersistedCodeNames() );
+    rtl::OUString sOUSCodeName;
+    xCodeNames->getByName( sObjectName ) >>= sOUSCodeName;
+    return sOUSCodeName;
+}
+
 void ScDocShell::AfterXMLLoading(sal_Bool bRet)
 {
 	if (GetCreateMode() != SFX_CREATE_MODE_ORGANIZER)
@@ -372,8 +381,32 @@ void ScDocShell::AfterXMLLoading(sal_Bool bRet)
 
         // suppress VBA events when loading the xml
         uno::Reference< document::XVbaEventsHelper > xEvt( aDocument.GetVbaEventsHelper() );
+	OSL_TRACE("About to enable events again");
         if ( xEvt.is() )
             xEvt->setIgnoreEvents( sal_False );
+/*
+        // SetCodenames for each tab  ( and set up the vba DOC Modules ) 
+        SCTAB nTabCount = aDocument.GetTableCount();
+        for (SCTAB i = 0; i < nTabCount; ++i)
+        {
+            String sObjectName;
+            String sCodeName;
+            try
+            {
+                if ( i == 0 )
+                {
+                    sObjectName = String( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
+                    sCodeName = GetCodeName( aDocument, sObjectName );
+                }
+                aDocument.GetName( i, sObjectName );
+                sCodeName = GetCodeName( aDocument, sObjectName );
+                SetDocModuleForCodeName( aDocument, sCodeName );
+            } 
+            catch( uno::Exception& )
+            {
+            }
+        }
+ */           
 	aDocument.SetImportingXML( FALSE );
     aDocument.EnableUndo( TRUE );
     bIsEmpty = FALSE;
diff --git sc/source/ui/vba/vbaeventshelper.cxx sc/source/ui/vba/vbaeventshelper.cxx
index a315af0..b4d0bd9 100644
--- sc/source/ui/vba/vbaeventshelper.cxx
+++ sc/source/ui/vba/vbaeventshelper.cxx
@@ -620,7 +620,7 @@ String ScVbaEventsHelper::getSheetModuleName( SCTAB nTab )
 {
 	ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
 	String aCodeName;
-	pDoc->GetName( nTab, aCodeName);
+	pDoc->GetCodeName( nTab, aCodeName);
 	// Use code name if that exists
 	if ( pExtOptions )
 		aCodeName = pExtOptions->GetCodeName( nTab );
diff --git svx/source/msfilter/svxmsbas.cxx svx/source/msfilter/svxmsbas.cxx
index b00e19c..26b8ca1 100644
--- svx/source/msfilter/svxmsbas.cxx
+++ svx/source/msfilter/svxmsbas.cxx
@@ -54,6 +54,8 @@ using namespace com::sun::star::awt;
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
 #include <com/sun/star/script/ModuleInfo.hpp>
+#include <com/sun/star/script/XVBACompat.hpp>
+
 using namespace com::sun::star::container;
 using namespace com::sun::star::script;
 using namespace com::sun::star::uno;
@@ -272,7 +274,11 @@ BOOL SvxImportMSVBasic::ImportCode_Impl( const String& rStorageName,
             Reference< container::XNameAccess > xVBAObjectForCodeName;
 			if ( !bAsComment )
             {
-                rDocSh.GetBasic()->SetVBAEnabled( true );
+                Reference< XVBACompat > xCompat( xLibContainer, UNO_QUERY );
+                if( xCompat.is() )
+                    xCompat->setVBACompatModeOn( sal_True );
+                else
+                    rDocSh.GetBasic()->SetVBAEnabled( true );
                 Reference< XMultiServiceFactory> xSF(rDocSh.GetModel(), UNO_QUERY);
                 if ( xSF.is() )
                 {
diff --git xmlscript/inc/xmlscript/xmllib_imexp.hxx xmlscript/inc/xmlscript/xmllib_imexp.hxx
index 9a3048f..93826a9 100644
--- xmlscript/inc/xmlscript/xmllib_imexp.hxx
+++ xmlscript/inc/xmlscript/xmllib_imexp.hxx
@@ -34,11 +34,21 @@
 #include <com/sun/star/uno/Sequence.hxx>
 
 #include "xmlscript/xmlns.h"
-
+#include <hash_map>
+#include <com/sun/star/script/ModuleType.hpp>
 
 namespace xmlscript
 {
+struct ObjectModuleDesc
+{
+    rtl::OUString msObjectName;
+    sal_Int32 mnModuleType;
+ObjectModuleDesc() : mnModuleType( ::com::sun::star::script::ModuleType::Normal ) {}
+};
 
+typedef  std::hash_map< rtl::OUString,
+ObjectModuleDesc, ::rtl::OUStringHash,
+::std::equal_to< ::rtl::OUString > > ObjectModuleDescHash;
 //==============================================================================
 // Library container export
 // HACK C++ struct to transport info. Later the container 
@@ -51,10 +61,15 @@ struct LibDescriptor
 	sal_Bool bLink;
 	sal_Bool bReadOnly;
 	sal_Bool bPasswordProtected;
+	sal_Bool bVBAMode;
 	::com::sun::star::uno::Sequence< ::rtl::OUString > aElementNames;
 	sal_Bool bPreload;
+	ObjectModuleDescHash hModuleTypeDesc;
+	LibDescriptor(); 
 };
 
+typedef std::hash_map< rtl::OUString, rtl::OUString, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > CodeNameHash;
+
 struct LibDescriptorArray
 {
     LibDescriptor* mpLibs;
@@ -79,6 +94,11 @@ SAL_CALL exportLibraryContainer(
 SAL_CALL importLibraryContainer( LibDescriptorArray* pLibArray )
 		SAL_THROW( (::com::sun::star::uno::Exception) );
 
+::com::sun::star::uno::Reference<
+    ::com::sun::star::xml::sax::XDocumentHandler >
+SAL_CALL importLibraryCodeNames( LibDescriptor& rLib )
+		SAL_THROW( (::com::sun::star::uno::Exception) );
+
 
 void
 SAL_CALL exportLibrary(
diff --git xmlscript/source/xmldlg_imexp/xmldlg_import.cxx xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
index 5548016..f739361 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
@@ -1880,22 +1880,22 @@ Reference< xml::input::XElement > DialogImport::getStyle(
 //__________________________________________________________________________________________________
 Reference< script::XLibraryContainer > DialogImport::getScriptLibraryContainer()
 {
-	if( !_xScriptLibraryContainer.is() )
-	{
-		try
-		{
-			Reference< document::XStorageBasedDocument > xStorageDoc( _xDoc, UNO_QUERY );
-			if( xStorageDoc.is() )
-				_xScriptLibraryContainer.set(
-									script::DocumentScriptLibraryContainer::create( comphelper_getProcessComponentContext(), xStorageDoc ), 
-									UNO_QUERY );
-		}
-		catch( const Exception& )
-		{
-		}
-	}
-
-	return _xScriptLibraryContainer;
+    Reference< script::XLibraryContainer >  xLib;
+    if ( _xDoc.is() )
+    {
+        Reference< beans::XPropertySet > xProps( _xDoc, UNO_QUERY );
+        if ( xProps.is() )
+        {
+            try
+            {
+                xProps->getPropertyValue( OUSTR("BasicLibraries") ) >>= xLib;
+            }
+            catch( Exception& )
+            {
+            }
+        }
+   }
+   return xLib;
 }
 
 //##################################################################################################
@@ -1911,6 +1911,9 @@ Reference< xml::sax::XDocumentHandler > SAL_CALL importDialogModel(
     uno::Reference< script::XVBACompat > xVBAModeSource( pImport->getScriptLibraryContainer(), uno::UNO_QUERY );
     
     uno::Reference< script::XVBACompat > xVBAModeDest( xDialogModel, uno::UNO_QUERY );
+    bool bOn = false;
+    if ( xVBAModeSource.is() )
+        bOn =  xVBAModeSource->getVBACompatModeOn();
     if ( xVBAModeSource.is() && xVBAModeDest.is() )
         xVBAModeDest->setVBACompatModeOn( xVBAModeSource->getVBACompatModeOn() );
     return ::xmlscript::createDocumentHandler(
diff --git xmlscript/source/xmllib_imexp/imp_share.hxx xmlscript/source/xmllib_imexp/imp_share.hxx
index d602103..fdc0536 100644
--- xmlscript/source/xmllib_imexp/imp_share.hxx
+++ xmlscript/source/xmllib_imexp/imp_share.hxx
@@ -220,7 +220,6 @@ class LibrariesElement : public LibElementBase
     
 protected:
     vector< LibDescriptor > mLibDescriptors;
-
 public:
     virtual Reference< xml::input::XElement > SAL_CALL startChildElement(
         sal_Int32 nUid, OUString const & rLocalName,
@@ -244,7 +243,7 @@ class LibraryElement : public LibElementBase
 {
 protected:
     vector< OUString > mElements;
-
+    ObjectModuleDescHash mObjectDescs;
 public:
 
     virtual Reference< xml::input::XElement > SAL_CALL startChildElement(
diff --git xmlscript/source/xmllib_imexp/xmllib_export.cxx xmlscript/source/xmllib_imexp/xmllib_export.cxx
index 4f6de54..1ee7c50 100644
--- xmlscript/source/xmllib_imexp/xmllib_export.cxx
+++ xmlscript/source/xmllib_imexp/xmllib_export.cxx
@@ -44,6 +44,28 @@ namespace xmlscript
 static OUString aTrueStr ( RTL_CONSTASCII_USTRINGPARAM("true") );
 static OUString aFalseStr( RTL_CONSTASCII_USTRINGPARAM("false") );
 
+rtl::OUString lcl_getModuleTypeStringForType( sal_Int32 nModuleType )
+{
+	rtl::OUString sType;
+	switch( nModuleType )
+	{
+		case script::ModuleType::Document:
+			sType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Document" ) );
+			break;
+		case script::ModuleType::Class:
+			sType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Class" ) );
+			break;
+		case script::ModuleType::Form:
+			sType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Form" ) );
+			break;
+		case script::ModuleType::Normal: // no need to set a module type
+		case script::ModuleType::Unknown:
+		default:
+			break;
+	}
+	return sType;
+}
+
 //##################################################################################################
 
 
@@ -73,11 +95,10 @@ SAL_CALL exportLibraryContainer(
 	pLibsElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM("xmlns:" XMLNS_XLINK_PREFIX) ),
 							    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_XLINK_URI) ) );
 
-
-	xOut->ignorableWhitespace( OUString() );
+    int nLibCount = pLibArray->mnLibCount;
 	xOut->startElement( aLibrariesName, xAttributes );
+	xOut->ignorableWhitespace( OUString() );
 
-    int nLibCount = pLibArray->mnLibCount;
 	for( sal_Int32 i = 0 ; i < nLibCount ; i++ )
 	{
 		LibDescriptor& rLib = pLibArray->mpLibs[i];
@@ -108,6 +129,9 @@ SAL_CALL exportLibraryContainer(
 								        rLib.bReadOnly ? aTrueStr : aFalseStr );
         }
 
+    if( rLib.bVBAMode )
+		pLibElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":vbaenabled") ), aTrueStr );
+
 		pLibElement->dump( xOut.get() );
 	}
 
@@ -153,10 +177,14 @@ SAL_CALL exportLibrary(
     if( rLib.bPreload )
 		pLibElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":preload") ), aTrueStr );
 
+/*    if( rLib.bVBAMode )
+		pLibElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":vbaenabled") ), aTrueStr );
+*/
 	sal_Int32 nElementCount = rLib.aElementNames.getLength();
 	if( nElementCount )
 	{
 		const OUString* pElementNames = rLib.aElementNames.getConstArray();
+		
 		for( sal_Int32 i = 0 ; i < nElementCount ; i++ )
 		{
 			XMLElement* pElement = new XMLElement( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":element" ) ) );
@@ -165,7 +193,16 @@ SAL_CALL exportLibrary(
 
 			pElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":name") ),
 										pElementNames[i] );
-	
+			ObjectModuleDescHash::const_iterator it = rLib.hModuleTypeDesc.find( pElementNames[i] );
+			if ( it !=  rLib.hModuleTypeDesc.end() )
+			{
+				rtl::OUString sType = lcl_getModuleTypeStringForType( it->second.mnModuleType );
+				if ( sType.getLength() )
+				{
+					pElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":moduletype") ), sType );
+					pElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":objectname") ), it->second.msObjectName );
+				}
+			}
 			pLibElement->addSubElement( pElement );
 		}
 	}
diff --git xmlscript/source/xmllib_imexp/xmllib_import.cxx xmlscript/source/xmllib_imexp/xmllib_import.cxx
index b533d37..24b2834 100644
--- xmlscript/source/xmllib_imexp/xmllib_import.cxx
+++ xmlscript/source/xmllib_imexp/xmllib_import.cxx
@@ -44,7 +44,20 @@ namespace xmlscript
 {
 
 //##################################################################################################
-
+sal_Int32 lcl_getModuleTypeForStringType( const rtl::OUString& rsType )
+{
+    // default to normal unknown
+    sal_Int32 nType = com::sun::star::script::ModuleType::Unknown;
+    if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("class") ) ) )
+        nType = com::sun::star::script::ModuleType::Class;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("form") ) ) )
+        nType = com::sun::star::script::ModuleType::Form;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("document") ) ) )
+        nType = com::sun::star::script::ModuleType::Document;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("normal") ) ) )
+        nType = com::sun::star::script::ModuleType::Normal;
+    return nType;
+}
 //__________________________________________________________________________________________________
 Reference< xml::input::XElement > LibElementBase::getParent()
     throw (RuntimeException)
@@ -206,7 +219,11 @@ Reference< xml::input::XElement > LibraryImport::startRootElement(
             &aDesc.bPreload,
             OUString( RTL_CONSTASCII_USTRINGPARAM("preload") ),
             xAttributes, XMLNS_LIBRARY_UID );
-
+/*        getBoolAttr(
+            &aDesc.bVBAMode,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("vbaenabled") ),
+            xAttributes, XMLNS_LIBRARY_UID );
+*/
         return new LibraryElement( rLocalName, xAttributes, 0, this );
     }
     else
@@ -265,7 +282,10 @@ Reference< xml::input::XElement > LibrariesElement::startChildElement(
             &aDesc.bPasswordProtected,
             OUString( RTL_CONSTASCII_USTRINGPARAM("passwordprotected") ),
             xAttributes, _pImport->XMLNS_LIBRARY_UID );
-
+        getBoolAttr(
+            &aDesc.bVBAMode,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("vbaenabled") ),
+            xAttributes, _pImport->XMLNS_LIBRARY_UID );
         mLibDescriptors.push_back( aDesc );
         return new LibraryElement( rLocalName, xAttributes, this, _pImport );
     }
@@ -312,6 +332,17 @@ Reference< xml::input::XElement > LibraryElement::startChildElement(
         if (aValue.getLength())
             mElements.push_back( aValue );
 
+        ObjectModuleDesc aDesc;
+	
+        aDesc.mnModuleType = lcl_getModuleTypeForStringType( 
+          xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("moduletype") ) ) );
+        aDesc.msObjectName = xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("objectname") ) );
+        if ( aValue.getLength() && aDesc.mnModuleType != ::com::sun::star::script::ModuleType::Unknown )
+             mObjectDescs[ aValue ] = aDesc;
         return new LibElementBase( rLocalName, xAttributes, this, _pImport );
     }
     else
@@ -335,6 +366,7 @@ void LibraryElement::endElement()
     if( !pLib )
         pLib = &static_cast< LibrariesElement* >( _pParent )->mLibDescriptors.back();
     pLib->aElementNames = aElementNames;
+    pLib->hModuleTypeDesc = mObjectDescs;
 }
 
 
@@ -348,6 +380,15 @@ SAL_CALL importLibraryContainer( LibDescriptorArray* pLibArray )
         static_cast< xml::input::XRoot * >( new LibraryImport( pLibArray ) ) );
 }
 
+
+Reference< ::com::sun::star::xml::sax::XDocumentHandler >
+SAL_CALL importLibraryCodeNames( LibDescriptor& rLib)
+        SAL_THROW( (Exception) )
+{
+    return importLibrary( rLib );
+}
+
+
 //##################################################################################################
 
 ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler >
@@ -360,6 +401,13 @@ SAL_CALL importLibrary( LibDescriptor& rLib )
 
 
 //##################################################################################################
+LibDescriptor::LibDescriptor()
+{
+    bLink = sal_False;
+    bReadOnly = sal_False;
+    bPasswordProtected = sal_False;
+    bVBAMode = sal_False;
+}
 
 LibDescriptorArray::LibDescriptorArray( sal_Int32 nLibCount )
 {
