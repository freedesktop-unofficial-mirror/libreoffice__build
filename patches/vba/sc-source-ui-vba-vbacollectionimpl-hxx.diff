--- sc/source/ui/vba/vbacollectionimpl.hxx	
+++ sc/source/ui/vba/vbacollectionimpl.hxx
@@ -42,6 +42,7 @@
 #include <com/sun/star/script/XDefaultMethod.hpp>
 #include <com/sun/star/container/XIndexAccess.hpp>
 #include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/container/XNamed.hpp>
 
 #include <cppuhelper/implbase3.hxx>
 #include <cppuhelper/implbase2.hxx>
@@ -51,6 +52,7 @@
 #include "vbahelperinterface.hxx"
 #include "vbaglobals.hxx"
 
+#include <vector>
 
 typedef ::cppu::WeakImplHelper1< css::container::XEnumeration > EnumerationHelper_BASE;
 
@@ -65,6 +67,98 @@ public:
 	virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (css::uno::RuntimeException) { return m_xEnumeration->hasMoreElements(); }
 };
 
+// a wrapper class for a providing a XIndexAccess, XNameAccess, XEnumerationAccess impl based on providing a vector of interfaces 
+// only requirement is the object needs to implement XName
+
+
+
+typedef ::cppu::WeakImplHelper3< css::container::XNameAccess, css::container::XIndexAccess, css::container::XEnumerationAccess > XNamedCollectionHelper_BASE;
+
+template< typename Ifc1 >
+class XNamedObjectCollectionHelper : public XNamedCollectionHelper_BASE
+{
+public:
+typedef std::vector< css::uno::Reference< Ifc1 > >  XNamedVec;
+private:
+
+	class XNamedEnumerationHelper : public EnumerationHelper_BASE
+	{
+		XNamedVec mXNamedVec;
+		typename XNamedVec::iterator mIt;
+	public:
+	        XNamedEnumerationHelper( const XNamedVec& sMap ) : mXNamedVec( sMap ), mIt( mXNamedVec.begin() ) {}
+	
+	        virtual ::sal_Bool SAL_CALL hasMoreElements(  ) throw (css::uno::RuntimeException)
+	        {
+			return ( mIt != mXNamedVec.end() );
+	        }
+	
+	        virtual css::uno::Any SAL_CALL nextElement(  ) throw (css::container::NoSuchElementException, css::lang::WrappedTargetException, css::uno::RuntimeException)
+	        {
+	                if ( hasMoreElements() )
+				return css::uno::makeAny( *mIt++ );
+	                throw css::container::NoSuchElementException();
+	        }
+	};
+
+protected:
+	XNamedVec mXNamedVec;
+	typename XNamedVec::iterator cachePos;
+public:
+	XNamedObjectCollectionHelper( const XNamedVec& sMap ) : mXNamedVec( sMap ), cachePos(0) {}
+	// XElementAccess
+	virtual css::uno::Type SAL_CALL getElementType(  ) throw (css::uno::RuntimeException) { return  Ifc1::static_type(0); }
+	virtual ::sal_Bool SAL_CALL hasElements(  ) throw (css::uno::RuntimeException) { return ( mXNamedVec.size() > 0 ); }
+	// XNameAcess 
+	virtual css::uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (css::container::NoSuchElementException, css::lang::WrappedTargetException, css::uno::RuntimeException)
+	{
+		if ( !hasByName(aName) )
+			throw css::container::NoSuchElementException();
+		return css::uno::makeAny( *cachePos );
+	}
+	virtual css::uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (css::uno::RuntimeException)
+	{
+		css::uno::Sequence< rtl::OUString > sNames( mXNamedVec.size() );
+		rtl::OUString* pString = sNames.getArray();
+		typename XNamedVec::iterator it = mXNamedVec.begin();
+		typename XNamedVec::iterator it_end = mXNamedVec.end();
+
+		for ( ; it != it_end; ++it, ++pString )
+		{
+			css::uno::Reference< css::container::XNamed > xName( *it, css::uno::UNO_QUERY_THROW );	
+			*pString = xName->getName();
+		}
+		return sNames;
+	}
+	virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (css::uno::RuntimeException)
+	{
+		cachePos = mXNamedVec.begin();
+		typename XNamedVec::iterator it_end = mXNamedVec.end();
+		for ( ; cachePos != it_end; ++cachePos )
+		{
+			css::uno::Reference< css::container::XNamed > xName( *cachePos, css::uno::UNO_QUERY_THROW );	
+			if ( aName.equals( xName->getName() ) )
+				break;
+		}
+		return ( cachePos != it_end );
+	}
+
+	// XElementAccess
+	virtual ::sal_Int32 SAL_CALL getCount(  ) throw (css::uno::RuntimeException) { return mXNamedVec.size(); }	
+	virtual css::uno::Any SAL_CALL getByIndex( ::sal_Int32 Index ) throw (css::lang::IndexOutOfBoundsException, css::lang::WrappedTargetException, css::uno::RuntimeException )
+	{
+		if ( Index < 0 || Index >= getCount() )
+			throw css::lang::IndexOutOfBoundsException();
+	
+		return css::uno::makeAny( mXNamedVec[ Index ] );
+
+	}
+	// XEnumerationAccess
+	virtual css::uno::Reference< css::container::XEnumeration > SAL_CALL createEnumeration(  ) throw (css::uno::RuntimeException)
+	{
+		return new XNamedEnumerationHelper( mXNamedVec );
+	}
+};
 
 // including a HelperInterface implementation
 template< typename Ifc1 >
