diff -ru basic.orig/source/classes/sbxmod.cxx basic/source/classes/sbxmod.cxx
--- basic.orig/source/classes/sbxmod.cxx	2007-01-24 10:53:53.000000000 +0000
+++ basic/source/classes/sbxmod.cxx	2007-01-24 15:10:27.000000000 +0000
@@ -166,7 +166,8 @@
 	"integer",
 	"is",
 	"let",
-	"lib"
+	"lib",
+	"like",
 	"line",
 	"line input",
 	"local",
diff -ru basic.orig/source/comp/token.cxx basic/source/comp/token.cxx
--- basic.orig/source/comp/token.cxx	2007-01-24 10:53:53.000000000 +0000
+++ basic/source/comp/token.cxx	2007-01-24 15:20:25.000000000 +0000
@@ -131,6 +131,7 @@
 	{ IS,		"Is" },
 	{ LET,		"Let" },
 	{ LIB,		"Lib" },
+	{ LIKE,		"Like" },
 	{ LINE,		"Line" },
 	{ LINEINPUT,"Line Input" },
 	{ LOCAL,	"Local" },
diff -ru basic.orig/source/runtime/step0.cxx basic/source/runtime/step0.cxx
--- basic.orig/source/runtime/step0.cxx	2007-01-24 10:53:54.000000000 +0000
+++ basic/source/runtime/step0.cxx	2007-01-24 15:10:27.000000000 +0000
@@ -49,7 +49,11 @@
 #include <sb.hrc>
 #include <basrid.hxx>
 #include "sbunoobj.hxx"
+#include "image.hxx"
 #include "errobject.hxx"
 #include <com/sun/star/uno/Any.hxx>
+#include <com/sun/star/util/SearchOptions.hdl>
+#include <vcl/svapp.hxx>
+#include <unotools/textsearch.hxx>
 
 #include <algorithm>
@@ -174,9 +178,109 @@
 void SbiRuntime::StepLE()		{ StepCompare( SbxLE );		}
 void SbiRuntime::StepGE()		{ StepCompare( SbxGE );		}
 
+namespace
+{
+	bool NeedEsc(sal_Unicode cCode)
+	{
+		String sEsc(RTL_CONSTASCII_USTRINGPARAM(".^$+\\|{}()"));
+		return (STRING_NOTFOUND != sEsc.Search(cCode));
+	}
+
+	String VBALikeToRegexp(const String &rIn)
+	{
+		String sResult;
+		const sal_Unicode *start = rIn.GetBuffer();
+		const sal_Unicode *end = start + rIn.Len();
+
+		int seenright = 0;
+
+		while (start < end) 
+		{
+			switch (*start)
+			{
+				case '?':
+					sResult.Append('.');
+					start++;
+					break;
+				case '*':
+					sResult.Append(String(RTL_CONSTASCII_USTRINGPARAM(".*")));
+					start++;
+					break;
+				case '#':
+					sResult.Append(String(RTL_CONSTASCII_USTRINGPARAM("[0-9]")));
+					start++;
+					break;
+				case ']':
+					sResult.Append('\\');
+					sResult.Append(*start++);
+					break;
+				case '[':
+					sResult.Append(*start++);
+					seenright = 0;
+					while (start < end && !seenright)
+					{
+						switch (*start)
+						{
+							case '[':
+							case '?':
+							case '*':
+							sResult.Append('\\');
+							sResult.Append(*start);
+								break;
+							case ']':
+							sResult.Append(*start);
+								seenright = 1;
+								break;
+							default:
+							if (NeedEsc(*start))
+									sResult.Append('\\');
+							sResult.Append(*start);
+								break;
+						}
+						start++;
+					}
+					break;
+				default:
+					if (NeedEsc(*start))
+						sResult.Append('\\');
+					sResult.Append(*start++);
+			}
+		}
+
+		return sResult;
+	}
+}
+
 void SbiRuntime::StepLIKE()
 {
-	StarBASIC::FatalError( SbERR_NOT_IMPLEMENTED );
+    SbxVariableRef refVar1 = PopVar();
+    SbxVariableRef refVar2 = PopVar();
+
+    String pattern = VBALikeToRegexp(refVar1->GetString());
+    String value = refVar2->GetString();
+
+    com::sun::star::util::SearchOptions aSearchOpt;
+
+    aSearchOpt.algorithmType = com::sun::star::util::SearchAlgorithms_REGEXP;
+
+    aSearchOpt.Locale = Application::GetSettings().GetLocale();
+    aSearchOpt.searchString = pattern;
+
+    int bTextMode(1);
+    bool bCompatibility = ( pINST && pINST->IsCompatibility() );
+    if( bCompatibility )
+        bTextMode = GetImageFlag( SBIMG_COMPARETEXT );
+
+    if( bTextMode )
+        aSearchOpt.transliterateFlags |= com::sun::star::i18n::TransliterationModules_IGNORE_CASE;
+
+    SbxVariable* pRes = new SbxVariable;
+    utl::TextSearch aSearch(aSearchOpt);
+    xub_StrLen nStart=0, nEnd=value.Len();
+    int bRes = aSearch.SearchFrwrd(value, &nStart, &nEnd);
+    pRes->PutBool( bRes );
+
+    PushVar( pRes );
 }
 
 // TOS und TOS-1 sind beides Objektvariable und enthalten den selben Pointer
