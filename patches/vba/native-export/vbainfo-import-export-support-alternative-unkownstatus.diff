diff --git basctl/source/basicide/baside3.cxx basctl/source/basicide/baside3.cxx
index 8d11a16..a0e9f1b 100644
--- basctl/source/basicide/baside3.cxx
+++ basctl/source/basicide/baside3.cxx
@@ -82,7 +82,7 @@
 #include <com/sun/star/resource/XStringResourceResolver.hpp>
 #include <com/sun/star/resource/StringResourceWithLocation.hpp>
 #include <com/sun/star/task/XInteractionHandler.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 
 using namespace comphelper;
 using namespace	::com::sun::star;
@@ -118,10 +118,19 @@ DialogWindow::DialogWindow( Window* pPar
 	// set vba mode on DialogModel ( allows it to work in 100thmm instead of MAP_APPFONT )
 	if ( rDocument.getDocument().is() )
 	{
-		uno::Reference< script::XVBACompat > xDocVBAMode( rDocument.getLibraryContainer( E_SCRIPTS ), uno::UNO_QUERY );
-		uno::Reference< script::XVBACompat > xDialogModelVBAMode( xDialogModel, uno::UNO_QUERY );
-		if ( xDocVBAMode.is()  &&  xDialogModelVBAMode.is() )
-			xDialogModelVBAMode->setVBACompatModeOn( xDocVBAMode->getVBACompatModeOn() );
+		uno::Reference< script::XBasicLibraryInfo > xLibInfo( rDocument.getLibraryContainer( E_SCRIPTS ), uno::UNO_QUERY );
+		if ( xLibInfo.is()  && xLibInfo->getVBACompatMode() )
+		{
+			try
+			{
+				Reference< beans::XPropertySet > xDlgProps( xDialogModel, UNO_QUERY_THROW );
+				xDlgProps->setPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("VBAForm") ), makeAny( sal_True ) );
+			}
+			catch( Exception& )
+			{
+			}
+
+		}
 	}
 	pEditor->SetDialog( xDialogModel );
 
diff --git basctl/source/basicide/basides2.cxx basctl/source/basicide/basides2.cxx
index 981de5b..3956971 100644
--- basctl/source/basicide/basides2.cxx
+++ basctl/source/basicide/basides2.cxx
@@ -55,7 +55,7 @@
 #include <tools/diagnose_ex.h>
 #include <sfx2/sfxdefs.hxx>
 #include <sfx2/signaturestate.hxx>
-#include <com/sun/star/script/ModuleInfo.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/container/XNamed.hpp>
 #include <com/sun/star/lang/XServiceInfo.hpp>
@@ -66,15 +66,14 @@ namespace css = ::com::sun::star;
 
 void lcl_getObjectName( const uno::Reference< container::XNameContainer >& rLib, const String& rModName, String& rObjName )
 {
-	uno::Any aElement( rLib->getByName( rModName ) );
-	script::ModuleInfo aModuleInfo;
-	if( aElement >>= aModuleInfo )
+	Reference< script::XBasicLibraryInfo > xLibInfo( rLib, UNO_QUERY );
+	if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
 	{
-		uno::Any aObject( aModuleInfo.ModuleObject );
-		uno::Reference< lang::XServiceInfo > xServiceInfo( aObject, uno::UNO_QUERY );
+		script::ModuleInfo aModuleInfo = xLibInfo->getModuleInfo( rModName );
+		uno::Reference< lang::XServiceInfo > xServiceInfo( aModuleInfo.ModuleObject, uno::UNO_QUERY );
 		if( xServiceInfo.is() && xServiceInfo->supportsService( rtl::OUString::createFromAscii( "org.openoffice.excel.Worksheet" ) ) )
 		{
-			uno::Reference< container::XNamed > xNamed( aObject, uno::UNO_QUERY );
+			uno::Reference< container::XNamed > xNamed( aModuleInfo.ModuleObject, uno::UNO_QUERY );
 			if( xNamed.is() )
 				rObjName = xNamed->getName();
 		}
diff --git basctl/source/basicide/bastype2.cxx basctl/source/basicide/bastype2.cxx
index faa53e3..94a981c 100644
--- basctl/source/basicide/bastype2.cxx
+++ basctl/source/basicide/bastype2.cxx
@@ -55,7 +55,7 @@
 #include <comphelper/componentcontext.hxx>
 #include <map>
 #include <com/sun/star/script/ModuleType.hpp>
-#include <com/sun/star/script/ModuleInfo.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 #include <com/sun/star/container/XNameContainer.hpp>
 
 using namespace ::com::sun::star::uno;
@@ -66,10 +66,12 @@ void lcl_getObjectName( const uno::Refer
 sal_Int32 lcl_getModuleType(  const uno::Reference< container::XNameContainer >& rLib, const String& rModName )
 {
     sal_Int32 nType = com::sun::star::script::ModuleType::Unknown;
-    uno::Any aElement( rLib->getByName( rModName ) );
-    script::ModuleInfo aModuleInfo;
-    if( aElement >>= aModuleInfo )
+    Reference< script::XBasicLibraryInfo > xLibInfo( rLib, UNO_QUERY );
+    if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
+    {
+        script::ModuleInfo aModuleInfo = xLibInfo->getModuleInfo( rModName );
         nType = aModuleInfo.ModuleType;
+    }
     return nType;    
 }
 
diff --git basctl/source/basicide/scriptdocument.cxx basctl/source/basicide/scriptdocument.cxx
index 7e48d82..0d867b8 100644
--- basctl/source/basicide/scriptdocument.cxx
+++ basctl/source/basicide/scriptdocument.cxx
@@ -56,7 +56,7 @@
 #include <com/sun/star/frame/XModel2.hpp>
 #include <com/sun/star/awt/XWindow2.hpp>
 #include <com/sun/star/document/XEmbeddedScripts.hpp>
-#include <com/sun/star/script/ModuleInfo.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 /** === end UNO includes === **/
 
 #include <sfx2/objsh.hxx>
@@ -144,6 +144,7 @@ namespace basctl
     using ::com::sun::star::document::XEventBroadcaster;
     using ::com::sun::star::document::XEmbeddedScripts;
     using ::com::sun::star::script::ModuleInfo;
+    using ::com::sun::star::script::XBasicLibraryInfo;
     /** === end UNO using === **/
     namespace MacroExecMode = ::com::sun::star::document::MacroExecMode;
     namespace FrameSearchFlag = ::com::sun::star::frame::FrameSearchFlag;
@@ -639,7 +640,10 @@ namespace basctl
         try
         {
             Reference< XNameContainer > xLib( getLibrary( _eType, _rLibName, TRUE ), UNO_QUERY_THROW );
-            
+            Reference< XBasicLibraryInfo > xLibInfo( xLib, UNO_QUERY );            
+            ModuleInfo sModuleInfo = xLibInfo->getModuleInfo( _rOldName );
+            if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
+                sModuleInfo = xLibInfo->getModuleInfo( _rOldName ); // grap old module info
 		    // get element
 		    Any aElement( xLib->getByName( _rOldName ) );
 
@@ -678,10 +682,12 @@ namespace basctl
 		    // insert element by new name in container
             if ( _eType == E_SCRIPTS )
             {
-                ModuleInfo sModuleInfo;
-                if ( aElement >>= sModuleInfo )
+		if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
                 {
+                    rtl::OUString aMod;
+                    aElement >>= aMod; // grab the source
                     sModuleInfo.ModuleName = _rNewName;
+                    sModuleInfo.ModuleSource = aMod;
                     aElement <<= sModuleInfo;
                 }
             }
@@ -749,15 +755,9 @@ namespace basctl
             Reference< XNameContainer > xLib( getOrCreateLibrary( E_SCRIPTS, _rLibName ), UNO_QUERY_THROW );
 	        if ( !xLib->hasByName( _rModName ) )
                 return false;
-            ModuleInfo mInfo;
             Any aMod;
-            if ( xLib->getByName( _rModName ) >>= mInfo )
-            {
-                mInfo.ModuleSource = _rModuleCode;
-                aMod <<= mInfo;
-            }
-            else
-                aMod <<= _rModuleCode;
+            aMod <<= _rModuleCode;
+OSL_TRACE("**** about to do a replace by name %s size of source %d", rtl::OUStringToOString( _rModName, RTL_TEXTENCODING_UTF8 ).getStr(), _rModuleCode.getLength() );
             xLib->replaceByName( _rModName, aMod );
             return true;
         }
@@ -1411,15 +1411,7 @@ namespace basctl
         Any aCode;
         if ( !m_pImpl->getModuleOrDialog( E_SCRIPTS, _rLibName, _rModName, aCode ) )
             return false;
-        ModuleInfo sModuleInfo;
-        if ( aCode >>= sModuleInfo )
-        {
-            _out_rModuleSource = sModuleInfo.ModuleSource;
-        }
-        else
-        {
-            OSL_VERIFY( aCode >>= _out_rModuleSource );
-        }
+        OSL_VERIFY( aCode >>= _out_rModuleSource );
         return true;
     }
 
diff --git basctl/source/dlged/dlgedobj.cxx basctl/source/dlged/dlgedobj.cxx
index 9a521a3..ae7df5c 100644
--- basctl/source/dlged/dlgedobj.cxx
+++ basctl/source/dlged/dlgedobj.cxx
@@ -56,7 +56,7 @@
 #include <com/sun/star/beans/XPropertySet.hpp>
 #include <com/sun/star/beans/PropertyAttribute.hpp>
 #include <com/sun/star/script/XScriptEventsSupplier.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 #include <com/sun/star/container/XContainer.hpp>
 #include <com/sun/star/lang/XServiceInfo.hpp>
 #include <comphelper/processfactory.hxx>
@@ -81,9 +81,17 @@ DBG_NAME(DlgEdObj);
 MapMode lcl_getMapModeForForm( DlgEdForm* pForm )
 {
 	MapMode aMode( MAP_APPFONT ); //Default
-	uno::Reference< script::XVBACompat > xVBA( pForm ? pForm->GetUnoControlModel() : NULL, uno::UNO_QUERY );
-	if ( xVBA.is() && xVBA->getVBACompatModeOn() )
-		aMode = MapMode( MAP_100TH_MM );
+	try
+	{
+		uno::Reference< beans::XPropertySet > xProps( pForm ? pForm->GetUnoControlModel() : NULL, uno::UNO_QUERY_THROW );
+		sal_Bool bVBAForm = sal_False;
+		xProps->getPropertyValue( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("VBAForm") ) ) >>= bVBAForm;	
+		if ( bVBAForm )
+			aMode = MapMode( MAP_100TH_MM );
+	}
+	catch ( Exception& )
+	{
+	}
 	return aMode;
 }
 
diff --git basctl/source/inc/dlged.hxx basctl/source/inc/dlged.hxx
index 3db132a..2561fc3 100644
--- basctl/source/inc/dlged.hxx
+++ basctl/source/inc/dlged.hxx
@@ -136,7 +136,7 @@ protected:
 public:
 	DlgEditor( const ::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel >& xModel );
 	~DlgEditor();
-
+	::com::sun::star::uno::Reference< ::com::sun::star::frame::XModel > getDocModel() { return m_xDocument; }
 	void			SetWindow( Window* pWindow );
 	Window*			GetWindow() const { return pWindow; }
 
diff --git basic/inc/basic/basmgr.hxx basic/inc/basic/basmgr.hxx
index 2674c59..3c4f364 100644
--- basic/inc/basic/basmgr.hxx
+++ basic/inc/basic/basmgr.hxx
@@ -113,9 +113,10 @@ struct LibraryContainerInfo
     ::com::sun::star::uno::Reference< com::sun::star::script::XPersistentLibraryContainer > mxScriptCont;
     ::com::sun::star::uno::Reference< com::sun::star::script::XPersistentLibraryContainer > mxDialogCont;
     OldBasicPassword* mpOldBasicPassword;
+    bool mbVBACompatOn;
 
     LibraryContainerInfo()
-        :mpOldBasicPassword( NULL )
+        :mpOldBasicPassword( NULL ), mbVBACompatOn( false )
     {
     }
 
@@ -127,7 +128,7 @@ struct LibraryContainerInfo
     )
         : mxScriptCont( xScriptCont )
         , mxDialogCont( xDialogCont )
-        , mpOldBasicPassword( pOldBasicPassword )
+        , mpOldBasicPassword( pOldBasicPassword ), mbVBACompatOn( false )
 	{}
 };
 
diff --git basic/source/basmgr/basmgr.cxx basic/source/basmgr/basmgr.cxx
index 1c8962c..f595e39 100644
--- basic/source/basmgr/basmgr.cxx
+++ basic/source/basmgr/basmgr.cxx
@@ -70,7 +70,7 @@
 #include <com/sun/star/script/XLibraryContainerPassword.hpp>
 #include <com/sun/star/script/ModuleInfo.hpp>
 #include <com/sun/star/script/ModuleType.hpp>
-
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 #include <cppuhelper/implbase1.hxx>
 
 using com::sun::star::uno::Reference;
@@ -239,6 +239,12 @@ void BasMgrContainerListenerImpl::addLib
 
 	StarBASIC* pLib = pMgr->GetLib( aLibName );
 	DBG_ASSERT( pLib, "BasMgrContainerListenerImpl::addLibraryModulesImpl: Unknown lib!");
+	Reference<  XBasicLibraryInfo > xLibInfo( xLibNameAccess, UNO_QUERY );
+	if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
+		pLib->SetVBAEnabled( true );
+	
+	OSL_TRACE("addLibraryModulesImpl libname %s, xLibInfo %d", rtl::OUStringToOString( aLibName, RTL_TEXTENCODING_UTF8 ).getStr(), xLibInfo.is() );
+
 	if( pLib )
 	{
 		const ::rtl::OUString* pNames = aModuleNames.getConstArray();
@@ -246,16 +252,18 @@ void BasMgrContainerListenerImpl::addLib
 		{
 			::rtl::OUString aModuleName = pNames[ j ];
 			Any aElement = xLibNameAccess->getByName( aModuleName );
-            ModuleInfo mInfo;
-            if ( aElement >>= mInfo )
-            {
-                OSL_TRACE("#addLibraryModulesImpl - aMod");
+			::rtl::OUString aMod;
+			aElement >>= aMod;
+
+			if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
+			{
+            	ModuleInfo mInfo = xLibInfo->getModuleInfo( pNames[ j ] );
+				mInfo.ModuleSource = aMod;
+                OSL_TRACE("#addLibraryModulesImpl - aMod - source size is %d", mInfo.ModuleSource.getLength());
                 pLib->MakeModule32( mInfo );
             }
             else
             {
-			    ::rtl::OUString aMod;
-			    aElement >>= aMod;
 			    pLib->MakeModule32( aModuleName, aMod );
             }
 		}
@@ -284,8 +292,10 @@ void SAL_CALL BasMgrContainerListenerImp
 	sal_Bool bLibContainer = ( maLibName.getLength() == 0 );
 	::rtl::OUString aName;
 	Event.Accessor >>= aName;
+			OSL_TRACE("ElementInserted %s ", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr() );
 
     mpMgr->mpImpl->mbModifiedByLibraryContainer = sal_True;
+	Reference<  XBasicLibraryInfo > xLibInfo( Event.Source, UNO_QUERY );
 
 	if( bLibContainer )
 	{
@@ -302,11 +312,11 @@ void SAL_CALL BasMgrContainerListenerImp
     		SbModule* pMod = pLib->FindModule( aName );
             if( !pMod )
             {
-                ModuleInfo mInfo;
-                if( Event.Element >>= mInfo )
+                if ( xLibInfo.is() && xLibInfo->getVBACompatMode() )
                 {
+                    ModuleInfo mInfo = xLibInfo->getModuleInfo( aName );
                     pLib->MakeModule32( mInfo );
-                }
+				}
                 else
                 {
         		    ::rtl::OUString aMod;
@@ -327,6 +337,7 @@ void SAL_CALL BasMgrContainerListenerImp
 	::rtl::OUString aName;
 	Event.Accessor >>= aName;
 
+			OSL_TRACE("ElementReplaced for Librarylelement %s ", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr() );
     mpMgr->mpImpl->mbModifiedByLibraryContainer = sal_True;
 
 	// Replace not possible for library container
@@ -339,33 +350,24 @@ void SAL_CALL BasMgrContainerListenerImp
     
 	if( pLib )
 	{
-	    SbModule* pMod = pLib->FindModule( aName );
+		SbModule* pMod = pLib->FindModule( aName );
 		::rtl::OUString aMod;
-        ModuleInfo mInfo;
-        if( Event.Element >>= mInfo )
-			aMod = mInfo.ModuleSource;
-        else 
-            Event.Element >>= aMod;
+		Event.Element >>= aMod;
 		if( pMod )
-		{
 			pMod->SetSource32( aMod );
-			if ( mInfo.ModuleType == ModuleType::Document )
+		else
+		{
+				
+			Reference<  XBasicLibraryInfo > xLibInfo( Event.Source, UNO_QUERY );
+			if (  xLibInfo.is() && xLibInfo->getVBACompatMode() )
 			{
-				SbObjModule* pObjModule = dynamic_cast< SbObjModule* >( pMod );
-				if ( pObjModule )	
-					pObjModule->SetUnoObject( makeAny( mInfo.ModuleObject ) );
+                ModuleInfo mInfo = xLibInfo->getModuleInfo( aName );
+				mInfo.ModuleSource = aMod;
+				pLib->MakeModule32( mInfo );
 			}
-		}
-        else
-			// Probably we should have an assert for
-			// unknow module type, e.g. either we are using
-			// the ModuleInfo structure ( vba ) for *all* modules
-			// or not ( normal )
-			if ( mInfo.ModuleType == ModuleType::Unknown )
-				pLib->MakeModule32( aName, aMod );
 			else
-				pLib->MakeModule32( mInfo );
-
+				pLib->MakeModule32( aName, aMod );
+		}
 		pLib->SetModified( FALSE );
 	}
 }
@@ -831,6 +833,12 @@ void BasicManager::SetLibraryContainerIn
 
 	Reference< XLibraryContainer > xScriptCont( mpImpl->maContainerInfo.mxScriptCont.get() );
 	StarBASIC* pStdLib = GetStdLib();
+        Reference< XBasicLibraryInfo > xLibInfo( GetScriptLibraryContainer(), UNO_QUERY );
+        if ( xLibInfo.is() )
+                mpImpl->maContainerInfo.mbVBACompatOn = xLibInfo->getVBACompatMode();    
+	// Std is created regardless of any persisted Libraries, so.. we need
+	// to make sure we set its compat mode here
+	pStdLib->SetVBAEnabled( mpImpl->maContainerInfo.mbVBACompatOn );
 	String aLibName = pStdLib->GetName();
 	if( xScriptCont.is() )
 	{
diff --git basic/source/inc/namecont.hxx basic/source/inc/namecont.hxx
index c099b01..b1c8409 100644
--- basic/source/inc/namecont.hxx
+++ basic/source/inc/namecont.hxx
@@ -65,21 +65,20 @@
 #include <cppuhelper/compbase7.hxx>
 #include <cppuhelper/compbase8.hxx>
 #include <cppuhelper/interfacecontainer.hxx>
-#include <com/sun/star/script/XVBACompat.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 class BasicManager;
 
 namespace basic
 {
 
-typedef ::cppu::WeakComponentImplHelper8< 
+typedef ::cppu::WeakComponentImplHelper7< 
     ::com::sun::star::lang::XInitialization,
     ::com::sun::star::script::XStorageBasedLibraryContainer,
     ::com::sun::star::script::XLibraryContainerPassword,
     ::com::sun::star::script::XLibraryContainerExport,
     ::com::sun::star::container::XContainer,
     ::com::sun::star::script::XLibraryQueryExecutable,
-	::com::sun::star::script::XVBACompat,
     ::com::sun::star::lang::XServiceInfo > LibraryContainerHelper;
 
 typedef ::cppu::WeakImplHelper2< ::com::sun::star::container::XNameContainer,
@@ -113,6 +112,11 @@ NameContainerNameMap;
 
 
 //============================================================================
+class ItemConvertor
+{
+public:
+    virtual bool convert(com::sun::star::uno::Any& item ) = 0;
+};
 
 class NameContainer : public ::cppu::BaseMutex, public NameContainerHelper
 {
@@ -136,7 +140,7 @@ public:
 
 	void setEventSource( ::com::sun::star::uno::XInterface* pxEventSource )
 		{ mpxEventSource = pxEventSource; }
-
+        virtual bool convertContainer( const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor );
     // Methods XElementAccess
     virtual ::com::sun::star::uno::Type SAL_CALL getElementType(  ) 
 		throw(::com::sun::star::uno::RuntimeException);
@@ -222,6 +226,8 @@ public:
     }
 };
 
+typedef std::hash_map< rtl::OUString, com::sun::star::script::ModuleInfo, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > NameToInfoHash;
+
 class SfxLibraryContainer   :public LibraryContainerHelper
                             ,public ::utl::OEventListenerAdapter
 {
@@ -251,7 +257,7 @@ protected:
 	sal_Bool        mbOwnBasMgr;
 
     InitMode meInitMode;
-
+    bool mbVBACompatModeOn;
 	void implStoreLibrary( SfxLibrary* pLib,
 							const ::rtl::OUString& aName,
 							const ::com::sun::star::uno::Reference< ::com::sun::star::embed::XStorage >& xStorage );
@@ -334,7 +340,7 @@ protected:
     virtual const sal_Char* SAL_CALL    getOldInfoFileName() const = 0;
     virtual const sal_Char* SAL_CALL    getLibElementFileExtension() const = 0;
     virtual const sal_Char* SAL_CALL    getLibrariesDir() const = 0;
-
+    virtual void convertLibraryEntries() { /*default bogus implementation*/}
     // Handle maLibInfoFileURL and maStorageURL correctly
     void checkStorageURL
     (
@@ -503,9 +509,6 @@ public:
     virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames( )
         throw (::com::sun::star::uno::RuntimeException) = 0;
 
-	// Methods XVBACompat
-	virtual ::sal_Bool SAL_CALL getVBACompatModeOn() throw (::com::sun::star::uno::RuntimeException);
-	virtual void SAL_CALL setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (::com::sun::star::uno::RuntimeException);
 };
 
 class LibraryContainerMethodGuard
@@ -581,6 +584,9 @@ protected:
     inline  sal_Bool    implIsModified() const  { return mbIsModified; }
             void        implSetModified( sal_Bool _bIsModified );
 
+	::xmlscript::ObjectModuleDescHash mhCodeNameToObjDesc;
+    NameToInfoHash hBasicInfo;
+
 private:
     /** checks whether the lib is readonly, or a readonly link, throws an IllegalArgumentException if so
     */
@@ -660,6 +666,7 @@ public:
 	virtual void SAL_CALL removeContainerListener( const ::com::sun::star::uno::Reference< 
 		::com::sun::star::container::XContainerListener >& xListener ) 
 			throw (::com::sun::star::uno::RuntimeException);
+        virtual bool convertContainer( const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor );
 
 protected:
 	virtual bool SAL_CALL isLibraryElementValid( ::com::sun::star::uno::Any aElement ) const = 0;
diff --git basic/source/inc/scriptcont.hxx basic/source/inc/scriptcont.hxx
index 1679b30..4f220bb 100644
--- basic/source/inc/scriptcont.hxx
+++ basic/source/inc/scriptcont.hxx
@@ -33,6 +33,9 @@
 
 #include "namecont.hxx"
 #include <basic/basmgr.hxx>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
+#include <cppuhelper/implbase1.hxx>
+#include <comphelper/uno3.hxx>
 
 class BasicManager;
 
@@ -97,6 +100,7 @@ class SfxScriptLibraryContainer : public
     virtual const sal_Char* SAL_CALL    getOldInfoFileName() const;
     virtual const sal_Char* SAL_CALL    getLibElementFileExtension() const;
     virtual const sal_Char* SAL_CALL    getLibrariesDir() const;
+    virtual void convertLibraryEntries();
 
 public:
 	SfxScriptLibraryContainer( void );
@@ -140,12 +144,17 @@ public:
 
 //============================================================================
 
+typedef std::hash_map< rtl::OUString, com::sun::star::script::ModuleInfo, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > NameToInfoHash;
+
+typedef ::cppu::ImplHelper1 <  ::com::sun::star::script::XBasicLibraryInfo >  SfxScriptLibrary_BASE;
 class SfxScriptLibrary : public SfxLibrary
+			, public SfxScriptLibrary_BASE
 {
     friend class SfxScriptLibraryContainer;
 
 	sal_Bool mbLoadedSource;
 	sal_Bool mbLoadedBinary;
+	sal_Bool mbVBA;
 
 	// Provide modify state including resources
 	virtual sal_Bool isModified( void );
@@ -171,9 +180,36 @@ public:
 	    const ::com::sun::star::uno::Reference< ::com::sun::star::ucb::XSimpleFileAccess >& xSFI,
         const ::rtl::OUString& aLibInfoFileURL, const ::rtl::OUString& aStorageURL, sal_Bool ReadOnly
     );
-
+    // XNameReplace
+    virtual void SAL_CALL replaceByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) 
+		throw(::com::sun::star::lang::IllegalArgumentException, 
+			  ::com::sun::star::container::NoSuchElementException, 
+			  ::com::sun::star::lang::WrappedTargetException, 
+			  ::com::sun::star::uno::RuntimeException);
+
+    // Methods XNameContainer
+    virtual void SAL_CALL insertByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement )
+		throw(::com::sun::star::lang::IllegalArgumentException, 
+			  ::com::sun::star::container::ElementExistException, 
+			  ::com::sun::star::lang::WrappedTargetException, 
+			  ::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL removeByName( const ::rtl::OUString& Name ) 
+		throw(::com::sun::star::container::NoSuchElementException, 
+			  ::com::sun::star::lang::WrappedTargetException, 
+			  ::com::sun::star::uno::RuntimeException);
     static bool containsValidModule( const ::com::sun::star::uno::Any& _rElement );
+    DECLARE_XINTERFACE()
+    DECLARE_XTYPEPROVIDER()
+
+    // XBasicLibraryInfo
 
+    // Attributes
+    virtual ::sal_Bool SAL_CALL getVBACompatMode() throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL setVBACompatMode( ::sal_Bool _vbacompatmodeon ) throw (::com::sun::star::uno::RuntimeException);
+
+    // Methods
+    virtual ::com::sun::star::script::ModuleInfo SAL_CALL getModuleInfo( const ::rtl::OUString& ModuleName ) throw (::com::sun::star::uno::RuntimeException);
+    
 protected:
 	virtual bool SAL_CALL isLibraryElementValid( ::com::sun::star::uno::Any aElement ) const;
 };
diff --git basic/source/runtime/step2.cxx basic/source/runtime/step2.cxx
index 1f659e1..7382974 100644
--- basic/source/runtime/step2.cxx
+++ basic/source/runtime/step2.cxx
@@ -39,6 +39,7 @@
 #include "sbintern.hxx"
 #include "sbunoobj.hxx"
 #include "opcodes.hxx"
+#include "basic/sbobjmod.hxx"
 
 #include <com/sun/star/container/XIndexAccess.hpp>
 #include <com/sun/star/script/XDefaultMethod.hpp>
@@ -708,7 +709,6 @@ void SbiRuntime::StepELEM( UINT32 nOp1, 
 	// #74254 Jetzt per Liste
 	if( pObj )
 		SaveRef( (SbxVariable*)pObj );
-
 	PushVar( FindElement( pObj, nOp1, nOp2, SbERR_NO_METHOD, FALSE ) );
 }
 
diff --git basic/source/uno/namecont.cxx basic/source/uno/namecont.cxx
index ac96039..1941b88 100644
--- basic/source/uno/namecont.cxx
+++ basic/source/uno/namecont.cxx
@@ -75,11 +75,11 @@
 #endif
 #include <cppuhelper/exc_hlp.hxx>
 #include <basic/sbmod.hxx>
+#include "sbunoobj.hxx"
 
-#ifndef _COM_SUN_STAR_SCRIPT_MODULEINFO_HPP_
 #include <com/sun/star/script/ModuleInfo.hpp>
-#endif
-
+// temp include
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 namespace basic
 {
 
@@ -104,12 +104,85 @@ using namespace osl;
 
 using com::sun::star::uno::Reference;
 
+// #TODO move this to SfxLibrary ? probably we need to to gaurantee
+// consistency 
+::xmlscript::ObjectModuleDescHash lcl_getObjModDescHash( SfxLibrary& rLib )
+{
+	uno::Sequence< ::rtl::OUString > sModuleNames = rLib.getElementNames();
+	sal_Int32 nElem = sModuleNames.getLength();
+	::xmlscript::ObjectModuleDescHash hResult;
+	for ( sal_Int32 i = 0; i < nElem; ++i )
+	{
+		ModuleInfo mInfo;
+		rtl::OUString sCodeName( sModuleNames[ i ] );
+		if ( rLib.getByName( sCodeName ) >>= mInfo )
+		{
+			::xmlscript::ObjectModuleDesc aDesc;
+			aDesc.mnModuleType = mInfo.ModuleType;
+			switch ( mInfo.ModuleType )
+			{
+				case ModuleType::Form:
+					aDesc.msObjectName = sCodeName;
+					hResult[ sCodeName ] = aDesc;
+					break;
+				case ModuleType::Document:
+				{
+					Reference< XServiceInfo > xSI( mInfo.ModuleObject, UNO_QUERY );
+					if ( xSI.is() && xSI->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.excel.Workbook" ) ) ) )
+						aDesc.msObjectName = ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "ThisWorkbook" ) ); 
+					else
+					{
+						SbUnoObjectRef pSbUnoObject = new SbUnoObject( String(), uno::makeAny( mInfo.ModuleObject ) );
+						SbxVariable* pVar = pSbUnoObject->Find( String( RTL_CONSTASCII_USTRINGPARAM("Name") ), SbxCLASS_DONTCARE );
+						if ( pVar )
+						{
+							pVar->Broadcast( SBX_HINT_DATAWANTED );
+							if ( pVar->SbxValue::GetType() == SbxSTRING )
+							{
+								aDesc.msObjectName = pVar->GetString();
+								hResult[ sCodeName ] = aDesc;
+							}
+						}
+					}
+				}
+				case ModuleType::Class:
+				case ModuleType::Normal:
+					break; // no codenames for these
+				default:
+					break; // shouldn't get here ( #TODO assertion or whatever )
+			}
+		}
+	}
+	return hResult;
+}
+
 // #i34411: Flag for error handling during migration 
 static bool GbMigrationSuppressErrors = false;
 
 //============================================================================
 // Implementation class NameContainer
 
+bool 
+NameContainer::convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor )
+{
+        bool bRes = true;
+        uno::Sequence< uno::Any > mCopyValues( mValues );
+	for ( sal_Int32	i = 0; bRes && i < mCopyValues.getLength();  ++i )
+	{
+		if ( !aConvertor.convert( mCopyValues[ i ] ) )
+                {
+			bRes = false;
+                        break;
+                }
+	}
+	if ( bRes )
+        {
+                mValues = mCopyValues;
+		mType = rNewType;
+        }
+	return bRes;
+}
+
 // Methods XElementAccess
 Type NameContainer::getElementType()
 	throw(RuntimeException)
@@ -158,7 +231,7 @@ void NameContainer::replaceByName( const
 	throw(IllegalArgumentException, NoSuchElementException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-    if( mType != aAnyType && aAnyType != getCppuType( static_cast< ModuleInfo* >( NULL ) ) )
+    if( mType != aAnyType )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
@@ -200,7 +273,7 @@ void NameContainer::insertByName( const 
 	throw(IllegalArgumentException, ElementExistException, WrappedTargetException, RuntimeException)
 {
 	Type aAnyType = aElement.getValueType();
-    if( mType != aAnyType && aAnyType != getCppuType( static_cast< ModuleInfo* >( NULL ) ) )
+    if( mType != aAnyType )
 		throw IllegalArgumentException();
 
 	NameContainerNameMap::iterator aIt = mHashMap.find( aName );
@@ -339,6 +412,7 @@ SfxLibraryContainer::SfxLibraryContainer
     , mbOasis2OOoFormat( sal_False )
     , mpBasMgr( NULL )
     , mbOwnBasMgr( sal_False )
+    , mbVBACompatModeOn( sal_False )
 {
     DBG_CTOR( SfxLibraryContainer, NULL );
 
@@ -798,12 +872,10 @@ sal_Bool SfxLibraryContainer::init_Impl(
                 OSL_ENSURE( 0, OUStringToOString( e.Message, RTL_TEXTENCODING_ASCII_US ).getStr() );
                 return sal_False;
             }
-
 		    sal_Int32 nLibCount = pLibArray->mnLibCount;
 		    for( sal_Int32 i = 0 ; i < nLibCount ; i++ )
 		    {
 			    ::xmlscript::LibDescriptor& rLib = pLibArray->mpLibs[i];
-
 			    // Check storage URL
 			    OUString aStorageURL = rLib.aStorageURL;
 			    if( !bStorage && !aStorageURL.getLength() && nPass == 0 )
@@ -860,6 +932,23 @@ sal_Bool SfxLibraryContainer::init_Impl(
 			    else
 			    {
 				    Reference< XNameContainer > xLib = createLibrary( aLibName );
+        // mbVBACompatMode needs to be setup before createLibrary is called
+		// ( and this is called before the library desc. is read )
+        // this implies we need an xml property at the script-lc.xml
+		//
+
+		if ( rLib.aName.equalsAscii("Standard") )
+		{
+			OSL_TRACE("*** iteration %d have got Standard Library**** VBA MODE is %d", i, rLib.bVBAMode );
+						// can't use the api here ( because setVBACompat will try to 
+						// convert the Libraries )
+            Reference< XBasicLibraryInfo > xLibInfo( xLib, UNO_QUERY );
+            if ( xLibInfo.is() )
+				xLibInfo->setVBACompatMode( rLib.bVBAMode );
+
+		}
+
+
 				    pImplLib = static_cast< SfxLibrary* >( xLib.get() );
 				    pImplLib->mbLoaded = sal_False;
 				    pImplLib->mbReadOnly = rLib.bReadOnly;
@@ -897,7 +986,9 @@ sal_Bool SfxLibraryContainer::init_Impl(
 				    if( !pImplLib->mbInitialised && (!bStorage || xLibraryStor.is()) )
 				    {
 					    OUString aIndexFileName;
+						
 					    sal_Bool bLoaded = implLoadLibraryIndexFile( pImplLib, rLib, xLibraryStor, aIndexFileName );
+						OSL_TRACE("** Loaded %s", rtl::OUStringToOString( rLib.aName, RTL_TEXTENCODING_UTF8 ).getStr() );
 					    if( bLoaded && aLibName != rLib.aName )
 					    {
 						    OSL_ENSURE( 0, "Different library names in library"
@@ -1135,6 +1226,7 @@ sal_Bool SfxLibraryContainer::init_Impl(
 						Reference< XNameContainer > xLib = createLibrary( aLibName );
            				SfxLibrary* pNewLib = static_cast< SfxLibrary* >( xLib.get() );
 						pNewLib->mbLoaded = false;
+
 						pNewLib->implSetModified( sal_False );
 						checkStorageURL( aLibFolder, pNewLib->maLibInfoFileURL,
 							pNewLib->maStorageURL, pNewLib->maUnexpandedStorageURL );
@@ -1724,21 +1816,59 @@ void SfxLibraryContainer::implImportLibD
     {
 	    sal_Int32 nElementCount = rLib.aElementNames.getLength();
 	    const OUString* pElementNames = rLib.aElementNames.getConstArray();
-	    Any aDummyElement = createEmptyLibraryElement();
+		Any aDummyElement = createEmptyLibraryElement();
+        ::xmlscript::ObjectModuleDescHash::iterator it_end = rLib.hModuleTypeDesc.end();
+        Reference< XNameContainer > xLib( pLib );
+        Reference< XBasicLibraryInfo > xLibInfo( xLib, UNO_QUERY );
 	    for( sal_Int32 i = 0 ; i < nElementCount ; i++ )
 	    {
+                        com::sun::star::script::ModuleInfo mInfo;
+                    if ( xLibInfo.is() && xLibInfo->getVBACompatMode() ) 
+                    {
+                        ::xmlscript::ObjectModuleDescHash::iterator it = rLib.hModuleTypeDesc.find( pElementNames[i] );
+                    
+                        mInfo.ModuleType = ModuleType::Normal;
+                        mInfo.ModuleName = pElementNames[i];
+                        if ( it != it_end )
+                        {
+                            mInfo.ModuleType = it->second.mnModuleType;
+                            // hack for userform, needs to know about the document
+                            // well really it needs the dialog library
+                            if (  mInfo.ModuleType == ModuleType::Form )
+                                mInfo.ModuleObject = mxOwnerDocument;
+                            else
+                            {
+                                try
+                                {
+                                    Reference< XMultiServiceFactory> xSF( mxOwnerDocument.get(), uno::UNO_QUERY);
+                                    uno::Reference< container::XNameAccess > xVBACodeNamedObjectAccess;
+    				    if ( xSF.is() )
+				        xVBACodeNamedObjectAccess.set( xSF->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM( "org.openoffice.vba.VBAObjectModuleObjectProvider"))), uno::UNO_QUERY );    
+                                    // get the api object for the codename
+                                    if ( xVBACodeNamedObjectAccess.is() )
+                                        mInfo.ModuleObject.set( xVBACodeNamedObjectAccess->getByName( mInfo.ModuleName ), uno::UNO_QUERY );
+                                }
+                                catch( Exception& e )
+                                { 
+                                    DBG_UNHANDLED_EXCEPTION();
+                                }
+
+                            }
+                        }
+                    }
 		    pLib->maNameContainer.insertByName( pElementNames[i], aDummyElement );
-	    }
+			pLib->hBasicInfo[  pElementNames[i] ] = mInfo;
+        }
         pLib->mbPasswordProtected = rLib.bPasswordProtected;
         pLib->mbReadOnly = rLib.bReadOnly;
 		pLib->mbPreload  = rLib.bPreload;
         pLib->implSetModified( sal_False );
 
         pLib->mbInitialised = sal_True;
+        pLib->mhCodeNameToObjDesc = rLib.hModuleTypeDesc;
     }
 }
 
-
 // Methods of new XLibraryStorage interface?
 void SfxLibraryContainer::storeLibraries_Impl( const uno::Reference< embed::XStorage >& xStorage, sal_Bool bComplete )
 {
@@ -1851,7 +1981,21 @@ void SfxLibraryContainer::storeLibraries
 		rLib.bPreload = pImplLib->mbPreload;
 		rLib.bPasswordProtected = pImplLib->mbPasswordProtected;
 		rLib.aElementNames = pImplLib->getElementNames();
-
+		// #FIXME the codenames probably should be in the LibDescriptor 
+		// ok there should be a special code name for the document ( e.g. ThisWorkbook, ThisDocument etc.) this probably should exist in LibDescriptorArray
+		// hmm there possibly could be a problem distinguising that on
+		// excel import ( because it is just another Document Module )
+		// Hmm but also vba mode should only really be relevant for Standand 
+		// Library ( and I would say no other libraries should even exist )
+		// so, leaving for the moment
+		if ( pName->equals( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("Standard") ) ) )
+		{
+            Reference< XNameContainer > xNameContainer( pImplLib );
+            Reference< XBasicLibraryInfo > xLibInfo( xNameContainer, UNO_QUERY );
+			rLib.bVBAMode = xLibInfo.is() ? xLibInfo->getVBACompatMode() : sal_False;
+			
+			rLib.hModuleTypeDesc = lcl_getObjModDescHash( *pImplLib );
+		}
 		if( pImplLib->implIsModified() || bComplete )
 		{
             // Can we copy the storage?
@@ -2072,11 +2216,11 @@ Reference< XNameContainer > SAL_CALL Sfx
 {
     LibraryContainerMethodGuard aGuard( *this );
 	SfxLibrary* pNewLib = implCreateLibrary( Name );
+	Reference< XNameAccess > xNameAccess = static_cast< XNameAccess* >( pNewLib );
     pNewLib->maLibElementFileExtension = maLibElementFileExtension;
 
 	createVariableURL( pNewLib->maUnexpandedStorageURL, Name, maInfoFileName, true );
 
-	Reference< XNameAccess > xNameAccess = static_cast< XNameAccess* >( pNewLib );
 	Any aElement;
 	aElement <<= xNameAccess;
 	maNameContainer.insertByName( Name, aElement );
@@ -2102,6 +2246,7 @@ Reference< XNameAccess > SAL_CALL SfxLib
 
 
 	SfxLibrary* pNewLib = implCreateLibraryLink( Name, aLibInfoFileURL, aLibDirURL, ReadOnly );
+	Reference< XNameAccess > xRet = static_cast< XNameAccess* >( pNewLib );
     pNewLib->maLibElementFileExtension = maLibElementFileExtension;
     pNewLib->maUnexpandedStorageURL = aUnexpandedStorageURL;
 
@@ -2111,7 +2256,6 @@ Reference< XNameAccess > SAL_CALL SfxLib
     /*sal_Bool bReadIndexFile = */implLoadLibraryIndexFile( pNewLib, aLibDesc, xDummyStor, aInitFileName );
     implImportLibDescriptor( pNewLib, aLibDesc );
 
-	Reference< XNameAccess > xRet = static_cast< XNameAccess* >( pNewLib );
 	Any aElement;
 	aElement <<= xRet;
 	maNameContainer.insertByName( Name, aElement );
@@ -2319,13 +2463,33 @@ void SAL_CALL SfxLibraryContainer::loadL
 			}
 
 			Any aAny = importLibraryElement( aFile, xInStream );
+
+//            com::sun::star::script::ModuleInfo mInfo;
 			if( pImplLib->hasByName( aElementName ) )
             {
+/*
+                if ( getVBACompatModeOn() )
+                {
+				    pImplLib->maNameContainer.getByName( aElementName ) >>= mInfo;
+                    aAny >>= mInfo.ModuleSource; 
+                    aAny <<= mInfo;
+                } 
+*/
                 if( aAny.hasValue() )
+                {
 				    pImplLib->maNameContainer.replaceByName( aElementName, aAny );
+                }
             }
 			else
             {
+/*
+                if ( getVBACompatModeOn() )
+                {
+                    mInfo.ModuleType = ModuleType::Normal;
+                    aAny >>= mInfo.ModuleSource; 
+                    aAny <<= mInfo;
+                }
+*/
 				pImplLib->maNameContainer.insertByName( aElementName, aAny );
             }
 		}
@@ -2723,35 +2887,6 @@ OUString SfxLibraryContainer::expand_url
     }
 }
 
-::sal_Bool SAL_CALL SfxLibraryContainer::getVBACompatModeOn() throw (RuntimeException)
-{
-	sal_Bool bVBACompat = sal_False;
-	BasicManager* pBasMgr = getBasicManager();
-	if( pBasMgr )
-	{
-		// get the standard library
-		String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
-		StarBASIC* pBasic = pBasMgr->GetLib( aLibName );
-		if( pBasic )
-			bVBACompat = pBasic->isVBAEnabled();
-	}
-
-	return bVBACompat;
-}
-
-void SAL_CALL SfxLibraryContainer::setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (RuntimeException)
-{
-	BasicManager* pBasMgr = getBasicManager();
-	if( pBasMgr )
-	{
-		// get the standard library
-		String aLibName( RTL_CONSTASCII_USTRINGPARAM( "Standard" ) );
-		StarBASIC* pBasic = pBasMgr->GetLib( aLibName );
-		if( pBasic )
-			pBasic->SetVBAEnabled( _vbacompatmodeon );
-	}
-}
-
 // Methods XServiceInfo
 ::sal_Bool SAL_CALL SfxLibraryContainer::supportsService( const ::rtl::OUString& _rServiceName )
     throw (RuntimeException)
@@ -2765,6 +2900,12 @@ void SAL_CALL SfxLibraryContainer::setVB
     return sal_False;
 }
 
+bool SfxLibrary::convertContainer(const ::com::sun::star::uno::Type& rNewType, ItemConvertor& aConvertor )
+{
+	return maNameContainer.convertContainer( rNewType, aConvertor );
+}
+
+
 //============================================================================
 
 // Implementation class SfxLibrary
diff --git basic/source/uno/sbservices.cxx basic/source/uno/sbservices.cxx
index a2a4ded..aa076ea 100644
--- basic/source/uno/sbservices.cxx
+++ basic/source/uno/sbservices.cxx
@@ -43,6 +43,7 @@ namespace basic
     //--------------------------------------------------------------------
     extern void createRegistryInfo_SfxDialogLibraryContainer();
     extern void createRegistryInfo_SfxScriptLibraryContainer();
+    extern void createRegistryInfo_PersistedReadOnlyCodeNames();
 
     static void initializeModule()
     {
@@ -54,6 +55,7 @@ namespace basic
             {
                 createRegistryInfo_SfxDialogLibraryContainer();
                 createRegistryInfo_SfxScriptLibraryContainer();
+                createRegistryInfo_PersistedReadOnlyCodeNames();
             }
         }
     }
diff --git basic/source/uno/scriptcont.cxx basic/source/uno/scriptcont.cxx
index 4a46e98..9a45db6 100644
--- basic/source/uno/scriptcont.cxx
+++ basic/source/uno/scriptcont.cxx
@@ -1068,6 +1068,11 @@ SfxScriptLibraryContainer:: HasExecutabl
 
 //============================================================================
 // Service
+class PersistedReadOnlyCodeNames;
+void createRegistryInfo_PersistedReadOnlyCodeNames()
+{
+    static OAutoRegistration< PersistedReadOnlyCodeNames > aAutoRegistration;
+}
 void createRegistryInfo_SfxScriptLibraryContainer()
 {
     static OAutoRegistration< SfxScriptLibraryContainer > aAutoRegistration;
@@ -1125,6 +1130,7 @@ SfxScriptLibrary::SfxScriptLibrary( Modi
 	: SfxLibrary( _rModifiable, getCppuType( (const OUString *)0 ), xMSF, xSFI )
     , mbLoadedSource( sal_False )
     , mbLoadedBinary( sal_False )
+    , mbVBA( sal_False )
 {
 }
 
@@ -1138,9 +1144,85 @@ SfxScriptLibrary::SfxScriptLibrary( Modi
 						aLibInfoFileURL, aStorageURL, ReadOnly)
     , mbLoadedSource( sal_False )
     , mbLoadedBinary( sal_False )
+    , mbVBA( sal_False )
+{
+}
+
+IMPLEMENT_FORWARD_XINTERFACE2( SfxScriptLibrary, SfxLibrary, SfxScriptLibrary_BASE );
+IMPLEMENT_FORWARD_XTYPEPROVIDER2( SfxScriptLibrary, SfxLibrary, SfxScriptLibrary_BASE );
+
+::sal_Bool SAL_CALL 
+SfxScriptLibrary::getVBACompatMode() throw (RuntimeException)
+{
+    return mbVBA;
+}
+
+void SAL_CALL 
+SfxScriptLibrary::setVBACompatMode( ::sal_Bool _vbacompatmodeon ) throw (RuntimeException)
+{
+    mbVBA = _vbacompatmodeon;
+}
+
+// Methods
+::com::sun::star::script::ModuleInfo SAL_CALL 
+SfxScriptLibrary::getModuleInfo( const ::rtl::OUString& ModuleName ) throw (RuntimeException)
+{
+	::com::sun::star::script::ModuleInfo mInfo;
+	NameToInfoHash::iterator it_end = hBasicInfo.end();
+	NameToInfoHash::iterator it = hBasicInfo.find( ModuleName );
+	if ( it != it_end )
+		mInfo = it->second;
+
+	return mInfo;
+}
+
+void SAL_CALL 
+SfxScriptLibrary::replaceByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement ) 
+		throw(::com::sun::star::lang::IllegalArgumentException, 
+			  ::com::sun::star::container::NoSuchElementException, 
+			  ::com::sun::star::lang::WrappedTargetException, 
+			  ::com::sun::star::uno::RuntimeException)
 {
+	SfxLibrary::replaceByName( aName, aElement );
 }
 
+// Methods XNameContainer
+void SAL_CALL 
+SfxScriptLibrary::insertByName( const ::rtl::OUString& aName, const ::com::sun::star::uno::Any& aElement )
+		throw(::com::sun::star::lang::IllegalArgumentException, 
+			  ::com::sun::star::container::ElementExistException, 
+			  ::com::sun::star::lang::WrappedTargetException, 
+			  ::com::sun::star::uno::RuntimeException)
+{
+    OSL_TRACE("***** insertByName module %s", rtl::OUStringToOString( aName, RTL_TEXTENCODING_UTF8 ).getStr() );
+
+	NameToInfoHash::iterator it_end = hBasicInfo.end();
+	NameToInfoHash::iterator it = hBasicInfo.find( aName );
+
+	if ( it != it_end )
+		throw ElementExistException(); // more detail please
+
+	ModuleInfo mInfo;
+	if ( aElement >>= mInfo )
+	{
+		hBasicInfo[ aName ] = mInfo;
+		uno::Any aTmpElement( mInfo.ModuleSource );
+		SfxLibrary::insertByName( aName, aTmpElement );
+	}
+	else
+		SfxLibrary::insertByName( aName, aElement );
+}
+
+void SAL_CALL 
+SfxScriptLibrary::removeByName( const ::rtl::OUString& Name ) 
+		throw(::com::sun::star::container::NoSuchElementException, 
+			  ::com::sun::star::lang::WrappedTargetException, 
+			  ::com::sun::star::uno::RuntimeException)
+{
+	SfxLibrary::removeByName( Name );
+}
+
+
 // Provide modify state including resources
 sal_Bool SfxScriptLibrary::isModified( void )
 {
@@ -1188,7 +1270,195 @@ bool SAL_CALL SfxScriptLibrary::isLibrar
 {
     return SfxScriptLibrary::containsValidModule( aElement );
 }
+typedef ::cppu::WeakImplHelper3< container::XNameAccess, lang::XInitialization, lang::XServiceInfo > ReadOnlyCodeNames_BASE;
 
+// XNameAccess, codename to/from objectnames
+class PersistedReadOnlyCodeNames : ReadOnlyCodeNames_BASE
+{
+typedef std::hash_map< rtl::OUString, rtl::OUString, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > CodeNameHash;
+
+    CodeNameHash mCodeNameToObjectNames;
+public:
+    PersistedReadOnlyCodeNames()
+    {
+    }
+    // Methods - XInitialise
+    virtual void SAL_CALL initialize( const uno::Sequence< uno::Any >& aArguments ) throw (uno::Exception, uno::RuntimeException)
+    {
+        if ( !aArguments.getLength() )
+            throw RuntimeException();
+        Reference< document::XStorageBasedDocument > xDocument( aArguments[ 0 ], uno::UNO_QUERY_THROW ); 
+        Reference< embed::XStorage > xDocStorage; 
+        try
+        {
+            Reference< XMultiServiceFactory > xMSF = comphelper::getProcessServiceFactory();
+            Reference< XServiceInfo > xSI( xDocument, UNO_QUERY_THROW );
+            if ( xSI->supportsService( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "com.sun.star.document.OfficeDocument" ) ) ) )
+                xDocStorage.set( xDocument->getDocumentStorage(), UNO_QUERY_THROW );
+            if ( xDocStorage.is() ) // not a 'real' document
+            {
+                rtl::OUString codeNameDir( RTL_CONSTASCII_USTRINGPARAM("Basic") );
+                rtl::OUString standardDir( RTL_CONSTASCII_USTRINGPARAM("Standard") );
+                rtl::OUString codeNameFile( RTL_CONSTASCII_USTRINGPARAM("script-lb.xml") );
+    
+                uno::Reference< embed::XStorage > xLibrariesStor( xDocStorage->openStorageElement( codeNameDir, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< embed::XStorage > xStandardStor( xLibrariesStor->openStorageElement( standardDir, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< io::XStream > xStream( xStandardStor->openStreamElement( codeNameFile, embed::ElementModes::READ ), UNO_QUERY_THROW );
+                uno::Reference< io::XInputStream > xInput( xStream->getInputStream(), UNO_QUERY_THROW );
+                ::xmlscript::LibDescriptor aLib;
+                InputSource source;
+                source.aInputStream = xInput;
+
+                Reference< XParser > xParser( xMSF->createInstance( OUString( RTL_CONSTASCII_USTRINGPARAM("com.sun.star.xml.sax.Parser") ) ), UNO_QUERY_THROW );
+                xParser->setDocumentHandler(  ::xmlscript::importLibraryCodeNames( aLib ) );
+                xParser->parseStream( source );
+                
+                ::xmlscript::ObjectModuleDescHash::iterator it_end = aLib.hModuleTypeDesc.end();
+                for ( ::xmlscript::ObjectModuleDescHash::iterator it = aLib.hModuleTypeDesc.begin(); it != it_end; ++it )
+                {
+                    if ( it->second.msObjectName.getLength() > 0 )
+                        mCodeNameToObjectNames[ it->second.msObjectName ] = it->first;
+                }
+            }
+        }
+        catch ( Exception& e )
+        {
+            OSL_TRACE("Urk, should never get here, help!!");
+        }
+    }
+    // Methods - XNameAccess
+    virtual uno::Any SAL_CALL getByName( const ::rtl::OUString& aName ) throw (container::NoSuchElementException, lang::WrappedTargetException, uno::RuntimeException)
+    {
+        ::xmlscript::CodeNameHash::iterator it = mCodeNameToObjectNames.find( aName );
+        if ( it == mCodeNameToObjectNames.end() )
+            throw container::NoSuchElementException();
+        return uno::makeAny( it->second );
+    }
+    virtual uno::Sequence< ::rtl::OUString > SAL_CALL getElementNames(  ) throw (uno::RuntimeException)
+    {
+        uno::Sequence< ::rtl::OUString > sNames( mCodeNameToObjectNames.size() );
+        ::rtl::OUString* pStr = sNames.getArray();
+        ::xmlscript::CodeNameHash::iterator it = mCodeNameToObjectNames.begin();
+        ::xmlscript::CodeNameHash::iterator it_end = mCodeNameToObjectNames.end();
+        for ( ; it != it_end ; ++it, ++pStr )
+            *pStr = it->first;    
+        return sNames;
+    }
+    virtual ::sal_Bool SAL_CALL hasByName( const ::rtl::OUString& aName ) throw (uno::RuntimeException)
+    {
+        return ( mCodeNameToObjectNames.find( aName ) != mCodeNameToObjectNames.end() );
+    }
+    // Methods - XElementAccess
+    virtual uno::Type SAL_CALL getElementType(  ) throw (uno::RuntimeException)
+    {
+        return ::getCppuType( (const rtl::OUString *)0 );
+    }
+    virtual ::sal_Bool SAL_CALL hasElements(  ) throw (uno::RuntimeException)
+    {
+        return ( mCodeNameToObjectNames.size() > 0 );
+    }
+    // Methods XServiceInfo
+    virtual ::rtl::OUString SAL_CALL getImplementationName( ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        return getImplementationName_static(); 
+    }
+    virtual ::sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        uno::Sequence< rtl::OUString > sNames( getSupportedServiceNames() );
+        rtl::OUString* pStr = sNames.getArray(); 
+        rtl::OUString* pEnd = ( sNames.getArray() + sNames.getLength() ); 
+        for ( ; pStr != pEnd ; ++pStr )
+        {
+            if ( (*pStr).equals( ServiceName ) )
+                return sal_True; 
+        } 
+        return sal_False;
+    }
+    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames( ) throw (::com::sun::star::uno::RuntimeException)
+    {
+        return getSupportedServiceNames_static();
+    }
+    // Service
+    static ::com::sun::star::uno::Sequence< ::rtl::OUString > getSupportedServiceNames_static()
+    {
+        uno::Sequence< rtl::OUString > sServiceNames(1);
+        sServiceNames[ 0 ] = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.PersistedCodeNames"));
+        return sServiceNames;
+    }
+    static ::rtl::OUString getImplementationName_static()
+    {
+         static OUString sImplName( RTL_CONSTASCII_USTRINGPARAM("PersistedReadOnlyCodeNames") );
+         return sImplName;
+    }
+
+    static Reference< XInterface > SAL_CALL Create ( const Reference< XComponentContext >& xServiceManager ) throw( Exception )
+    {
+        Reference< XInterface > xRet =
+        static_cast< XInterface* >( static_cast< OWeakObject* >( new PersistedReadOnlyCodeNames() ));
+        return xRet;
+    }
+};
+class ConvertEntryToVbaEntry : public ItemConvertor
+{
+	virtual bool convert( Any& item )
+	{
+	    // All entries are converted to 'Normal' modules
+	    // Document Modules need to be created externall ( e.g. these are under the control
+	    // of the document itself )
+	    rtl::OUString sSource;
+	    bool bRes = false;
+	
+	    if ( item >>= sSource )
+	    {
+	        script::ModuleInfo mInfo;
+	        mInfo.ModuleSource = sSource;
+	        mInfo.ModuleType = script::ModuleType::Normal;
+	        item <<= mInfo;
+	        bRes = true;
+	    }
+	    return bRes; 
+	}
+};
+
+class ConvertEntryFromVbaEntry : public ItemConvertor
+{
+	bool convert( Any& item )
+	{
+	    bool bRes = false;
+	    script::ModuleInfo mInfo;
+	    if ( item >>= mInfo )
+	    {
+	        item <<= mInfo.ModuleSource;
+	        bRes = true;
+	    }
+	    return bRes;
+	}
+};
+
+void SfxScriptLibraryContainer::convertLibraryEntries()
+{
+/*
+    if ( getVBACompatModeOn() )
+    {
+        // going from non-vba to vba        
+        SfxLibrary* pImplLib = getImplLib( String( RTL_CONSTASCII_USTRINGPARAM("Standard") ) );
+        
+	ConvertEntryToVbaEntry converter;
+	bool bRes = pImplLib ? pImplLib->convertContainer( getCppuType( ( const script::ModuleInfo* ) NULL ), converter ) : false;
+    }
+    else
+    { 
+        // going from vba to non-vba        
+        // we must delete all Document modules
+        // what we also must do is warn the user that this is going to happen ( see. Excel )
+        // needs interaction handler love ( perhaps that needs to be passed into the setVBACompat ) 
+        // or perhaps we can access the documents InteractionHandler ?
+        SfxLibrary* pImplLib = getImplLib( String( RTL_CONSTASCII_USTRINGPARAM("Standard") ) );
+	ConvertEntryFromVbaEntry convertor;
+	bool bRes = pImplLib ? pImplLib->convertContainer( getCppuType( ( const rtl::OUString*) NULL ), convertor ) : false;
+    }
+*/
+}
 //============================================================================
 
 }   // namespace basic
diff --git offapi/com/sun/star/script/XVBACompat.idl offapi/com/sun/star/script/XBasicLibraryInfo.idl
similarity index 87%
rename from offapi/com/sun/star/script/XVBACompat.idl
rename to offapi/com/sun/star/script/XBasicLibraryInfo.idl
index e1b2d28..647d530 100644
--- offapi/com/sun/star/script/XVBACompat.idl
+++ offapi/com/sun/star/script/XBasicLibraryInfo.idl
@@ -27,22 +27,26 @@
  * for a copy of the LGPLv3 License.
  *
  ************************************************************************/
-#ifndef __com_sun_star_script_XVBACompat_idl__ 
-#define __com_sun_star_script_XVBACompat_idl__ 
+#ifndef __com_sun_star_script_XBasicLibraryInfo_idl__ 
+#define __com_sun_star_script_XBasicLibraryInfo_idl__ 
  
 #ifndef __com_sun_star_uno_XInterface_idl__ 
 #include <com/sun/star/uno/XInterface.idl> 
 #endif 
+#ifndef __com_sun_star_script_ModuleInfo_idl__ 
+#include <com/sun/star/script/ModuleInfo.idl> 
+#endif 
  
 //============================================================================= 
  
 module com {  module sun {  module star {  module script {  
  
-interface XVBACompat: com::sun::star::uno::XInterface
+interface XBasicLibraryInfo: com::sun::star::uno::XInterface
 { 
 
 //============================================================================= 
-    [attribute ] boolean VBACompatModeOn;
+    [attribute ] boolean VBACompatMode;
+    ModuleInfo getModuleInfo( [in] string ModuleName );
  
 }; }; }; };  
 }; 
diff --git offapi/com/sun/star/script/makefile.mk offapi/com/sun/star/script/makefile.mk
index 9837104..4004c07 100644
--- offapi/com/sun/star/script/makefile.mk
+++ offapi/com/sun/star/script/makefile.mk
@@ -52,7 +52,7 @@ IDLFILES=\
 	XPersistentLibraryContainer.idl\
 	XStorageBasedLibraryContainer.idl\
 	XLibraryQueryExecutable.idl \
-	XVBACompat.idl\
+	XBasicLibraryInfo.idl\
 	ModuleSizeExceededRequest.idl\
 
 # ------------------------------------------------------------------
diff --git sc/inc/document.hxx sc/inc/document.hxx
index 35fd858..8b608f1 100644
--- sc/inc/document.hxx
+++ sc/inc/document.hxx
@@ -34,6 +34,7 @@
 
 #include <vcl/prntypes.hxx>
 #include <vcl/timer.hxx>
+#include <com/sun/star/container/XNameAccess.hpp>
 #include <com/sun/star/uno/Reference.hxx>
 #include <vos/ref.hxx>
 #include "scdllapi.h"
@@ -319,7 +320,7 @@ private:
 	Timer				aTrackTimer;
 
     com::sun::star::uno::Reference< com::sun::star::document::XVbaEventsHelper > mxVbaEventsHelper;
-
+        com::sun::star::uno::Reference< com::sun::star::container::XNameAccess > mxCodeNames;
 public:
     ScTabOpList         aTableOpList;		            // list of ScInterpreterTableOpParams currently in use
     ScInterpreterTableOpParams  aLastTableOpParams;     // remember last params
@@ -439,6 +440,7 @@ public:
 								SfxObjectShell* pDocShell = NULL );
 					~ScDocument();
 
+    com::sun::star::uno::Reference< com::sun::star::container::XNameAccess > GetPersistedCodeNames() throw( com::sun::star::uno::RuntimeException );
 	inline ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >
 					GetServiceManager() const { return xServiceManager; }
 
diff --git sc/source/core/data/documen2.cxx sc/source/core/data/documen2.cxx
index aa0bafd..e867e99 100644
--- sc/source/core/data/documen2.cxx
+++ sc/source/core/data/documen2.cxx
@@ -263,6 +263,7 @@ ScDocument::ScDocument( ScDocumentMode	e
 
 	aTrackTimer.SetTimeoutHdl( LINK( this, ScDocument, TrackTimeHdl ) );
 	aTrackTimer.SetTimeout( 100 );
+	aDocCodeName = String( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
 }
 
 
diff --git sc/source/core/data/document.cxx sc/source/core/data/document.cxx
index a94a264..fee5545 100644
--- sc/source/core/data/document.cxx
+++ sc/source/core/data/document.cxx
@@ -92,6 +92,9 @@
 #include "postit.hxx"
 #include "tabprotection.hxx"
 #include "externalrefmgr.hxx"
+#include <comphelper/processfactory.hxx>
+
+using namespace ::com::sun::star;
 
 struct ScDefaultAttr
 {
@@ -4485,5 +4488,30 @@ BOOL ScDocument::NeedPageResetAfterTab( 
 	return FALSE;		// sonst nicht
 }
 
+uno::Reference< container::XNameAccess > 
+ScDocument::GetPersistedCodeNames() throw( uno::RuntimeException )
+{
+    SfxObjectShell* pObjShell = GetDocumentShell();
+    if ( pShell && !mxCodeNames.is() )
+    {
+        uno::Sequence< uno::Any > aArgs( 1 );
+        aArgs[ 0 ] = uno::makeAny( pObjShell->GetModel() );
+        mxCodeNames.set( ::comphelper::getProcessServiceFactory()->createInstanceWithArguments(rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("org.openoffice.vba.PersistedCodeNames")), aArgs),  uno::UNO_QUERY );
+        if ( mxCodeNames.is() )
+        {
+            rtl::OUString sWorkbook( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
+            if ( mxCodeNames->hasByName( sWorkbook ) )
+            {
+		
+                rtl::OUString sCodeName;
+                mxCodeNames->getByName( sWorkbook ) >>= sCodeName;
+                SetCodeName( sCodeName );
+            }
+        }
+    }
+    return mxCodeNames;
+}
+
+
 
 
diff --git sc/source/filter/xml/xmlsubti.cxx sc/source/filter/xml/xmlsubti.cxx
index c56f867..a7b3c40 100644
--- sc/source/filter/xml/xmlsubti.cxx
+++ sc/source/filter/xml/xmlsubti.cxx
@@ -220,6 +220,7 @@ void ScMyTables::NewSheet(const rtl::OUS
 				uno::Reference <container::XIndexAccess> xIndex( xSheets, uno::UNO_QUERY );
 				if ( xIndex.is() )
 				{
+
                     xCurrentSheet.set(xIndex->getByIndex(nCurrentSheet), uno::UNO_QUERY);
 					if ( xCurrentSheet.is() )
 					{
@@ -246,6 +247,27 @@ void ScMyTables::NewSheet(const rtl::OUS
 									}
 								}
 						}
+
+						ScDocument *pDoc = ScXMLConverter::GetScDocument(rImport.GetModel());
+						// Codenames need to be set as sheets are created and read
+						if ( pDoc  )
+						{
+							String sName;
+							pDoc->GetName( nCurrentSheet, sName );
+							OSL_TRACE("** import processing %s", rtl::OUStringToOString( sName, RTL_TEXTENCODING_UTF8 ).getStr() );
+	                        rtl::OUString sOUName( sName );
+							uno::Reference< container::XNameAccess > xCodeNames( pDoc->GetPersistedCodeNames() );
+							if( xCodeNames.is() && xCodeNames->hasByName( sName ) )
+							{
+								rtl::OUString sOUSCodeName;
+								xCodeNames->getByName( sName ) >>= sOUSCodeName;
+							    OSL_TRACE("** import processing setting codename %s for %s", rtl::OUStringToOString( sOUSCodeName, RTL_TEXTENCODING_UTF8 ).getStr(), rtl::OUStringToOString( sName, RTL_TEXTENCODING_UTF8 ).getStr() );
+								rImport.LockSolarMutex();
+								String sCodeName( sOUSCodeName );
+								pDoc->SetCodeName( nCurrentSheet, sCodeName );		
+								rImport.UnlockSolarMutex();
+							}
+						}
 						rImport.SetTableStyle(sStyleName);
 
                         if ( sStyleName.getLength() )
diff --git sc/source/ui/docshell/docsh.cxx sc/source/ui/docshell/docsh.cxx
index 073a68d..31e9003 100644
--- sc/source/ui/docshell/docsh.cxx
+++ sc/source/ui/docshell/docsh.cxx
@@ -131,6 +131,7 @@
 #include "cellsuno.hxx"
 #include <com/sun/star/document/XVbaEventsHelper.hpp>
 #include <com/sun/star/document/VbaEventId.hpp>
+#include <com/sun/star/script/ModuleInfo.hpp>
 
 using namespace com::sun::star;
 using namespace com::sun::star::document::VbaEventId;
@@ -299,6 +300,14 @@ void ScDocShell::BeforeXMLLoading()
 		ScColumn::bDoubleAlloc = sal_True;
 }
 
+rtl::OUString GetCodeName( ScDocument& aDocument, String& sObjectName )
+{
+    uno::Reference< container::XNameAccess > xCodeNames( aDocument.GetPersistedCodeNames() );
+    rtl::OUString sOUSCodeName;
+    xCodeNames->getByName( sObjectName ) >>= sOUSCodeName;
+    return sOUSCodeName;
+}
+
 void ScDocShell::AfterXMLLoading(sal_Bool bRet)
 {
 	if (GetCreateMode() != SFX_CREATE_MODE_ORGANIZER)
@@ -372,8 +381,32 @@ void ScDocShell::AfterXMLLoading(sal_Boo
 
         // suppress VBA events when loading the xml
         uno::Reference< document::XVbaEventsHelper > xEvt( aDocument.GetVbaEventsHelper() );
+	OSL_TRACE("About to enable events again");
         if ( xEvt.is() )
             xEvt->setIgnoreEvents( sal_False );
+/*
+        // SetCodenames for each tab  ( and set up the vba DOC Modules ) 
+        SCTAB nTabCount = aDocument.GetTableCount();
+        for (SCTAB i = 0; i < nTabCount; ++i)
+        {
+            String sObjectName;
+            String sCodeName;
+            try
+            {
+                if ( i == 0 )
+                {
+                    sObjectName = String( RTL_CONSTASCII_USTRINGPARAM("ThisWorkbook") );
+                    sCodeName = GetCodeName( aDocument, sObjectName );
+                }
+                aDocument.GetName( i, sObjectName );
+                sCodeName = GetCodeName( aDocument, sObjectName );
+                SetDocModuleForCodeName( aDocument, sCodeName );
+            } 
+            catch( uno::Exception& )
+            {
+            }
+        }
+ */           
 	aDocument.SetImportingXML( FALSE );
     aDocument.EnableUndo( TRUE );
     bIsEmpty = FALSE;
diff --git sc/source/ui/vba/vbaeventshelper.cxx sc/source/ui/vba/vbaeventshelper.cxx
index a315af0..b4d0bd9 100644
--- sc/source/ui/vba/vbaeventshelper.cxx
+++ sc/source/ui/vba/vbaeventshelper.cxx
@@ -620,7 +620,7 @@ String ScVbaEventsHelper::getSheetModule
 {
 	ScExtDocOptions* pExtOptions = pDoc->GetExtDocOptions();
 	String aCodeName;
-	pDoc->GetName( nTab, aCodeName);
+	pDoc->GetCodeName( nTab, aCodeName);
 	// Use code name if that exists
 	if ( pExtOptions )
 		aCodeName = pExtOptions->GetCodeName( nTab );
diff --git svx/source/msfilter/svxmsbas.cxx svx/source/msfilter/svxmsbas.cxx
index b00e19c..cde45f7 100644
--- svx/source/msfilter/svxmsbas.cxx
+++ svx/source/msfilter/svxmsbas.cxx
@@ -54,6 +54,8 @@ using namespace com::sun::star::awt;
 #include <com/sun/star/container/XNameContainer.hpp>
 #include <com/sun/star/script/XLibraryContainer.hpp>
 #include <com/sun/star/script/ModuleInfo.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
+
 using namespace com::sun::star::container;
 using namespace com::sun::star::script;
 using namespace com::sun::star::uno;
@@ -272,7 +274,11 @@ BOOL SvxImportMSVBasic::ImportCode_Impl(
             Reference< container::XNameAccess > xVBAObjectForCodeName;
 			if ( !bAsComment )
             {
-                rDocSh.GetBasic()->SetVBAEnabled( true );
+                Reference< XBasicLibraryInfo > xInfo( xLib, UNO_QUERY );
+                if( xInfo.is() )
+                    xInfo->setVBACompatMode( sal_True );
+                else
+                    rDocSh.GetBasic()->SetVBAEnabled( true );
                 Reference< XMultiServiceFactory> xSF(rDocSh.GetModel(), UNO_QUERY);
                 if ( xSF.is() )
                 {
diff --git toolkit/inc/toolkit/controls/dialogcontrol.hxx toolkit/inc/toolkit/controls/dialogcontrol.hxx
index 0180ddd..e8f0005 100644
--- toolkit/inc/toolkit/controls/dialogcontrol.hxx
+++ toolkit/inc/toolkit/controls/dialogcontrol.hxx
@@ -41,8 +41,6 @@
 #include <com/sun/star/beans/XPropertyChangeListener.hpp>
 #include <com/sun/star/awt/XDialog.hpp>
 #include <com/sun/star/resource/XStringResourceResolver.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
-#include <cppuhelper/implbase7.hxx>
 #include <cppuhelper/implbase6.hxx>
 #include <cppuhelper/implbase5.hxx>
 #include <toolkit/helper/listenermultiplexer.hxx>
@@ -60,13 +58,12 @@
 //	class UnoControlDialogModel
 //	----------------------------------------------------
 typedef UnoControlModel		UnoControlDialogModel_Base;
-typedef ::cppu::ImplHelper7	<	::com::sun::star::lang::XMultiServiceFactory
+typedef ::cppu::ImplHelper6	<	::com::sun::star::lang::XMultiServiceFactory
 							,	::com::sun::star::container::XContainer
 							,	::com::sun::star::container::XNameContainer
 							,	::com::sun::star::awt::XTabControllerModel
 							,	::com::sun::star::util::XChangesNotifier
 							,	::com::sun::star::beans::XPropertyChangeListener
-							,	::com::sun::star::script::XVBACompat
 							>	UnoControlDialogModel_IBase;
 
 class UnoControlDialogModel :	public UnoControlDialogModel_IBase
@@ -179,10 +176,6 @@ public:
     using cppu::OPropertySetHelper::disposing;
     virtual void SAL_CALL disposing( const ::com::sun::star::lang::EventObject& evt ) throw (::com::sun::star::uno::RuntimeException);
 
-	// XVBACompat
-    virtual ::sal_Bool SAL_CALL getVBACompatModeOn() throw (::com::sun::star::uno::RuntimeException);
-    virtual void SAL_CALL setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (::com::sun::star::uno::RuntimeException);
-
 	// XServiceInfo
 	DECLIMPL_SERVICEINFO_DERIVED( UnoControlDialogModel,UnoControlDialogModel_Base, szServiceName2_UnoControlDialogModel )
 
@@ -203,7 +196,6 @@ private:
             ModelGroup*& rpCurrentGroup );
     void AddRadioButtonGroup (
             ::std::map< ::rtl::OUString, ModelGroup >& pNamedGroups );
-    sal_Bool mbVBAMode;
 };
 
 //	----------------------------------------------------
diff --git toolkit/inc/toolkit/helper/property.hxx toolkit/inc/toolkit/helper/property.hxx
index db61c94..1abcda6 100644
--- toolkit/inc/toolkit/helper/property.hxx
+++ toolkit/inc/toolkit/helper/property.hxx
@@ -190,6 +190,7 @@ namespace rtl {
 #define BASEPROPERTY_CUSTOMUNITTEXT                 136  // ::rtl::OUString
 #define BASEPROPERTY_ENABLEVISIBLE                  137  // sal_Bool
 #define BASEPROPERTY_GROUPNAME                      138  // ::rtl::OUString
+#define BASEPROPERTY_VBAFORM                      139  // sal_Bool
 
 // Keine gebundenen Properties, werden immer aus der Property BASEPROPERTY_FONTDESCRIPTOR entnommen.
 #define BASEPROPERTY_FONTDESCRIPTORPART_START			1000
diff --git toolkit/source/controls/dialogcontrol.cxx toolkit/source/controls/dialogcontrol.cxx
index a8a5c19..f976562 100644
--- toolkit/source/controls/dialogcontrol.cxx
+++ toolkit/source/controls/dialogcontrol.cxx
@@ -268,7 +268,7 @@ static const ::rtl::OUString& getStepPro
 UnoControlDialogModel::UnoControlDialogModel()
 	:maContainerListeners( *this )
 	,maChangeListeners ( GetMutex() )
-	,mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false ), mbVBAMode( sal_False )
+	,mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false )
 {
 	ImplRegisterProperty( BASEPROPERTY_BACKGROUNDCOLOR );
 //	ImplRegisterProperty( BASEPROPERTY_BORDER );
@@ -290,6 +290,8 @@ UnoControlDialogModel::UnoControlDialogM
 	aBool <<= (sal_Bool) sal_True;
 	ImplRegisterProperty( BASEPROPERTY_MOVEABLE, aBool );
 	ImplRegisterProperty( BASEPROPERTY_CLOSEABLE, aBool );
+	aBool <<= (sal_Bool) sal_False;
+	ImplRegisterProperty( BASEPROPERTY_VBAFORM, aBool );
 }
 
 UnoControlDialogModel::UnoControlDialogModel( const UnoControlDialogModel& rModel )
@@ -297,7 +299,7 @@ UnoControlDialogModel::UnoControlDialogM
     , UnoControlDialogModel_Base( rModel )
 	, maContainerListeners( *this )
 	, maChangeListeners ( GetMutex() )
-	, mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false ), mbVBAMode( rModel.mbVBAMode )
+	, mbGroupsUpToDate( sal_False ), mbAdjustingGraphic( false )
 {
 }
 
@@ -313,18 +315,6 @@ Any UnoControlDialogModel::queryAggregat
 	return (aRet.hasValue() ? aRet : UnoControlDialogModel_Base::queryAggregation( rType ));
 }
 
-::sal_Bool SAL_CALL 
-UnoControlDialogModel::getVBACompatModeOn() throw (RuntimeException)
-{
-	return mbVBAMode;
-}
-
-void SAL_CALL 
-UnoControlDialogModel::setVBACompatModeOn( ::sal_Bool _vbacompatmodeon ) throw (RuntimeException) 
-{
-	mbVBAMode = _vbacompatmodeon;
-}
-
 // XTypeProvider
 IMPL_IMPLEMENTATION_ID( UnoControlDialogModel )
 Sequence< Type > UnoControlDialogModel::getTypes() throw(RuntimeException)
@@ -1491,8 +1481,19 @@ void UnoDialogControl::ImplSetPosSize( R
 	// Currentley we are simply using MAP_APPFONT ( for normal Dialogs )
 	// and MAP_100TH_MM for imported Userforms
 	MapMode aMode( MAP_APPFONT );
-	Reference< script::XVBACompat > xVBA( getModel(), UNO_QUERY );
-	if ( xVBA.is() && xVBA->getVBACompatModeOn() )
+	sal_Bool bVBAForm = sal_False;
+	Reference< XPropertySet > xDlgModelProps( getModel(), UNO_QUERY );
+	if ( xDlgModelProps.is() )
+	{
+		try
+		{
+			xDlgModelProps->getPropertyValue( ::rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "VBAForm" ) ) ) >>= bVBAForm;
+		}
+		catch( Exception& )
+		{
+		}
+	} 
+	if ( bVBAForm )
 		aMode = MapMode( MAP_100TH_MM );
 	OutputDevice*pOutDev = Application::GetDefaultDevice();
 	if ( pOutDev )
diff --git toolkit/source/helper/property.cxx toolkit/source/helper/property.cxx
index a7fc25b..8d1ee74 100644
--- toolkit/source/helper/property.cxx
+++ toolkit/source/helper/property.cxx
@@ -271,7 +271,8 @@ ImplPropertyInfo* ImplGetPropertyInfos( 
 			DECL_PROP_2		( "InvokesStopNodeEditing",	TREE_INVOKESSTOPNODEEDITING, sal_Bool,		BOUND, MAYBEDEFAULT ),
             DECL_PROP_2     ( "DialogSourceURL",        DIALOGSOURCEURL,        ::rtl::OUString,    BOUND, MAYBEDEFAULT ),
             DECL_PROP_2     ( "URL",                    URL,                    ::rtl::OUString,    BOUND, MAYBEDEFAULT ),
-            DECL_PROP_2     ( "EnableVisible",          ENABLEVISIBLE,          sal_Bool,    BOUND, MAYBEDEFAULT )
+            DECL_PROP_2     ( "EnableVisible",          ENABLEVISIBLE,          sal_Bool,    BOUND, MAYBEDEFAULT ),
+            DECL_PROP_2     ( "VBAForm",          VBAFORM,          sal_Bool,    BOUND, MAYBEDEFAULT ),
             };
 			pPropertyInfos = aImplPropertyInfos;
 			nElements = sizeof( aImplPropertyInfos ) / sizeof( ImplPropertyInfo );
diff --git xmlscript/inc/xmlscript/xmllib_imexp.hxx xmlscript/inc/xmlscript/xmllib_imexp.hxx
index 9a3048f..93826a9 100644
--- xmlscript/inc/xmlscript/xmllib_imexp.hxx
+++ xmlscript/inc/xmlscript/xmllib_imexp.hxx
@@ -34,11 +34,21 @@
 #include <com/sun/star/uno/Sequence.hxx>
 
 #include "xmlscript/xmlns.h"
-
+#include <hash_map>
+#include <com/sun/star/script/ModuleType.hpp>
 
 namespace xmlscript
 {
+struct ObjectModuleDesc
+{
+    rtl::OUString msObjectName;
+    sal_Int32 mnModuleType;
+ObjectModuleDesc() : mnModuleType( ::com::sun::star::script::ModuleType::Normal ) {}
+};
 
+typedef  std::hash_map< rtl::OUString,
+ObjectModuleDesc, ::rtl::OUStringHash,
+::std::equal_to< ::rtl::OUString > > ObjectModuleDescHash;
 //==============================================================================
 // Library container export
 // HACK C++ struct to transport info. Later the container 
@@ -51,10 +61,15 @@ struct LibDescriptor
 	sal_Bool bLink;
 	sal_Bool bReadOnly;
 	sal_Bool bPasswordProtected;
+	sal_Bool bVBAMode;
 	::com::sun::star::uno::Sequence< ::rtl::OUString > aElementNames;
 	sal_Bool bPreload;
+	ObjectModuleDescHash hModuleTypeDesc;
+	LibDescriptor(); 
 };
 
+typedef std::hash_map< rtl::OUString, rtl::OUString, ::rtl::OUStringHash, ::std::equal_to< ::rtl::OUString > > CodeNameHash;
+
 struct LibDescriptorArray
 {
     LibDescriptor* mpLibs;
@@ -79,6 +94,11 @@ SAL_CALL exportLibraryContainer(
 SAL_CALL importLibraryContainer( LibDescriptorArray* pLibArray )
 		SAL_THROW( (::com::sun::star::uno::Exception) );
 
+::com::sun::star::uno::Reference<
+    ::com::sun::star::xml::sax::XDocumentHandler >
+SAL_CALL importLibraryCodeNames( LibDescriptor& rLib )
+		SAL_THROW( (::com::sun::star::uno::Exception) );
+
 
 void
 SAL_CALL exportLibrary(
diff --git xmlscript/source/xmldlg_imexp/imp_share.hxx xmlscript/source/xmldlg_imexp/imp_share.hxx
index bf3ea5f..cda47ef 100644
--- xmlscript/source/xmldlg_imexp/imp_share.hxx
+++ xmlscript/source/xmldlg_imexp/imp_share.hxx
@@ -45,7 +45,7 @@
 #include <com/sun/star/awt/FontEmphasisMark.hpp>
 #include <com/sun/star/awt/FontRelief.hpp>
 #include <com/sun/star/xml/input/XRoot.hpp>
-#include <com/sun/star/script/XLibraryContainer.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 #include <vector>
 
 
@@ -133,7 +133,6 @@ struct DialogImport
     css::uno::Reference< css::container::XNameContainer > _xDialogModel;
     css::uno::Reference< css::lang::XMultiServiceFactory > _xDialogModelFactory;
     css::uno::Reference< css::frame::XModel > _xDoc;
-    css::uno::Reference< css::script::XLibraryContainer > _xScriptLibraryContainer;
 
     sal_Int32 XMLNS_DIALOGS_UID, XMLNS_SCRIPT_UID;
     
@@ -180,7 +179,7 @@ public:
     
     inline css::uno::Reference< css::frame::XModel > getDocOwner() { return _xDoc; }
 
-	css::uno::Reference< css::script::XLibraryContainer > getScriptLibraryContainer();
+	css::uno::Reference< css::script::XBasicLibraryInfo > getScriptLibraryInfo();
     // XRoot
     virtual void SAL_CALL startDocument(
         css::uno::Reference< css::xml::input::XNamespaceMapping >
diff --git xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
index 92c1a09..f513ecf 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_impmodels.cxx
@@ -41,7 +41,7 @@
 #include <com/sun/star/beans/XPropertyState.hpp>
 #include <com/sun/star/document/XStorageBasedDocument.hpp>
 #include <com/sun/star/document/XGraphicObjectResolver.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 
 #include <comphelper/componentcontext.hxx>
 #include <comphelper/processfactory.hxx>
@@ -150,10 +150,10 @@ void importBindableAndListRangeBits( Dia
 sal_Bool isVBACompatModeOn( DialogImport* _pImport )
 {
 	sal_Bool bVBAMode = sal_False;
-	Reference< script::XVBACompat > xVBACompat( _pImport->getScriptLibraryContainer(), UNO_QUERY );
-	if( xVBACompat.is() )
+	Reference< script::XBasicLibraryInfo > xVBAInfo( _pImport->getScriptLibraryInfo(), UNO_QUERY );
+	if( xVBAInfo.is() )
 	{
-		bVBAMode = xVBACompat->getVBACompatModeOn();
+		bVBAMode = xVBAInfo->getVBACompatMode();
 	}
 	return bVBAMode;
 }
diff --git xmlscript/source/xmldlg_imexp/xmldlg_import.cxx xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
index 5548016..97e852a 100644
--- xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
+++ xmlscript/source/xmldlg_imexp/xmldlg_import.cxx
@@ -61,7 +61,7 @@
 #include <com/sun/star/view/SelectionType.hpp>
 #include <com/sun/star/document/XStorageBasedDocument.hpp>
 #include <com/sun/star/script/DocumentScriptLibraryContainer.hpp>
-#include <com/sun/star/script/XVBACompat.hpp>
+#include <com/sun/star/script/XBasicLibraryInfo.hpp>
 
 using namespace ::com::sun::star;
 using namespace ::com::sun::star::uno;
@@ -1878,24 +1878,32 @@ Reference< xml::input::XElement > Dialog
     return 0;
 }
 //__________________________________________________________________________________________________
-Reference< script::XLibraryContainer > DialogImport::getScriptLibraryContainer()
+Reference< script::XBasicLibraryInfo > DialogImport::getScriptLibraryInfo()
 {
-	if( !_xScriptLibraryContainer.is() )
-	{
-		try
-		{
-			Reference< document::XStorageBasedDocument > xStorageDoc( _xDoc, UNO_QUERY );
-			if( xStorageDoc.is() )
-				_xScriptLibraryContainer.set(
-									script::DocumentScriptLibraryContainer::create( comphelper_getProcessComponentContext(), xStorageDoc ), 
-									UNO_QUERY );
-		}
-		catch( const Exception& )
-		{
-		}
-	}
-
-	return _xScriptLibraryContainer;
+    // #FIXME this is a hack, we should know about the library that 
+    // 'owns' the dialog ( in order to determine it's vba mode )
+    Reference< script::XBasicLibraryInfo >  xLib;
+    if ( _xDoc.is() )
+    {
+        Reference< beans::XPropertySet > xProps( _xDoc, UNO_QUERY );
+        if ( xProps.is() )
+        {
+            try
+            {
+                Reference< container::XNameAccess >  xLibContainer;
+                xProps->getPropertyValue( OUSTR("BasicLibraries") ) >>= xLibContainer;
+                if ( xLibContainer.is() )
+                {
+                    xLibContainer->getByName( OUSTR("Standard") ) >>= xLib;
+                }
+            
+            }
+            catch( Exception& )
+            {
+            }
+        }
+   }
+   return xLib;
 }
 
 //##################################################################################################
@@ -1908,11 +1916,19 @@ Reference< xml::sax::XDocumentHandler > 
     SAL_THROW( (Exception) )
 {
     DialogImport* pImport = new DialogImport( xContext, xDialogModel, xDocument );
-    uno::Reference< script::XVBACompat > xVBAModeSource( pImport->getScriptLibraryContainer(), uno::UNO_QUERY );
-    
-    uno::Reference< script::XVBACompat > xVBAModeDest( xDialogModel, uno::UNO_QUERY );
-    if ( xVBAModeSource.is() && xVBAModeDest.is() )
-        xVBAModeDest->setVBACompatModeOn( xVBAModeSource->getVBACompatModeOn() );
+    uno::Reference< script::XBasicLibraryInfo > xVBAModeSource( pImport->getScriptLibraryInfo(), uno::UNO_QUERY ); 
+    uno::Reference< beans::XPropertySet > xDlgProps( xDialogModel, uno::UNO_QUERY );
+    OSL_TRACE("importDialogModel xVBAModeSource %d, xDialogModel %d", xVBAModeSource.is(), xDlgProps.is() );
+    if ( xVBAModeSource.is() && xVBAModeSource->getVBACompatMode() && xDlgProps.is() )
+    {
+        try
+        {
+            xDlgProps->setPropertyValue( OUSTR("VBAForm"), uno::makeAny( sal_True ) );
+        }
+        catch( Exception& )
+        {
+        }
+    }
     return ::xmlscript::createDocumentHandler(
         static_cast< xml::input::XRoot * >( pImport ) );
 }
diff --git xmlscript/source/xmllib_imexp/imp_share.hxx xmlscript/source/xmllib_imexp/imp_share.hxx
index d602103..fdc0536 100644
--- xmlscript/source/xmllib_imexp/imp_share.hxx
+++ xmlscript/source/xmllib_imexp/imp_share.hxx
@@ -220,7 +220,6 @@ class LibrariesElement : public LibEleme
     
 protected:
     vector< LibDescriptor > mLibDescriptors;
-
 public:
     virtual Reference< xml::input::XElement > SAL_CALL startChildElement(
         sal_Int32 nUid, OUString const & rLocalName,
@@ -244,7 +243,7 @@ class LibraryElement : public LibElement
 {
 protected:
     vector< OUString > mElements;
-
+    ObjectModuleDescHash mObjectDescs;
 public:
 
     virtual Reference< xml::input::XElement > SAL_CALL startChildElement(
diff --git xmlscript/source/xmllib_imexp/xmllib_export.cxx xmlscript/source/xmllib_imexp/xmllib_export.cxx
index 4f6de54..1ee7c50 100644
--- xmlscript/source/xmllib_imexp/xmllib_export.cxx
+++ xmlscript/source/xmllib_imexp/xmllib_export.cxx
@@ -44,6 +44,28 @@ namespace xmlscript
 static OUString aTrueStr ( RTL_CONSTASCII_USTRINGPARAM("true") );
 static OUString aFalseStr( RTL_CONSTASCII_USTRINGPARAM("false") );
 
+rtl::OUString lcl_getModuleTypeStringForType( sal_Int32 nModuleType )
+{
+	rtl::OUString sType;
+	switch( nModuleType )
+	{
+		case script::ModuleType::Document:
+			sType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Document" ) );
+			break;
+		case script::ModuleType::Class:
+			sType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Class" ) );
+			break;
+		case script::ModuleType::Form:
+			sType = rtl::OUString( RTL_CONSTASCII_USTRINGPARAM( "Form" ) );
+			break;
+		case script::ModuleType::Normal: // no need to set a module type
+		case script::ModuleType::Unknown:
+		default:
+			break;
+	}
+	return sType;
+}
+
 //##################################################################################################
 
 
@@ -73,11 +95,10 @@ SAL_CALL exportLibraryContainer(
 	pLibsElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM("xmlns:" XMLNS_XLINK_PREFIX) ),
 							    OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_XLINK_URI) ) );
 
-
-	xOut->ignorableWhitespace( OUString() );
+    int nLibCount = pLibArray->mnLibCount;
 	xOut->startElement( aLibrariesName, xAttributes );
+	xOut->ignorableWhitespace( OUString() );
 
-    int nLibCount = pLibArray->mnLibCount;
 	for( sal_Int32 i = 0 ; i < nLibCount ; i++ )
 	{
 		LibDescriptor& rLib = pLibArray->mpLibs[i];
@@ -108,6 +129,9 @@ SAL_CALL exportLibraryContainer(
 								        rLib.bReadOnly ? aTrueStr : aFalseStr );
         }
 
+    if( rLib.bVBAMode )
+		pLibElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":vbaenabled") ), aTrueStr );
+
 		pLibElement->dump( xOut.get() );
 	}
 
@@ -153,10 +177,14 @@ SAL_CALL exportLibrary(
     if( rLib.bPreload )
 		pLibElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":preload") ), aTrueStr );
 
+/*    if( rLib.bVBAMode )
+		pLibElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":vbaenabled") ), aTrueStr );
+*/
 	sal_Int32 nElementCount = rLib.aElementNames.getLength();
 	if( nElementCount )
 	{
 		const OUString* pElementNames = rLib.aElementNames.getConstArray();
+		
 		for( sal_Int32 i = 0 ; i < nElementCount ; i++ )
 		{
 			XMLElement* pElement = new XMLElement( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":element" ) ) );
@@ -165,7 +193,16 @@ SAL_CALL exportLibrary(
 
 			pElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":name") ),
 										pElementNames[i] );
-	
+			ObjectModuleDescHash::const_iterator it = rLib.hModuleTypeDesc.find( pElementNames[i] );
+			if ( it !=  rLib.hModuleTypeDesc.end() )
+			{
+				rtl::OUString sType = lcl_getModuleTypeStringForType( it->second.mnModuleType );
+				if ( sType.getLength() )
+				{
+					pElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":moduletype") ), sType );
+					pElement->addAttribute( OUString( RTL_CONSTASCII_USTRINGPARAM(XMLNS_LIBRARY_PREFIX ":objectname") ), it->second.msObjectName );
+				}
+			}
 			pLibElement->addSubElement( pElement );
 		}
 	}
diff --git xmlscript/source/xmllib_imexp/xmllib_import.cxx xmlscript/source/xmllib_imexp/xmllib_import.cxx
index b533d37..24b2834 100644
--- xmlscript/source/xmllib_imexp/xmllib_import.cxx
+++ xmlscript/source/xmllib_imexp/xmllib_import.cxx
@@ -44,7 +44,20 @@ namespace xmlscript
 {
 
 //##################################################################################################
-
+sal_Int32 lcl_getModuleTypeForStringType( const rtl::OUString& rsType )
+{
+    // default to normal unknown
+    sal_Int32 nType = com::sun::star::script::ModuleType::Unknown;
+    if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("class") ) ) )
+        nType = com::sun::star::script::ModuleType::Class;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("form") ) ) )
+        nType = com::sun::star::script::ModuleType::Form;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("document") ) ) )
+        nType = com::sun::star::script::ModuleType::Document;
+    else if ( rsType.equalsIgnoreAsciiCase( rtl::OUString( RTL_CONSTASCII_USTRINGPARAM("normal") ) ) )
+        nType = com::sun::star::script::ModuleType::Normal;
+    return nType;
+}
 //__________________________________________________________________________________________________
 Reference< xml::input::XElement > LibElementBase::getParent()
     throw (RuntimeException)
@@ -206,7 +219,11 @@ Reference< xml::input::XElement > Librar
             &aDesc.bPreload,
             OUString( RTL_CONSTASCII_USTRINGPARAM("preload") ),
             xAttributes, XMLNS_LIBRARY_UID );
-
+/*        getBoolAttr(
+            &aDesc.bVBAMode,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("vbaenabled") ),
+            xAttributes, XMLNS_LIBRARY_UID );
+*/
         return new LibraryElement( rLocalName, xAttributes, 0, this );
     }
     else
@@ -265,7 +282,10 @@ Reference< xml::input::XElement > Librar
             &aDesc.bPasswordProtected,
             OUString( RTL_CONSTASCII_USTRINGPARAM("passwordprotected") ),
             xAttributes, _pImport->XMLNS_LIBRARY_UID );
-
+        getBoolAttr(
+            &aDesc.bVBAMode,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("vbaenabled") ),
+            xAttributes, _pImport->XMLNS_LIBRARY_UID );
         mLibDescriptors.push_back( aDesc );
         return new LibraryElement( rLocalName, xAttributes, this, _pImport );
     }
@@ -312,6 +332,17 @@ Reference< xml::input::XElement > Librar
         if (aValue.getLength())
             mElements.push_back( aValue );
 
+        ObjectModuleDesc aDesc;
+	
+        aDesc.mnModuleType = lcl_getModuleTypeForStringType( 
+          xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("moduletype") ) ) );
+        aDesc.msObjectName = xAttributes->getValueByUidName(
+            _pImport->XMLNS_LIBRARY_UID,
+            OUString( RTL_CONSTASCII_USTRINGPARAM("objectname") ) );
+        if ( aValue.getLength() && aDesc.mnModuleType != ::com::sun::star::script::ModuleType::Unknown )
+             mObjectDescs[ aValue ] = aDesc;
         return new LibElementBase( rLocalName, xAttributes, this, _pImport );
     }
     else
@@ -335,6 +366,7 @@ void LibraryElement::endElement()
     if( !pLib )
         pLib = &static_cast< LibrariesElement* >( _pParent )->mLibDescriptors.back();
     pLib->aElementNames = aElementNames;
+    pLib->hModuleTypeDesc = mObjectDescs;
 }
 
 
@@ -348,6 +380,15 @@ SAL_CALL importLibraryContainer( LibDesc
         static_cast< xml::input::XRoot * >( new LibraryImport( pLibArray ) ) );
 }
 
+
+Reference< ::com::sun::star::xml::sax::XDocumentHandler >
+SAL_CALL importLibraryCodeNames( LibDescriptor& rLib)
+        SAL_THROW( (Exception) )
+{
+    return importLibrary( rLib );
+}
+
+
 //##################################################################################################
 
 ::com::sun::star::uno::Reference< ::com::sun::star::xml::sax::XDocumentHandler >
@@ -360,6 +401,13 @@ SAL_CALL importLibrary( LibDescriptor& r
 
 
 //##################################################################################################
+LibDescriptor::LibDescriptor()
+{
+    bLink = sal_False;
+    bReadOnly = sal_False;
+    bPasswordProtected = sal_False;
+    bVBAMode = sal_False;
+}
 
 LibDescriptorArray::LibDescriptorArray( sal_Int32 nLibCount )
 {
