Index: config_office/configure.in
===================================================================
--- config_office/configure.in.orig	2004-08-14 01:19:26.245183120 +0200
+++ config_office/configure.in	2004-08-14 01:22:21.372559712 +0200
@@ -97,6 +97,68 @@ AC_ARG_ENABLE(kde,
 
                           Usage: --enable-kde
 ],,)
+AC_ARG_WITH(system-nas,
+[  --with-system-nas       Use nas already on system
+],,)
+AC_ARG_WITH(system-freetype,
+   --with-system-freetype  Use freetype already on system
+],,)
+AC_ARG_WITH(system-db,
+[  --with-system-db        Use berkeleydb already on system
+],,)
+AC_ARG_WITH(db-version,
+[  --with-db-version=VERSION       Specify db version manually ],
+[	DB_VERSION="$withval"
+	DB_VERSION_MAJOR=$(echo $DB_VERSION | cut -d"." -f1)
+])
+AC_ARG_WITH(db-jar,
+[  --with-db-jar=JARFILE          Specify path to jarfile manually ],
+[ DB_JAR="$withval"
+])
+AC_ARG_WITH(system-sane,
+[  --with-system-sane-headers      Use sane.h already on system
+],,)
+AC_ARG_WITH(system-x11ext,
+[  --with-system-x11-extensions-headers  Use X11 extensions headers on system
+],,)
+AC_ARG_WITH(system-unixodbc,
+[   --with-system-unixodbc-headers  Use unixODBC headers on system
+],,)
+AC_ARG_WITH(system-curl,
+[  --with-system-curl      Use curl already on system
+],,)
+AC_ARG_WITH(system-myspell,
+[  --with-system-myspell      Use myspell already on system
+],,)
+AC_ARG_WITH(system-altlinuxhyph,
+[  --with-system-altlinuxhyph      Use altlinuxhyph already on system
+],,)
+AC_ARG_WITH(system-neon,
+[  --with-system-neon	    Use system neon 0.23.x
+],,)
+AC_ARG_WITH(system-xrender,
+[  --with-system-xrender           Use system Xrender
+],,)
+AC_ARG_WITH(system-libs,
+[  --with-system-libs      Use libs already on system (enables all
+                           --with-system-* (_not_ -headers)
+],,)
+AC_ARG_WITH(myspell-dicts,
+[  --without-myspell-dicts   Removes myspell dictionaries from openoffice.org
+                         installation set, for people building for specific
+                         distributions where the myspell dictionaries are
+                         installed from other sources
+],,)
+AC_ARG_ENABLE(fontconfig,
+[  --enable-fontconfig     Enables the use of fontconfig
+],,)
+AC_ARG_ENABLE(fontooo,
+[  --disable-fontooo       Disables FontOOo
+                           (useful for distributions using fontconfig for OOo)
+],,enable_fontooo="yes")
+AC_ARG_WITH(system-mspack,
+[  --with-system-mspack      Use libmspack already on system
+],,)
 AC_ARG_WITH(stlport4-home,
 [  --with-stlport4-home    The location that STLport4 is installed in. The STL
                           header files are assumed to be in stlport4-home/stlport
@@ -138,6 +200,12 @@ AC_ARG_WITH(perl-home,
  
                           Usage: --with-perl-home=<absolute path to Perl 5 home>
 ],,)
+AC_ARG_WITH(python,
+[  --with-python           If you want to use the Python on your system, instead of
+                          the internal version included in the source, use this flag.
+
+                          Usage: --with-python[=path-to-python]
+],,)
 AC_ARG_WITH(cl-home,
 [  --with-cl-home          For Windows NT users, please supply the path
                           for the Microsoft C/C++ compiler. 
@@ -869,16 +937,11 @@ if test "$_os" != "WINNT" -o "$WITH_MING
 fi
 
 dnl ===================================================================
-dnl Check if pam-appl.h is available on Linux or FreeBSD
+dnl Check if pam_appl.h is available on Linux or FreeBSD
 dnl ===================================================================
 if test "$_os" = "Linux" -o "$_os" = "FreeBSD" -o "$_os" = "GNU"; then
-   AC_MSG_CHECKING([pam_appl.h])
-   if test -f "/usr/include/security/pam_appl.h"; then
-      AC_MSG_RESULT([yes])
-   else
-      AC_MSG_WARN([pam_appl.h could not be found in /usr/include/security])
-      echo "pam_appl.h could not be found in /usr/include/security" >> warn
-   fi
+   AC_CHECK_HEADER(security/pam_appl.h, [],
+   [AC_MSG_ERROR([pam_appl.h could not be found. libpam-dev missing?])], [])
 fi
 
 dnl ===================================================================
@@ -1321,6 +1384,8 @@ dnl Check whether there's a C++ pre-proc
 if test "$_os" = "Linux" -o "$_os" = "FreeBSD" -o "$_os" = "NetBSD" ; then
    AC_PROG_CXXCPP
 fi
+#AC_SUBST(CPP)
+#AC_SUBST(CXXCPP)
 
 dnl ===================================================================
 dnl Check whether xmkmf program can be used, x systems only
@@ -1420,6 +1485,183 @@ fi
 AC_SUBST(SYSTEM_ZLIB)
 
 dnl ===================================================================
+dnl Check for system python
+dnl ===================================================================
+AC_MSG_CHECKING([which python to use])
+if test -n "$with_python"; then
+    AC_MSG_RESULT([external])
+    if test "$with_python" != "yes"; then
+        PYTHON="$with_python"
+    fi
+    AM_PATH_PYTHON([2.2])
+
+    py_prefix=`$PYTHON -c "import sys; print sys.prefix"`
+    py_exec_prefix=`$PYTHON -c "import sys; print sys.exec_prefix"`
+
+    PYTHONHOME="$py_prefix"
+    PYTHON_CFLAGS="-I$py_prefix/include/python$PYTHON_VERSION"
+    if test "$py_prefix" != "$py_exec_prefix"; then
+      PYTHONHOME="$PYTHONHOME:$py_exec_prefix"
+      PYTHON_CFLAGS="$PYTHON_CFLAGS -I$py_exec_prefix/include/python$PYTHON_VERSION"
+    fi
+    save_CPPFLAGS="$CPPFLAGS"
+    CPPFLAGS="$CPPFLAGS $PYTHON_CFLAGS"
+    AC_CHECK_HEADER(Python.h, [],
+        [AC_MSG_ERROR(Python.h not found. Install python headers/development package.)], [])
+    CPPFLAGS="$save_CPPFLAGS"
+
+    PYMAJOR=$($PYTHON -c "import sys; print sys.version_info[[0]]")
+    PYMINOR=$($PYTHON -c "import sys; print sys.version_info[[1]]")
+    PYMICRO=$($PYTHON -c "import sys; print sys.version_info[[2]]")
+    PYVERSION=$($PYTHON -c "import sys; print '%d.%d.%d' % sys.version_info[[:3]]")
+else
+    AC_MSG_RESULT([internal])
+    SCPDEFS="$SCPDEFS -DWITH_PYTHON"
+fi
+AC_SUBST(PYTHON)
+AC_SUBST(PYTHONHOME)
+AC_SUBST(PYTHON_CFLAGS)
+AC_SUBST(PYMAJOR)
+AC_SUBST(PYMINOR)
+AC_SUBST(PYMICRO)
+AC_SUBST(PYVERSION)
+
+dnl ===================================================================
+dnl Check for system db
+dnl ===================================================================
+AC_MSG_CHECKING([which db to use])
+if test -n "$with_system_db" -o -n "$with_system_libs"; then
+    SYSTEM_DB=YES
+    AC_MSG_RESULT([external])
+    if test -z $DB_VERSION && test -z $DB_VERSION_MAJOR; then
+      AC_CHECK_FILE(/usr/lib/libdb_cxx.so, [],
+         [AC_MSG_ERROR(no. install db)])
+      # (almost) all db packages (rpm/deb) I saw have this link pointing to
+      # libdb-cxx_X.so where X is the first two digits of the db version ..
+      # and because of that two versions cannot be installed at the same time..
+      DB_VERSION=$(readlink /usr/lib/libdb_cxx.so \
+	  | $SED -e s/libdb_cxx-// | $SED -e s/\.so//)
+      DB_VERSION_MAJOR=$(echo $DB_VERSION | cut -d"." -f1)
+    fi
+    AC_MSG_CHECKING([which db version to use])
+    AC_MSG_RESULT(db$DB_VERSION_MAJOR version $DB_VERSION)
+    AC_LANG(C++)
+    AC_CHECK_HEADER(db_cxx.h, [ DB_INCLUDES=/usr/include ],
+        [
+             CFLAGS=-I/usr/include/db$DB_VERSION_MAJOR
+             AC_CHECK_HEADER(db$DB_VERSION_MAJOR/db_cxx.h,
+             [ DB_INCLUDES=/usr/include/db$DB_VERSION_MAJOR ],
+             [ AC_MSG_ERROR(no. install the dbDB_VERSION_MAJOR libraries) ], []
+             )
+        ], []
+    )
+     if test "$enable_java" != "no"; then
+       if test -z $DB_JAR; then
+	  # three different naming methods *grumble* Are there even more?
+         AC_CHECK_FILE(/usr/share/java/db.jar, [ JARVER=0 ],
+           [
+             AC_CHECK_FILE(/usr/share/java/db-$DB_VERSION.jar, [ JARVER=1 ],
+               [ AC_CHECK_FILE(/usr/share/java/libdb$DB_VERSION-java.jar,
+                   [ JARVER_LONGSTYLE=1 ],
+                   [ AC_MSG_ERROR(db$DB_VERSION_MAJOR Java bindings not found)]
+                 )
+               ]
+             )
+           ]
+         )
+         if test "$JARVER" = "1"; then
+           DB_JAR=jar-$DB_VERSION.jar
+         else
+           DB_JAR=db.jar
+         fi
+         if test "$JARVER_LONGSTYLE" = "1"; then
+           DB_JAR=libdb$DB_VERSION-java.jar
+         fi
+       fi
+    fi
+    SCPDEFS="$SCPDEFS -DSYSTEM_DB"
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_DB=NO
+    DB_VERSION=$(ls -1 ../berkeleydb/download/db* \
+       | $SED -e s,\.\./berkeleydb/download/db-,, | $SED -e s,\.tar\.gz,, \
+       | cut -d"." -f1,2)
+    DB_VERSION_MAJOR=$(echo $DB_VERSION | cut -d"." -f1)
+    DB_JAR=db.jar
+fi
+SCPDEFS="$SCPDEFS -DDB_VERSION=$DB_VERSION"
+AC_SUBST(SYSTEM_DB)
+AC_SUBST(DB_INCLUDES)
+AC_SUBST(DB_VERSION)
+AC_SUBST(DB_VERSION_MAJOR)
+AC_SUBST(DB_JAR)
+AC_SUBST(SCPDEFS)
+
+dnl ===================================================================
+dnl Check for system neon
+dnl ===================================================================
+AC_MSG_CHECKING([which neon to use])
+if test -z "$without_system_neon"; then
+    if test -n "$with_system_neon" -o -n "$with_system_libs"; then
+        AC_MSG_RESULT([external])
+        AC_PATH_PROG(NEON_CONFIG, neon-config, no)
+        AC_MSG_CHECKING([whether neon version is 0.23.x])
+        # check whether we have 0.23.x. 0.24.x is API-incompatible....
+        NEON_VER=$($NEON_CONFIG --version | $AWK '{print $2}' \
+            | cut -d"." -f1,2)
+        if test "$NEON_VER" = "0.23"; then
+            AC_MSG_RESULT([yes])
+            SYSTEM_NEON=YES
+            NEON_CFLAGS="$($NEON_CONFIG --cflags) -DSYSTEM_NEON -DUSE_DAV_LOCKS=1"
+            NEON_LIBS=$($NEON_CONFIG --libs)
+        else
+            AC_MSG_ERROR([no. neon 0.24.x is API-incompatible. use 0.23.x])
+        fi
+    else
+        AC_MSG_RESULT([internal])
+        SYSTEM_NEON=NO
+        NEON_LIBS=-lneon
+        NEON_CFLAGS=
+    fi
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_NEON=NO
+    NEON_LIBS=-lneon
+    NEON_CFLAGS=
+fi
+AC_SUBST(SYSTEM_NEON)
+AC_SUBST(NEON_LIBS)
+AC_SUBST(NEON_CFLAGS)
+
+dnl ===================================================================
+dnl Check for system sane
+dnl ===================================================================
+AC_MSG_CHECKING([which sane.h to use])
+if test -n "$with_system_sane_headers"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_SANE_H=YES
+    AC_CHECK_HEADER(sane/sane.h, [],
+        [AC_MSG_ERROR(sane.h not found. install the sane headers)], [])
+else
+    AC_MSG_RESULT([internal])
+fi
+AC_SUBST(SYSTEM_SANE_H)
+
+dnl ===================================================================
+dnl Check for system unixODBC
+dnl ===================================================================
+AC_MSG_CHECKING([which unixODBC headers to use])
+if test -n "$with_system_unixodbc_headers"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_UNIXODBC_H=YES
+    AC_CHECK_HEADER(sqlext.h, [],
+        [AC_MSG_ERROR(unixODBC's aqlext.h not found. install the headers)], [])
+else
+    AC_MSG_RESULT([internal])
+fi
+AC_SUBST(SYSTEM_UNIXODBC_H)
+
+dnl ===================================================================
 dnl Check whether the gtk 2.0 libraries are available.
 dnl ===================================================================
 if test -n "$ENABLE_CRASHDUMP" ; then
@@ -1431,6 +1673,101 @@ if test -n "$ENABLE_CRASHDUMP" ; then
 fi
 
 dnl ===================================================================
+dnl Check whether we want to use fontconfig and if the library is
+dnl available.
+dnl ===================================================================
+AC_MSG_CHECKING([whether to use fontconfig])
+if test -n "$enable_fontconfig"; then
+    AC_MSG_RESULT([yes])
+    PKG_CHECK_MODULES( FONTCONFIG, fontconfig >= 1.0.1 )
+    FONTCONFIG_FONTS=YES
+else
+    AC_MSG_RESULT([no])
+    FONTCONFIG_FONTS=NO
+fi
+AC_SUBST(FONTCONFIG_FONTS)
+AC_SUBST(FONTCONFIG_LIBS)
+
+dnl ===================================================================
+dnl Check for system freetype
+dnl ===================================================================
+AC_MSG_CHECKING([which freetype to use])
+if test -n "$with_system_freetype" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_FREETYPE=YES
+    USE_FREETYPE_CONFIG=NO
+    PKG_CHECK_MODULES( FREETYPE, freetype2,
+        [ USE_FREETYPE_CONFIG=NO ],
+        [ 
+            AC_PATH_PROG( FREETYPE_CONFIG, freetype-config )
+            if test -f "$FREETYPE_CONFIG"; then
+                USE_FREETYPE_CONFIG=YES
+            fi
+        ]
+    )
+    if test "$USE_FREETYPE_CONFIG" = "YES"; then
+        FREETYPE_LIBS=$(freetype-config --libs)
+        FREETYPE_CFLAGS=$(freetype-config --cflags)
+    fi
+    SCPDEFS="$SCPDEFS -DSYSTEM_FREETYPE"
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_FREETYPE=NO
+fi
+AC_SUBST(SYSTEM_FREETYPE)
+AC_SUBST(FREETYPE_LIBS)
+AC_SUBST(FREETYPE_CFLAGS)
+AC_SUBST(SCPDEFS)
+
+dnl ===================================================================
+dnl Check for system myspell
+dnl ===================================================================
+AC_MSG_CHECKING([which myspell to use])
+if test -n "$with_system_myspell" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_MYSPELL=YES
+    PKG_CHECK_MODULES( MYSPELL, myspell,
+      [ MYSPELL_PKGCONFIG=YES ],
+      [
+         AC_CHECK_HEADER(myspell/myspell.hxx, [],
+	     [AC_MSG_ERROR(myspell headers not found.)], [])
+         MYSPELL_CFLAGS=-I/usr/include/myspell
+         AC_LANG(C++)
+         AC_CHECK_LIB(myspell, main, [],
+           [ AC_MSG_ERROR(myspell library not found.) ], [])
+         MYSPELL_LIBS=-lmyspell
+      ]
+    )
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_MYSPELL=NO
+    MYSPELL_LIBS=-lmyspell
+fi
+AC_SUBST(SYSTEM_MYSPELL)
+AC_SUBST(MYSPELL_CFLAGS)
+AC_SUBST(MYSPELL_LIBS)
+
+dnl ===================================================================
+dnl Checking for altlinuxhyph
+dnl ===================================================================
+AC_MSG_CHECKING([which altlinuxhyph to use])
+if test -n "$with_system_altlinuxhyph" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_HYPH=YES
+    AC_CHECK_HEADER(hyphen.h, [],
+       [ AC_MSG_ERROR(altlinuxhyph headers not found.)], [])
+    AC_CHECK_MEMBER(struct _HyphenDict.cset, [],
+       [ AC_MSG_ERROR(no. You are sure you have altlinuyhyph headers?)],
+       [#include <hyphen.h>])
+    AC_CHECK_LIB(hyph, hnj_hyphen_hyphenate, [],
+        [ AC_MSG_ERROR(altlinuxhyph library not found.)], [])
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_HYPH=NO
+fi
+AC_SUBST(SYSTEM_HYPH)
+
+dnl ===================================================================
 dnl Checks for libraries.
 dnl ===================================================================
 dnl Check for Mac OS X native GUI, which may be used instead of X11.
@@ -1917,6 +2254,182 @@ AC_SUBST(WITH_FONTS)
 AC_SUBST(SCPDEFS)
 
 dnl ===================================================================
+dnl ===================================================================
+dnl Check whether to build with system XRender
+dnl ===================================================================
+AC_MSG_CHECKING([whether to use system XRender])
+if test -n "$with_system_xrender"; then
+  AC_MSG_RESULT([yes])
+  SYSTEM_XRENDER=YES
+  AC_CHECK_LIB(Xrender, XRenderQueryVersion, [],
+     [AC_MSG_ERROR(Xrender not found or functional)], [])
+else
+  AC_MSG_RESULT([no])
+  SYSTEM_XRENDER=NO
+fi
+AC_SUBST(SYSTEM_XRENDER)
+
+dnl Test whether to include MySpell dictionaries
+dnl ===================================================================
+AC_MSG_CHECKING([whether to include MySpell dictionaries])
+if test -z "$with_myspell_dicts"; then
+  AC_MSG_RESULT([yes])
+  WITH_MYSPELL_DICTS=YES
+else
+  AC_MSG_RESULT([no])
+  WITH_MYSPELL_DICTS=NO
+fi
+AC_SUBST(WITH_MYSPELL_DICTS)
+
+dnl ===================================================================
+dnl Test whether to include FontOOo
+dnl ===================================================================
+AC_MSG_CHECKING([whether to include FontOOo])
+if test -n "$enable_fontooo"; then
+  if test "$enable_fontooo" = "no"; then
+    AC_MSG_RESULT([no])
+    WITH_FONTOOO=NO
+    SCPDEFS="$SCPDEFS -DWITHOUT_FONTOOO"
+  else
+    AC_MSG_RESULT([yes])
+    WITH_FONTOOO=YES
+  fi
+else
+  AC_MSG_RESULT([no])
+  WITH_FONTOOO=NO
+  SCPDEFS="$SCPDEFS -DWITHOUT_FONTOOO"
+fi
+AC_SUBST(WITH_FONTOOO)
+
+if test "$WITH_FONTOOO" = "YES"; then
+  dnl ===============================================================
+  dnl Check whether to use libmspack from system
+  dnl ===============================================================
+  AC_MSG_CHECKING([whether to use system libmspack])
+  if test -n "$with_system_mspack" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([yes])
+    SYSTEM_MSPACK=YES
+    AC_CHECK_HEADER(mspack.h, [],
+      [AC_MSG_ERROR(mspack.h not found, install libmspack)], [])
+    AC_CHECK_LIB(mspack, mspack_create_cab_decompressor, [],
+      [AC_MSG_ERROR(libmspack not installed or functional)], [])
+  else
+    AC_MSG_RESULT([no])
+    SYSTEM_MSPACK=NO
+  fi
+fi
+AC_SUBST(SYSTEM_MSPACK)
+
+dnl ==================================================================
+dnl Check for system nas
+dnl ===================================================================
+AC_MSG_CHECKING([which nas to use])
+if test -n "$with_system_nas" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_NAS=YES
+    AC_CHECK_HEADER(audio/audiolib.h, [ NAS_INCLUDES=/usr/include ],
+        [
+             CFLAGS=-I/usr/X11R6/include
+             AC_CHECK_HEADER(audio/audiolib.h,
+                 [ NAS_INCLUDES=/usr/X11R6/include ],
+                 [ AC_MSG_ERROR(no. install nas) ], []
+             )
+        ], []
+    )
+    AC_CHECK_LIB(audio, AuOpenServer, [],
+        [AC_MSG_ERROR(nas not found or functional)], [-L$XLIB -lXt])
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_NAS=NO
+fi
+AC_SUBST(SYSTEM_NAS)
+AC_SUBST(NAS_INCLUDES)
+
+dnl ===================================================================
+dnl Check for system curl
+dnl ===================================================================
+AC_MSG_CHECKING([which curl to use])
+if test -n "$with_system_curl" -o -n "$with_system_libs"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_CURL=YES
+    AC_CHECK_HEADER(curl/curl.h, [],
+    [ AC_MSG_ERROR([curl headers not found. install curl])], [])
+    AC_CHECK_LIB(curl, curl_easy_setopt, [],
+       [AC_MSG_ERROR(curl not found or functional)], [-L$XLIB -lXt])
+    SCPDEFS="$SCPDEFS -DSYSTEM_CURL"
+else
+    AC_MSG_RESULT([internal])
+    SYSTEM_CURL=NO
+fi
+AC_SUBST(SYSTEM_CURL)
+AC_SUBST(SCPDEFS)
+
+dnl ===================================================================
+dnl Check for system X11 extensions
+dnl ===================================================================
+AC_MSG_CHECKING([which X11 extensions headers to use])
+if test -n "$with_system_x11_extensions_headers"; then
+    AC_MSG_RESULT([external])
+    SYSTEM_X11EXT_H=YES
+    AC_CHECK_HEADER(X11/extensions/render.h, [],
+        [AC_MSG_ERROR(X11's render.h not found.)], [])
+    AC_CHECK_HEADER(X11/extensions/renderproto.h, [],
+        [AC_MSG_ERROR(X11's renderproto.h not found.)], [])
+    AC_CHECK_HEADER(X11/extensions/Xrender.h, [],
+        [AC_MSG_ERROR(X11's Xrender.h not found.)], [])
+else
+    AC_MSG_RESULT([internal])
+fi
+AC_SUBST(SYSTEM_X11EXT_H)
+
+AC_MSG_CHECKING([whether and how to use Xinerama])
+if test "$_os" = "Darwin"; then
+   USE_XINERAMA=YES
+   AC_MSG_RESULT([yes])
+elif test "$_os" = "Linux"; then
+   if test -f "$XLIB/libXinerama.so" -a -f "$XLIB/libXinerama.a"; then
+      # we have both versions, let the user decide but use the static one
+      # per default
+      USE_XINERAMA=YES
+      if test -n "$with_dynamic_xinerama" -o "$with_system_libs"; then
+         XINERAMA_LINK=dynamic
+      else
+         XINERAMA_LINK=static
+      fi
+   elif test -f "$XLIB/libXinerama.so" -a ! -f "XLIB/libXinerama.a"; then
+      # we have only the dynamic version
+      USE_XINERAMA=YES
+      XINERAMA_LINK=dynamic
+   elif test -f "$XLIB/libXinerama.a"; then
+      # static version
+      if test "`uname -m`" = "i586" -o "`uname -m`" = "i686"; then
+         USE_XINERAMA=YES
+         XINERAMA_LINK=static
+      else
+         USE_XINERAMA_=NO
+         XINERAMA_LINK=none
+      fi
+   else
+      # no Xinerama
+      USE_XINERAMA=NO
+      XINERAMA_LINK=none
+   fi
+   if test "$USE_XINERAMA" = "YES"; then
+      AC_MSG_RESULT([yes, with $XINERAMA_LINK linking])
+      AC_CHECK_HEADER(X11/extensions/Xinerama.h, [],
+          [AC_MSG_ERROR(Xinerama header not found.)], [])
+      AC_CHECK_LIB(Xinerama, XineramaIsActive, [],
+          [AC_MSG_ERROR(Xinerama not functional?)], [-L$XLIB -lXext])
+   else
+      AC_MSG_RESULT([no, libXinerama not found or wrong architecture.])
+   fi
+else
+   AC_MSG_RESULT([no])
+fi
+AC_SUBST(USE_XINERAMA)
+AC_SUBST(XINERAMA_LINK)
+
+dnl ===================================================================
 dnl Test for the presence of Ant and that it works
 dnl ===================================================================
 
Index: config_office/set_soenv.in
===================================================================
--- config_office/set_soenv.in.orig	2004-08-14 01:19:51.354365944 +0200
+++ config_office/set_soenv.in	2004-08-14 01:23:23.676088136 +0200
@@ -1310,7 +1310,14 @@ else
 }
 
 $PYTHONPATH           = '.'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ps.'$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH'.$ds.'lib'.$ds.'python'.$ds.'lib-dynload';
-$PYTHONHOME           = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH';
+if ("@PYTHON@" eq "")
+{
+  $PYTHONHOME           = '$SOLARVER'.$ds.'$UPD'.$ds.'$INPATH';
+}
+else
+{
+  $PYTHONHOME		= '@PYTHONHOME@';
+}
 
 #
 print "done\n";
@@ -1734,11 +1741,50 @@ ToFile( "LIBSN_CFLAGS",      "@LIBSN_CFL
 ToFile( "LIBSN_LIBS",        "@LIBSN_LIBS@",       "e" );
 ToFile( "WITH_MOZILLA",      "@WITH_MOZILLA@",     "e" );
 ToFile( "WITH_FONTS",        "@WITH_FONTS@",       "e" );
+ToFile( "WITH_MYSPELL_DICTS","@WITH_MYSPELL_DICTS@","e");
+ToFile( "WITH_FONTOOO",      "@WITH_FONTOOO@",     "e" );
+ToFile( "SYSTEM_MSPACK",     "@SYSTEM_MSPACK@",    "e" );
+ToFile( "SYSTEM_PYTHON",     "@PYTHON@",           "e" );
+ToFile( "PYTHON_CFLAGS",     "@PYTHON_CFLAGS@",    "e" );
+ToFile( "PYMAJOR",           "@PYMAJOR@",          "e" );
+ToFile( "PYMINOR",           "@PYMINOR@",          "e" );
+ToFile( "PYMICRO",           "@PYMICRO@",          "e" );
+ToFile( "PYVERSION",         "@PYVERSION@",        "e" );
 if ( '@ENABLE_RPATH@' eq "no" ) {
   ToFile( "LINKFLAGSRUNPATH",'',                   "e" );
 }
 ToFile( "SYSTEM_ZLIB",       "@SYSTEM_ZLIB@",      "e" );
 ToFile( "BUILD_DMAKE",       "@BUILD_DMAKE@",      "e" );
+ToFile( "ENABLE_CUPS",       "YES",                "e" );
+ToFile( "SYSTEM_NAS",        "@SYSTEM_NAS@",       "e" );
+ToFile( "NAS_INCLUDES",      "@NAS_INCLUDES@",     "e" );
+ToFile( "FONTCONFIG_FONTS",  "@FONTCONFIG_FONTS@", "e" );
+ToFile( "FONTCONFIG_LIBS",   "@FONTCONFIG_LIBS@",  "e" );
+ToFile( "SYSTEM_FREETYPE",   "@SYSTEM_FREETYPE@",  "e" );
+ToFile( "FREETYPE_LIBS",     "@FREETYPE_LIBS@",    "e" );
+ToFile( "FREETYPE_CFLAGS",   "@FREETYPE_CFLAGS@",  "e" );
+ToFile( "SYSTEM_DB",         "@SYSTEM_DB@",        "e" );
+ToFile( "DB_VERSION",        "@DB_VERSION@",       "e" );
+ToFile( "DB_INCLUDES",       "@DB_INCLUDES@",      "e" );
+ToFile( "DB_JAR",            "@DB_JAR@",           "e" );
+ToFile( "SYSTEM_CURL",       "@SYSTEM_CURL@",      "e" );
+ToFile( "SYSTEM_SANE_H",     "@SYSTEM_SANE_H@",    "e" );
+ToFile( "SYSTEM_X11EXT_H",   "@SYSTEM_X11EXT_H@",  "e" );
+ToFile( "USE_XINERAMA",      "@USE_XINERAMA@",     "e" );
+ToFile( "XINERAMA_LINK",     "@XINERAMA_LINK@",    "e" );
+ToFile( "GTK_LIBS",          "@GTK_LIBS@",         "e" );
+ToFile( "GTK_CFLAGS",        "@GTK_CFLAGS@",       "e" );
+ToFile( "SYSTEM_MYSPELL",    "@SYSTEM_MYSPELL@",   "e" );
+ToFile( "MYSPELL_CFLAGS",    "@MYSPELL_CFLAGS@",   "e" );
+ToFile( "MYSPELL_LIBS",      "@MYSPELL_LIBS@",     "e" );
+ToFile( "SYSTEM_HYPH",       "@SYSTEM_HYPH@",      "e" );
+ToFile( "SYSTEM_NEON",       "@SYSTEM_NEON@",      "e" );
+ToFile( "NEON_CFLAGS",       "@NEON_CFLAGS@",      "e" );
+ToFile( "NEON_LIBS",         "@NEON_LIBS@",        "e" );
+ToFile( "SYSTEM_UNIXODBC_H", "@SYSTEM_UNIXODBC_H@","e" );
+ToFile( "SYSTEM_XRENDER",    "@SYSTEM_XRENDER@",   "e" );
+#ToFile( "CPP",               "@CPP@",              "e" );
+#ToFile( "CPPCXX",            "@CPPCXX@",           "e" );
 ToFile( "GXX_INCLUDE_PATH",  "@GXX_INCLUDE_PATH@", "e" );
 ToFile( "COMMON_BUILD_TOOLS",$COMMON_BUILD_TOOLS,  "e" );
 ToFile( "ENABLE_GTK",        "@ENABLE_GTK@",       "e" );
