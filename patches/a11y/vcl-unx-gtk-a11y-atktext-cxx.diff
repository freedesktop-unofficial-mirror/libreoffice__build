--- /dev/null	
+++ vcl/unx/gtk/a11y/atktext.cxx	
@@ -0,0 +1,215 @@
+#include <com/sun/star/accessibility/TextSegment.hpp>
+
+static uno::Reference< accessibility::XAccessibleText >
+	getText( AtkText *pText )
+{
+	AtkObjectWrapper *pWrap = ATK_OBJECT_WRAPPER( pText );
+	return uno::Reference< accessibility::XAccessibleText >(
+		pWrap->mpContext, uno::UNO_QUERY );
+}
+
+static gchar *
+text_wrapper_get_text (AtkText *text,
+					   gint     start_offset,
+					   gint     end_offset)
+{
+	TRY_START
+	return mapToGChar( getText( text )->getText() );
+	TRY_END_RETURN( NULL )
+}
+
+static gchar *
+text_wrapper_get_text_after_offset (AtkText          *text,
+									gint             offset,
+									AtkTextBoundary  boundary_type,
+									gint             *start_offset,
+									gint             *end_offset)
+{
+	return g_strdup( "a" ); // FIXME
+}
+
+static gchar *
+text_wrapper_get_text_at_offset (AtkText          *text,
+								 gint             offset,
+								 AtkTextBoundary  boundary_type,
+								 gint             *start_offset,
+								 gint             *end_offset)
+{
+	return g_strdup( "a" ); // FIXME
+}
+
+static gunichar
+text_wrapper_get_character_at_offset (AtkText          *text,
+									  gint             offset)
+{
+	return 'a';
+}
+
+static gchar *
+text_wrapper_get_text_before_offset (AtkText          *text,
+									 gint             offset,
+									 AtkTextBoundary  boundary_type,
+									 gint             *start_offset,
+									 gint             *end_offset)
+{
+	return g_strdup( "" ); // FIXME
+}
+
+static gint
+text_wrapper_get_caret_offset (AtkText          *text)
+{
+	TRY_START
+	return getText( text )->getCaretPosition();
+	TRY_END_RETURN( FALSE )
+}
+
+static gboolean
+text_wrapper_set_caret_offset (AtkText *text,
+							   gint     offset)
+{
+	TRY_START
+	return getText( text )->setCaretPosition( offset );
+	TRY_END_RETURN( FALSE )
+}
+
+static AtkAttributeSet *
+text_wrapper_get_run_attributes (AtkText	    *text,
+								 gint	  	    offset,
+								 gint             *start_offset,
+								 gint	 	    *end_offset)
+{
+	return NULL;
+}
+
+static AtkAttributeSet *
+text_wrapper_get_default_attributes (AtkText	    *text)
+{
+	return NULL;
+}
+
+static void
+text_wrapper_get_character_extents (AtkText          *text,
+									gint             offset,
+									gint             *x,
+									gint             *y,
+									gint             *width,
+									gint             *height,
+									AtkCoordType	  coords)
+{
+	g_return_if_fail( (coords != ATK_XY_SCREEN ) ||
+					   ATK_IS_COMPONENT( text )  );
+
+	*x = *y = *width = *height = 0;
+	TRY_START
+	awt::Rectangle aRect = getText( text )->getCharacterBounds( offset );
+	if( coords == ATK_XY_SCREEN )
+		g_warning ("FIXME: implement screen bounds" );
+	*x = aRect.X;
+	*y = aRect.Y;
+	*width = aRect.Width;
+	*height = aRect.Height;
+	TRY_END
+}
+
+static gint
+text_wrapper_get_character_count (AtkText *text)
+{
+	TRY_START
+	return getText( text )->getCharacterCount();
+	TRY_END_RETURN( 0 )
+}
+
+static gint
+text_wrapper_get_offset_at_point (AtkText     *text,
+								  gint         x,
+								  gint         y,
+								  AtkCoordType coords)
+{
+	g_return_val_if_fail( (coords != ATK_XY_SCREEN ) ||
+						  ATK_IS_COMPONENT( text ), -1 );
+	TRY_START
+    return getText( text )->getIndexAtPoint(
+			translatePoint( ATK_COMPONENT( text ), x, y, coords ) );
+	TRY_END_RETURN( -1 )
+}
+
+// FIXME: the whole series of selections API is problematic ...
+
+static gint
+text_wrapper_get_n_selections (AtkText *text)
+{
+	return 0; // FIXME
+}
+
+static gchar *
+text_wrapper_get_selection (AtkText          *text,
+							gint		    selection_num,
+							gint		    *start_offset,
+							gint		    *end_offset)
+{
+	g_return_val_if_fail( selection_num == 0, FALSE );
+	TRY_START
+	uno::Reference< accessibility::XAccessibleText > xText = getText( text );
+
+	*start_offset = xText->getSelectionStart();
+	*end_offset = xText->getSelectionEnd();
+
+	return mapToGChar( xText->getSelectedText() );
+	TRY_END_RETURN( NULL )
+}		
+
+static gboolean
+text_wrapper_add_selection (AtkText *text,
+							gint     start_offset,
+							gint     end_offset)
+{
+	TRY_START
+	return getText( text )->setSelection( start_offset, end_offset );
+	TRY_END_RETURN( FALSE )
+}
+
+static gboolean
+text_wrapper_remove_selection (AtkText *text,
+							   gint     selection_num)
+{
+	g_return_val_if_fail( selection_num == 0, FALSE );
+	TRY_START
+	return getText( text )->setSelection( 0, 0 ); // ?
+	TRY_END_RETURN( FALSE )
+}
+
+static gboolean
+text_wrapper_set_selection (AtkText *text,
+							gint     selection_num,
+							gint     start_offset,
+							gint     end_offset)
+{
+	g_return_val_if_fail( selection_num == 0, FALSE );
+	TRY_START
+	return getText( text )->setSelection( start_offset, end_offset );
+	TRY_END_RETURN( FALSE )
+}
+
+static void
+textIfaceInit (AtkTextIface *iface)
+{
+  g_return_if_fail (iface != NULL);
+
+  iface->get_text = text_wrapper_get_text;
+  iface->get_character_at_offset = text_wrapper_get_character_at_offset;
+  iface->get_text_before_offset = text_wrapper_get_text_before_offset;
+  iface->get_text_at_offset = text_wrapper_get_text_at_offset;
+  iface->get_text_after_offset = text_wrapper_get_text_after_offset;
+  iface->get_caret_offset = text_wrapper_get_caret_offset;
+  iface->set_caret_offset = text_wrapper_set_caret_offset;
+  iface->get_character_count = text_wrapper_get_character_count;
+  iface->get_n_selections = text_wrapper_get_n_selections;
+  iface->get_selection = text_wrapper_get_selection;
+  iface->add_selection = text_wrapper_add_selection;
+  iface->remove_selection = text_wrapper_remove_selection;
+  iface->set_selection = text_wrapper_set_selection;
+  iface->get_run_attributes = text_wrapper_get_run_attributes;
+  iface->get_default_attributes = text_wrapper_get_default_attributes;
+  iface->get_character_extents = text_wrapper_get_character_extents;
+  iface->get_offset_at_point = text_wrapper_get_offset_at_point;
+}
