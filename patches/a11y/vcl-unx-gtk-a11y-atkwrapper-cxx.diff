--- /dev/null	
+++ vcl/unx/gtk/a11y/atkwrapper.cxx	
@@ -0,0 +1,87 @@
+#include "atkwrapper.hxx"
+
+#define ATK_TYPE_OBJECT_WRAPPER atk_object_wrapper_get_type()
+#define ATK_OBJECT_WRAPPER(obj) \
+	(G_TYPE_CHECK_INSTANCE_CAST ((obj), ATK_TYPE_OBJECT_WRAPPER, AtkObjectWrapper))
+
+static GObjectClass *parent_class = NULL;
+static GHashTable   *uno_to_gobject = NULL;
+
+static void
+atk_object_wrapper_finalize (GObject *obj)
+{
+	AtkObjectWrapper *wrapper = ATK_OBJECT_WRAPPER (obj);
+
+	if (wrapper->accessible)
+	{
+		g_hash_table_remove (uno_to_gobject, wrapper->accessible);
+		wrapper->accessible->release();
+		wrapper->accessible = NULL;
+	}
+
+	parent_class->finalize (obj);
+}
+
+static void
+atk_object_wrapper_class_init (AtkObjectWrapperClass *klass)
+{
+  GObjectClass *gobject_class = G_OBJECT_CLASS (klass);
+
+  parent_class = (GObjectClass *) g_type_class_peek_parent (klass);
+
+  gobject_class->finalize = atk_object_wrapper_finalize;
+
+  // We assume direct pointer comparison is sufficient...
+  uno_to_gobject = g_hash_table_new (NULL, NULL);
+}
+
+static void
+atk_object_wrapper_init (AtkObjectWrapper      *accessible,
+						 AtkObjectWrapperClass *klass)
+{
+}
+
+GType
+atk_object_wrapper_get_type (void)
+{
+  static GType type = 0;
+
+  if (!type)
+    {
+      static const GTypeInfo typeInfo =
+      {
+        sizeof (AtkObjectWrapperClass),
+        (GBaseInitFunc) NULL,
+        (GBaseFinalizeFunc) NULL,
+        (GClassInitFunc) atk_object_wrapper_class_init,
+        (GClassFinalizeFunc) NULL,
+        NULL,
+        sizeof (AtkObjectWrapper),
+        0,
+        (GInstanceInitFunc) atk_object_wrapper_init,
+      } ;
+      type = g_type_register_static (ATK_TYPE_OBJECT,
+									 "OOoAtkObjectWrapper",
+									 &typeInfo, (GTypeFlags)0) ;
+    }
+  return type;
+}
+
+AtkObjectWrapper *
+atk_object_wrapper_construct( const uno::Reference< accessibility::XAccessible > &rAccessible )
+{
+	GType type;
+	gpointer cached;
+	accessibility::XAccessible *accessible = rAccessible.get();
+
+	if( (cached = g_hash_table_lookup (uno_to_gobject, (gpointer) accessible) ) )
+		return ATK_OBJECT_WRAPPER (g_object_ref (cached));
+
+	type = ATK_TYPE_OBJECT_WRAPPER; // lookup / detect sub-type etc.
+	cached = g_object_new (type, NULL);
+	g_hash_table_insert( uno_to_gobject, (gpointer) accessible, cached );
+	accessible->acquire();
+	ATK_OBJECT_WRAPPER(cached)->accessible = accessible;
+
+	return ATK_OBJECT_WRAPPER (cached);
+}
