--- /dev/null	
+++ vcl/unx/gtk/a11y/atkcomponent.cxx	
@@ -0,0 +1,171 @@
+static uno::Reference< accessibility::XAccessibleComponent >
+	getComponent( AtkComponent *pComponent )
+{
+	AtkObjectWrapper *pWrap = ATK_OBJECT_WRAPPER( pComponent );
+	return uno::Reference< accessibility::XAccessibleComponent >(
+		pWrap->mpContext, uno::UNO_QUERY );
+}  
+
+static awt::Point translatePoint( AtkComponent *component,
+								  gint x, gint y, AtkCoordType t)
+{
+	awt::Point aOrigin( 0, 0 );
+	if( t == ATK_XY_SCREEN )
+		awt::Point aOrigin = getComponent( component )->getLocationOnScreen();
+
+	return awt::Point( x - aOrigin.X, y - aOrigin.Y );
+}
+
+static gboolean
+component_wrapper_grab_focus (AtkComponent *component)
+{
+	gboolean bSuccess = FALSE;
+	try {
+		getComponent( component )->grabFocus();
+		bSuccess = TRUE;
+	} catch( const uno::Exception &e) { }
+	return bSuccess;
+}
+
+static gboolean
+component_wrapper_contains (AtkComponent *component,
+							gint          x,
+							gint          y,
+							AtkCoordType  coord_type)
+{
+	return getComponent( component )->containsPoint(
+		translatePoint( component, x, y, coord_type ) );
+}
+
+static AtkObject *
+component_wrapper_ref_accessible_at_point (AtkComponent *component,
+										   gint          x,
+										   gint          y,
+										   AtkCoordType  coord_type)
+{
+	uno::Reference< accessibility::XAccessible > xAccessible;
+	xAccessible = getComponent( component )->getAccessibleAtPoint(
+		translatePoint( component, x, y, coord_type ) );
+	return atk_object_wrapper_construct( xAccessible );
+}
+
+static void
+component_wrapper_get_position (AtkComponent   *component,
+								gint           *x,
+								gint           *y,
+								AtkCoordType   coord_type)
+{
+	awt::Point aPos;
+	if( coord_type == ATK_XY_SCREEN )
+		aPos = getComponent( component )->getLocationOnScreen();
+	else
+		aPos = getComponent( component )->getLocation();
+	*x = aPos.X;
+	*y = aPos.Y;
+}
+
+static void
+component_wrapper_get_size (AtkComponent   *component,
+				  gint           *width,
+				  gint           *height)
+{
+	awt::Size aSize = getComponent( component )->getSize();
+	*width = aSize.Width;
+	*height = aSize.Height;
+}
+
+static void
+component_wrapper_get_extents (AtkComponent *component,
+							   gint         *x,
+							   gint         *y,
+							   gint         *width,
+							   gint         *height,
+							   AtkCoordType  coord_type)
+{
+	component_wrapper_get_position( component, x, y, coord_type );
+	component_wrapper_get_size( component, width, height );
+}
+
+static gboolean
+component_wrapper_set_extents (AtkComponent   *component,
+					 gint           x,
+					 gint           y,
+					 gint           width,
+					 gint           height,
+					 AtkCoordType   coord_type)
+{
+	g_warning( "AtkComponent::set_extents unimplementable" );
+	return FALSE;
+}
+
+static gboolean
+component_wrapper_set_position (AtkComponent   *component,
+					  gint           x,
+					  gint           y,
+					  AtkCoordType   coord_type)
+{
+	g_warning( "AtkComponent::set_position unimplementable" );
+	return FALSE;
+}
+
+static gboolean
+component_wrapper_set_size (AtkComponent   *component,
+				  gint           width,
+				  gint           height)
+{
+	g_warning( "AtkComponent::set_size unimplementable" );
+	return FALSE;
+}
+  	
+static AtkLayer
+component_wrapper_get_layer (AtkComponent   *component)
+{
+/*  ATK_LAYER_INVALID,
+  ATK_LAYER_BACKGROUND,
+  ATK_LAYER_CANVAS,
+  ATK_LAYER_WIDGET,
+  ATK_LAYER_MDI,
+  ATK_LAYER_POPUP,
+  ATK_LAYER_OVERLAY,
+  ATK_LAYER_WINDOW */
+	g_warning( "FIXME: AtkComponent::get_layer unimplemented" );
+
+	return ATK_LAYER_INVALID;
+}
+
+static gint
+component_wrapper_get_mdi_zorder (AtkComponent   *component)
+{
+	// FIXME: implement me ?
+	g_warning( "FIXME: AtkComponent::get_mdi_zorder unimplemented" );
+	return 0;
+}
+
+// Tougher ...
+static guint
+component_wrapper_add_focus_handler (AtkComponent    *component,
+									 AtkFocusHandler  handler)
+{
+	return 0;
+}
+static void
+component_wrapper_remove_focus_handler (AtkComponent  *component,
+										guint         handler_id)
+{
+}
+
+static void
+componentIfaceInit (AtkComponentIface *iface)
+{
+  g_return_if_fail (iface != NULL);
+
+  iface->add_focus_handler = component_wrapper_add_focus_handler;
+  iface->get_extents = component_wrapper_get_extents;
+  iface->get_size = component_wrapper_get_size;
+  iface->get_layer = component_wrapper_get_layer;
+  iface->grab_focus = component_wrapper_grab_focus;
+  iface->remove_focus_handler = component_wrapper_remove_focus_handler;
+  iface->set_extents = component_wrapper_set_extents;
+  iface->set_position = component_wrapper_set_position;
+  iface->set_size = component_wrapper_set_size;
+}
