--- /dev/null	
+++ vcl/unx/gtk/a11y/atklistener.cxx	
@@ -0,0 +1,98 @@
+#include <cppuhelper/queryinterface.hxx>
+#include <com/sun/star/accessibility/AccessibleEventId.hpp>
+
+#include "atklistener.hxx"
+
+AtkListener::AtkListener( AtkObject *pObj )
+{
+	mnRefCount = 1;
+    mpAccessible = pObj;
+}
+AtkListener::~AtkListener()
+{
+}
+
+// XInterface implementation
+uno::Any AtkListener::queryInterface( const uno::Type & rType ) throw (uno::RuntimeException)
+{
+    return cppu::queryInterface
+			(rType, 
+			 static_cast< uno::XInterface * >( static_cast< accessibility::XAccessibleEventListener * >( this ) ),
+			 static_cast< accessibility::XAccessibleEventListener * >( this ) );
+}
+
+// XEventListener implementation
+void AtkListener::disposing( const lang::EventObject& Source ) throw (uno::RuntimeException)
+{
+    fprintf( stderr, "disposing\n" );
+}
+
+static AtkObject *getObjFromAny( const uno::Any &rAny )
+{
+	uno::Reference< accessibility::XAccessible > xAccessible;
+	rAny >>= xAccessible;
+	return xAccessible.is() ? atk_object_wrapper_construct( xAccessible ) : NULL;
+}
+
+// XAccessibleEventListener
+void AtkListener::notifyEvent( const accessibility::AccessibleEventObject& aEvent ) throw( uno::RuntimeException )
+{
+    //    ::sal_Int16 EventId CPPU_GCC3_ALIGN(::com::sun::star::lang::EventObject);
+    //    ::com::sun::star::uno::Any NewValue;
+    //    ::com::sun::star::uno::Any OldValue;
+    switch( aEvent.EventId )
+    {
+	// AtkObject signals:
+		// Hierarchy signals
+	    case accessibility::AccessibleEventId::CHILD:
+		{
+			AtkObject *pChild;
+
+			// TESTME - are these the correct insertion indexes ?
+			if( ( pChild = getObjFromAny( aEvent.OldValue ) ) )
+				g_signal_emit_by_name( mpAccessible, "children_changed::remove",
+									   atk_object_get_index_in_parent( pChild ), pChild, NULL );
+			if( ( pChild = getObjFromAny( aEvent.NewValue ) ) )
+				g_signal_emit_by_name( mpAccessible, "children_changed::add",
+									   atk_object_get_index_in_parent( pChild ), pChild, NULL );
+			break;
+		}
+	    case accessibility::AccessibleEventId::INVALIDATE_ALL_CHILDREN:
+			g_warning( "FIXME: invalidate all children signal ?" );
+			break;
+
+	    case accessibility::AccessibleEventId::NAME_CHANGED:
+	    case accessibility::AccessibleEventId::DESCRIPTION_CHANGED:
+	    case accessibility::AccessibleEventId::ACTION_CHANGED:
+	    case accessibility::AccessibleEventId::STATE_CHANGED:
+	    case accessibility::AccessibleEventId::ACTIVE_DESCENDANT_CHANGED:
+	    case accessibility::AccessibleEventId::BOUNDRECT_CHANGED:
+	    case accessibility::AccessibleEventId::SELECTION_CHANGED:
+	    case accessibility::AccessibleEventId::VISIBLE_DATA_CHANGED:
+	    case accessibility::AccessibleEventId::VALUE_CHANGED:
+	    case accessibility::AccessibleEventId::CONTENT_FLOWS_FROM_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::CONTENT_FLOWS_TO_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::CONTROLLED_BY_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::CONTROLLER_FOR_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::LABEL_FOR_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::LABELED_BY_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::MEMBER_OF_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::SUB_WINDOW_OF_RELATION_CHANGED:
+	    case accessibility::AccessibleEventId::CARET_CHANGED:
+	    case accessibility::AccessibleEventId::TEXT_SELECTION_CHANGED:
+	    case accessibility::AccessibleEventId::TEXT_CHANGED:
+	    case accessibility::AccessibleEventId::TEXT_ATTRIBUTE_CHANGED:
+	    case accessibility::AccessibleEventId::HYPERTEXT_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_CAPTION_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_COLUMN_DESCRIPTION_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_COLUMN_HEADER_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_MODEL_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_ROW_DESCRIPTION_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_ROW_HEADER_CHANGED:
+	    case accessibility::AccessibleEventId::TABLE_SUMMARY_CHANGED:
+		    break;
+	default:
+			g_warning( "Unknown event notification" );
+			break;
+    }
+}
