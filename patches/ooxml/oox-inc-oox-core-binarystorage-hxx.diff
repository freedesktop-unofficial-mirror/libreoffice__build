--- /dev/null	
+++ oox/inc/oox/core/binarystorage.hxx	
@@ -0,0 +1,113 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: binarystorage.hxx,v $
+ *
+ *  $Revision: 1.1.2.6 $
+ *
+ *  last change: $Author: dr $ $Date: 2007/06/04 13:27:58 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef OOX_CORE_BINARYSTORAGE_HXX
+#define OOX_CORE_BINARYSTORAGE_HXX
+
+#include "oox/core/storagebase.hxx"
+
+namespace com { namespace sun { namespace star {
+    namespace lang { class XMultiServiceFactory; }
+    namespace container { class XNameContainer; }
+    namespace container { class XNameAccess; }
+} } }
+
+namespace oox {
+namespace core {
+
+// ============================================================================
+
+/** Implements stream access for binary OLE storages. */
+class BinaryStorage : public StorageBase
+{
+public:
+    explicit            BinaryStorage(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& rxFactory,
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >& rxInStream,
+                            bool bBaseStreamAccess );
+
+    explicit            BinaryStorage(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::lang::XMultiServiceFactory >& rxFactory,
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::io::XOutputStream >& rxOutStream,
+                            bool bBaseStreamAccess );
+
+    virtual             ~BinaryStorage();
+
+private:
+    explicit            BinaryStorage(
+                            const BinaryStorage& rParentStorage,
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >& rxElementsAccess,
+                            const ::rtl::OUString& rElementName );
+
+    /** Returns true, if the object represents a valid storage. */
+    virtual bool        implIsStorage() const;
+
+    /** Returns the com.sun.star.embed.XStorage interface of the current storage.
+
+        @attention
+            This function is not implemented for binary OLE storages.
+     */
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::embed::XStorage >
+                        implGetXStorage() const;
+
+    /** Returns the names of all elements of this storage. */
+    virtual void        implGetElementNames( ::std::vector< ::rtl::OUString >& orElementNames ) const;
+
+    /** Opens and returns the specified sub storage from the storage. */
+    virtual StorageRef  implOpenSubStorage( const ::rtl::OUString& rElementName, bool bCreate );
+
+    /** Opens and returns the specified input stream from the storage. */
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >
+                        implOpenInputStream( const ::rtl::OUString& rElementName );
+
+    /** Opens and returns the specified output stream from the storage. */
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::io::XOutputStream >
+                        implOpenOutputStream( const ::rtl::OUString& rElementName );
+
+private:
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameContainer > XNameContainerRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::container::XNameAccess >    XNameAccessRef;
+
+    XNameContainerRef   mxStorage;      /// Complete storage based on input or output stream.
+    XNameAccessRef      mxElements;     /// Access to elements of current sub storage.
+};
+
+// ============================================================================
+
+} // namespace core
+} // namespace oox
+
+#endif
+
