--- /dev/null	
+++ oox/source/xls/extreffragment.cxx	
@@ -0,0 +1,107 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: extreffragment.cxx,v $
+ *
+ *  $Revision: 1.1.2.3 $
+ *
+ *  last change: $Author: kohei $ $Date: 2007/07/09 20:54:05 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#include "oox/xls/extreffragment.hxx"
+#include "oox/xls/extrefbuffer.hxx"
+
+using ::rtl::OUString;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::Exception;
+using ::com::sun::star::uno::RuntimeException;
+using ::com::sun::star::uno::UNO_QUERY;
+using ::com::sun::star::uno::UNO_QUERY_THROW;
+using ::com::sun::star::sheet::XSpreadsheet;
+using ::com::sun::star::xml::sax::SAXException;
+using ::oox::core::AttributeList;
+
+namespace oox {
+namespace xls {
+
+OoxExternalLinkFragment::OoxExternalLinkFragment( const GlobalDataHelper& rGlobalData,
+                                      const OUString& rFragmentPath ) :
+    FragmentBase( rGlobalData, rFragmentPath ),
+    maFragmentPath( rFragmentPath )
+{
+}
+
+void OoxExternalLinkFragment::endDocument() throw( SAXException, RuntimeException )
+{
+}
+
+bool OoxExternalLinkFragment::onCanCreateContext( sal_Int32 nElement )
+{
+    switch( getCurrentContext() )
+    {
+        case XML_ROOT_CONTEXT: return (nElement == XLS_TOKEN( externalLink ));
+        case XLS_TOKEN( externalLink ): return (nElement == XLS_TOKEN( externalBook ));
+    }
+    return false;
+}
+
+void OoxExternalLinkFragment::onStartElement( const AttributeList& rAttribs )
+{
+    switch ( getCurrentContext() )
+    {
+        case XLS_TOKEN( externalBook ):
+            importExternalBook( rAttribs );
+        break;
+    }
+}
+
+void OoxExternalLinkFragment::importExternalBook( const AttributeList& rAttribs )
+{
+    using ::oox::core::RelationPtr;
+
+    OUString rid = rAttribs.getString( R_TOKEN( id ) );
+    RelationPtr pRel = getRelations()->getRelationById(rid);
+    if ( !pRel.get() )
+        return;
+
+    const OUString& rTarget = pRel->msTarget;
+
+    // fragment path is expected to be "xl/externalLinks/externalLink[link ID].xml".
+    sal_Int32 nPathLength = maFragmentPath.getLength();
+
+    OSL_ENSURE( maFragmentPath.copy(0, 29).equalsAscii("xl/externalLinks/externalLink") && nPathLength >= 34,
+                "OoxExtRefFragment::importExternalBook: unexpected externalLink fragment path" );
+
+    sal_Int32 nDigits = nPathLength - 33;
+    sal_Int32 nExtId = maFragmentPath.copy(29, nDigits).toInt32();
+    OSL_ENSURE( nExtId > 0, "OoxExtRefFragment::importExternalBook: external link ID must be greater than 0" );
+    getExtRefs().setExternalLink( nExtId, rTarget );
+}
+
+} // namespace xls
+} // namespace oox
