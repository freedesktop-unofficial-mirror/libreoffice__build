--- /dev/null	
+++ oox/source/xls/formulabase.cxx	
@@ -0,0 +1,943 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: formulabase.cxx,v $
+ *
+ *  $Revision: 1.1.2.12 $
+ *
+ *  last change: $Author: dr $ $Date: 2007/07/10 15:57:16 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#include "oox/xls/formulabase.hxx"
+#include <com/sun/star/sheet/OpCode.hpp>
+#include <com/sun/star/sheet/FormulaToken.hpp>
+#include <com/sun/star/sheet/ReferenceFlags.hpp>
+#include <com/sun/star/sheet/SingleReference.hpp>
+#include <com/sun/star/sheet/ComplexReference.hpp>
+#include "oox/core/containerhelper.hxx"
+#include "oox/xls/addressconverter.hxx"
+
+using ::rtl::OString;
+using ::rtl::OUString;
+using ::rtl::OStringToOUString;
+using ::com::sun::star::uno::Any;
+using ::com::sun::star::uno::Sequence;
+using ::com::sun::star::table::CellAddress;
+using ::com::sun::star::table::CellRangeAddress;
+using ::com::sun::star::sheet::SingleReference;
+using ::com::sun::star::sheet::ComplexReference;
+using ::oox::core::RefMap;
+using ::oox::core::ContainerHelper;
+using namespace ::com::sun::star::sheet::OpCode;
+using namespace ::com::sun::star::sheet::ReferenceFlags;
+
+namespace oox {
+namespace xls {
+
+// token sequence iterator ====================================================
+
+ApiTokenIterator::ApiTokenIterator( const ApiTokenSequence& rTokens, bool bSkipSpaces ) :
+    mpToken( rTokens.getConstArray() ),
+    mpTokenEnd( rTokens.getConstArray() + rTokens.getLength() ),
+    mbSkipSpaces( bSkipSpaces )
+{
+    skipSpaces();
+}
+
+ApiTokenIterator::ApiTokenIterator( const ApiTokenIterator& rIter, bool bSkipSpaces ) :
+    mpToken( rIter.mpToken ),
+    mpTokenEnd( rIter.mpTokenEnd ),
+    mbSkipSpaces( bSkipSpaces )
+{
+    skipSpaces();
+}
+
+ApiTokenIterator& ApiTokenIterator::operator++()
+{
+    if( is() )
+    {
+        ++mpToken;
+        skipSpaces();
+    }
+    return *this;
+}
+
+void ApiTokenIterator::skipSpaces()
+{
+    if( mbSkipSpaces )
+        while( is() && (mpToken->OpCode == OPCODE_SPACES) )
+            ++mpToken;
+}
+
+// formula parser/formula compiler base class =================================
+
+namespace {
+
+bool lclConvertToCellAddress( CellAddress& orAddress, const SingleReference& rSingleRef, sal_Int32 nExpectedSheet )
+{
+    orAddress = CellAddress( static_cast< sal_Int16 >( rSingleRef.Sheet ),
+        rSingleRef.Column, rSingleRef.Row );
+    return
+        ((nExpectedSheet < 0) || (nExpectedSheet == rSingleRef.Sheet)) &&
+        !getFlag( rSingleRef.Flags, COLUMN_DELETED | ROW_DELETED | SHEET_DELETED );
+}
+
+bool lclConvertToCellRange( CellRangeAddress& orRange, const ComplexReference& rComplexRef, sal_Int32 nExpectedSheet )
+{
+    orRange = CellRangeAddress( static_cast< sal_Int16 >( rComplexRef.Reference1.Sheet ),
+        rComplexRef.Reference1.Column, rComplexRef.Reference1.Row,
+        rComplexRef.Reference2.Column, rComplexRef.Reference2.Row );
+    return
+        (rComplexRef.Reference1.Sheet == rComplexRef.Reference2.Sheet) &&
+        ((nExpectedSheet < 0) || (nExpectedSheet == rComplexRef.Reference1.Sheet)) &&
+        !getFlag( rComplexRef.Reference1.Flags, COLUMN_DELETED | ROW_DELETED | SHEET_DELETED ) &&
+        !getFlag( rComplexRef.Reference2.Flags, COLUMN_DELETED | ROW_DELETED | SHEET_DELETED );
+}
+
+enum TokenToRangeListState { STATE_REF, STATE_SEP, STATE_OPEN, STATE_CLOSE, STATE_ERROR };
+
+TokenToRangeListState lclProcessRef( ::std::vector< CellRangeAddress >& orRanges, const Any& rData, sal_Int32 nExpectedSheet )
+{
+    SingleReference aSingleRef;
+    if( rData >>= aSingleRef )
+    {
+        CellAddress aAddress;
+        // ignore invalid addresses (with #REF! errors), but to not stop parsing
+        if( lclConvertToCellAddress( aAddress, aSingleRef, nExpectedSheet ) )
+            orRanges.push_back( CellRangeAddress( aAddress.Sheet, aAddress.Column, aAddress.Row, aAddress.Column, aAddress.Row ) );
+        return STATE_REF;
+    }
+    ComplexReference aComplexRef;
+    if( rData >>= aComplexRef )
+    {
+        CellRangeAddress aRange;
+        // ignore invalid ranges (with #REF! errors), but to not stop parsing
+        if( lclConvertToCellRange( aRange, aComplexRef, nExpectedSheet ) )
+            orRanges.push_back( aRange );
+        return STATE_REF;
+    }
+    return STATE_ERROR;
+}
+
+TokenToRangeListState lclProcessOpen( sal_Int32& ornParenLevel )
+{
+    ++ornParenLevel;
+    return STATE_OPEN;
+}
+
+TokenToRangeListState lclProcessClose( sal_Int32& ornParenLevel )
+{
+    --ornParenLevel;
+    return (ornParenLevel >= 0) ? STATE_CLOSE : STATE_ERROR;
+}
+
+} // namespace
+
+// ----------------------------------------------------------------------------
+
+FormulaProcessorBase::FormulaProcessorBase( const GlobalDataHelper& rGlobalData ) :
+    GlobalDataHelper( rGlobalData )
+{
+}
+
+Sequence< CellRangeAddress > FormulaProcessorBase::convertToCellRangeList(
+        const ApiTokenSequence& rTokens, sal_Int32 nExpectedSheet )
+{
+    ::std::vector< CellRangeAddress > aRanges;
+    TokenToRangeListState eState = STATE_OPEN;
+    sal_Int32 nParenLevel = 0;
+    for( ApiTokenIterator aIt( rTokens, true ); aIt.is() && (eState != STATE_ERROR); ++aIt )
+    {
+        switch( eState )
+        {
+            case STATE_REF: switch( aIt->OpCode )
+            {
+                case OPCODE_SEP:    eState = STATE_SEP;                                             break;
+                case OPCODE_CLOSE:  eState = lclProcessClose( nParenLevel );                        break;
+                default:            eState = STATE_ERROR;
+            }
+            break;
+            case STATE_SEP: switch( aIt->OpCode )
+            {
+                case OPCODE_PUSH:   eState = lclProcessRef( aRanges, aIt->Data, nExpectedSheet );   break;
+                case OPCODE_SEP:    eState = STATE_SEP;                                             break;
+                case OPCODE_OPEN:   eState = lclProcessOpen( nParenLevel );                         break;
+                case OPCODE_CLOSE:  eState = lclProcessClose( nParenLevel );                        break;
+                default:            eState = STATE_ERROR;
+            }
+            break;
+            case STATE_OPEN: switch( aIt->OpCode )
+            {
+                case OPCODE_PUSH:   eState = lclProcessRef( aRanges, aIt->Data, nExpectedSheet );   break;
+                case OPCODE_SEP:    eState = STATE_SEP;                                             break;
+                case OPCODE_OPEN:   eState = lclProcessOpen( nParenLevel );                         break;
+                case OPCODE_CLOSE:  eState = lclProcessClose( nParenLevel );                        break;
+                default:            eState = STATE_ERROR;
+            }
+            break;
+            case STATE_CLOSE: switch( aIt->OpCode )
+            {
+                case OPCODE_SEP:    eState = STATE_SEP;                                             break;
+                case OPCODE_CLOSE:  eState = lclProcessClose( nParenLevel );                        break;
+                default:            eState = STATE_ERROR;
+            }
+            break;
+            default:;
+        }
+    }
+
+    if( eState != STATE_ERROR )
+    {
+        getAddressConverter().validateCellRangeList( aRanges, false );
+        return ContainerHelper::vectorToSequence( aRanges );
+    }
+    return Sequence< CellRangeAddress >();
+}
+
+// function data struct =======================================================
+
+namespace {
+
+const size_t FUNCINFO_CLASSCOUNT            = 5;        /// Number of token class entries.
+
+const sal_uInt8 FUNCFLAG_VOLATILE           = 0x01;     /// Result is volatile (e.g. NOW() function).
+const sal_uInt8 FUNCFLAG_IMPORTONLY         = 0x02;     /// Only used in import filter.
+const sal_uInt8 FUNCFLAG_EXPORTONLY         = 0x04;     /// Only used in export filter.
+
+struct FunctionData
+{
+    sal_Int32           mnApiOpCode;        /// API function opcode.
+    const sal_Char*     mpcOdfFuncName;     /// ODF function name.
+    const sal_Char*     mpcOoxFuncName;     /// OOX function name.
+    sal_uInt16          mnBiffFuncId;       /// BIFF function identifier.
+    sal_uInt8           mnMinParamCount;    /// Minimum number of parameters.
+    sal_uInt8           mnMaxParamCount;    /// Maximum number of parameters.
+    sal_uInt8           mnRetClass;         /// BIFF token class of the return value.
+    sal_uInt8           mpnParamClass[ FUNCINFO_CLASSCOUNT ]; /// Expected BIFF token classes of parameters.
+    sal_uInt8           mnFlags;            /// Additional flags.
+    const sal_Char*     mpcBiffMacroName;   /// BIFF function name, if simulated by a macro call.
+
+    bool                isSupported( bool bImportFilter ) const;
+    ::boost::shared_ptr< FunctionInfo > createFuncInfo() const;
+};
+
+bool FunctionData::isSupported( bool bImportFilter ) const
+{
+    /*  For import filters: the FUNCFLAG_EXPORTONLY flag must not be set,
+        for export filters: the FUNCFLAG_IMPORTONLY flag must not be set. */
+    return !getFlag( mnFlags, bImportFilter ? FUNCFLAG_EXPORTONLY : FUNCFLAG_IMPORTONLY );
+}
+
+::boost::shared_ptr< FunctionInfo > FunctionData::createFuncInfo() const
+{
+    ::boost::shared_ptr< FunctionInfo > xInfo( new FunctionInfo );
+    if( mpcOdfFuncName )
+        xInfo->maOdfFuncName = OUString::createFromAscii( mpcOdfFuncName );
+    if( mpcOoxFuncName )
+        xInfo->maOoxFuncName = OUString::createFromAscii( mpcOoxFuncName );
+    if( mpcBiffMacroName )
+        xInfo->maBiffMacroName = OUString::createFromAscii( mpcBiffMacroName );
+    xInfo->mnApiOpCode = mnApiOpCode;
+    xInfo->mnBiffFuncId = mnBiffFuncId;
+    xInfo->mnMinParamCount = mnMinParamCount;
+    xInfo->mnMaxParamCount = mnMaxParamCount;
+    xInfo->mnRetClass = mnRetClass;
+    xInfo->mpnParamClass = mpnParamClass;
+    xInfo->mbVolatile = getFlag( mnFlags, FUNCFLAG_VOLATILE );
+    return xInfo;
+}
+
+} // namespace
+
+// function tables ============================================================
+
+namespace {
+
+const sal_uInt8 R = BIFF_TOKCLASS_REF;
+const sal_uInt8 V = BIFF_TOKCLASS_VAL;
+const sal_uInt8 A = BIFF_TOKCLASS_ARR;
+const sal_uInt8 ER = FUNCINFO_PARAM_EXCELONLY | BIFF_TOKCLASS_REF;
+const sal_uInt8 EV = FUNCINFO_PARAM_EXCELONLY | BIFF_TOKCLASS_VAL;
+const sal_uInt8 EA = FUNCINFO_PARAM_EXCELONLY | BIFF_TOKCLASS_ARR;
+const sal_uInt8 C = FUNCINFO_PARAM_CALCONLY;
+const sal_uInt8 I = FUNCINFO_PARAM_INVALID;
+const sal_uInt16 NOID = BIFF_FUNC_INVALID;
+
+/** Functions new in BIFF2. */
+static const FunctionData saFuncTableBiff2[] =
+{
+    { OPCODE_COUNT,             "COUNT",            "COUNT",            0,      0,  30, V, { R }, 0, 0 },
+    { OPCODE_IF,                "IF",               "IF",               1,      2,  3,  R, { V, R }, 0, 0 },
+    { OPCODE_IS_NV,             "ISNA",             "ISNA",             2,      1,  1,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_IS_ERROR,          "ISERROR",          "ISERROR",          3,      1,  1,  V, { V }, 0, 0 },
+    { OPCODE_SUM,               "SUM",              "SUM",              4,      0,  30, V, { R }, 0, 0 },
+    { OPCODE_AVERAGE,           "AVERAGE",          "AVERAGE",          5,      1,  30, V, { R }, 0, 0 },
+    { OPCODE_MIN,               "MIN",              "MIN",              6,      1,  30, V, { R }, 0, 0 },
+    { OPCODE_MAX,               "MAX",              "MAX",              7,      1,  30, V, { R }, 0, 0 },
+    { OPCODE_ROW,               "ROW",              "ROW",              8,      0,  1,  V, { R }, 0, 0 },
+    { OPCODE_COLUMN,            "COLUMN",           "COLUMN",           9,      0,  1,  V, { R }, 0, 0 },
+    { OPCODE_NO_VALUE,          "NA",               "NA",               10,     0,  0,  V, {}, 0, 0 },          // TODO OpCode
+    { OPCODE_NBW,               "NPV",              "NPV",              11,     2,  30, V, { V, R }, 0, 0 },    // TODO OpCode
+    { OPCODE_ST_DEV,            "STDEV",            "STDEV",            12,     1,  30, V, { R }, 0, 0 },
+    { OPCODE_CURRENCY,          "DOLLAR",           "DOLLAR",           13,     1,  2,  V, { V }, 0, 0 },
+    { OPCODE_FIXED,             "FIXED",            "FIXED",            14,     1,  2,  V, { V, V, C, I }, 0, 0 },
+    { OPCODE_SIN,               "SIN",              "SIN",              15,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_COS,               "COS",              "COS",              16,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_TAN,               "TAN",              "TAN",              17,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_COT,               "COT",              "TAN",              17,     1,  1,  V, { V }, FUNCFLAG_EXPORTONLY, 0 },
+    { OPCODE_ARC_TAN,           "ATAN",             "ATAN",             18,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ARC_COT,           "ACOT",             "ATAN",             18,     1,  1,  V, { V }, FUNCFLAG_EXPORTONLY, 0 },
+    { OPCODE_PI,                "PI",               "PI",               19,     0,  0,  V, {}, 0, 0 },
+    { OPCODE_SQRT,              "SQRT",             "SQRT",             20,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_EXP,               "EXP",              "EXP",              21,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_LN,                "LN",               "LN",               22,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_LOG10,             "LOG10",            "LOG10",            23,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ABS,               "ABS",              "ABS",              24,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_INT,               "INT",              "INT",              25,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_PLUS_MINUS,        "SIGN",             "SIGN",             26,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ROUND,             "ROUND",            "ROUND",            27,     2,  2,  V, { V }, 0, 0 },
+    { OPCODE_LOOKUP,            "LOOKUP",           "LOOKUP",           28,     2,  3,  V, { V, R }, 0, 0 },
+    { OPCODE_INDEX,             "INDEX",            "INDEX",            29,     2,  4,  R, { R, V }, 0, 0 },
+    { OPCODE_REPT,              "REPT",             "REPT",             30,     2,  2,  V, { V }, 0, 0 },
+    { OPCODE_MID,               "MID",              "MID",              31,     3,  3,  V, { V }, 0, 0 },
+    { OPCODE_LEN,               "LEN",              "LEN",              32,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_VALUE,             "VALUE",            "VALUE",            33,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_TRUE,              "TRUE",             "TRUE",             34,     0,  0,  V, {}, 0, 0 },
+    { OPCODE_FALSE,             "FALSE",            "FALSE",            35,     0,  0,  V, {}, 0, 0 },
+    { OPCODE_AND,               "AND",              "AND",              36,     1,  30, V, { R }, 0, 0 },
+    { OPCODE_OR,                "OR",               "OR",               37,     1,  30, V, { R }, 0, 0 },
+    { OPCODE_NOT,               "NOT",              "NOT",              38,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_MOD,               "MOD",              "MOD",              39,     2,  2,  V, { V }, 0, 0 },
+    { OPCODE_DB_COUNT,          "DCOUNT",           "DCOUNT",           40,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_DB_SUM,            "DSUM",             "DSUM",             41,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_DB_AVERAGE,        "DAVERAGE",         "DAVERAGE",         42,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_DB_MIN,            "DMIN",             "DMIN",             43,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_DB_MAX,            "DMAX",             "DMAX",             44,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_DB_STD_DEV,        "DSTDEV",           "DSTDEV",           45,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_VAR,               "VAR",              "VAR",              46,     1,  30, V, { R }, 0, 0 },
+    { OPCODE_DB_VAR,            "DVAR",             "DVAR",             47,     3,  3,  V, { R }, 0, 0 },
+    { OPCODE_TEXT,              "TEXT",             "TEXT",             48,     2,  2,  V, { V }, 0, 0 },
+    { OPCODE_RGP,               "LINEST",           "LINEST",           49,     1,  2,  A, { R, R, C, C, I }, 0, 0 },   // TODO OpCode
+    { OPCODE_TREND,             "TREND",            "TREND",            50,     1,  3,  A, { R, R, R, C, I }, 0, 0 },
+    { OPCODE_RKP,               "LOGEST",           "LOGEST",           51,     1,  2,  A, { R, R, C, C, I }, 0, 0 },   // TODO OpCode
+    { OPCODE_GROWTH,            "GROWTH",           "GROWTH",           52,     1,  3,  A, { R, R, R, C, I }, 0, 0 },
+    { OPCODE_BW,                "PV",               "PV",               56,     3,  5,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_ZW,                "FV",               "FV",               57,     3,  5,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_ZZR,               "NPER",             "NPER",             58,     3,  5,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_RMZ,               "PMT",              "PMT",              59,     3,  5,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_ZINS,              "RATE",             "RATE",             60,     3,  6,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_MIRR,              "MIRR",             "MIRR",             61,     3,  3,  V, { R, V }, 0, 0 },
+    { OPCODE_IKV,               "IRR",              "IRR",              62,     1,  2,  V, { R, V }, 0, 0 },    // TODO OpCode
+    { OPCODE_RANDOM,            "RAND",             "RAND",             63,     0,  0,  V, {}, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_MATCH,             "MATCH",            "MATCH",            64,     2,  3,  V, { V, R }, 0, 0 },
+    { OPCODE_GET_DATE,          "DATE",             "DATE",             65,     3,  3,  V, { V }, 0, 0 },
+    { OPCODE_GET_TIME,          "TIME",             "TIME",             66,     3,  3,  V, { V }, 0, 0 },
+    { OPCODE_GET_DAY,           "DAY",              "DAY",              67,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_MONTH,         "MONTH",            "MONTH",            68,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_YEAR,          "YEAR",             "YEAR",             69,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_DAY_OF_WEEK,   "WEEKDAY",          "WEEKDAY",          70,     1,  1,  V, { V, C, I }, 0, 0 },
+    { OPCODE_GET_HOUR,          "HOUR",             "HOUR",             71,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_MIN,           "MINUTE",           "MINUTE",           72,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_SEC,           "SECOND",           "SECOND",           73,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_ACT_TIME,      "NOW",              "NOW",              74,     0,  0,  V, {}, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_AREAS,             "AREAS",            "AREAS",            75,     1,  1,  V, { R }, 0, 0 },
+    { OPCODE_ROWS,              "ROWS",             "ROWS",             76,     1,  1,  V, { R }, 0, 0 },
+    { OPCODE_COLUMNS,           "COLUMNS",          "COLUMNS",          77,     1,  1,  V, { R }, 0, 0 },
+    { OPCODE_OFFSET,            "OFFSET",           "OFFSET",           78,     3,  5,  R, { R, V }, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_SEARCH,            "SEARCH",           "SEARCH",           82,     2,  3,  V, { V }, 0, 0 },
+    { OPCODE_MAT_TRANS,         "TRANSPOSE",        "TRANSPOSE",        83,     1,  1,  A, { A }, 0, 0 },
+    { OPCODE_TYPE,              "TYPE",             "TYPE",             86,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ARC_TAN_2,         "ATAN2",            "ATAN2",            97,     2,  2,  V, { V }, 0, 0 },
+    { OPCODE_ARC_SIN,           "ASIN",             "ASIN",             98,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ARC_COS,           "ACOS",             "ACOS",             99,     1,  1,  V, { V }, 0, 0 },
+    { OPCODE_CHOSE,             "CHOOSE",           "CHOOSE",           100,    2,  30, R, { V, R }, 0, 0 },    // TODO OpCode
+    { OPCODE_H_LOOKUP,          "HLOOKUP",          "HLOOKUP",          101,    3,  3,  V, { V, R, R, C, I }, 0, 0 },
+    { OPCODE_V_LOOKUP,          "VLOOKUP",          "VLOOKUP",          102,    3,  3,  V, { V, R, R, C, I }, 0, 0 },
+    { OPCODE_IS_REF,            "ISREF",            "ISREF",            105,    1,  1,  V, { R }, 0, 0 },
+    { OPCODE_LOG,               "LOG",              "LOG",              109,    1,  2,  V, { V }, 0, 0 },
+    { OPCODE_CHAR,              "CHAR",             "CHAR",             111,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_LOWER,             "LOWER",            "LOWER",            112,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_UPPER,             "UPPER",            "UPPER",            113,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_PROPPER,           "PROPER",           "PROPER",           114,    1,  1,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_LEFT,              "LEFT",             "LEFT",             115,    1,  2,  V, { V }, 0, 0 },
+    { OPCODE_RIGHT,             "RIGHT",            "RIGHT",            116,    1,  2,  V, { V }, 0, 0 },
+    { OPCODE_EXACT,             "EXACT",            "EXACT",            117,    2,  2,  V, { V }, 0, 0 },
+    { OPCODE_TRIM,              "TRIM",             "TRIM",             118,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_REPLACE,           "REPLACE",          "REPLACE",          119,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_SUBSTITUTE,        "SUBSTITUTE",       "SUBSTITUTE",       120,    3,  4,  V, { V }, 0, 0 },
+    { OPCODE_CODE,              "CODE",             "CODE",             121,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_FIND,              "FIND",             "FIND",             124,    2,  3,  V, { V }, 0, 0 },
+    { OPCODE_CELL,              "CELL",             "CELL",             125,    1,  2,  V, { V, R }, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_IS_ERR,            "ISERR",            "ISERR",            126,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_IS_STRING,         "ISTEXT",           "ISTEXT",           127,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_IS_VALUE,          "ISNUMBER",         "ISNUMBER",         128,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_IS_EMPTY,          "ISBLANK",          "ISBLANK",          129,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_T,                 "T",                "T",                130,    1,  1,  V, { R }, 0, 0 },
+    { OPCODE_N,                 "N",                "N",                131,    1,  1,  V, { R }, 0, 0 },
+    { OPCODE_GET_DATE_VALUE,    "DATEVALUE",        "DATEVALUE",        140,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GET_TIME_VALUE,    "TIMEVALUE",        "TIMEVALUE",        141,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_LIA,               "SLN",              "SLN",              142,    3,  3,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_DIA,               "SYD",              "SYD",              143,    4,  4,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_GDA,               "DDB",              "DDB",              144,    4,  5,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_INDIRECT,          "INDIRECT",         "INDIRECT",         148,    1,  2,  R, { V, EV, I }, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_CLEAN,             "CLEAN",            "CLEAN",            162,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_MAT_DET,           "MDETERM",          "MDETERM",          163,    1,  1,  V, { A }, 0, 0 },
+    { OPCODE_MAT_INV,           "MINVERSE",         "MINVERSE",         164,    1,  1,  A, { A }, 0, 0 },
+    { OPCODE_MAT_MULT,          "MMULT",            "MMULT",            165,    2,  2,  A, { A }, 0, 0 },
+    { OPCODE_ZINS_Z,            "IPMT",             "IPMT",             167,    4,  6,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_KAPZ,              "PPMT",             "PPMT",             168,    4,  6,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_COUNT_2,           "COUNTA",           "COUNTA",           169,    0,  30, V, { R }, 0, 0 },
+    { OPCODE_PRODUCT,           "PRODUCT",          "PRODUCT",          183,    0,  30, V, { R }, 0, 0 },
+    { OPCODE_FACT,              "FACT",             "FACT",             184,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_DB_PRODUCT,        "DPRODUCT",         "DPRODUCT",         189,    3,  3,  V, { R }, 0, 0 },
+    { OPCODE_IS_NON_STRING,     "ISNONTEXT",        "ISNONTEXT",        190,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ST_DEV_P,          "STDEVP",           "STDEVP",           193,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_VAR_P,             "VARP",             "VARP",             194,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_DB_STD_DEV_P,      "DSTDEVP",          "DSTDEVP",          195,    3,  3,  V, { R }, 0, 0 },
+    { OPCODE_DB_VAR_P,          "DVARP",            "DVARP",            196,    3,  3,  V, { R }, 0, 0 },
+    { OPCODE_TRUNC,             "TRUNC",            "TRUNC",            197,    1,  1,  V, { V, C, I }, 0, 0 },
+    { OPCODE_IS_LOGICAL,        "ISLOGICAL",        "ISLOGICAL",        198,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_DB_COUNT_2,        "DCOUNTA",          "DCOUNTA",          199,    3,  3,  V, { R }, 0, 0 },
+    { OPCODE_EXTERNAL,          0,                  0,                  255,    1,  30, R, { ER, R }, FUNCFLAG_IMPORTONLY, 0 }
+};
+
+#if 0
+/** Functions new in BIFF3. */
+#else
+/** Functions new in BIFF3. Unsupported functions: ASC, DBCS. */
+#endif
+static const FunctionData saFuncTableBiff3[] =
+{
+    { OPCODE_RGP,               "LINEST",           "LINEST",           49,     1,  4,  A, { R, R, V, V }, 0, 0 },  // BIFF2: 1-2, BIFF3: 1-4, TODO OpCode
+    { OPCODE_TREND,             "TREND",            "TREND",            50,     1,  4,  A, { R, R, R, V }, 0, 0 },  // BIFF2: 1-3, BIFF3: 1-4
+    { OPCODE_RKP,               "LOGEST",           "LOGEST",           51,     1,  4,  A, { R, R, V, V }, 0, 0 },  // BIFF2: 1-2, BIFF3: 1-4, TODO OpCode
+    { OPCODE_GROWTH,            "GROWTH",           "GROWTH",           52,     1,  4,  A, { R, R, R, V }, 0, 0 },  // BIFF2: 1-3, BIFF3: 1-4
+    { OPCODE_TRUNC,             "TRUNC",            "TRUNC",            197,    1,  2,  V, { V }, 0, 0 },           // BIFF2: 1,   BIFF3: 1-2
+    { OPCODE_CURRENCY,          "DOLLAR",           "USDOLLAR",         204,    1,  2,  V, { V }, FUNCFLAG_IMPORTONLY, 0 },
+    { OPCODE_FIND,              "FINDB",            "FINDB",            205,    2,  3,  V, { V }, 0, 0 },
+    { OPCODE_SEARCH,            "SEARCHB",          "SEARCHB",          206,    2,  3,  V, { V }, 0, 0 },
+    { OPCODE_REPLACE,           "REPLACEB",         "REPLACEB",         207,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_LEFT,              "LEFTB",            "LEFTB",            208,    1,  2,  V, { V }, 0, 0 },
+    { OPCODE_RIGHT,             "RIGHTB",           "RIGHTB",           209,    1,  2,  V, { V }, 0, 0 },
+    { OPCODE_MID,               "MIDB",             "MIDB",             210,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_LEN,               "LENB",             "LENB",             211,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ROUND_UP,          "ROUNDUP",          "ROUNDUP",          212,    2,  2,  V, { V }, 0, 0 },
+    { OPCODE_ROUND_DOWN,        "ROUNDDOWN",        "ROUNDDOWN",        213,    2,  2,  V, { V }, 0, 0 },
+#if 0
+    { OPCODE_ASC,               "ASC",              "ASC",              214,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_JIS,               "JIS",              "DBCS",             215,    1,  1,  V, { V }, 0, 0 },
+#else
+    { OPCODE_NO_NAME,           "ASC",              "ASC",              214,    1,  1,  V, { V }, FUNCFLAG_IMPORTONLY, 0 },
+    { OPCODE_NO_NAME,           "JIS",              "DBCS",             215,    1,  1,  V, { V }, FUNCFLAG_IMPORTONLY, 0 },
+#endif
+    { OPCODE_ADDRESS,           "ADDRESS",          "ADDRESS",          219,    2,  5,  V, { V, V, V, EV, V }, 0, 0 },
+    { OPCODE_GET_DIFF_DATE_360, "DAYS360",          "DAYS360",          220,    2,  2,  V, { V, V, C, I }, 0, 0 },
+    { OPCODE_GET_ACT_DATE,      "TODAY",            "TODAY",            221,    0,  0,  V, {}, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_VBD,               "VDB",              "VDB",              222,    5,  7,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_MEDIAN,            "MEDIAN",           "MEDIAN",           227,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_SUM_PRODUCT,       "SUMPRODUCT",       "SUMPRODUCT",       228,    1,  30, V, { A }, 0, 0 },
+    { OPCODE_SIN_HYP,           "SINH",             "SINH",             229,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_COS_HYP,           "COSH",             "COSH",             230,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_TAN_HYP,           "TANH",             "TANH",             231,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_COT_HYP,           "COTH",             "TANH",             231,    1,  1,  V, { V }, FUNCFLAG_EXPORTONLY, 0 },
+    { OPCODE_ARC_SIN_HYP,       "ASINH",            "ASINH",            232,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ARC_COS_HYP,       "ACOSH",            "ACOSH",            233,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ARC_TAN_HYP,       "ATANH",            "ATANH",            234,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ARC_COT_HYP,       "ACOTH",            "ATANH",            234,    1,  1,  V, { V }, FUNCFLAG_EXPORTONLY, 0 },
+    { OPCODE_DB_GET,            "DGET",             "DGET",             235,    3,  3,  V, { R }, 0, 0 },
+    { OPCODE_INFO,              "INFO",             "INFO",             244,    1,  1,  V, { V }, FUNCFLAG_VOLATILE, 0 }
+};
+
+/** Functions new in BIFF4. */
+static const FunctionData saFuncTableBiff4[] =
+{
+    { OPCODE_FIXED,             "FIXED",            "FIXED",            14,     1,  3,  V, { V }, 0, 0 },       // BIFF2-3: 1-2, BIFF4: 1-3
+    { OPCODE_RANK,              "RANK",             "RANK",             216,    2,  3,  V, { V, R, V }, 0, 0 },
+    { OPCODE_GDA_2,             "DB",               "DB",               247,    4,  5,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_FREQUENCY,         "FREQUENCY",        "FREQUENCY",        252,    2,  2,  A, { R }, 0, 0 },
+    { OPCODE_ERROR_TYPE,        "ERROR.TYPE",       "ERROR.TYPE",       261,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_AVE_DEV,           "AVEDEV",           "AVEDEV",           269,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_BETA_DIST,         "BETADIST",         "BETADIST",         270,    3,  5,  V, { V }, 0, 0 },
+    { OPCODE_GAMMA_LN,          "GAMMALN",          "GAMMALN",          271,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_BETA_INV,          "BETAINV",          "BETAINV",          272,    3,  5,  V, { V }, 0, 0 },
+    { OPCODE_BINOM_DIST,        "BINOMDIST",        "BINOMDIST",        273,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_CHI_DIST,          "LEGACY.CHIDIST",   "CHIDIST",          274,    2,  2,  V, { V }, 0, 0 },
+    { OPCODE_CHI_INV,           "LEGACY.CHIINV",    "CHIINV",           275,    2,  2,  V, { V }, 0, 0 },
+    { OPCODE_KOMBIN,            "COMBIN",           "COMBIN",           276,    2,  2,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_CONFIDENCE,        "CONFIDENCE",       "CONFIDENCE",       277,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_KRIT_BINOM,        "CRITBINOM",        "CRITBINOM",        278,    3,  3,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_EVEN,              "EVEN",             "EVEN",             279,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_EXP_DIST,          "EXPONDIST",        "EXPONDIST",        280,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_F_DIST,            "LEGACY.FDIST",     "FDIST",            281,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_F_INV,             "LEGACY.FINV",      "FINV",             282,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_FISHER,            "FISHER",           "FISHER",           283,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_FISHER_INV,        "FISHERINV",        "FISHERINV",        284,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_FLOOR,             "FLOOR",            "FLOOR",            285,    2,  2,  V, { V, V, C, I }, 0, 0 },
+    { OPCODE_GAMMA_DIST,        "GAMMADIST",        "GAMMADIST",        286,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_GAMMA_INV,         "GAMMAINV",         "GAMMAINV",         287,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_CEIL,              "CEILING",          "CEILING",          288,    2,  2,  V, { V, V, C, I }, 0, 0 },
+    { OPCODE_HYP_GEOM_DIST,     "HYPGEOMDIST",      "HYPGEOMDIST",      289,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_LOG_NORM_DIST,     "LOGNORMDIST",      "LOGNORMDIST",      290,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_LOG_INV,           "LOGINV",           "LOGINV",           291,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_NEG_BINOM_VERT,    "NEGBINOMDIST",     "NEGBINOMDIST",     292,    3,  3,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_NORM_DIST,         "NORMDIST",         "NORMDIST",         293,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_STD_NORM_DIST,     "LEGACY.NORMSDIST", "NORMSDIST",        294,    1,  1,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_NORM_INV,          "NORMINV",          "NORMINV",          295,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_S_NORM_INV,        "LEGACY.NORMSINV",  "NORMSINV",         296,    1,  1,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_STANDARD,          "STANDARDIZE",      "STANDARDIZE",      297,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_ODD,               "ODD",              "ODD",              298,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_VARIATIONEN,       "PERMUT",           "PERMUT",           299,    2,  2,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_POISSON_DIST,      "POISSON",          "POISSON",          300,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_T_DIST,            "TDIST",            "TDIST",            301,    3,  3,  V, { V }, 0, 0 },
+    { OPCODE_WEIBULL,           "WEIBULL",          "WEIBULL",          302,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_SUM_XMY2,          "SUMXMY2",          "SUMXMY2",          303,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_SUM_X2MY2,         "SUMX2MY2",         "SUMX2MY2",         304,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_SUM_X2DY2,         "SUMX2PY2",         "SUMX2PY2",         305,    2,  2,  V, { A }, 0, 0 },       // TODO OpCode
+    { OPCODE_CHI_TEST,          "LEGACY.CHITEST",   "CHITEST",          306,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_CORREL,            "CORREL",           "CORREL",           307,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_COVAR,             "COVAR",            "COVAR",            308,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_FORECAST,          "FORECAST",         "FORECAST",         309,    3,  3,  V, { V, A }, 0, 0 },
+    { OPCODE_F_TEST,            "FTEST",            "FTEST",            310,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_INTERCEPT,         "INTERCEPT",        "INTERCEPT",        311,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_PEARSON,           "PEARSON",          "PEARSON",          312,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_RSQ,               "RSQ",              "RSQ",              313,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_STEYX,             "STEYX",            "STEYX",            314,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_SLOPE,             "SLOPE",            "SLOPE",            315,    2,  2,  V, { A }, 0, 0 },
+    { OPCODE_T_TEST,            "TTEST",            "TTEST",            316,    4,  4,  V, { A, A, V }, 0, 0 },
+    { OPCODE_PROB,              "PROB",             "PROB",             317,    3,  4,  V, { A, A, V }, 0, 0 },
+    { OPCODE_DEV_SQ,            "DEVSQ",            "DEVSQ",            318,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_GEO_MEAN,          "GEOMEAN",          "GEOMEAN",          319,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_HAR_MEAN,          "HARMEAN",          "HARMEAN",          320,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_SUM_SQ,            "SUMSQ",            "SUMSQ",            321,    0,  30, V, { R }, 0, 0 },
+    { OPCODE_KURT,              "KURT",             "KURT",             322,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_SCHIEFE,           "SKEW",             "SKEW",             323,    1,  30, V, { R }, 0, 0 },       // TODO OpCode
+    { OPCODE_Z_TEST,            "ZTEST",            "ZTEST",            324,    2,  3,  V, { R, V }, 0, 0 },
+    { OPCODE_LARGE,             "LARGE",            "LARGE",            325,    2,  2,  V, { R, V }, 0, 0 },
+    { OPCODE_SMALL,             "SMALL",            "SMALL",            326,    2,  2,  V, { R, V }, 0, 0 },
+    { OPCODE_QUARTILE,          "QUARTILE",         "QUARTILE",         327,    2,  2,  V, { R, V }, 0, 0 },
+    { OPCODE_PERCENTILE,        "PERCENTILE",       "PERCENTILE",       328,    2,  2,  V, { R, V }, 0, 0 },
+    { OPCODE_PERCENT_RANK,      "PERCENTRANK",      "PERCENTRANK",      329,    2,  3,  V, { R, V, EV, I }, 0, 0 },
+    { OPCODE_MODAL_VALUE,       "MODE",             "MODE",             330,    1,  30, V, { A }, 0, 0 },
+    { OPCODE_TRIM_MEAN,         "TRIMMEAN",         "TRIMMEAN",         331,    2,  2,  V, { R, V }, 0, 0 },
+    { OPCODE_T_INV,             "TINV",             "TINV",             332,    2,  2,  V, { V }, 0, 0 }
+};
+
+/** Functions new in BIFF5/BIFF7. Unsupported functions: DATEDIF, DATESTRING, NUMBERSTRING. */
+static const FunctionData saFuncTableBiff5[] =
+{
+    { OPCODE_GET_DAY_OF_WEEK,   "WEEKDAY",          "WEEKDAY",          70,     1,  2,  V, { V }, 0, 0 },             // BIFF2-4: 1, BIFF5: 1-2
+    { OPCODE_H_LOOKUP,          "HLOOKUP",          "HLOOKUP",          101,    3,  4,  V, { V, R, R, V }, 0, 0 },    // BIFF2-4: 3, BIFF5: 3-4
+    { OPCODE_V_LOOKUP,          "VLOOKUP",          "VLOOKUP",          102,    3,  4,  V, { V, R, R, V }, 0, 0 },    // BIFF2-4: 3, BIFF5: 3-4
+    { OPCODE_GET_DIFF_DATE_360, "DAYS360",          "DAYS360",          220,    2,  3,  V, { V }, 0, 0 },             // BIFF3-4: 2, BIFF5: 2-3
+    { OPCODE_MACRO,             0,                  0,                  255,    1,  30, R, { ER, R }, FUNCFLAG_EXPORTONLY, 0 },
+    { OPCODE_EXTERNAL,          0,                  0,                  255,    1,  30, R, { ER, R }, FUNCFLAG_EXPORTONLY, 0 },
+    { OPCODE_CONCAT,            "CONCATENATE",      "CONCATENATE",      336,    0,  30, V, { V }, 0, 0 },
+    { OPCODE_POWER,             "POWER",            "POWER",            337,    2,  2,  V, { V }, 0, 0 },
+    { OPCODE_RAD,               "RADIANS",          "RADIANS",          342,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_DEG,               "DEGREES",          "DEGREES",          343,    1,  1,  V, { V }, 0, 0 },
+    { OPCODE_SUB_TOTAL,         "SUBTOTAL",         "SUBTOTAL",         344,    2,  30, V, { V, R }, 0, 0 },
+    { OPCODE_SUM_IF,            "SUMIF",            "SUMIF",            345,    2,  3,  V, { R, V, R }, 0, 0 },
+    { OPCODE_COUNT_IF,          "COUNTIF",          "COUNTIF",          346,    2,  2,  V, { R, V }, 0, 0 },
+    { OPCODE_COUNT_EMPTY_CELLS, "COUNTBLANK",       "COUNTBLANK",       347,    1,  1,  V, { R }, 0, 0 },
+    { OPCODE_ISPMT,             "ISPMT",            "ISPMT",            350,    4,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DATEDIF",          "DATEDIF",          351,    3,  3,  V, { V }, FUNCFLAG_IMPORTONLY, 0 },
+    { OPCODE_NO_NAME,           "DATESTRING",       "DATESTRING",       352,    1,  1,  V, { V }, FUNCFLAG_IMPORTONLY, 0 },     // missing in OOX spec
+    { OPCODE_NO_NAME,           "NUMBERSTRING",     "NUMBERSTRING",     353,    2,  2,  V, { V }, FUNCFLAG_IMPORTONLY, 0 },     // missing in OOX spec
+    { OPCODE_ROMAN,             "ROMAN",            "ROMAN",            354,    1,  2,  V, { V }, 0, 0 }
+};
+
+#define FUNCNAME_MACRO_PREFIX "_xlfn."
+
+const sal_Char* const FUNCNAME_BAHTTEXT = FUNCNAME_MACRO_PREFIX "BAHTTEXT";
+
+/** Functions new in BIFF8. Unsupported functions: GETPIVOTDATA, PHONETIC. */
+static const FunctionData saFuncTableBiff8[] =
+{
+    { OPCODE_NO_NAME,           "GETPIVOTDATA",     "GETPIVOTDATA",     358,    2,  30, V, { V, R, V }, FUNCFLAG_IMPORTONLY, 0 },
+    { OPCODE_HYPERLINK,         "HYPERLINK",        "HYPERLINK",        359,    1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "PHONETIC",         360,    1,  1,  V, { R }, FUNCFLAG_IMPORTONLY, 0 },
+    { OPCODE_AVERAGE_A,         "AVERAGEA",         "AVERAGEA",         361,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_MAX_A,             "MAXA",             "MAXA",             362,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_MIN_A,             "MINA",             "MINA",             363,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_ST_DEV_P_A,        "STDEVPA",          "STDEVPA",          364,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_VAR_P_A,           "VARPA",            "VARPA",            365,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_ST_DEV_A,          "STDEVA",           "STDEVA",           366,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_VAR_A,             "VARA",             "VARA",             367,    1,  30, V, { R }, 0, 0 },
+    { OPCODE_BAHTTEXT,          0,                  0,                  368,    1,  1,  V, { V }, FUNCFLAG_IMPORTONLY, FUNCNAME_BAHTTEXT },
+    { OPCODE_BAHTTEXT,          0,                  0,                  255,    2,  2,  V, { ER, V }, FUNCFLAG_EXPORTONLY, FUNCNAME_BAHTTEXT }
+};
+
+/** Add-in functions. */
+static const FunctionData saFuncTableAddin[] =
+{
+    { OPCODE_NO_NAME,           "ACCRINT",          "ACCRINT",          NOID,   6,  7,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ACCRINTM",         "ACCRINTM",         NOID,   4,  5,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "AMORDEGRC",        "AMORDEGRC",        NOID,   6,  7,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "AMORLINC",         "AMORLINC",         NOID,   6,  7,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BESSELI",          "BESSELI",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BESSELJ",          "BESSELJ",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BESSELK",          "BESSELK",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BESSELY",          "BESSELY",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BIN2DEC",          "BIN2DEC",          NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BIN2HEX",          "BIN2HEX",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BIN2OCT",          "BIN2OCT",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "COMPLEX",          "COMPLEX",          NOID,   2,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "CONVERT",          "CONVERT",          NOID,   3,  3,  V, { V }, 0, 0 },       // CONVERT_ADD
+    { OPCODE_NO_NAME,           "COUPDAYBS",        "COUPDAYBS",        NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "COUPDAYS",         "COUPDAYS",         NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "COUPDAYSNC",       "COUPDAYSNC",       NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "COUPNCD",          "COUPNCD",          NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "COUPNUM",          "COUPNUM",          NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "COUPPCD",          "COUPPCD",          NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "CUMIPMT",          "CUMIPMT",          NOID,   6,  6,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "CUMPRINC",         "CUMPRINC",         NOID,   6,  6,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DEC2BIN",          "DEC2BIN",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DEC2HEX",          "DEC2HEX",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DEC2OCT",          "DEC2OCT",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DELTA",            "DELTA",            NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DISC",             "DISC",             NOID,   4,  5,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DOLLARDE",         "DOLLARDE",         NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DOLLARFR",         "DOLLARFR",         NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "DURATION",         "DURATION",         NOID,   5,  6,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "EDATE",            "EDATE",            NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "EFFECT",           "EFFECT",           NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "EOMONTH",          "EOMONTH",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ERF",              "ERF",              NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ERFC",             "ERFC",             NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "EUROCONVERT",      "EUROCONVERT",      NOID,   3,  5,  V, { V }, 0, 0 },       // Euro conversion add-in
+    { OPCODE_NO_NAME,           "FACTDOUBLE",       "FACTDOUBLE",       NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "FVSCHEDULE",       "FVSCHEDULE",       NOID,   2,  2,  V, { V, A }, 0, 0 },
+    { OPCODE_GGT,               "GCD",              "GCD",              NOID,   1,  30, V, { R }, 0, 0 },       // Calc: builtin and add-in, TODO OpCode
+    { OPCODE_NO_NAME,           "GESTEP",           "GESTEP",           NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "HEX2BIN",          "HEX2BIN",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "HEX2DEC",          "HEX2DEC",          NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "HEX2OCT",          "HEX2OCT",          NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMABS",            "IMABS",            NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMAGINARY",        "IMAGINARY",        NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMARGUMENT",       "IMARGUMENT",       NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMCONJUGATE",      "IMCONJUGATE",      NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMCOS",            "IMCOS",            NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMDIV",            "IMDIV",            NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMEXP",            "IMEXP",            NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMLN",             "IMLN",             NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMLOG10",          "IMLOG10",          NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMLOG2",           "IMLOG2",           NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMPOWER",          "IMPOWER",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMPRODUCT",        "IMPRODUCT",        NOID,   1,  30, V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMREAL",           "IMREAL",           NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMSIN",            "IMSIN",            NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMSQRT",           "IMSQRT",           NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMSUB",            "IMSUB",            NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IMSUM",            "IMSUM",            NOID,   1,  30, V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "INTRATE",          "INTRATE",          NOID,   4,  5,  V, { V }, 0, 0 },
+    { OPCODE_IS_EVEN,           "ISEVEN",           "ISEVEN",           NOID,   1,  1,  V, { V }, 0, 0 },       // Calc: builtin and add-in
+    { OPCODE_IS_ODD,            "ISODD",            "ISODD",            NOID,   1,  1,  V, { V }, 0, 0 },       // Calc: builtin and add-in
+    { OPCODE_KGV,               "LCM",              "LCM",              NOID,   1,  30, V, { R }, 0, 0 },       // Calc: builtin and add-in, TODO OpCode
+    { OPCODE_NO_NAME,           "MDURATION",        "MDURATION",        NOID,   5,  6,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "MROUND",           "MROUND",           NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "MULTINOMIAL",      "MULTINOMIAL",      NOID,   1,  30, V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "NETWORKDAYS",      "NETWORKDAYS",      NOID,   2,  3,  V, { V, V, A, C, I }, 0, 0 },
+    { OPCODE_NO_NAME,           "NOMINAL",          "NOMINAL",          NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "OCT2BIN",          "OCT2BIN",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "OCT2DEC",          "OCT2DEC",          NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "OCT2HEX",          "OCT2HEX",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ODDFPRICE",        "ODDFPRICE",        NOID,   8,  9,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ODDFYIELD",        "ODDFYIELD",        NOID,   8,  9,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ODDLPRICE",        "ODDLPRICE",        NOID,   7,  8,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "ODDLYIELD",        "ODDLYIELD",        NOID,   8,  9,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "PRICE",            "PRICE",            NOID,   6,  7,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "PRICEDISC",        "PRICEDISC",        NOID,   4,  5,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "PRICEMAT",         "PRICEMAT",         NOID,   5,  6,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "QUOTIENT",         "QUOTIENT",         NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "RANDBETWEEN",      "RANDBETWEEN",      NOID,   2,  2,  V, {}, FUNCFLAG_VOLATILE, 0 },
+    { OPCODE_NO_NAME,           "RECEIVED",         "RECEIVED",         NOID,   4,  5,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "SERIESSUM",        "SERIESSUM",        NOID,   4,  4,  V, { V, V, V, R }, 0, 0 },
+    { OPCODE_NO_NAME,           "SQRTPI",           "SQRTPI",           NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "TBILLEQ",          "TBILLEQ",          NOID,   3,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "TBILLPRICE",       "TBILLPRICE",       NOID,   3,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "TBILLYIELD",       "TBILLYIELD",       NOID,   3,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "WEEKNUM",          "WEEKNUM",          NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "WORKDAY",          "WORKDAY",          NOID,   2,  3,  V, { V, V, A, C, I }, 0, 0 },
+    { OPCODE_NO_NAME,           "XIRR",             "XIRR",             NOID,   2,  3,  V, { A, R, V }, 0, 0 },
+    { OPCODE_NO_NAME,           "XNPV",             "XNPV",             NOID,   2,  3,  V, { V, A, R }, 0, 0 },
+    { OPCODE_NO_NAME,           "YEARFRAC",         "YEARFRAC",         NOID,   2,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "YIELD",            "YIELD",            NOID,   6,  7,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "YIELDDISC",        "YIELDDISC",        NOID,   4,  5,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "YIELDMAT",         "YIELDMAT",         NOID,   5,  6,  V, { V }, 0, 0 }
+};
+
+/** Functions new in OOX. */
+static const FunctionData saFuncTableOox[] =
+{
+    { OPCODE_NO_NAME,           0,                  "AVERAGEIF",        NOID,   2,  3,  V, { R, V, R }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "AVERAGEIFS",       NOID,   3,  30, V, { R, V }, 0, 0 },
+    { OPCODE_BAHTTEXT,          0,                  "BAHTTEXT",         NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "COUNTIFS",         NOID,   3,  30, V, { R, V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBEKPIMEMBER",    NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBEMEMBER",       NOID,   2,  3,  V, { V, A, V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBEMEMBERPROPERTY",NOID,  3,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBERANKEDMEMBER", NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBESET",          NOID,   2,  5,  V, { V, R, V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBESETCOUNT",     NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "CUBEVALUE",        NOID,   2,  2,  V, { V, R }, 0, 0 },
+    { OPCODE_NO_NAME,           "IFERROR",          "IFERROR",          NOID,   2,  2,  V, { V, R }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "RTD",              NOID,   3,  3,  A, { V, V, R }, 0, 0 },
+    { OPCODE_NO_NAME,           0,                  "SUMIFS",           NOID,   3,  30, V, { R, V }, 0, 0 }
+};
+
+/** Functions defined by OpenFormula, but not supported by Calc or by Excel. */
+static const FunctionData saFuncTableOdf[] =
+{
+    { OPCODE_ARABIC,            "ARABIC",           0,                  NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_B,                 "B",                0,                  NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_BASE,              "BASE",             0,                  NOID,   2,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BITAND",           0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BITLSHIFT",        0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BITOR",            0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BITRSHIFT",        0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "BITXOR",           0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "CHISQDIST",        0,                  NOID,   2,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "CHISQINV",         0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_KOMBIN_2,          "COMBINA",          0,                  NOID,   2,  2,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_NO_NAME,           "DAYS",             0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_DDE,               "DDE",              0,                  NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_DECIMAL,           "DECIMAL",          0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "FDIST",            0,                  NOID,   3,  4,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "FINV",             0,                  NOID,   3,  3,  V, { V }, 0, 0 },
+    { OPCODE_FORMULA,           "FORMULA",          0,                  NOID,   1,  1,  V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "GAMMA",            0,                  NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_GAUSS,             "GAUSS",            0,                  NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "IFNA",             0,                  NOID,   2,  2,  V, { V, R }, 0, 0 },
+    { OPCODE_IS_FORMULA,        "ISFORMULA",        0,                  NOID,   1,  1,  V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "ISOWEEKNUM",       0,                  NOID,   1,  2,  V, { V }, 0, 0 },
+    { OPCODE_TABLE_OP,          "MULTIPLE.OPERATIONS", 0,               NOID,   3,  5,  V, { R }, 0, 0 },
+    { OPCODE_MATRIX_UNIT,       "MUNIT",            0,                  NOID,   1,  1,  A, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "NUMBERVALUE",      0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "PDURATION",        0,                  NOID,   3,  3,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "PERMUTATIONA",     0,                  NOID,   2,  2,  V, { V }, 0, 0 },
+    { OPCODE_PHI,               "PHI",              0,                  NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_ZGZ,               "RRI",              0,                  NOID,   3,  3,  V, { V }, 0, 0 },       // TODO OpCode
+    { OPCODE_NO_NAME,           "SHEET",            0,                  NOID,   1,  1,  V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "SHEETS",           0,                  NOID,   0,  1,  V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "SKEWP",            0,                  NOID,   1,  30, V, { R }, 0, 0 },
+    { OPCODE_NO_NAME,           "UNICHAR",          0,                  NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "UNICODE",          0,                  NOID,   1,  1,  V, { V }, 0, 0 },
+    { OPCODE_NO_NAME,           "XOR",              0,                  NOID,   1,  30, V, { R }, 0, 0 }
+};
+
+} // namespace
+
+// function info parameter class iterator =====================================
+
+FuncInfoParamClassIterator::FuncInfoParamClassIterator( const FunctionInfo& rFuncInfo ) :
+    mpnParamClass( rFuncInfo.mpnParamClass ),
+    mpnParamClassEnd( rFuncInfo.mpnParamClass + FUNCINFO_CLASSCOUNT )
+{
+}
+
+FuncInfoParamClassIterator& FuncInfoParamClassIterator::operator++()
+{
+    if( (mpnParamClass + 1 < mpnParamClassEnd) && (mpnParamClass[ 1 ] != 0) )
+        ++mpnParamClass;
+    return *this;
+}
+
+// function provider implementation ===========================================
+
+class FunctionProviderImpl
+{
+public:
+    explicit            FunctionProviderImpl( bool bImportFilter );
+    explicit            FunctionProviderImpl( BiffType eBiff, bool bImportFilter );
+
+    /** Returns the function data for an API opcode, or 0 on error. */
+    const FunctionInfo* getFuncInfoFromApiOpCode( sal_Int32 nOpCode ) const;
+
+    /** Returns the function data for an OOX function name, or 0 on error. */
+    const FunctionInfo* getFuncInfoFromOoxFuncName( const OUString& rFuncName ) const;
+
+    /** Returns the function data for a BIFF function index, or 0 on error. */
+    const FunctionInfo* getFuncInfoFromBiffFuncId( sal_uInt16 nFuncId ) const;
+
+    /** Returns the function data for a function simulated by a macro call, or 0 on error. */
+    const FunctionInfo* getFuncInfoFromBiffMacroName( const OUString& rMacroName ) const;
+
+private:
+    void                construct( bool bImportFilter );
+    void                construct( BiffType eBiff, bool bImportFilter );
+    void                fillFuncMaps( const FunctionData* pBeg, const FunctionData* pEnd );
+
+private:
+    typedef RefMap< sal_Int32, FunctionInfo >   ApiFuncMap;
+    typedef RefMap< OUString, FunctionInfo >    FuncNameMap;
+    typedef RefMap< sal_uInt16, FunctionInfo >  BiffFuncMap;
+
+    ApiFuncMap          maApiFuncs;             /// Maps API opcodes to function data.
+    FuncNameMap         maOoxFuncs;             /// Maps OOX function names to function data.
+    BiffFuncMap         maBiffFuncs;            /// Maps BIFF function indexes to function data.
+    FuncNameMap         maMacroFuncs;           /// Maps BIFF macro function names to function data.
+    bool                mbImportFilter;         /// True = import filter, false = export filter.
+};
+
+// ----------------------------------------------------------------------------
+
+FunctionProviderImpl::FunctionProviderImpl( bool bImportFilter )
+{
+    construct( bImportFilter );
+}
+
+FunctionProviderImpl::FunctionProviderImpl( BiffType eBiff, bool bImportFilter )
+{
+    construct( eBiff, bImportFilter );
+}
+
+const FunctionInfo* FunctionProviderImpl::getFuncInfoFromApiOpCode( sal_Int32 nOpCode ) const
+{
+    return maApiFuncs.get( nOpCode ).get();
+}
+
+const FunctionInfo* FunctionProviderImpl::getFuncInfoFromOoxFuncName( const OUString& rFuncName ) const
+{
+    return maOoxFuncs.get( rFuncName ).get();
+}
+
+const FunctionInfo* FunctionProviderImpl::getFuncInfoFromBiffFuncId( sal_uInt16 nFuncId ) const
+{
+    return maBiffFuncs.get( nFuncId ).get();
+}
+
+const FunctionInfo* FunctionProviderImpl::getFuncInfoFromBiffMacroName( const OUString& rMacroName ) const
+{
+    return maMacroFuncs.get( rMacroName ).get();
+}
+
+void FunctionProviderImpl::construct( bool bImportFilter )
+{
+    construct( BIFF8, bImportFilter );
+    // additional add-in functions
+    fillFuncMaps( saFuncTableAddin, STATIC_TABLE_END( saFuncTableAddin ) );
+    // additional functions for OOX
+    fillFuncMaps( saFuncTableOox, STATIC_TABLE_END( saFuncTableOox ) );
+    // additional unsupported functions
+    fillFuncMaps( saFuncTableOdf, STATIC_TABLE_END( saFuncTableOdf ) );
+}
+
+void FunctionProviderImpl::construct( BiffType eBiff, bool bImportFilter )
+{
+    mbImportFilter = bImportFilter;
+
+    /*  Add functions supported in the current BIFF version only. Function
+        tables from later BIFF versions may overwrite single functions from
+        earlier tables. */
+    if( eBiff >= BIFF2 )
+        fillFuncMaps( saFuncTableBiff2, STATIC_TABLE_END( saFuncTableBiff2 ) );
+    if( eBiff >= BIFF3 )
+        fillFuncMaps( saFuncTableBiff3, STATIC_TABLE_END( saFuncTableBiff3 ) );
+    if( eBiff >= BIFF4 )
+        fillFuncMaps( saFuncTableBiff4, STATIC_TABLE_END( saFuncTableBiff4 ) );
+    if( eBiff >= BIFF5 )
+        fillFuncMaps( saFuncTableBiff5, STATIC_TABLE_END( saFuncTableBiff5 ) );
+    if( eBiff >= BIFF8 )
+        fillFuncMaps( saFuncTableBiff8, STATIC_TABLE_END( saFuncTableBiff8 ) );
+}
+
+void FunctionProviderImpl::fillFuncMaps( const FunctionData* pBeg, const FunctionData* pEnd )
+{
+    for( const FunctionData* pIt = pBeg; pIt != pEnd; ++pIt )
+    {
+        if( pIt->isSupported( mbImportFilter ) )
+        {
+            ::boost::shared_ptr< FunctionInfo > xInfo = pIt->createFuncInfo();
+            if( xInfo->mnApiOpCode != OPCODE_NO_NAME )
+                maApiFuncs[ xInfo->mnApiOpCode ] = xInfo;
+            if( xInfo->maOoxFuncName.getLength() > 0 )
+                maOoxFuncs[ xInfo->maOoxFuncName ] = xInfo;
+            if( xInfo->mnBiffFuncId != BIFF_FUNC_INVALID )
+                maBiffFuncs[ xInfo->mnBiffFuncId ] = xInfo;
+            if( xInfo->maBiffMacroName.getLength() > 0 )
+                maMacroFuncs[ xInfo->maBiffMacroName ] = xInfo;
+        }
+    }
+}
+
+// function provider ==========================================================
+
+FunctionProvider::FunctionProvider( const GlobalDataHelper& rGlobalData )
+{
+    bool bImportFilter = rGlobalData.getBaseFilter().isImportFilter();
+    switch( rGlobalData.getFilterType() )
+    {
+        case FILTER_OOX:
+            mxImpl.reset( new FunctionProviderImpl( bImportFilter ) );
+        break;
+        case FILTER_BIFF:
+            mxImpl.reset( new FunctionProviderImpl( rGlobalData.getBiff(), bImportFilter ) );
+        break;
+        case FILTER_UNKNOWN: break;
+    }
+}
+
+FunctionProvider::FunctionProvider( bool bImportFilter )
+{
+    mxImpl.reset( new FunctionProviderImpl( bImportFilter ) );
+}
+
+FunctionProvider::FunctionProvider( BiffType eBiff, bool bImportFilter )
+{
+    mxImpl.reset( new FunctionProviderImpl( eBiff, bImportFilter ) );
+}
+
+FunctionProvider::~FunctionProvider()
+{
+}
+
+const FunctionInfo* FunctionProvider::getFuncInfoFromApiOpCode( sal_Int32 nOpCode ) const
+{
+    return mxImpl->getFuncInfoFromApiOpCode( nOpCode );
+}
+
+const FunctionInfo* FunctionProvider::getFuncInfoFromOoxFuncName( const OUString& rFuncName ) const
+{
+    return mxImpl->getFuncInfoFromOoxFuncName( rFuncName );
+}
+
+const FunctionInfo* FunctionProvider::getFuncInfoFromBiffFuncId( sal_uInt16 nFuncId ) const
+{
+    return mxImpl->getFuncInfoFromBiffFuncId( nFuncId );
+}
+
+const FunctionInfo* FunctionProvider::getFuncInfoFromBiffMacroName( const OUString& rMacroName ) const
+{
+    return mxImpl->getFuncInfoFromBiffMacroName( rMacroName );
+}
+
+// ============================================================================
+
+} // namespace xls
+} // namespace oox
+
