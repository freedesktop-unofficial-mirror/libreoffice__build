--- /dev/null	
+++ oox/inc/oox/xls/formulaparser.hxx	
@@ -0,0 +1,157 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: formulaparser.hxx,v $
+ *
+ *  $Revision: 1.1.2.12 $
+ *
+ *  last change: $Author: dr $ $Date: 2007/07/09 14:44:14 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef OOX_XLS_FORMULAPARSER_HXX
+#define OOX_XLS_FORMULAPARSER_HXX
+
+#include <com/sun/star/table/CellAddress.hpp>
+#include <com/sun/star/table/CellRangeAddress.hpp>
+#include "oox/xls/formulabase.hxx"
+
+namespace com { namespace sun { namespace star {
+    namespace sheet { class XFormulaTokens; }
+    namespace sheet { class XArrayFormulaTokens; }
+} } }
+
+namespace oox {
+namespace xls {
+
+// ============================================================================
+
+class FormulaContext
+{
+public:
+    virtual bool        setBaseAddress( ::com::sun::star::table::CellAddress& rBaseAddress ) const = 0;
+    virtual void        setTokens( const ApiTokenSequence& rTokens ) const = 0;
+
+protected:
+    virtual             ~FormulaContext();
+};
+
+// ----------------------------------------------------------------------------
+
+class NameFormulaContext : public FormulaContext
+{
+public:
+    explicit            NameFormulaContext(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XFormulaTokens >& rxTokens );
+
+    virtual bool        setBaseAddress( ::com::sun::star::table::CellAddress& rBaseAddress ) const;
+    virtual void        setTokens( const ApiTokenSequence& rTokens ) const;
+
+private:
+    ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XFormulaTokens > mxTokens;
+};
+
+// ----------------------------------------------------------------------------
+
+class CellFormulaContext : public NameFormulaContext
+{
+public:
+    explicit            CellFormulaContext(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XFormulaTokens >& rxTokens,
+                            const ::com::sun::star::table::CellAddress& rCellPos );
+
+    virtual bool        setBaseAddress( ::com::sun::star::table::CellAddress& rBaseAddress ) const;
+
+private:
+    ::com::sun::star::table::CellAddress maCellPos;
+};
+
+// ----------------------------------------------------------------------------
+
+class ArrayFormulaContext : public FormulaContext
+{
+public:
+    explicit            ArrayFormulaContext(
+                            const ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XArrayFormulaTokens >& rxTokens,
+                            const ::com::sun::star::table::CellRangeAddress& rArrayRange );
+
+    virtual bool        setBaseAddress( ::com::sun::star::table::CellAddress& rBaseAddress ) const;
+    virtual void        setTokens( const ApiTokenSequence& rTokens ) const;
+
+private:
+    ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XArrayFormulaTokens > mxTokens;
+    ::com::sun::star::table::CellRangeAddress maArrayRange;
+};
+
+// ============================================================================
+
+class FormulaParserImpl;
+
+/** Import formula parser for OOX and BIFF filters.
+
+    This class implements formula import for the OOX and BIFF filter. One
+    instance is contained in the global filter data to prevent construction and
+    destruction of internal buffers for every imported formula.
+ */
+class FormulaParser : public FormulaProcessorBase
+{
+public:
+    explicit            FormulaParser( const GlobalDataHelper& rGlobalData );
+    virtual             ~FormulaParser();
+
+    /** Converts an XML formula string. */
+    void                importFormula(
+                            const FormulaContext& rContext,
+                            const ::rtl::OUString& rFormulaString ) const;
+
+    /** Imports and converts a BIFF token array from the passed stream. */
+    void                importFormula(
+                            const FormulaContext& rContext,
+                            BiffInputStream& rStrm, sal_uInt16 nFmlaSize ) const;
+
+    /** Imports and converts a BIFF token array from the passed stream,
+        reads formula size (1 byte in BIFF2, 2 bytes otherwise) first. */
+    void                importFormula(
+                            const FormulaContext& rContext,
+                            BiffInputStream& rStrm ) const;
+
+    /** Converts the passed BIFF error code to a similar formula. */
+    void                convertErrorToFormula(
+                            const FormulaContext& rContext,
+                            sal_uInt8 nErrorCode ) const;
+
+private:
+    ::std::auto_ptr< FormulaParserImpl > mxImpl;
+};
+
+// ============================================================================
+
+} // namespace xls
+} // namespace oox
+
+#endif
+
