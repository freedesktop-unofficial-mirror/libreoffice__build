? sc/sc.vpj
? sc/sc_project.sca
Index: sc/inc/ViewSettingsSequenceDefines.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/ViewSettingsSequenceDefines.hxx,v
retrieving revision 1.5
retrieving revision 1.5.402.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.5 -r1.5.402.2
--- sc/inc/ViewSettingsSequenceDefines.hxx	8 Sep 2005 17:20:50 -0000	1.5
+++ sc/inc/ViewSettingsSequenceDefines.hxx	11 Jun 2007 08:57:11 -0000	1.5.402.2
@@ -89,15 +89,19 @@
 #define SC_VERTICALSPLITMODE				"VerticalSplitMode"
 #define SC_HORIZONTALSPLITPOSITION			"HorizontalSplitPosition"
 #define SC_VERTICALSPLITPOSITION			"VerticalSplitPosition"
+#define SC_HORIZONTALSPLITPOSITION_TWIPS    "HorizontalSplitPositionTwips"
+#define SC_VERTICALSPLITPOSITION_TWIPS      "VerticalSplitPositionTwips"
 #define SC_ACTIVESPLITRANGE					"ActiveSplitRange"
 #define SC_POSITIONLEFT						"PositionLeft"
 #define SC_POSITIONRIGHT					"PositionRight"
 #define SC_POSITIONTOP						"PositionTop"
 #define SC_POSITIONBOTTOM					"PositionBottom"
+#define SC_TABLESELECTED                    "TableSelected"
 
 #define SC_TABLES							"Tables"
 #define SC_ACTIVETABLE						"ActiveTable"
 #define SC_HORIZONTALSCROLLBARWIDTH			"HorizontalScrollbarWidth"
+#define SC_RELHORIZONTALTABBARWIDTH         "RelativeHorizontalTabbarWidth"
 #define SC_ZOOMTYPE							"ZoomType"
 #define SC_ZOOMVALUE						"ZoomValue"
 #define SC_PAGEVIEWZOOMVALUE				"PageViewZoomValue"
Index: sc/inc/cellsuno.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/cellsuno.hxx,v
retrieving revision 1.29
retrieving revision 1.27.18.4
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.29 -r1.27.18.4
--- sc/inc/cellsuno.hxx	22 May 2007 19:37:43 -0000	1.29
+++ sc/inc/cellsuno.hxx	28 Jun 2007 15:47:22 -0000	1.27.18.4
@@ -131,6 +131,12 @@
 #ifndef _COM_SUN_STAR_SHEET_XMULTIPLEOPERATION_HPP_
 #include <com/sun/star/sheet/XMultipleOperation.hpp>
 #endif
+#ifndef _COM_SUN_STAR_SHEET_XFORMULATOKENS_HPP_
+#include <com/sun/star/sheet/XFormulaTokens.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SHEET_XARRAYFORMULATOKENS_HPP_
+#include <com/sun/star/sheet/XArrayFormulaTokens.hpp>
+#endif
 #ifndef _COM_SUN_STAR_SHEET_XCELLADDRESSABLE_HPP_
 #include <com/sun/star/sheet/XCellAddressable.hpp>
 #endif
@@ -709,6 +715,7 @@
 					   public com::sun::star::sheet::XCellRangeAddressable,
 					   public com::sun::star::sheet::XSheetCellRange,
 					   public com::sun::star::sheet::XArrayFormulaRange,
+					   public com::sun::star::sheet::XArrayFormulaTokens,
 					   public com::sun::star::sheet::XCellRangeData,
 					   public com::sun::star::sheet::XCellRangeFormula,
 					   public com::sun::star::sheet::XMultipleOperation,
@@ -776,6 +783,13 @@
 	virtual void SAL_CALL 	setArrayFormula( const ::rtl::OUString& aFormula )
 								throw(::com::sun::star::uno::RuntimeException);
 
+                            // XArrayFormulaTokens
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FormulaToken > SAL_CALL getArrayTokens()
+                                throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   setArrayTokens( const ::com::sun::star::uno::Sequence<
+                                    ::com::sun::star::sheet::FormulaToken >& aTokens )
+                                throw (::com::sun::star::uno::RuntimeException);
+
 							// XCellRangeData
 	virtual ::com::sun::star::uno::Sequence< ::com::sun::star::uno::Sequence<
 							::com::sun::star::uno::Any > > SAL_CALL getDataArray()
@@ -916,6 +930,7 @@
 				  public com::sun::star::text::XText,
 				  public com::sun::star::container::XEnumerationAccess,
 				  public com::sun::star::table::XCell,
+                  public com::sun::star::sheet::XFormulaTokens,
 				  public com::sun::star::sheet::XCellAddressable,
 				  public com::sun::star::sheet::XSheetAnnotationAnchor,
 				  public com::sun::star::text::XTextFieldsSupplier,
@@ -1027,6 +1042,13 @@
 								throw(::com::sun::star::uno::RuntimeException);
 	virtual sal_Int32 SAL_CALL getError() throw(::com::sun::star::uno::RuntimeException);
 
+                            // XFormulaTokens
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FormulaToken > SAL_CALL getTokens()
+                                throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   setTokens( const ::com::sun::star::uno::Sequence<
+                                    ::com::sun::star::sheet::FormulaToken >& aTokens )
+                                throw (::com::sun::star::uno::RuntimeException);
+
 							// XCellAddressable
 	virtual ::com::sun::star::table::CellAddress SAL_CALL getCellAddress()
 								throw(::com::sun::star::uno::RuntimeException);
Index: sc/inc/document.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/document.hxx,v
retrieving revision 1.100
retrieving revision 1.97.44.3
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.100 -r1.97.44.3
--- sc/inc/document.hxx	22 May 2007 19:38:56 -0000	1.100
+++ sc/inc/document.hxx	29 May 2007 12:17:44 -0000	1.97.44.3
@@ -413,6 +413,7 @@
 
     mutable BOOL        bStyleSheetUsageInvalid;
 
+    BOOL                bUndoEnabled;
 
 	inline BOOL 		RowHidden( SCROW nRow, SCTAB nTab );		// FillInfo
 
@@ -902,7 +903,8 @@
 	BOOL			IsClipOrUndo() const 						{ return bIsClip || bIsUndo; }
 	BOOL			IsUndo() const								{ return bIsUndo; }
 	BOOL			IsClipboard() const 						{ return bIsClip; }
-	BOOL			IsUndoEnabled() const						{ return !bImportingXML; }
+	BOOL			IsUndoEnabled() const						{ return bUndoEnabled; }
+    void            EnableUndo( BOOL bVal ) { bUndoEnabled = bVal; }
 	void			ResetClip( ScDocument* pSourceDoc, const ScMarkData* pMarks );
 	void			ResetClip( ScDocument* pSourceDoc, SCTAB nTab );
 	void			SetCutMode( BOOL bCut );
Index: sc/inc/nameuno.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/nameuno.hxx,v
retrieving revision 1.4
retrieving revision 1.4.402.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.4 -r1.4.402.1
--- sc/inc/nameuno.hxx	8 Sep 2005 17:45:29 -0000	1.4
+++ sc/inc/nameuno.hxx	29 Jun 2007 14:26:32 -0000	1.4.402.1
@@ -56,6 +56,9 @@
 #ifndef _COM_SUN_STAR_SHEET_XNAMEDRANGE_HPP_
 #include <com/sun/star/sheet/XNamedRange.hpp>
 #endif
+#ifndef _COM_SUN_STAR_SHEET_XFORMULATOKENS_HPP_
+#include <com/sun/star/sheet/XFormulaTokens.hpp>
+#endif
 #ifndef _COM_SUN_STAR_SHEET_XNAMEDRANGES_HPP_
 #include <com/sun/star/sheet/XNamedRanges.hpp>
 #endif
@@ -81,13 +84,18 @@
 #ifndef _CPPUHELPER_IMPLBASE4_HXX_
 #include <cppuhelper/implbase4.hxx>
 #endif
+#ifndef _CPPUHELPER_IMPLBASE5_HXX_
+#include <cppuhelper/implbase5.hxx>
+#endif
 
 class ScDocShell;
 class ScRangeData;
+class ScTokenArray;
 
 
-class ScNamedRangeObj : public ::cppu::WeakImplHelper4<
+class ScNamedRangeObj : public ::cppu::WeakImplHelper5<
 							::com::sun::star::sheet::XNamedRange,
+                            ::com::sun::star::sheet::XFormulaTokens,
 							::com::sun::star::sheet::XCellRangeReferrer,
 							::com::sun::star::beans::XPropertySet,
 							::com::sun::star::lang::XServiceInfo >,
@@ -99,7 +107,8 @@
 
 private:
 	ScRangeData*			GetRangeData_Impl();
-	void					Modify_Impl( const String* pNewName, const String* pNewContent,
+	void					Modify_Impl( const String* pNewName,
+                                        const ScTokenArray* pNewTokens, const String* pNewContent,
 										const ScAddress* pNewPos, const sal_uInt16* pNewType );
 
 public:
@@ -120,6 +129,13 @@
 	virtual sal_Int32		SAL_CALL getType() throw(::com::sun::star::uno::RuntimeException);
 	virtual void SAL_CALL	setType( sal_Int32 nType ) throw(::com::sun::star::uno::RuntimeException);
 
+                            // XFormulaTokens
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FormulaToken > SAL_CALL getTokens()
+                                throw (::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   setTokens( const ::com::sun::star::uno::Sequence<
+                                    ::com::sun::star::sheet::FormulaToken >& aTokens )
+                                throw (::com::sun::star::uno::RuntimeException);
+
 							// XNamed
 	virtual ::rtl::OUString SAL_CALL getName() throw(::com::sun::star::uno::RuntimeException);
 	virtual void SAL_CALL	setName( const ::rtl::OUString& aName )
Index: sc/inc/servuno.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/servuno.hxx,v
retrieving revision 1.12
retrieving revision 1.12.402.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.12 -r1.12.402.1
--- sc/inc/servuno.hxx	8 Sep 2005 17:56:51 -0000	1.12
+++ sc/inc/servuno.hxx	23 Mar 2007 15:52:50 -0000	1.12.402.1
@@ -100,7 +100,9 @@
 // BM
 #define SC_SERVICE_CHDATAPROV   37
 
-#define SC_SERVICE_COUNT        38
+#define SC_SERVICE_FORMULAPARS  38
+
+#define SC_SERVICE_COUNT        39
 #define SC_SERVICE_INVALID		USHRT_MAX
 
 
Index: sc/inc/tokenuno.hxx
===================================================================
RCS file: sc/inc/tokenuno.hxx
diff -N sc/inc/tokenuno.hxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sc/inc/tokenuno.hxx	22 Jun 2007 18:32:58 -0000	1.1.2.3
@@ -0,0 +1,167 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: tokenuno.hxx,v $
+ *
+ *  $Revision: 1.1.2.3 $
+ *
+ *  last change: $Author: nn $ $Date: 2007/06/22 18:32:58 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef SC_TOKENUNO_HXX
+#define SC_TOKENUNO_HXX
+
+#ifndef _SFXLSTNER_HXX
+#include <svtools/lstner.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_SHEET_FORMULATOKEN_HPP_
+#include <com/sun/star/sheet/FormulaToken.hpp>
+#endif
+#ifndef _COM_SUN_STAR_UNO_SEQUENCE_HXX_
+#include <com/sun/star/uno/Sequence.hxx>
+#endif
+
+#ifndef _COM_SUN_STAR_LANG_XSERVICEINFO_HPP_
+#include <com/sun/star/lang/XServiceInfo.hpp>
+#endif
+#ifndef _COM_SUN_STAR_BEANS_XPROPERTYSET_HPP_
+#include <com/sun/star/beans/XPropertySet.hpp>
+#endif
+#ifndef _COM_SUN_STAR_SHEET_XFORMULAPARSER_HPP_
+#include <com/sun/star/sheet/XFormulaParser.hpp>
+#endif
+
+#ifndef _CPPUHELPER_IMPLBASE3_HXX_
+#include <cppuhelper/implbase3.hxx>
+#endif
+
+#ifndef SC_ADDRESS_HXX
+#include "address.hxx"
+#endif
+
+class ScTokenArray;
+class ScDocShell;
+class ScCompiler;
+
+
+class ScTokenConversion
+{
+public:
+    static bool ConvertToTokenArray(
+                        ScTokenArray& rTokenArray,
+                        const com::sun::star::uno::Sequence< com::sun::star::sheet::FormulaToken >& rSequence );
+    static bool ConvertToTokenSequence(
+                        com::sun::star::uno::Sequence< com::sun::star::sheet::FormulaToken >& rSequence,
+                        const ScTokenArray& rTokenArray );
+};
+
+
+class ScFormulaParserObj : public ::cppu::WeakImplHelper3<
+                            ::com::sun::star::sheet::XFormulaParser,
+                            ::com::sun::star::beans::XPropertySet,
+                            ::com::sun::star::lang::XServiceInfo >,
+                        public SfxListener
+{
+private:
+    ScDocShell*         mpDocShell;
+    ScAddress           maRefPos;
+    rtl::OUString       maParamSep;
+    bool                mbEnglish;
+    bool                mbR1C1;
+    bool                mbComp3D;
+    bool                mbIgnoreSpaces;
+
+    void                    SetCompilerFlags( ScCompiler& rCompiler ) const;
+
+public:
+                            ScFormulaParserObj(ScDocShell* pDocSh);
+    virtual                 ~ScFormulaParserObj();
+
+    virtual void            Notify( SfxBroadcaster& rBC, const SfxHint& rHint );
+
+                            // XFormulaParser
+    virtual ::com::sun::star::uno::Sequence< ::com::sun::star::sheet::FormulaToken > SAL_CALL parseFormula(
+                                    const ::rtl::OUString& aFormula )
+                                throw (::com::sun::star::uno::RuntimeException);
+    virtual ::rtl::OUString SAL_CALL printFormula( const ::com::sun::star::uno::Sequence<
+                                    ::com::sun::star::sheet::FormulaToken >& aTokens )
+                                throw (::com::sun::star::uno::RuntimeException);
+
+                            // XPropertySet
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySetInfo >
+                            SAL_CALL getPropertySetInfo()
+                                throw(::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   setPropertyValue( const ::rtl::OUString& aPropertyName,
+                                    const ::com::sun::star::uno::Any& aValue )
+                                throw(::com::sun::star::beans::UnknownPropertyException,
+                                    ::com::sun::star::beans::PropertyVetoException,
+                                    ::com::sun::star::lang::IllegalArgumentException,
+                                    ::com::sun::star::lang::WrappedTargetException,
+                                    ::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Any SAL_CALL getPropertyValue(
+                                    const ::rtl::OUString& PropertyName )
+                                throw(::com::sun::star::beans::UnknownPropertyException,
+                                    ::com::sun::star::lang::WrappedTargetException,
+                                    ::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   addPropertyChangeListener( const ::rtl::OUString& aPropertyName,
+                                    const ::com::sun::star::uno::Reference<
+                                        ::com::sun::star::beans::XPropertyChangeListener >& xListener )
+                                throw(::com::sun::star::beans::UnknownPropertyException,
+                                    ::com::sun::star::lang::WrappedTargetException,
+                                    ::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   removePropertyChangeListener( const ::rtl::OUString& aPropertyName,
+                                    const ::com::sun::star::uno::Reference<
+                                        ::com::sun::star::beans::XPropertyChangeListener >& aListener )
+                                throw(::com::sun::star::beans::UnknownPropertyException,
+                                    ::com::sun::star::lang::WrappedTargetException,
+                                    ::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   addVetoableChangeListener( const ::rtl::OUString& PropertyName,
+                                    const ::com::sun::star::uno::Reference<
+                                        ::com::sun::star::beans::XVetoableChangeListener >& aListener )
+                                throw(::com::sun::star::beans::UnknownPropertyException,
+                                    ::com::sun::star::lang::WrappedTargetException,
+                                    ::com::sun::star::uno::RuntimeException);
+    virtual void SAL_CALL   removeVetoableChangeListener( const ::rtl::OUString& PropertyName,
+                                    const ::com::sun::star::uno::Reference<
+                                        ::com::sun::star::beans::XVetoableChangeListener >& aListener )
+                                throw(::com::sun::star::beans::UnknownPropertyException,
+                                    ::com::sun::star::lang::WrappedTargetException,
+                                    ::com::sun::star::uno::RuntimeException);
+
+                            // XServiceInfo
+    virtual ::rtl::OUString SAL_CALL getImplementationName()
+                                throw(::com::sun::star::uno::RuntimeException);
+    virtual sal_Bool SAL_CALL supportsService( const ::rtl::OUString& ServiceName )
+                                throw(::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames()
+                                throw(::com::sun::star::uno::RuntimeException);
+};
+
+#endif
+
Index: sc/inc/unonames.hxx
===================================================================
RCS file: /cvs/sc/sc/inc/unonames.hxx,v
retrieving revision 1.73
retrieving revision 1.71.250.8
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.73 -r1.71.250.8
--- sc/inc/unonames.hxx	22 May 2007 19:39:55 -0000	1.73
+++ sc/inc/unonames.hxx	22 Jun 2007 18:32:58 -0000	1.71.250.8
@@ -42,6 +42,9 @@
 #define SC_SERVICENAME_LISTSOURCE   "com.sun.star.table.CellRangeListSource"
 #define SC_SERVICENAME_CELLADDRESS  "com.sun.star.table.CellAddressConversion"
 #define SC_SERVICENAME_RANGEADDRESS "com.sun.star.table.CellRangeAddressConversion"
+
+#define SC_SERVICENAME_FORMULAPARS      "com.sun.star.sheet.FormulaParser"
+
 #define SC_SERVICENAME_CHDATAPROV   "com.sun.star.chart2.data.DataProvider"
 #define SC_SERVICENAME_CHRANGEHILIGHT "com.sun.star.chart2.data.RangeHighlightListener"
 
@@ -471,6 +474,9 @@
 #define SC_UNO_DIALOGLIBRARIES      "DialogLibraries"
 #define SC_UNO_RUNTIMEUID           "RuntimeUID"
 #define SC_UNO_HASVALIDSIGNATURES   "HasValidSignatures"
+#define SC_UNO_ISLOADED             "IsLoaded"
+#define SC_UNO_ISUNDOENABLED        "IsUndoEnabled"
+#define SC_UNO_REFERENCEDEVICE      "ReferenceDevice"
 
 //	document properties from FormModel
 #define SC_UNO_APPLYFMDES			"ApplyFormDesignMode"
@@ -582,6 +588,14 @@
 #define SC_UNO_LOADREADONLY			"LoadReadonly"
 // <--
 
+// FormulaParser
+#define SC_UNO_REFERENCEPOS         "ReferencePosition"
+#define SC_UNO_COMPILEENGLISH       "CompileEnglish"
+#define SC_UNO_R1C1NOTATION         "R1C1Notation"
+#define SC_UNO_COMPATIBILITY3D      "Compatibility3DNotation"
+#define SC_UNO_IGNORELEADING        "IgnoreLeadingSpaces"
+#define SC_UNO_PARAMETERSEP         "ParameterSeparator"
+
 // Chart2
 #define SC_UNONAME_ISHIDDEN         "IsHidden"
 #define SC_UNONAME_ROLE             "Role"
Index: sc/prj/build.lst
===================================================================
RCS file: /cvs/sc/sc/prj/build.lst,v
retrieving revision 1.16
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.16 build.lst
--- sc/prj/build.lst	22 May 2007 19:40:29 -0000	1.16
+++ sc/prj/build.lst	11 Jul 2007 19:44:24 -0000
@@ -1,4 +1,4 @@
-sc	sc	:	oovbaapi svx scsolver stoc uui BOOST:boost NULL
+sc	sc	:	oox oovbaapi svx scsolver stoc uui BOOST:boost NULL
 sc	sc										usr1	-	all	sc_mkout NULL
 sc	sc\inc									nmake	-	all	sc_inc NULL
 sc	sc\prj									get		-	all	sc_prj NULL
Index: sc/source/core/data/documen2.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/data/documen2.cxx,v
retrieving revision 1.64
retrieving revision 1.62.18.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.64 -r1.62.18.2
--- sc/source/core/data/documen2.cxx	22 May 2007 19:41:42 -0000	1.64
+++ sc/source/core/data/documen2.cxx	29 May 2007 12:28:07 -0000	1.62.18.2
@@ -378,7 +378,8 @@
         bInUnoBroadcast( FALSE ),
         bInUnoListenerCall( FALSE ),
         eAddrConv( ScAddress::CONV_OOO ),
-        bStyleSheetUsageInvalid( TRUE )
+        bStyleSheetUsageInvalid( TRUE ),
+        bUndoEnabled( TRUE )
 {
 	eSrcSet = gsl_getSystemTextEncoding();
 
Index: sc/source/core/tool/address.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/address.cxx,v
retrieving revision 1.9
retrieving revision 1.9.18.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.9 -r1.9.18.1
--- sc/source/core/tool/address.cxx	27 Feb 2007 12:11:39 -0000	1.9
+++ sc/source/core/tool/address.cxx	27 Jun 2007 15:40:35 -0000	1.9.18.1
@@ -272,7 +272,12 @@
             nFlags |= SCA_VALID_TAB2 | SCA_TAB2_3D | SCA_TAB2_ABSOLUTE;
         }
         else
-            r.aEnd.SetTab( 0 );
+        {
+            // If only one sheet is given, the full reference is still valid,
+            // only the second 3D flag is not set.
+            nFlags |= SCA_VALID_TAB2 | SCA_TAB2_ABSOLUTE;
+            r.aEnd.SetTab( r.aStart.Tab() );
+        }
 
         if( *p++ != '!' )
             return start;   // syntax error
@@ -616,9 +621,14 @@
     }
 
     // prepare as if it's a singleton, in case we want to fall back */
-    r.aEnd = r.aStart;
+    r.aEnd.SetCol( r.aStart.Col() );
+    r.aEnd.SetRow( r.aStart.Row() );    // don't overwrite sheet number as parsed in lcl_ScRange_Parse_XL_Header
     if( *tmp2 != ':' )
+    {
+        if ( !bOnlyAcceptSingle )
+            nFlags &= ~SCA_VALID;   // when looking for a double ref, a single-cell ref must not be accepted
         return nFlags;
+    }
 
     p = tmp2;
     tmp1 = lcl_a1_get_col( p+1, &r.aEnd, &nFlags2 );
Index: sc/source/core/tool/compiler.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/compiler.cxx,v
retrieving revision 1.68
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.68 compiler.cxx
--- sc/source/core/tool/compiler.cxx	27 Feb 2007 12:13:57 -0000	1.68
+++ sc/source/core/tool/compiler.cxx	11 Jul 2007 19:44:25 -0000
@@ -750,7 +750,7 @@
             }
 
             rBuf.append( aStartTabName );
-            if( !bSingleRef && aStartTabName != aEndTabName )
+            if( !bSingleRef && rRef.Ref2.IsFlag3D() && aStartTabName != aEndTabName )
             {
                 rBuf.append( sal_Unicode( ':' ) );
                 rBuf.append( aEndTabName );
Index: sc/source/core/tool/interpr2.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/interpr2.cxx,v
retrieving revision 1.31
retrieving revision 1.30.18.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.31 -r1.30.18.1
Index: sc/source/core/tool/interpr4.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/interpr4.cxx,v
retrieving revision 1.47
retrieving revision 1.47.14.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.47 -r1.47.14.1
--- sc/source/core/tool/interpr4.cxx	15 May 2007 12:53:48 -0000	1.47
+++ sc/source/core/tool/interpr4.cxx	3 Jul 2007 15:53:00 -0000	1.47.14.1
@@ -1088,6 +1088,7 @@
                 case svDouble:
                 case svString:
                 case svSingleRef:
+                case svMissing:
                     // nothing to do
                 break;
                 case svMatrix:
Index: sc/source/core/tool/interpr5.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/interpr5.cxx,v
retrieving revision 1.23
retrieving revision 1.22.18.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.23 -r1.22.18.1
Index: sc/source/core/tool/parclass.cxx
===================================================================
RCS file: /cvs/sc/sc/source/core/tool/parclass.cxx,v
retrieving revision 1.8
retrieving revision 1.7.18.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.8 -r1.7.18.1
Index: sc/source/ui/docshell/docfunc.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/docshell/docfunc.cxx,v
retrieving revision 1.65
retrieving revision 1.65.16.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.65 -r1.65.16.1
--- sc/source/ui/docshell/docfunc.cxx	10 May 2007 16:55:25 -0000	1.65
+++ sc/source/ui/docshell/docfunc.cxx	28 Jun 2007 15:47:34 -0000	1.65.16.1
@@ -2925,6 +2925,7 @@
 //------------------------------------------------------------------------
 
 BOOL ScDocFunc::EnterMatrix( const ScRange& rRange, const ScMarkData* pTabMark,
+                                const ScTokenArray* pTokenArray,
 								const String& rString, BOOL bApi, BOOL bEnglish )
 {
 	ScDocShellModificator aModificator( rDocShell );
@@ -2964,7 +2965,12 @@
 			pDoc->CopyToDocument( rRange, IDF_ALL, FALSE, pUndoDoc );
 		}
 
-		if ( pDoc->IsImportingXML() )
+        // use TokenArray if given, string (and flags) otherwise
+        if ( pTokenArray )
+        {
+            pDoc->InsertMatrixFormula(nStartCol,nStartRow,nEndCol,nEndRow,aMark,EMPTY_STRING,pTokenArray);
+        }
+        else if ( pDoc->IsImportingXML() )
 		{
 			ScTokenArray* pCode = lcl_ScDocFunc_CreateTokenArrayXML( rString );
 			pDoc->InsertMatrixFormula(nStartCol,nStartRow,nEndCol,nEndRow,aMark,EMPTY_STRING,pCode);
@@ -3915,11 +3921,11 @@
 
 		if ( DeleteContents( aMark, IDF_CONTENTS, TRUE, bApi ) )
 		{
-			bRet = EnterMatrix( aNewRange, &aMark, aFormula, bApi, FALSE );
+            bRet = EnterMatrix( aNewRange, &aMark, NULL, aFormula, bApi, FALSE );
 			if (!bRet)
 			{
 				//	versuchen, alten Zustand wiederherzustellen
-				EnterMatrix( rOldRange, &aMark, aFormula, bApi, FALSE );
+                EnterMatrix( rOldRange, &aMark, NULL, aFormula, bApi, FALSE );
 			}
 		}
 
Index: sc/source/ui/docshell/docsh.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/docshell/docsh.cxx,v
retrieving revision 1.90
retrieving revision 1.89.16.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.90 -r1.89.16.2
--- sc/source/ui/docshell/docsh.cxx	10 May 2007 16:55:37 -0000	1.90
+++ sc/source/ui/docshell/docsh.cxx	29 May 2007 14:19:13 -0000	1.89.16.2
@@ -535,6 +535,7 @@
 	pModificator = new ScDocShellModificator( *this );
 
     aDocument.SetImportingXML( TRUE );
+    aDocument.EnableUndo( FALSE );
 	// prevent unnecessary broadcasts and "half way listeners"
 	aDocument.SetInsertingFromOtherDoc( TRUE );
 
@@ -614,6 +615,7 @@
 		aDocument.SetInsertingFromOtherDoc( FALSE );
 
 	aDocument.SetImportingXML( FALSE );
+    aDocument.EnableUndo( TRUE );
     bIsEmpty = FALSE;
 
     if (pModificator)
Index: sc/source/ui/docshell/docsh2.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/docshell/docsh2.cxx,v
retrieving revision 1.23
retrieving revision 1.22.18.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.23 -r1.22.18.2
--- sc/source/ui/docshell/docsh2.cxx	10 May 2007 16:55:49 -0000	1.23
+++ sc/source/ui/docshell/docsh2.cxx	29 May 2007 14:19:39 -0000	1.22.18.2
@@ -122,9 +122,9 @@
 }
 
 
-void ScDocShell::ResetEmpty()
+void ScDocShell::SetEmpty(BOOL bSet)
 {
-	bIsEmpty = FALSE;
+	bIsEmpty = bSet;
 }
 
 //------------------------------------------------------------------
Index: sc/source/ui/docshell/docsh3.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/docshell/docsh3.cxx,v
retrieving revision 1.29
retrieving revision 1.29.18.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.29 -r1.29.18.1
--- sc/source/ui/docshell/docsh3.cxx	27 Feb 2007 13:07:24 -0000	1.29
+++ sc/source/ui/docshell/docsh3.cxx	28 Jun 2007 15:47:35 -0000	1.29.18.1
@@ -953,7 +953,7 @@
 									aSourceRange.aEnd.SetRow( aPos.Row() + nRows - 1 );
 									aValue.Erase( 0, 1 );
 									aValue.Erase( aValue.Len()-1, 1 );
-									GetDocFunc().EnterMatrix( aSourceRange, NULL, aValue, FALSE, FALSE );
+                                    GetDocFunc().EnterMatrix( aSourceRange, NULL, NULL, aValue, FALSE, FALSE );
 								}
 								break;
 								case MM_REFERENCE :		// do nothing
Index: sc/source/ui/drawfunc/drawsh2.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/drawfunc/drawsh2.cxx,v
retrieving revision 1.23
retrieving revision 1.23.82.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.23 -r1.23.82.2
--- sc/source/ui/drawfunc/drawsh2.cxx	19 Dec 2006 17:33:56 -0000	1.23
+++ sc/source/ui/drawfunc/drawsh2.cxx	8 May 2007 16:53:35 -0000	1.23.82.2
@@ -67,6 +67,7 @@
 #include "viewdata.hxx"
 #include "sc.hrc"
 #include "tabvwsh.hxx"
+#include "document.hxx"
 
 
 #ifndef _SVDOOLE2_HXX
@@ -87,7 +88,12 @@
 	pViewData( pData )
 {
 	SetPool( &pViewData->GetScDrawView()->GetModel()->GetItemPool() );
-	SetUndoManager( pViewData->GetSfxDocShell()->GetUndoManager() );
+    SfxUndoManager* pMgr = pViewData->GetSfxDocShell()->GetUndoManager();
+    SetUndoManager( pMgr );
+    if ( !pViewData->GetDocument()->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 	SetHelpId( HID_SCSHELL_DRAWSH );
 	SetName(String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM("Drawing")));
 }
Index: sc/source/ui/drawfunc/drtxtob.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/drawfunc/drtxtob.cxx,v
retrieving revision 1.31
retrieving revision 1.29.18.4
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.31 -r1.29.18.4
--- sc/source/ui/drawfunc/drtxtob.cxx	10 May 2007 16:56:23 -0000	1.31
+++ sc/source/ui/drawfunc/drtxtob.cxx	29 May 2007 14:21:08 -0000	1.29.18.4
@@ -130,7 +130,12 @@
 	SetPool( pViewData->GetScDrawView()->GetDefaultAttr().GetPool() );
 
 	//	UndoManager wird beim Umschalten in den Edit-Modus umgesetzt...
-	SetUndoManager( pViewData->GetSfxDocShell()->GetUndoManager() );
+    SfxUndoManager* pMgr = pViewData->GetSfxDocShell()->GetUndoManager();
+    SetUndoManager( pMgr );
+    if ( !pViewData->GetDocument()->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 
 	SetHelpId( HID_SCSHELL_DRTXTOB );
 	SetName(String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM("DrawText")));
Index: sc/source/ui/inc/docfunc.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/docfunc.hxx,v
retrieving revision 1.15
retrieving revision 1.15.8.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.15 -r1.15.8.1
--- sc/source/ui/inc/docfunc.hxx	25 Apr 2007 15:58:57 -0000	1.15
+++ sc/source/ui/inc/docfunc.hxx	28 Jun 2007 15:47:35 -0000	1.15.8.1
@@ -57,6 +57,7 @@
 class ScRange;
 class ScRangeName;
 class ScBaseCell;
+class ScTokenArray;
 struct ScTabOpParam;
 
 
@@ -147,6 +148,7 @@
 									USHORT nFormatNo, BOOL bRecord, BOOL bApi );
 
 	BOOL			EnterMatrix( const ScRange& rRange, const ScMarkData* pTabMark,
+                                    const ScTokenArray* pTokenArray,
 									const String& rString, BOOL bApi, BOOL bEnglish );
 
 	BOOL			TabOp( const ScRange& rRange, const ScMarkData* pTabMark,
Index: sc/source/ui/inc/docsh.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/docsh.hxx,v
retrieving revision 1.42
retrieving revision 1.40.18.3
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.42 -r1.40.18.3
--- sc/source/ui/inc/docsh.hxx	22 May 2007 20:07:44 -0000	1.42
+++ sc/source/ui/inc/docsh.hxx	29 May 2007 14:32:18 -0000	1.40.18.3
@@ -363,7 +363,7 @@
 
 	void			SetInplace( BOOL bInplace );
 	BOOL			IsEmpty() const;
-	void			ResetEmpty();
+	void			SetEmpty(BOOL bSet);
 
 	BOOL			IsInUndo() const				{ return bIsInUndo; }
 	void			SetInUndo(BOOL bSet);
Index: sc/source/ui/inc/viewdata.hxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/inc/viewdata.hxx,v
retrieving revision 1.20
retrieving revision 1.20.18.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.20 -r1.20.18.2
--- sc/source/ui/inc/viewdata.hxx	27 Feb 2007 13:28:47 -0000	1.20
+++ sc/source/ui/inc/viewdata.hxx	11 Jun 2007 08:57:35 -0000	1.20.18.2
@@ -95,10 +95,10 @@
 class ScPatternAttr;
 class ScRangeListRef;
 class ScExtDocOptions;
+class ScViewData;
 
 //--------------------------------------------------------------------------
 
-
 class ScViewDataTable							// Daten pro Tabelle
 {
 friend class ScViewData;
@@ -129,11 +129,15 @@
 	BOOL			bOldCurValid;				// "virtuelle" Cursorpos. bei zusammengefassten
 
 					ScViewDataTable();
-					ScViewDataTable( const ScViewDataTable& rDataTable );
 					~ScViewDataTable();
 
-	void			WriteUserDataSequence(com::sun::star::uno::Sequence <com::sun::star::beans::PropertyValue>& rSettings);
-	void			ReadUserDataSequence(const com::sun::star::uno::Sequence <com::sun::star::beans::PropertyValue>& rSettings);
+    void            WriteUserDataSequence(
+                        com::sun::star::uno::Sequence <com::sun::star::beans::PropertyValue>& rSettings,
+                        const ScViewData& rViewData, SCTAB nTab );
+
+    void            ReadUserDataSequence(
+                        const com::sun::star::uno::Sequence <com::sun::star::beans::PropertyValue>& rSettings,
+                        ScViewData& rViewData, SCTAB nTab );
 };
 
 // ---------------------------------------------------------------------------
Index: sc/source/ui/unoobj/cellsuno.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/unoobj/cellsuno.cxx,v
retrieving revision 1.103
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.103 cellsuno.cxx
--- sc/source/ui/unoobj/cellsuno.cxx	22 May 2007 20:10:54 -0000	1.103
+++ sc/source/ui/unoobj/cellsuno.cxx	11 Jul 2007 19:44:27 -0000
@@ -91,6 +91,7 @@
 #include "convuno.hxx"
 #include "srchuno.hxx"
 #include "targuno.hxx"
+#include "tokenuno.hxx"
 #include "docsh.hxx"
 #include "markdata.hxx"
 #include "patattr.hxx"
@@ -3086,8 +3087,8 @@
 					for (long nCol=0; nCol<nColCount; nCol++)
 					{
                         const ScAddress* pPos = pPosMap->GetPosition(
-                                static_cast<SCSIZE>(nCol),
-                                static_cast<SCSIZE>(nRow) );
+                                static_cast<SCCOL>(nCol),
+                                static_cast<SCROW>(nRow) );
 						if (pPos)
 						{
 							double fVal = pArray[nCol];
@@ -3223,7 +3224,7 @@
 					for (long nCol=0; nCol<nColCount; nCol++)
 					{
                         const ScAddress* pPos = pPosMap->GetColHeaderPosition(
-                                static_cast<SCSIZE>(nCol) );
+                                static_cast<SCCOL>(nCol) );
 						if (pPos)
 						{
 							String aStr(pArray[nCol]);
@@ -4799,6 +4800,7 @@
 	SC_QUERYINTERFACE( table::XCellRange )
 	SC_QUERYINTERFACE( sheet::XSheetCellRange )
 	SC_QUERYINTERFACE( sheet::XArrayFormulaRange )
+	SC_QUERYINTERFACE( sheet::XArrayFormulaTokens )
 	SC_QUERYINTERFACE( sheet::XCellRangeData )
 	SC_QUERYINTERFACE( sheet::XCellRangeFormula )
 	SC_QUERYINTERFACE( sheet::XMultipleOperation )
@@ -4836,24 +4838,25 @@
 		long nParentLen = aParentTypes.getLength();
 		const uno::Type* pParentPtr = aParentTypes.getConstArray();
 
-		aTypes.realloc( nParentLen + 16 );
+		aTypes.realloc( nParentLen + 17 );
 		uno::Type* pPtr = aTypes.getArray();
 		pPtr[nParentLen + 0] = getCppuType((const uno::Reference<sheet::XCellRangeAddressable>*)0);
 		pPtr[nParentLen + 1] = getCppuType((const uno::Reference<sheet::XSheetCellRange>*)0);
 		pPtr[nParentLen + 2] = getCppuType((const uno::Reference<sheet::XArrayFormulaRange>*)0);
-		pPtr[nParentLen + 3] = getCppuType((const uno::Reference<sheet::XCellRangeData>*)0);
-		pPtr[nParentLen + 4] = getCppuType((const uno::Reference<sheet::XCellRangeFormula>*)0);
-		pPtr[nParentLen + 5] = getCppuType((const uno::Reference<sheet::XMultipleOperation>*)0);
-		pPtr[nParentLen + 6] = getCppuType((const uno::Reference<util::XMergeable>*)0);
-		pPtr[nParentLen + 7] = getCppuType((const uno::Reference<sheet::XCellSeries>*)0);
-		pPtr[nParentLen + 8] = getCppuType((const uno::Reference<table::XAutoFormattable>*)0);
-		pPtr[nParentLen + 9] = getCppuType((const uno::Reference<util::XSortable>*)0);
-		pPtr[nParentLen +10] = getCppuType((const uno::Reference<sheet::XSheetFilterableEx>*)0);
-		pPtr[nParentLen +11] = getCppuType((const uno::Reference<sheet::XSubTotalCalculatable>*)0);
-		pPtr[nParentLen +12] = getCppuType((const uno::Reference<table::XColumnRowRange>*)0);
-		pPtr[nParentLen +13] = getCppuType((const uno::Reference<util::XImportable>*)0);
-		pPtr[nParentLen +14] = getCppuType((const uno::Reference<sheet::XCellFormatRangesSupplier>*)0);
-		pPtr[nParentLen +15] = getCppuType((const uno::Reference<sheet::XUniqueCellFormatRangesSupplier>*)0);
+		pPtr[nParentLen + 3] = getCppuType((const uno::Reference<sheet::XArrayFormulaTokens>*)0);
+		pPtr[nParentLen + 4] = getCppuType((const uno::Reference<sheet::XCellRangeData>*)0);
+		pPtr[nParentLen + 5] = getCppuType((const uno::Reference<sheet::XCellRangeFormula>*)0);
+		pPtr[nParentLen + 6] = getCppuType((const uno::Reference<sheet::XMultipleOperation>*)0);
+		pPtr[nParentLen + 7] = getCppuType((const uno::Reference<util::XMergeable>*)0);
+		pPtr[nParentLen + 8] = getCppuType((const uno::Reference<sheet::XCellSeries>*)0);
+		pPtr[nParentLen + 9] = getCppuType((const uno::Reference<table::XAutoFormattable>*)0);
+		pPtr[nParentLen +10] = getCppuType((const uno::Reference<util::XSortable>*)0);
+		pPtr[nParentLen +11] = getCppuType((const uno::Reference<sheet::XSheetFilterableEx>*)0);
+		pPtr[nParentLen +12] = getCppuType((const uno::Reference<sheet::XSubTotalCalculatable>*)0);
+		pPtr[nParentLen +13] = getCppuType((const uno::Reference<table::XColumnRowRange>*)0);
+		pPtr[nParentLen +14] = getCppuType((const uno::Reference<util::XImportable>*)0);
+		pPtr[nParentLen +15] = getCppuType((const uno::Reference<sheet::XCellFormatRangesSupplier>*)0);
+		pPtr[nParentLen +16] = getCppuType((const uno::Reference<sheet::XUniqueCellFormatRangesSupplier>*)0);
 
 		for (long i=0; i<nParentLen; i++)
 			pPtr[i] = pParentPtr[i];				// parent types first
@@ -5102,7 +5105,7 @@
 				throw uno::RuntimeException();
 			}
 
-			aFunc.EnterMatrix( aRange, NULL, aString, TRUE, TRUE );
+            aFunc.EnterMatrix( aRange, NULL, NULL, aString, TRUE, TRUE );
 		}
 		else
 		{
@@ -5115,6 +5118,72 @@
 	}
 }
 
+// XArrayFormulaTokens
+
+uno::Sequence<sheet::FormulaToken> SAL_CALL ScCellRangeObj::getArrayTokens() throw(uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+
+    // same cell logic as in getArrayFormula
+
+    uno::Sequence<sheet::FormulaToken> aSequence;
+    ScDocShell* pDocSh = GetDocShell();
+    if ( pDocSh )
+    {
+        ScDocument* pDoc = pDocSh->GetDocument();
+        const ScBaseCell* pCell1 = pDoc->GetCell( aRange.aStart );
+        const ScBaseCell* pCell2 = pDoc->GetCell( aRange.aEnd );
+        if ( pCell1 && pCell2 && pCell1->GetCellType() == CELLTYPE_FORMULA &&
+                                 pCell2->GetCellType() == CELLTYPE_FORMULA )
+        {
+            const ScFormulaCell* pFCell1 = (const ScFormulaCell*)pCell1;
+            const ScFormulaCell* pFCell2 = (const ScFormulaCell*)pCell2;
+            ScAddress aStart1;
+            ScAddress aStart2;
+            if ( pFCell1->GetMatrixOrigin( aStart1 ) && pFCell2->GetMatrixOrigin( aStart2 ) )
+            {
+                if ( aStart1 == aStart2 )
+                {
+                    ScTokenArray* pTokenArray = pFCell1->GetCode();
+                    if ( pTokenArray )
+                        (void)ScTokenConversion::ConvertToTokenSequence( aSequence, *pTokenArray );
+                }
+            }
+        }
+    }
+    return aSequence;
+}
+
+void SAL_CALL ScCellRangeObj::setArrayTokens( const uno::Sequence<sheet::FormulaToken>& rTokens ) throw(uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    ScDocShell* pDocSh = GetDocShell();
+    if ( pDocSh )
+    {
+        ScDocFunc aFunc(*pDocSh);
+        if ( rTokens.getLength() )
+        {
+            if ( ScTableSheetObj::getImplementation( (cppu::OWeakObject*)this ) )
+            {
+                throw uno::RuntimeException();
+            }
+
+            ScTokenArray aTokenArray;
+            (void)ScTokenConversion::ConvertToTokenArray( aTokenArray, rTokens );
+
+            aFunc.EnterMatrix( aRange, NULL, &aTokenArray, EMPTY_STRING, TRUE, TRUE );
+        }
+        else
+        {
+            //  empty sequence -> erase array formula
+            ScMarkData aMark;
+            aMark.SetMarkArea( aRange );
+            aMark.SelectTable( aRange.aStart.Tab(), TRUE );
+            aFunc.DeleteContents( aMark, IDF_CONTENTS, TRUE, TRUE );
+        }
+    }
+}
+
 // XCellRangeData
 
 uno::Sequence< uno::Sequence<uno::Any> > SAL_CALL ScCellRangeObj::getDataArray()
@@ -6022,6 +6091,7 @@
 uno::Any SAL_CALL ScCellObj::queryInterface( const uno::Type& rType ) throw(uno::RuntimeException)
 {
 	SC_QUERYINTERFACE( table::XCell )
+    SC_QUERYINTERFACE( sheet::XFormulaTokens )
 	SC_QUERYINTERFACE( sheet::XCellAddressable )
 	SC_QUERYINTERFACE( text::XText )
 	SC_QUERYINTERFACE( text::XSimpleText )
@@ -6054,7 +6124,7 @@
 		long nParentLen = aParentTypes.getLength();
 		const uno::Type* pParentPtr = aParentTypes.getConstArray();
 
-		aTypes.realloc( nParentLen + 7 );
+		aTypes.realloc( nParentLen + 8 );
 		uno::Type* pPtr = aTypes.getArray();
 		pPtr[nParentLen + 0] = getCppuType((const uno::Reference<table::XCell>*)0);
 		pPtr[nParentLen + 1] = getCppuType((const uno::Reference<sheet::XCellAddressable>*)0);
@@ -6063,6 +6133,7 @@
 		pPtr[nParentLen + 4] = getCppuType((const uno::Reference<sheet::XSheetAnnotationAnchor>*)0);
 		pPtr[nParentLen + 5] = getCppuType((const uno::Reference<text::XTextFieldsSupplier>*)0);
 		pPtr[nParentLen + 6] = getCppuType((const uno::Reference<document::XActionLockable>*)0);
+		pPtr[nParentLen + 7] = getCppuType((const uno::Reference<sheet::XFormulaTokens>*)0);
 
 		for (long i=0; i<nParentLen; i++)
 			pPtr[i] = pParentPtr[i];				// parent types first
@@ -6461,6 +6532,43 @@
 	return nError;
 }
 
+// XFormulaTokens
+
+uno::Sequence<sheet::FormulaToken> SAL_CALL ScCellObj::getTokens() throw(uno::RuntimeException)
+{
+	ScUnoGuard aGuard;
+    uno::Sequence<sheet::FormulaToken> aSequence;
+    ScDocShell* pDocSh = GetDocShell();
+    if ( pDocSh )
+	{
+        ScDocument* pDoc = pDocSh->GetDocument();
+        ScBaseCell* pCell = pDoc->GetCell( aCellPos );
+        if ( pCell && pCell->GetCellType() == CELLTYPE_FORMULA )
+        {
+            ScTokenArray* pTokenArray = static_cast<ScFormulaCell*>(pCell)->GetCode();
+            if ( pTokenArray )
+                (void)ScTokenConversion::ConvertToTokenSequence( aSequence, *pTokenArray );
+        }
+	}
+    return aSequence;
+}
+
+void SAL_CALL ScCellObj::setTokens( const uno::Sequence<sheet::FormulaToken>& rTokens ) throw(uno::RuntimeException)
+{
+	ScUnoGuard aGuard;
+    ScDocShell* pDocSh = GetDocShell();
+    if ( pDocSh )
+	{
+	    ScDocument* pDoc = pDocSh->GetDocument();
+	    ScTokenArray aTokenArray;
+	    (void)ScTokenConversion::ConvertToTokenArray( aTokenArray, rTokens );
+
+        ScDocFunc aFunc( *pDocSh );
+        ScBaseCell* pNewCell = new ScFormulaCell( pDoc, aCellPos, &aTokenArray );
+        (void)aFunc.PutCell( aCellPos, pNewCell, TRUE );
+	}
+}
+
 // XCellAddressable
 
 table::CellAddress SAL_CALL ScCellObj::getCellAddress() throw(uno::RuntimeException)
Index: sc/source/ui/unoobj/docuno.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/unoobj/docuno.cxx,v
retrieving revision 1.62
retrieving revision 1.59.16.6
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.62 -r1.59.16.6
--- sc/source/ui/unoobj/docuno.cxx	22 May 2007 20:11:28 -0000	1.62
+++ sc/source/ui/unoobj/docuno.cxx	29 May 2007 14:59:20 -0000	1.59.16.6
@@ -47,6 +47,7 @@
 
 #include <svtools/numuno.hxx>
 #include <svtools/smplhint.hxx>
+#include <svtools/undoopt.hxx>
 #include <sfx2/printer.hxx>
 #include <sfx2/bindings.hxx>
 #include <vcl/pdfextoutdevdata.hxx>
@@ -141,6 +142,9 @@
         {MAP_CHAR_LEN(SC_UNO_REGEXENABLED),      0, &getBooleanCppuType(),                                    0, 0},
         {MAP_CHAR_LEN(SC_UNO_RUNTIMEUID),        0, &getCppuType(static_cast< const rtl::OUString * >(0)),    beans::PropertyAttribute::READONLY, 0},
         {MAP_CHAR_LEN(SC_UNO_HASVALIDSIGNATURES),0, &getBooleanCppuType(),                                    beans::PropertyAttribute::READONLY, 0},
+        {MAP_CHAR_LEN(SC_UNO_ISLOADED),          0, &getBooleanCppuType(),                                    0, 0},
+        {MAP_CHAR_LEN(SC_UNO_ISUNDOENABLED),     0, &getBooleanCppuType(),                                    0, 0},
+        {MAP_CHAR_LEN(SC_UNO_REFERENCEDEVICE),   0, &getCppuType((uno::Reference<awt::XDevice>*)0),           beans::PropertyAttribute::READONLY, 0},
         {MAP_CHAR_LEN("BuildId"),                0, &::getCppuType(static_cast< const rtl::OUString * >(0)), 0, 0},
 
         {0,0,0,0,0,0}
@@ -1345,6 +1349,18 @@
 			if (pBindings)
 				pBindings->Invalidate( SID_FM_AUTOCONTROLFOCUS );
 		}
+        else if ( aString.EqualsAscii( SC_UNO_ISLOADED ) )
+        {
+            pDocShell->SetEmpty( !ScUnoHelpFunctions::GetBoolFromAny( aValue ) );
+        }
+        else if ( aString.EqualsAscii( SC_UNO_ISUNDOENABLED ) )
+        {
+            BOOL bUndoEnabled = ScUnoHelpFunctions::GetBoolFromAny( aValue );
+            pDoc->EnableUndo( bUndoEnabled );
+            USHORT nCount = ( bUndoEnabled ?
+                static_cast< USHORT >( SvtUndoOptions().GetUndoCount() ) : 0 );
+            pDocShell->GetUndoManager()->SetMaxUndoActionCount( nCount );
+        }
 		else if ( aString.EqualsAscii( "BuildId" ) )
 		{
 			aValue >>= maBuildId;
@@ -1480,6 +1496,20 @@
         {
             aRet <<= hasValidSignatures();
         }
+        else if ( aString.EqualsAscii( SC_UNO_ISLOADED ) )
+        {
+            ScUnoHelpFunctions::SetBoolInAny( aRet, !pDocShell->IsEmpty() );
+        }
+        else if ( aString.EqualsAscii( SC_UNO_ISUNDOENABLED ) )
+        {
+            ScUnoHelpFunctions::SetBoolInAny( aRet, pDoc->IsUndoEnabled() );
+        }
+        else if ( aString.EqualsAscii( SC_UNO_REFERENCEDEVICE ) )
+        {
+            VCLXDevice* pXDev = new VCLXDevice();
+            pXDev->SetOutputDevice( pDoc->GetRefDevice() );
+            aRet <<= uno::Reference< awt::XDevice >( pXDev );
+        }
         else if ( aString.EqualsAscii( "BuildId" ) )
 		{
 			aRet <<= maBuildId;
Index: sc/source/ui/unoobj/makefile.mk
===================================================================
RCS file: /cvs/sc/sc/source/ui/unoobj/makefile.mk,v
retrieving revision 1.18
retrieving revision 1.17.402.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.18 -r1.17.402.2
--- sc/source/ui/unoobj/makefile.mk	22 May 2007 20:11:40 -0000	1.18
+++ sc/source/ui/unoobj/makefile.mk	29 May 2007 15:02:02 -0000	1.17.402.2
@@ -61,6 +61,7 @@
         $(SLO)$/defltuno.obj \
         $(SLO)$/drdefuno.obj \
         $(SLO)$/cellsuno.obj \
+        $(SLO)$/tokenuno.obj \
         $(SLO)$/textuno.obj \
         $(SLO)$/notesuno.obj \
         $(SLO)$/cursuno.obj \
Index: sc/source/ui/unoobj/nameuno.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/unoobj/nameuno.cxx,v
retrieving revision 1.16
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.16 nameuno.cxx
--- sc/source/ui/unoobj/nameuno.cxx	27 Feb 2007 13:46:17 -0000	1.16
+++ sc/source/ui/unoobj/nameuno.cxx	11 Jul 2007 19:44:27 -0000
@@ -52,6 +52,8 @@
 #include "cellsuno.hxx"
 #include "convuno.hxx"
 #include "targuno.hxx"
+#include "tokenuno.hxx"
+#include "tokenarray.hxx"
 #include "docsh.hxx"
 #include "docfunc.hxx"
 #include "rangenam.hxx"
@@ -137,7 +139,7 @@
 
 // sheet::XNamedRange
 
-void ScNamedRangeObj::Modify_Impl( const String* pNewName, const String* pNewContent,
+void ScNamedRangeObj::Modify_Impl( const String* pNewName, const ScTokenArray* pNewTokens, const String* pNewContent,
 									const ScAddress* pNewPos, const sal_uInt16* pNewType )
 {
 	if (pDocShell)
@@ -166,8 +168,11 @@
 				if (pNewType)
 					nType = *pNewType;
 
-				ScRangeData* pNew = new ScRangeData( pDoc, aInsName, aContent,
-													aPos, nType, sal_True );
+                ScRangeData* pNew = NULL;
+                if ( pNewTokens )
+                    pNew = new ScRangeData( pDoc, aInsName, *pNewTokens, aPos, nType );
+                else
+                    pNew = new ScRangeData( pDoc, aInsName, aContent, aPos, nType, sal_True );
 				pNew->SetIndex( pOld->GetIndex() );
 
                 pNewRanges->AtFree( nPos );
@@ -202,7 +207,7 @@
 	//!	Formeln anpassen ?????
 
 	String aNewStr(aNewName);
-	Modify_Impl( &aNewStr, NULL, NULL, NULL );
+	Modify_Impl( &aNewStr, NULL, NULL, NULL, NULL );
 
 	if ( aName != aNewStr )					// some error occured...
 		throw uno::RuntimeException();		// no other exceptions specified
@@ -223,7 +228,7 @@
 {
 	ScUnoGuard aGuard;
 	String aContStr(aContent);
-	Modify_Impl( NULL, &aContStr, NULL, NULL );
+	Modify_Impl( NULL, NULL, &aContStr, NULL, NULL );
 }
 
 table::CellAddress SAL_CALL ScNamedRangeObj::getReferencePosition()
@@ -257,7 +262,7 @@
 {
 	ScUnoGuard aGuard;
 	ScAddress aPos( (SCCOL)aReferencePosition.Column, (SCROW)aReferencePosition.Row, aReferencePosition.Sheet );
-	Modify_Impl( NULL, NULL, &aPos, NULL );
+	Modify_Impl( NULL, NULL, NULL, &aPos, NULL );
 }
 
 sal_Int32 SAL_CALL ScNamedRangeObj::getType() throw(uno::RuntimeException)
@@ -286,9 +291,34 @@
 	if ( nUnoType & sheet::NamedRangeFlag::COLUMN_HEADER )		nNewType |= RT_COLHEADER;
 	if ( nUnoType & sheet::NamedRangeFlag::ROW_HEADER )			nNewType |= RT_ROWHEADER;
 
-	Modify_Impl( NULL, NULL, NULL, &nNewType );
+	Modify_Impl( NULL, NULL, NULL, NULL, &nNewType );
 }
 
+// XFormulaTokens
+
+uno::Sequence<sheet::FormulaToken> SAL_CALL ScNamedRangeObj::getTokens() throw(uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    uno::Sequence<sheet::FormulaToken> aSequence;
+    ScRangeData* pData = GetRangeData_Impl();
+    if (pData)
+    {
+        ScTokenArray* pTokenArray = pData->GetCode();
+        if ( pTokenArray )
+            (void)ScTokenConversion::ConvertToTokenSequence( aSequence, *pTokenArray );
+    }
+    return aSequence;
+}
+
+void SAL_CALL ScNamedRangeObj::setTokens( const uno::Sequence<sheet::FormulaToken>& rTokens ) throw(uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    ScTokenArray aTokenArray;
+    (void)ScTokenConversion::ConvertToTokenArray( aTokenArray, rTokens );
+    Modify_Impl( NULL, &aTokenArray, NULL, NULL, NULL );
+}
+
+
 // XCellRangeSource
 
 uno::Reference<table::XCellRange> SAL_CALL ScNamedRangeObj::getReferredCells()
Index: sc/source/ui/unoobj/servuno.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/unoobj/servuno.cxx,v
retrieving revision 1.15
retrieving revision 1.14.192.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.15 -r1.14.192.2
--- sc/source/ui/unoobj/servuno.cxx	22 May 2007 20:11:51 -0000	1.15
+++ sc/source/ui/unoobj/servuno.cxx	29 May 2007 15:03:15 -0000	1.14.192.2
@@ -66,6 +66,7 @@
 #include "celllistsource.hxx"
 #include "addruno.hxx"
 #include "chart2uno.hxx"
+#include "tokenuno.hxx"
 
 // #100263# Support creation of GraphicObjectResolver and EmbeddedObjectResolver
 #ifndef _XMLEOHLP_HXX
@@ -125,7 +126,8 @@
 
         "com.sun.star.sheet.DocumentSettings",      // SC_SERVICE_SHEETDOCSET
 
-        SC_SERVICENAME_CHDATAPROV                  // SC_SERVICE_CHDATAPROV
+        SC_SERVICENAME_CHDATAPROV,                  // SC_SERVICE_CHDATAPROV
+        SC_SERVICENAME_FORMULAPARS                  // SC_SERVICE_FORMULAPARS
 	};
 
 //
@@ -175,7 +177,8 @@
 		"",											// SC_SERVICE_CELLADDRESS
 		"",											// SC_SERVICE_RANGEADDRESS
         "",                                         // SC_SERVICE_SHEETDOCSET
-		""											// SC_SERVICE_CHDATAPROV
+        "",                                         // SC_SERVICE_CHDATAPROV
+        ""                                          // SC_SERVICE_FORMULAPARS
 	};
 
 
@@ -356,6 +359,11 @@
             if (pDocShell && pDocShell->GetDocument())
                 xRet = *new ScChart2DataProvider( pDocShell->GetDocument() );
             break;
+
+        case SC_SERVICE_FORMULAPARS:
+            if (pDocShell)
+                xRet.set(static_cast<sheet::XFormulaParser*>(new ScFormulaParserObj( pDocShell )));
+            break;
 	}
 	return xRet;
 }
Index: sc/source/ui/unoobj/styleuno.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/unoobj/styleuno.cxx,v
retrieving revision 1.39
retrieving revision 1.37.18.3
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.39 -r1.37.18.3
--- sc/source/ui/unoobj/styleuno.cxx	10 May 2007 16:59:42 -0000	1.39
+++ sc/source/ui/unoobj/styleuno.cxx	29 May 2007 15:05:44 -0000	1.37.18.3
@@ -82,6 +82,7 @@
 #include "unonames.hxx"
 #include "unowids.hxx"
 #include "globstr.hrc"
+#include "cellsuno.hxx"
 
 using namespace ::com::sun::star;
 
@@ -1269,7 +1270,7 @@
 			}
 		}
 		pMap = SfxItemPropertyMap::GetByName( aPropSet.getPropertyMap(), rPropName );
-		if ( pMap && IsScItemWid( pMap->nWID ) )
+		if ( pMap )
 		{
 			rpResultEntry = pMap;
 			return &pStyle->GetItemSet();
@@ -1293,6 +1294,12 @@
 	if ( pItemSet && pResultEntry )
 	{
 		USHORT nWhich = pResultEntry->nWID;
+        if ( nWhich == SC_WID_UNO_TBLBORD )
+        {
+            nWhich = ATTR_BORDER;
+        }
+        if ( IsScItemWid( nWhich ) )
+        {
 		SfxItemState eState = pItemSet->GetItemState( nWhich, sal_False );
 
 //       //  if no rotate value is set, look at orientation
@@ -1309,6 +1316,7 @@
 		else
 			DBG_ERROR("unbekannter ItemState");
 	}
+	}
 	return eRet;
 }
 
@@ -1356,6 +1364,8 @@
 	{
 		USHORT nWhich = pResultEntry->nWID;
 
+        if ( IsScItemWid( nWhich ) )
+        {
 		//	Default ist Default vom ItemPool, nicht vom Standard-Style,
 		//	damit es zu setPropertyToDefault passt
 		SfxItemSet aEmptySet( *pStyleSet->GetPool(), pStyleSet->GetRanges() );
@@ -1403,6 +1413,31 @@
 				aAny = aPropSet.getPropertyValue( *pResultEntry, *pItemSet );
 		}
 	}
+        else if ( IsScUnoWid( nWhich ) )
+        {
+            SfxItemSet aEmptySet( *pStyleSet->GetPool(), pStyleSet->GetRanges() );
+            const SfxItemSet* pItemSet = &aEmptySet;
+            switch ( nWhich )
+            {
+                case SC_WID_UNO_TBLBORD:
+                    {
+                        const SfxPoolItem* pItem = &pItemSet->Get( ATTR_BORDER );
+                        if ( pItem )
+                        {
+                            SvxBoxItem aOuter( *( static_cast<const SvxBoxItem*>( pItem ) ) );
+                            SvxBoxInfoItem aInner( ATTR_BORDER_INNER );
+                            table::TableBorder aBorder;
+                            ScHelperFunctions::FillTableBorder( aBorder, aOuter, aInner );
+                            aBorder.IsHorizontalLineValid = sal_False;
+                            aBorder.IsVerticalLineValid = sal_False;
+                            aBorder.IsDistanceValid = sal_False;
+                            aAny <<= aBorder;
+                        }
+                    }
+                    break;
+            }
+        }
+	}
 	return aAny;
 }
 
@@ -1646,7 +1681,9 @@
 		{
 			const SfxItemPropertyMap* pOwnMap =
 					SfxItemPropertyMap::GetByName( aPropSet.getPropertyMap(), aString );
-			if ( pOwnMap && IsScItemWid( pOwnMap->nWID ) )
+            if ( pOwnMap )
+            {
+			    if ( IsScItemWid( pOwnMap->nWID ) )
 			{
 				if (pValue)
 				{
@@ -1742,7 +1779,7 @@
 						case ATTR_PAGE_OBJECTS:
 						case ATTR_PAGE_DRAWINGS:
 							{
-								sal_Bool bBool = sal_Bool();
+                                    sal_Bool bBool = sal_False;
 								*pValue >>= bBool;
 								//!	sal_Bool-MID fuer ScViewObjectModeItem definieren?
 								rSet.Put( ScViewObjectModeItem( pOwnMap->nWID,
@@ -1820,6 +1857,32 @@
 					//!	for ATTR_ROTATE_VALUE, also reset ATTR_ORIENTATION?
 				}
 			}
+                else if ( IsScUnoWid( pOwnMap->nWID ) )
+                {
+                    switch ( pOwnMap->nWID )
+                    {
+                        case SC_WID_UNO_TBLBORD:
+                            {
+                                if (pValue)
+                                {
+                                    table::TableBorder aBorder;
+                                    if ( *pValue >>= aBorder )
+                                    {
+                                        SvxBoxItem aOuter( ATTR_BORDER );
+                                        SvxBoxInfoItem aInner( ATTR_BORDER_INNER );
+                                        ScHelperFunctions::FillBoxItems( aOuter, aInner, aBorder );
+                                        rSet.Put( aOuter );
+                                    }
+                                }
+                                else
+                                {
+                                    rSet.ClearItem( ATTR_BORDER );
+                                }
+                            }
+                            break;
+                    }
+                }
+            }
 		}
 
 		//!	DocFunc-Funktion??
@@ -1864,6 +1927,8 @@
 	{
 		USHORT nWhich = pResultEntry->nWID;
 
+        if ( IsScItemWid( nWhich ) )
+        {
 		switch ( nWhich )		// fuer Item-Spezial-Behandlungen
 		{
 			case ATTR_VALUE_FORMAT:
@@ -1942,6 +2007,29 @@
 					aAny = aPropSet.getPropertyValue( *pResultEntry, *pItemSet );
 		}
 	}
+        else if ( IsScUnoWid( nWhich ) )
+        {
+            switch ( nWhich )
+            {
+                case SC_WID_UNO_TBLBORD:
+                    {
+                        const SfxPoolItem* pItem = &pItemSet->Get( ATTR_BORDER );
+                        if ( pItem )
+                        {
+                            SvxBoxItem aOuter( *( static_cast<const SvxBoxItem*>( pItem ) ) );
+                            SvxBoxInfoItem aInner( ATTR_BORDER_INNER );
+                            table::TableBorder aBorder;
+                            ScHelperFunctions::FillTableBorder( aBorder, aOuter, aInner );
+                            aBorder.IsHorizontalLineValid = sal_False;
+                            aBorder.IsVerticalLineValid = sal_False;
+                            aBorder.IsDistanceValid = sal_False;
+                            aAny <<= aBorder;
+                        }
+                    }
+                    break;
+            }
+        }
+	}
 	else if ( aString.EqualsAscii( SC_UNONAME_DISPNAME ) )		// read-only
 	{
 		//	core always has the display name
Index: sc/source/ui/unoobj/tokenuno.cxx
===================================================================
RCS file: sc/source/ui/unoobj/tokenuno.cxx
diff -N sc/source/ui/unoobj/tokenuno.cxx
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ sc/source/ui/unoobj/tokenuno.cxx	11 Jul 2007 19:44:27 -0000
@@ -0,0 +1,493 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: tokenuno.cxx,v $
+ *
+ *  $Revision: 1.1.2.3 $
+ *
+ *  last change: $Author: nn $ $Date: 2007/06/22 18:33:04 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+// MARKER(update_precomp.py): autogen include statement, do not remove
+#include "precompiled_sc.hxx"
+
+
+#include <com/sun/star/sheet/ComplexReference.hpp>
+#include <com/sun/star/sheet/ReferenceFlags.hpp>
+#include <com/sun/star/table/CellAddress.hpp>
+
+#include <svtools/itemprop.hxx>
+
+#include "tokenuno.hxx"
+#include "miscuno.hxx"
+#include "convuno.hxx"
+#include "unonames.hxx"
+#include "unoguard.hxx"
+#include "compiler.hxx"
+#include "tokenarray.hxx"
+#include "docsh.hxx"
+
+#include <stdio.h>
+
+using namespace com::sun::star;
+
+//------------------------------------------------------------------------
+
+const SfxItemPropertyMap* lcl_GetFormulaParserMap()
+{
+    static SfxItemPropertyMap aFormulaParserMap_Impl[] =
+    {
+        {MAP_CHAR_LEN(SC_UNO_REFERENCEPOS),    0,  &getCppuType((table::CellAddress*)0),    0, 0 },
+        {MAP_CHAR_LEN(SC_UNO_COMPILEENGLISH),  0,  &getBooleanCppuType(),                   0, 0 },
+        {MAP_CHAR_LEN(SC_UNO_IGNORELEADING),   0,  &getBooleanCppuType(),                   0, 0 },
+        {MAP_CHAR_LEN(SC_UNO_COMPATIBILITY3D), 0,  &getBooleanCppuType(),                   0, 0 },
+        {MAP_CHAR_LEN(SC_UNO_R1C1NOTATION),    0,  &getBooleanCppuType(),                   0, 0 },
+        {MAP_CHAR_LEN(SC_UNO_PARAMETERSEP),    0,  &getCppuType((const ::rtl::OUString*)0), 0, 0 },
+        {0,0,0,0,0,0}
+    };
+    return aFormulaParserMap_Impl;
+}
+
+SC_SIMPLE_SERVICE_INFO( ScFormulaParserObj, "ScFormulaParserObj", SC_SERVICENAME_FORMULAPARS )
+
+//------------------------------------------------------------------------
+
+ScFormulaParserObj::ScFormulaParserObj(ScDocShell* pDocSh) :
+    mpDocShell( pDocSh ),
+    mbEnglish( false ),
+    mbR1C1( false ),
+    mbComp3D( false ),
+    mbIgnoreSpaces( true )
+{
+    mpDocShell->GetDocument()->AddUnoObject(*this);
+}
+
+ScFormulaParserObj::~ScFormulaParserObj()
+{
+    if (mpDocShell)
+        mpDocShell->GetDocument()->RemoveUnoObject(*this);
+}
+
+void ScFormulaParserObj::Notify( SfxBroadcaster&, const SfxHint& rHint )
+{
+    if ( rHint.ISA( SfxSimpleHint ) && ((const SfxSimpleHint&)rHint).GetId() == SFX_HINT_DYING )
+        mpDocShell = NULL;
+}
+
+// XFormulaParser
+
+void ScFormulaParserObj::SetCompilerFlags( ScCompiler& rCompiler ) const
+{
+    rCompiler.SetCompileEnglish( mbEnglish );
+
+    ScAddress::Convention eConv = ScAddress::CONV_UNSPECIFIED;
+    if ( mbR1C1 )
+    {
+        // R1C1 is available only with '!' sheet separator
+        eConv = ScAddress::CONV_XL_R1C1;
+    }
+    else
+    {
+        if ( mbComp3D )
+            eConv = ScAddress::CONV_XL_A1;      // '!' and A1
+        else
+            eConv = ScAddress::CONV_OOO;        // '.' and A1
+    }
+    rCompiler.SetRefConvention( eConv );
+}
+
+void lcl_ReplaceSeparator( String& rFormula, sal_Unicode cOldSep, sal_Unicode cNewSep )
+{
+    //! add handling of quoted sheet names, or move this into formula parsing
+
+    xub_StrLen nLen = rFormula.Len();
+    xub_StrLen nPos = 0;
+    while ( nPos < nLen )
+    {
+        sal_Unicode cChar = rFormula.GetChar( nPos );
+        // to just skip quoted text, double quotes don't have to be treated separately
+        if ( cChar == '"' )
+        {
+            ++nPos;         // opening quote
+            while ( nPos < nLen && rFormula.GetChar( nPos ) != '"' )
+                ++nPos;     // quoted text; closing quote is skipped below
+        }
+        else if ( cChar == cOldSep )
+            rFormula.SetChar( nPos, cNewSep );
+        ++nPos;
+    }
+}
+
+uno::Sequence<sheet::FormulaToken> SAL_CALL ScFormulaParserObj::parseFormula( const rtl::OUString& aFormula )
+                                throw (uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    uno::Sequence<sheet::FormulaToken> aRet;
+
+    if (mpDocShell)
+    {
+        ScCompiler aCompiler( mpDocShell->GetDocument(), maRefPos );
+        SetCompilerFlags( aCompiler );
+
+        // temporary solution: in case of a different parameter separator, modify the string
+        String aModified( aFormula );           // compiler uses String, not OUString
+        if ( maParamSep.getLength() )
+        {
+            // separator is assumed to be a single character
+            lcl_ReplaceSeparator( aModified, maParamSep.toChar(), ';' );    
+        }
+
+        ScTokenArray* pCode = aCompiler.CompileString( aModified, ScAddress::CONV_XL_A1 );
+        (void)ScTokenConversion::ConvertToTokenSequence( aRet, *pCode );
+        delete pCode;
+    }
+
+    return aRet;
+}
+
+rtl::OUString SAL_CALL ScFormulaParserObj::printFormula( const uno::Sequence<sheet::FormulaToken>& aTokens )
+                                throw (uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    rtl::OUString aRet;
+
+    if (mpDocShell)
+    {
+        ScTokenArray aCode;
+        (void)ScTokenConversion::ConvertToTokenArray( aCode, aTokens );
+        ScCompiler aCompiler( mpDocShell->GetDocument(), maRefPos, aCode );
+        SetCompilerFlags( aCompiler );
+
+        rtl::OUStringBuffer aBuffer;
+        aCompiler.CreateStringFromTokenArray( aBuffer );
+        aRet = aBuffer.makeStringAndClear();
+
+        // temporary solution: in case of a different parameter separator, modify the string
+        if ( maParamSep.getLength() )
+        {
+            // separator is assumed to be a single character
+            String aNewFormula( aRet );
+            lcl_ReplaceSeparator( aNewFormula, ';', maParamSep.toChar() );
+            aRet = aNewFormula;
+        }
+    }
+
+    return aRet;
+}
+
+// XPropertySet
+
+uno::Reference<beans::XPropertySetInfo> SAL_CALL ScFormulaParserObj::getPropertySetInfo()
+                                                        throw(uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    static uno::Reference< beans::XPropertySetInfo > aRef(new SfxItemPropertySetInfo( lcl_GetFormulaParserMap() ));
+    return aRef;
+}
+
+void SAL_CALL ScFormulaParserObj::setPropertyValue(
+                        const rtl::OUString& aPropertyName, const uno::Any& aValue )
+                throw(beans::UnknownPropertyException, beans::PropertyVetoException,
+                        lang::IllegalArgumentException, lang::WrappedTargetException,
+                        uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    String aString(aPropertyName);
+    if ( aString.EqualsAscii( SC_UNO_REFERENCEPOS ) )
+    {
+        table::CellAddress aAddress;
+        aValue >>= aAddress;
+        ScUnoConversion::FillScAddress( maRefPos, aAddress );
+    }
+    else if ( aString.EqualsAscii( SC_UNO_COMPILEENGLISH ) )
+    {
+        aValue >>= mbEnglish;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_R1C1NOTATION ) )
+    {
+        aValue >>= mbR1C1;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_COMPATIBILITY3D ) )
+    {
+        aValue >>= mbComp3D;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_IGNORELEADING ) )
+    {
+        aValue >>= mbIgnoreSpaces;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_PARAMETERSEP ) )
+    {
+        aValue >>= maParamSep;
+    }
+    else
+        throw beans::UnknownPropertyException();
+}
+
+uno::Any SAL_CALL ScFormulaParserObj::getPropertyValue( const rtl::OUString& aPropertyName )
+                throw(beans::UnknownPropertyException, lang::WrappedTargetException,
+                        uno::RuntimeException)
+{
+    ScUnoGuard aGuard;
+    uno::Any aRet;
+    String aString(aPropertyName);
+    if ( aString.EqualsAscii( SC_UNO_REFERENCEPOS ) )
+    {
+        table::CellAddress aAddress;
+        ScUnoConversion::FillApiAddress( aAddress, maRefPos );
+        aRet <<= aAddress;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_COMPILEENGLISH ) )
+    {
+        aRet <<= mbEnglish;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_R1C1NOTATION ) )
+    {
+        aRet <<= mbR1C1;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_COMPATIBILITY3D ) )
+    {
+        aRet <<= mbComp3D;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_IGNORELEADING ) )
+    {
+        aRet <<= mbIgnoreSpaces;
+    }
+    else if ( aString.EqualsAscii( SC_UNO_PARAMETERSEP ) )
+    {
+        aRet <<= maParamSep;
+    }
+    else
+        throw beans::UnknownPropertyException();
+    return aRet;
+}
+
+SC_IMPL_DUMMY_PROPERTY_LISTENER( ScFormulaParserObj )
+
+//------------------------------------------------------------------------
+
+void lcl_SingleRefToCalc( SingleRefData& rRef, const sheet::SingleReference& rAPI )
+{
+    rRef.InitFlags();
+
+    rRef.nCol    = static_cast<SCsCOL>(rAPI.Column);
+    rRef.nRow    = static_cast<SCsROW>(rAPI.Row);
+    rRef.nTab    = static_cast<SCsTAB>(rAPI.Sheet);
+    rRef.nRelCol = static_cast<SCsCOL>(rAPI.RelativeColumn);
+    rRef.nRelRow = static_cast<SCsROW>(rAPI.RelativeRow);
+    rRef.nRelTab = static_cast<SCsTAB>(rAPI.RelativeSheet);
+
+    rRef.SetColRel(     ( rAPI.Flags & sheet::ReferenceFlags::COLUMN_RELATIVE ) != 0 );
+    rRef.SetRowRel(     ( rAPI.Flags & sheet::ReferenceFlags::ROW_RELATIVE    ) != 0 );
+    rRef.SetTabRel(     ( rAPI.Flags & sheet::ReferenceFlags::SHEET_RELATIVE  ) != 0 );
+    rRef.SetColDeleted( ( rAPI.Flags & sheet::ReferenceFlags::COLUMN_DELETED  ) != 0 );
+    rRef.SetRowDeleted( ( rAPI.Flags & sheet::ReferenceFlags::ROW_DELETED     ) != 0 );
+    rRef.SetTabDeleted( ( rAPI.Flags & sheet::ReferenceFlags::SHEET_DELETED   ) != 0 );
+    rRef.SetFlag3D(     ( rAPI.Flags & sheet::ReferenceFlags::SHEET_3D        ) != 0 );
+    rRef.SetRelName(    ( rAPI.Flags & sheet::ReferenceFlags::RELATIVE_NAME   ) != 0 );
+}
+
+void lcl_SingleRefToApi( sheet::SingleReference& rAPI, const SingleRefData& rRef )
+{
+    rAPI.Column         = rRef.nCol;
+    rAPI.Row            = rRef.nRow;
+    rAPI.Sheet          = rRef.nTab;
+    rAPI.RelativeColumn = rRef.nRelCol;
+    rAPI.RelativeRow    = rRef.nRelRow;
+    rAPI.RelativeSheet  = rRef.nRelTab;
+
+    sal_Int32 nFlags = 0;
+    if ( rRef.IsColRel() )     nFlags |= sheet::ReferenceFlags::COLUMN_RELATIVE;
+    if ( rRef.IsRowRel() )     nFlags |= sheet::ReferenceFlags::ROW_RELATIVE;
+    if ( rRef.IsTabRel() )     nFlags |= sheet::ReferenceFlags::SHEET_RELATIVE;
+    if ( rRef.IsColDeleted() ) nFlags |= sheet::ReferenceFlags::COLUMN_DELETED;
+    if ( rRef.IsRowDeleted() ) nFlags |= sheet::ReferenceFlags::ROW_DELETED;
+    if ( rRef.IsTabDeleted() ) nFlags |= sheet::ReferenceFlags::SHEET_DELETED;
+    if ( rRef.IsFlag3D() )     nFlags |= sheet::ReferenceFlags::SHEET_3D;
+    if ( rRef.IsRelName() )    nFlags |= sheet::ReferenceFlags::RELATIVE_NAME;
+    rAPI.Flags = nFlags;
+}
+
+// static
+bool ScTokenConversion::ConvertToTokenArray( ScTokenArray& rTokenArray,
+                        const uno::Sequence<sheet::FormulaToken>& rSequence )
+{
+    bool bError = false;
+    sal_Int32 nCount = rSequence.getLength();
+    for (sal_Int32 nPos=0; nPos<nCount; nPos++)
+    {
+        const sheet::FormulaToken& rAPI = rSequence[nPos];
+        OpCode eOpCode = static_cast<OpCode>(rAPI.OpCode);      //! assuming equal values for the moment
+
+        uno::TypeClass eClass = rAPI.Data.getValueTypeClass();
+        switch ( eClass )
+        {
+            case uno::TypeClass_VOID:
+                // empty data -> use AddOpCode (does some special cases)
+                rTokenArray.AddOpCode( eOpCode );
+                break;
+            case uno::TypeClass_DOUBLE:
+                // double is only used for "push"
+                if ( eOpCode == ocPush )
+                    rTokenArray.AddDouble( rAPI.Data.get<double>() );
+                else
+                    bError = true;
+                break;
+            case uno::TypeClass_LONG:
+                {
+                    // long is svIndex, used for name / database area, or "byte" for spaces
+                    sal_Int32 nValue = rAPI.Data.get<sal_Int32>();
+                    if ( eOpCode == ocName || eOpCode == ocDBArea )
+                        rTokenArray.AddToken( ScIndexToken( eOpCode, static_cast<USHORT>(nValue) ) );
+                    else if ( eOpCode == ocSpaces )
+                        rTokenArray.AddToken( ScByteToken( ocSpaces, static_cast<BYTE>(nValue) ) );
+                    else
+                        bError = true;
+                }
+                break;
+            case uno::TypeClass_STRING:
+                {
+                    String aStrVal( rAPI.Data.get<rtl::OUString>() );
+                    if ( eOpCode == ocPush )
+                        rTokenArray.AddString( aStrVal );
+                    else if ( eOpCode == ocBad )
+                        rTokenArray.AddBad( aStrVal );
+                    else if ( eOpCode == ocExternal || eOpCode == ocMacro )
+                        rTokenArray.AddToken( ScExternalToken( eOpCode, aStrVal ) );
+                    else
+                        bError = true;      // unexpected string: don't know what to do with it
+                }
+                break;
+            case uno::TypeClass_STRUCT:
+                {
+                    uno::Type aType = rAPI.Data.getValueType();
+                    if ( aType.equals( cppu::UnoType<sheet::SingleReference>::get() ) )
+                    {
+                        SingleRefData aSingleRef;
+                        sheet::SingleReference aApiRef;
+                        rAPI.Data >>= aApiRef;
+                        lcl_SingleRefToCalc( aSingleRef, aApiRef );
+
+                        if ( eOpCode == ocPush )
+                            rTokenArray.AddSingleReference( aSingleRef );
+                        else if ( eOpCode == ocColRowName )
+                            rTokenArray.AddColRowName( aSingleRef );
+                        else
+                            bError = true;
+                    }
+                    else if ( aType.equals( cppu::UnoType<sheet::ComplexReference>::get() ) )
+                    {
+                        ComplRefData aComplRef;
+                        sheet::ComplexReference aApiRef;
+                        rAPI.Data >>= aApiRef;
+                        lcl_SingleRefToCalc( aComplRef.Ref1, aApiRef.Reference1 );
+                        lcl_SingleRefToCalc( aComplRef.Ref2, aApiRef.Reference2 );
+
+                        if ( eOpCode == ocPush )
+                            rTokenArray.AddDoubleReference( aComplRef );
+                        else
+                            bError = true;
+                    }
+                    else
+                        bError = true;      // unknown struct
+                }
+                break;
+            default:
+                bError = true;
+        }
+    }
+
+    return !bError;
+}
+
+// static
+bool ScTokenConversion::ConvertToTokenSequence( uno::Sequence<sheet::FormulaToken>& rSequence,
+                        const ScTokenArray& rTokenArray )
+{
+    bool bError = false;
+
+    sal_Int32 nLen = static_cast<sal_Int32>(rTokenArray.GetLen());
+    ScToken** pTokens = rTokenArray.GetArray();
+    if ( pTokens )
+    {
+        rSequence.realloc(nLen);
+        for (sal_Int32 nPos=0; nPos<nLen; nPos++)
+        {
+            const ScToken& rToken = *pTokens[nPos];
+            sheet::FormulaToken& rAPI = rSequence[nPos];
+
+            OpCode eOpCode = rToken.GetOpCode();
+            rAPI.OpCode = static_cast<sal_Int32>(eOpCode);      //! assuming equal values for the moment
+            switch ( rToken.GetType() )
+            {
+                case svByte:
+                    // Only the count of spaces is stored as "long". Parameter count is ignored.
+                    if ( eOpCode == ocSpaces )
+                        rAPI.Data <<= (sal_Int32) rToken.GetByte();
+                    else
+                        rAPI.Data.clear();      // no data
+                    break;
+                case svDouble:
+                    rAPI.Data <<= rToken.GetDouble();
+                    break;
+                case svString:
+                    rAPI.Data <<= rtl::OUString( rToken.GetString() );
+                    break;
+                case svExternal:
+                    // Function name is stored as string.
+                    // Byte (parameter count) is ignored.
+                    rAPI.Data <<= rtl::OUString( rToken.GetExternal() );
+                    break;
+                case svSingleRef:
+                    {
+                        sheet::SingleReference aSingleRef;
+                        lcl_SingleRefToApi( aSingleRef, rToken.GetSingleRef() );
+                        rAPI.Data <<= aSingleRef;
+                    }
+                    break;
+                case svDoubleRef:
+                    {
+                        sheet::ComplexReference aCompRef;
+                        lcl_SingleRefToApi( aCompRef.Reference1, rToken.GetSingleRef() );
+                        lcl_SingleRefToApi( aCompRef.Reference2, rToken.GetSingleRef2() );
+                        rAPI.Data <<= aCompRef;
+                    }
+                    break;
+                case svIndex:
+                    rAPI.Data <<= static_cast<sal_Int32>( rToken.GetIndex() );
+                    break;
+                default:
+                    rAPI.Data.clear();      // no data
+            }
+        }
+    }
+    else
+        rSequence.realloc(0);
+
+    return !bError;
+}
+
Index: sc/source/ui/view/auditsh.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/auditsh.cxx,v
retrieving revision 1.5
retrieving revision 1.5.194.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.5 -r1.5.194.2
--- sc/source/ui/view/auditsh.cxx	21 Jul 2006 14:50:46 -0000	1.5
+++ sc/source/ui/view/auditsh.cxx	8 May 2007 16:08:31 -0000	1.5.194.2
@@ -51,6 +51,7 @@
 #include "tabvwsh.hxx"
 #include "scresid.hxx"
 #include "sc.hrc"
+#include "document.hxx"
 
 //------------------------------------------------------------------------
 
@@ -75,7 +76,12 @@
 	nFunction( SID_FILL_ADD_PRED )
 {
 	SetPool( &pViewData->GetViewShell()->GetPool() );
-	SetUndoManager( pViewData->GetSfxDocShell()->GetUndoManager() );
+    SfxUndoManager* pMgr = pViewData->GetSfxDocShell()->GetUndoManager();
+    SetUndoManager( pMgr );
+    if ( !pViewData->GetDocument()->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 	SetHelpId( HID_SCSHELL_AUDIT );
 	SetName(String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM("Auditing")));
 }
Index: sc/source/ui/view/formatsh.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/formatsh.cxx,v
retrieving revision 1.35
retrieving revision 1.33.18.4
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.35 -r1.33.18.4
--- sc/source/ui/view/formatsh.cxx	10 May 2007 17:00:34 -0000	1.35
+++ sc/source/ui/view/formatsh.cxx	29 May 2007 15:17:10 -0000	1.33.18.4
@@ -180,7 +180,12 @@
 	ScTabViewShell*	pTabViewShell = GetViewData()->GetViewShell();
 
 	SetPool( &pTabViewShell->GetPool() );
-	SetUndoManager( pViewData->GetSfxDocShell()->GetUndoManager() );
+    SfxUndoManager* pMgr = pViewData->GetSfxDocShell()->GetUndoManager();
+    SetUndoManager( pMgr );
+    if ( !pViewData->GetDocument()->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 	SetHelpId(HID_SCSHELL_FORMATSH);
 	SetName(String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM("Format")));
 }
Index: sc/source/ui/view/pgbrksh.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/pgbrksh.cxx,v
retrieving revision 1.4
retrieving revision 1.4.194.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.4 -r1.4.194.2
--- sc/source/ui/view/pgbrksh.cxx	21 Jul 2006 15:06:15 -0000	1.4
+++ sc/source/ui/view/pgbrksh.cxx	8 May 2007 16:12:56 -0000	1.4.194.2
@@ -74,7 +74,13 @@
 	SfxShell(pViewSh)
 {
 	SetPool( &pViewSh->GetPool() );
-	SetUndoManager( pViewSh->GetViewData()->GetSfxDocShell()->GetUndoManager() );
+    ScViewData* pViewData = pViewSh->GetViewData();
+    SfxUndoManager* pMgr = pViewData->GetSfxDocShell()->GetUndoManager();
+    SetUndoManager( pMgr );
+    if ( !pViewData->GetDocument()->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 	SetHelpId( HID_SCSHELL_PAGEBREAK );
 	SetName(String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM("PageBreak")));
 }
Index: sc/source/ui/view/pivotsh.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/pivotsh.cxx,v
retrieving revision 1.8
retrieving revision 1.7.194.3
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.8 -r1.7.194.3
--- sc/source/ui/view/pivotsh.cxx	26 Apr 2007 09:57:21 -0000	1.8
+++ sc/source/ui/view/pivotsh.cxx	8 May 2007 16:13:27 -0000	1.7.194.3
@@ -83,7 +83,13 @@
 	pViewShell( pViewSh )
 {
 	SetPool( &pViewSh->GetPool() );
-	SetUndoManager( pViewSh->GetViewData()->GetSfxDocShell()->GetUndoManager() );
+    ScViewData* pViewData = pViewSh->GetViewData();
+    SfxUndoManager* pMgr = pViewData->GetSfxDocShell()->GetUndoManager();
+    SetUndoManager( pMgr );
+    if ( !pViewData->GetDocument()->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 	SetHelpId( HID_SCSHELL_PIVOTSH );
 	SetName(String::CreateFromAscii(RTL_CONSTASCII_STRINGPARAM("Pivot")));
 }
Index: sc/source/ui/view/tabvwsh4.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/tabvwsh4.cxx,v
retrieving revision 1.66
retrieving revision 1.64.18.4
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.66 -r1.64.18.4
--- sc/source/ui/view/tabvwsh4.cxx	22 May 2007 20:14:44 -0000	1.66
+++ sc/source/ui/view/tabvwsh4.cxx	29 May 2007 15:35:59 -0000	1.64.18.4
@@ -1163,7 +1163,15 @@
 		pNewUndoMgr = GetViewData()->GetDocShell()->GetUndoManager();
 
 	if (pDrawTextShell)
+    {
 		pDrawTextShell->SetUndoManager(pNewUndoMgr);
+        ScDocShell* pDocSh = GetViewData()->GetDocShell();
+        if ( pNewUndoMgr == pDocSh->GetUndoManager() &&
+             !pDocSh->GetDocument()->IsUndoEnabled() )
+        {
+            pNewUndoMgr->SetMaxUndoActionCount( 0 );
+        }
+    }
 	else
 		DBG_ERROR("SetDrawTextUndo ohne DrawTextShell");
 }
@@ -1796,8 +1804,13 @@
 		MakeDrawView( nForceDesignMode );
 	ViewOptionsHasChanged(FALSE);	// legt auch evtl. DrawView an
 
-	SetUndoManager( pDocSh->GetUndoManager() );
-	pFormShell->SetUndoManager( pDocSh->GetUndoManager() );
+    SfxUndoManager* pMgr = pDocSh->GetUndoManager();
+    SetUndoManager( pMgr );
+    pFormShell->SetUndoManager( pMgr );
+    if ( !pDoc->IsUndoEnabled() )
+    {
+        pMgr->SetMaxUndoActionCount( 0 );
+    }
 	SetRepeatTarget( &aTarget );
 	pFormShell->SetRepeatTarget( &aTarget );
 	SetHelpId( HID_SCSHELL_TABVWSH );
@@ -1818,7 +1831,7 @@
 					pDoc->MakeTable(i);
 			}
 
-			pDocSh->ResetEmpty();			// #i6232# make sure this is done only once
+            pDocSh->SetEmpty( FALSE );          // #i6232# make sure this is done only once
 		}
 
 		// ReadExtOptions is now in Activate
Index: sc/source/ui/view/viewdata.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/viewdata.cxx,v
retrieving revision 1.59
retrieving revision 1.59.16.2
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.59 -r1.59.16.2
--- sc/source/ui/view/viewdata.cxx	10 May 2007 17:03:57 -0000	1.59
+++ sc/source/ui/view/viewdata.cxx	11 Jun 2007 08:58:35 -0000	1.59.16.2
@@ -128,46 +128,11 @@
 	nPixPosY[0]=nPixPosY[1]=0;
 }
 
-ScViewDataTable::ScViewDataTable( const ScViewDataTable& rDataTable ) :
-				nHSplitPos( rDataTable.nHSplitPos ),
-				nVSplitPos( rDataTable.nVSplitPos ),
-				eHSplitMode( rDataTable.eHSplitMode ),
-				eVSplitMode( rDataTable.eVSplitMode ),
-				eWhichActive( rDataTable.eWhichActive ),
-				nFixPosX( rDataTable.nFixPosX ),
-				nFixPosY( rDataTable.nFixPosY ),
-				nCurX( rDataTable.nCurX ),
-				nCurY( rDataTable.nCurY ),
-				nOldCurX( rDataTable.nOldCurX ),
-				nOldCurY( rDataTable.nOldCurY ),
-				bOldCurValid( rDataTable.bOldCurValid )
-{
-	nPosX[0]=rDataTable.nPosX[0];
-	nPosX[1]=rDataTable.nPosX[1];
-	nPosY[0]=rDataTable.nPosY[0];
-	nPosY[1]=rDataTable.nPosY[1];
-
-	nTPosX[0]=rDataTable.nTPosX[0];
-	nTPosX[1]=rDataTable.nTPosX[1];
-	nTPosY[0]=rDataTable.nTPosY[0];
-	nTPosY[1]=rDataTable.nTPosY[1];
-
-	nMPosX[0]=rDataTable.nMPosX[0];
-	nMPosX[1]=rDataTable.nMPosX[1];
-	nMPosY[0]=rDataTable.nMPosY[0];
-	nMPosY[1]=rDataTable.nMPosY[1];
-
-	nPixPosX[0]=rDataTable.nPixPosX[0];
-	nPixPosX[1]=rDataTable.nPixPosX[1];
-	nPixPosY[0]=rDataTable.nPixPosY[0];
-	nPixPosY[1]=rDataTable.nPixPosY[1];
-}
-
 ScViewDataTable::~ScViewDataTable()
 {
 }
 
-void ScViewDataTable::WriteUserDataSequence(uno::Sequence <beans::PropertyValue>& rSettings)
+void ScViewDataTable::WriteUserDataSequence(uno::Sequence <beans::PropertyValue>& rSettings, const ScViewData& /*rViewData*/, SCTAB /*nTab*/)
 {
 	rSettings.realloc(SC_TABLE_VIEWSETTINGS_COUNT);
 	beans::PropertyValue* pSettings = rSettings.getArray();
@@ -201,17 +166,22 @@
 		pSettings[SC_POSITION_TOP].Value <<= sal_Int32(nPosY[SC_SPLIT_TOP]);
 		pSettings[SC_POSITION_BOTTOM].Name = rtl::OUString(RTL_CONSTASCII_USTRINGPARAM(SC_POSITIONBOTTOM));
 		pSettings[SC_POSITION_BOTTOM].Value <<= sal_Int32(nPosY[SC_SPLIT_BOTTOM]);
+//        pSettings[SC_TABLE_SELECTED].Name = rtl::OUString(RTL_CONSTASCII_USTRINGPARAM(SC_TABLESELECTED));
+//        pSettings[SC_TABLE_SELECTED].Value <<= bool(rViewData.GetMarkData().GetTableSelect( nTab ));
 	}
 }
 
-void ScViewDataTable::ReadUserDataSequence(const uno::Sequence <beans::PropertyValue>& aSettings)
+void ScViewDataTable::ReadUserDataSequence(const uno::Sequence <beans::PropertyValue>& aSettings, ScViewData& rViewData, SCTAB nTab)
 {
 	sal_Int32 nCount(aSettings.getLength());
-	DBG_ASSERT(nCount == SC_TABLE_VIEWSETTINGS_COUNT, " wrong Table View Settings count");
 	sal_Int32 nTemp32(0);
 	sal_Int16 nTemp16(0);
 	sal_Int32 nTempPosV(0);
 	sal_Int32 nTempPosH(0);
+    sal_Int32 nTempPosVTw(0);
+    sal_Int32 nTempPosHTw(0);
+    bool bHasVSplitInTwips = false;
+    bool bHasHSplitInTwips = false;
 	for (sal_Int32 i = 0; i < nCount; i++)
 	{
 		rtl::OUString sName(aSettings[i].Name);
@@ -238,10 +208,22 @@
 		else if (sName.compareToAscii(SC_HORIZONTALSPLITPOSITION) == 0)
 		{
 			aSettings[i].Value >>= nTempPosH;
+            bHasHSplitInTwips = false;
 		}
 		else if (sName.compareToAscii(SC_VERTICALSPLITPOSITION) == 0)
 		{
 			aSettings[i].Value >>= nTempPosV;
+            bHasVSplitInTwips = false;
+		}
+        else if (sName.compareToAscii(SC_HORIZONTALSPLITPOSITION_TWIPS) == 0)
+        {
+            aSettings[i].Value >>= nTempPosHTw;
+            bHasHSplitInTwips = true;
+        }
+        else if (sName.compareToAscii(SC_VERTICALSPLITPOSITION_TWIPS) == 0)
+        {
+            aSettings[i].Value >>= nTempPosVTw;
+            bHasVSplitInTwips = true;
 		}
 		else if (sName.compareToAscii(SC_ACTIVESPLITRANGE) == 0)
 		{
@@ -268,15 +250,23 @@
 			aSettings[i].Value >>= nTemp32;
 			nPosY[SC_SPLIT_BOTTOM] = static_cast<SCROW>(nTemp32);
 		}
+        else if (sName.compareToAscii(SC_TABLESELECTED) == 0)
+        {
+            bool bSelected = false;
+            if( (aSettings[i].Value >>= bSelected) && bSelected )
+                rViewData.GetMarkData().SelectTable( nTab, TRUE );
+        }
 	}
+
 	if (eHSplitMode == SC_SPLIT_FIX)
-		nFixPosX = static_cast<SCCOL>(nTempPosH);
+        nFixPosX = static_cast< SCCOL >( bHasHSplitInTwips ? nTempPosHTw : nTempPosH );
 	else
-		nHSplitPos = nTempPosH;
+        nHSplitPos = bHasHSplitInTwips ? static_cast< long >( nTempPosHTw * rViewData.GetPPTX() ) : nTempPosH;
+
 	if (eVSplitMode == SC_SPLIT_FIX)
-		nFixPosY = static_cast<SCROW>(nTempPosV);
+        nFixPosY = static_cast< SCROW >( bHasVSplitInTwips ? nTempPosVTw : nTempPosV );
 	else
-		nVSplitPos = nTempPosV;
+        nVSplitPos = bHasVSplitInTwips ? static_cast< long >( nTempPosVTw * rViewData.GetPPTY() ) : nTempPosV;
 }
 
 //==================================================================
@@ -2550,7 +2540,7 @@
 					if (pTabData[nTab])
 					{
 						uno::Sequence <beans::PropertyValue> aTableViewSettings;
-						pTabData[nTab]->WriteUserDataSequence(aTableViewSettings);
+                        pTabData[nTab]->WriteUserDataSequence(aTableViewSettings, *this, nTab);
 						String sTabName;
 						GetDocument()->GetName( nTab, sTabName );
 						rtl::OUString sOUName(sTabName);
@@ -2661,7 +2651,7 @@
 						if (aAny >>= aTabSettings)
 						{
 							pTabData[nTab] = new ScViewDataTable;
-							pTabData[nTab]->ReadUserDataSequence(aTabSettings);
+                            pTabData[nTab]->ReadUserDataSequence(aTabSettings, *this, nTab);
 						}
 					}
 				}
@@ -2683,6 +2673,12 @@
 			if (rSettings[i].Value >>= nTemp32)
 				pView->SetTabBarWidth(nTemp32);
 		}
+        else if (sName.compareToAscii(SC_RELHORIZONTALTABBARWIDTH) == 0)
+        {
+            double fWidth = 0.0;
+            if (rSettings[i].Value >>= fWidth)
+                pView->SetPendingRelTabBarWidth( fWidth );
+        }
 		else if (sName.compareToAscii(SC_ZOOMTYPE) == 0)
 		{
 			if (rSettings[i].Value >>= nTemp16)
@@ -2719,6 +2715,9 @@
 			{
 				String aColorName;
 				Color aColor(static_cast<sal_uInt32>(nColor));
+                // #i47435# set automatic grid color explicitly
+                if( aColor.GetColor() == COL_AUTO )
+                    aColor.SetColor( SC_STD_GRIDCOLOR );
 				pOptions->SetGridColor(aColor, aColorName);
 			}
 		}
Index: sc/source/ui/view/viewfunc.cxx
===================================================================
RCS file: /cvs/sc/sc/source/ui/view/viewfunc.cxx,v
retrieving revision 1.37
retrieving revision 1.37.16.1
diff -u -b -I $Revision.*$ -I $Author.*$ -r1.37 -r1.37.16.1
--- sc/source/ui/view/viewfunc.cxx	10 May 2007 17:04:32 -0000	1.37
+++ sc/source/ui/view/viewfunc.cxx	28 Jun 2007 15:47:36 -0000	1.37.16.1
@@ -849,7 +849,7 @@
 	if (pData->GetSimpleArea(aRange))
 	{
 		ScDocShell* pDocSh = pData->GetDocShell();
-		BOOL bSuccess = pDocSh->GetDocFunc().EnterMatrix( aRange, &rMark, rString, FALSE, FALSE );
+        BOOL bSuccess = pDocSh->GetDocFunc().EnterMatrix( aRange, &rMark, NULL, rString, FALSE, FALSE );
 		if (bSuccess)
 			pDocSh->UpdateOle(GetViewData());
 	}
