--- /dev/null	
+++ oox/inc/oox/core/wrappedpropertyset.hxx	
@@ -0,0 +1,146 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: wrappedpropertyset.hxx,v $
+ *
+ *  $Revision: 1.1.2.1 $
+ *
+ *  last change: $Author: dr $ $Date: 2007/02/26 15:52:58 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef OOX_CORE_WRAPPEDPROPERTYSET_HXX
+#define OOX_CORE_WRAPPEDPROPERTYSET_HXX
+
+#include <com/sun/star/beans/XPropertySet.hpp>
+#include <com/sun/star/beans/XMultiPropertySet.hpp>
+
+namespace oox {
+namespace core {
+
+// ============================================================================
+
+/** A wrapper for a UNO property set.
+
+    This class provides functions to silently get and set properties (without
+    exceptions, without the need to check validity of the UNO property set).
+
+    An instance is constructed with the reference to a UNO property set or any
+    other interface (the constructor will query for the
+    com.sun.star.beans.XPropertySet interface then). The reference to the
+    property set will be kept as long as the instance of this class is alive.
+
+    The functions getProperties() and setProperties() try to handle all passed
+    values at once, using the com.sun.star.beans.XMultiPropertySet interface.
+    If the implementation does not support the XMultiPropertySet interface, all
+    properties are handled separately in a loop.
+ */
+class WrappedPropertySet
+{
+public:
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::beans::XPropertySet >       XPropertySetRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::beans::XMultiPropertySet >  XMultiPropertySetRef;
+
+    typedef ::com::sun::star::uno::Any                          UnoAny;
+    typedef ::com::sun::star::uno::Sequence< UnoAny >           UnoAnySequence;
+    typedef ::com::sun::star::uno::Sequence< ::rtl::OUString >  OUStringSequence;
+
+public:
+    inline explicit     WrappedPropertySet() {}
+
+    /** Constructs a property set wrapper with the passed UNO property set. */
+    inline explicit     WrappedPropertySet( const XPropertySetRef& rxPropSet )
+                            { set( rxPropSet ); }
+
+    /** Constructs a property set wrapper after querying the XPropertySet interface. */
+    template< typename Type >
+    inline explicit     WrappedPropertySet( const Type& rObject )
+                            { set( rObject ); }
+
+    /** Sets the passed UNO property set and releases the old UNO property set. */
+    void                set( const XPropertySetRef& rxPropSet );
+
+    /** Queries the passed object (interface or any) for an XPropertySet and releases the old UNO property set. */
+    template< typename Type >
+    inline void         set( const Type& rObject )
+                            { set( XPropertySetRef( rObject, ::com::sun::star::uno::UNO_QUERY ) ); }
+
+    /** Returns true, if the contained XPropertySet interface is valid. */
+    inline bool         is() const { return mxPropSet.is(); }
+
+    /** Returns the contained XPropertySet interface. */
+    inline XPropertySetRef getWrappedPropertySet() const { return mxPropSet; }
+
+    // Get properties ---------------------------------------------------------
+
+    /** Gets the specified property from the property set.
+        @return  true, if the any could be filled with the property value. */
+    bool                getAnyProperty( UnoAny& rValue, const ::rtl::OUString& rPropName ) const;
+
+    /** Gets the specified property from the property set.
+        @return  true, if the passed variable could be filled with the property value. */
+    template< typename Type >
+    inline bool         getProperty( Type& rValue, const ::rtl::OUString& rPropName ) const
+                            { UnoAny aAny; return getAnyProperty( aAny, rPropName ) && (aAny >>= rValue); }
+
+    /** Gets the specified boolean property from the property set.
+        @return  true = property contains true; false = property contains false or error occured. */
+    bool                getBoolProperty( const ::rtl::OUString& rPropName ) const;
+
+    /** Gets the specified properties from the property set. Tries to use the XMultiPropertySet interface.
+        @param rPropNames  The property names. MUST be ordered alphabetically.
+        @param rValues  The related property values. */
+    void                getProperties( UnoAnySequence& rValues, const OUStringSequence& rPropNames ) const;
+
+    // Set properties ---------------------------------------------------------
+
+    /** Puts the passed any into the property set. */
+    void                setAnyProperty( const ::rtl::OUString& rPropName, const UnoAny& rValue );
+
+    /** Puts the passed value into the property set. */
+    template< typename Type >
+    inline void         setProperty( const ::rtl::OUString& rPropName, const Type& rValue )
+                            { setAnyProperty( rPropName, ::com::sun::star::uno::makeAny( rValue ) ); }
+
+    /** Puts the passed properties into the property set. Tries to use the XMultiPropertySet interface.
+        @param rPropNames  The property names. MUST be ordered alphabetically.
+        @param rValues  The related property values. */
+    void                setProperties( const OUStringSequence& rPropNames, const UnoAnySequence& rValues );
+
+    // ------------------------------------------------------------------------
+private:
+    XPropertySetRef     mxPropSet;          /// The mandatory property set interface.
+    XMultiPropertySetRef mxMultiPropSet;    /// The optional multi property set interface.
+};
+
+// ============================================================================
+
+} // namespace core
+} // namespace oox
+
+#endif
+
