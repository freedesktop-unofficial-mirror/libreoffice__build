--- /dev/null	
+++ oox/inc/oox/xls/worksheethelper.hxx	
@@ -0,0 +1,239 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: worksheethelper.hxx,v $
+ *
+ *  $Revision: 1.1.2.17 $
+ *
+ *  last change: $Author: dr $ $Date: 2007/06/01 09:45:21 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef OOX_XLS_WORKSHEETHELPER_HXX
+#define OOX_XLS_WORKSHEETHELPER_HXX
+
+#include <com/sun/star/uno/Reference.hxx>
+#include <boost/shared_ptr.hpp>
+#include "oox/core/helper.hxx"
+
+namespace com { namespace sun { namespace star {
+    namespace table { struct CellAddress; }
+    namespace table { struct CellRangeAddress; }
+    namespace table { class XTableColumns; }
+    namespace table { class XTableRows; }
+    namespace table { class XCell; }
+    namespace table { class XCellRange; }
+    namespace sheet { class XSpreadsheet; }
+    namespace sheet { class XSheetOutline; }
+} } }
+
+namespace oox {
+namespace xls {
+
+class GlobalDataHelper;
+struct BiffAddress;
+struct BiffRange;
+class PageStyle;
+struct OoxSheetViewData;
+
+// ============================================================================
+
+/** An enumeration for all types of sheets in a workbook. */
+enum WorksheetType
+{
+    SHEETTYPE_WORKSHEET,                    /// Worksheet.
+    SHEETTYPE_CHART,                        /// Chart sheet.
+    SHEETTYPE_MACRO                         /// BIFF4 macro sheet.
+};
+
+// ============================================================================
+
+/** Stores formatting data about a range of columns. */
+struct OoxColumnData
+{
+    sal_Int32           mnFirstCol;         /// 1-based (!) index of first column.
+    sal_Int32           mnLastCol;          /// 1-based (!) index of last column.
+    double              mfWidth;            /// Column width in number of characters.
+    sal_Int32           mnXfId;             /// Column default formatting.
+    sal_Int32           mnLevel;            /// Column outline level.
+    bool                mbHidden;           /// True = column is hidden.
+    bool                mbCollapsed;        /// True = column outline is collapsed.
+
+    explicit            OoxColumnData();
+};
+
+// ----------------------------------------------------------------------------
+
+/** Stores formatting data about a range of rows. */
+struct OoxRowData
+{
+    sal_Int32           mnRow;              /// 1-based (!) index of the row.
+    double              mfHeight;           /// Row height in points.
+    sal_Int32           mnXfId;             /// Row default formatting (see mbIsFormatted).
+    sal_Int32           mnLevel;            /// Row outline level.
+    bool                mbFormatted;        /// Cells in row have default formatting.
+    bool                mbHidden;           /// True = row is hidden.
+    bool                mbCollapsed;        /// True = row outline is collapsed.
+
+    explicit            OoxRowData();
+};
+
+// ----------------------------------------------------------------------------
+
+/** Stores formatting data about a page break. */
+struct OoxPageBreakData
+{
+    sal_Int32           mnColRow;           /// 0-based (!) index of column/row.
+    bool                mbManual;           /// True = manual page break.
+
+    explicit            OoxPageBreakData();
+};
+
+// ============================================================================
+// ============================================================================
+
+struct WorksheetHelperImpl;
+
+class WorksheetHelper
+{
+public:
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::sheet::XSpreadsheet >   XSpreadsheetRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::table::XCell >          XCellRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::table::XCellRange >     XCellRangeRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::table::XTableColumns >  XTableColumnsRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::table::XTableRows >     XTableRowsRef;
+
+public:
+    explicit            WorksheetHelper(
+                            const GlobalDataHelper& rGlobalData,
+                            WorksheetType eSheetType,
+                            const XSpreadsheetRef& rxSheet,
+                            sal_Int16 nSheet );
+
+    virtual             ~WorksheetHelper();
+
+    /** Return this helper for better code readability in derived classes. */
+    inline const WorksheetHelper& getWorksheetHelper() const { return *this; }
+    /** Return this helper for better code readability in derived classes. */
+    inline WorksheetHelper& getWorksheetHelper() { return *this; }
+
+    /** Returns the type of this sheet. */
+    WorksheetType       getSheetType() const;
+    /** Returns the XSpreadsheet interface of the processed sheet. */
+    XSpreadsheetRef     getXSpreadsheet() const;
+    /** Returns the XSpreadsheet interface of the processed sheet. */
+    sal_Int16           getSheetIndex() const;
+
+    /** Returns the XCell interface for the passed cell address. */
+    XCellRef            getCell( const ::com::sun::star::table::CellAddress& rAddress ) const;
+    /** Returns the XCell interface for the passed cell address string. */
+    XCellRef            getCell( const ::rtl::OUString& rAddressStr ) const;
+    /** Returns the XCell interface for the passed BIFF cell address. */
+    XCellRef            getCell( const BiffAddress& rBiffAddress ) const;
+
+    /** Returns the XCellRange interface for the passed cell range address. */
+    XCellRangeRef       getCellRange( const ::com::sun::star::table::CellRangeAddress& rRange ) const;
+    /** Returns the XCellRange interface for the passed range address string. */
+    XCellRangeRef       getCellRange( const ::rtl::OUString& rRangeStr ) const;
+    /** Returns the XCellRange interface for the passed BIFF range address. */
+    XCellRangeRef       getCellRange( const BiffRange& rBiffRange ) const;
+
+    /** Returns the address of the passed cell. */
+    static ::com::sun::star::table::CellAddress getCellAddress( const XCellRef& rxCell );
+    /** Returns the address of the passed cell range. */
+    static ::com::sun::star::table::CellRangeAddress getRangeAddress( const XCellRangeRef& rxRange );
+
+    /** Returns the XCellRange interface for a column. */
+    XCellRangeRef       getColumn( sal_Int32 nCol ) const;
+    /** Returns the XCellRange interface for a row. */
+    XCellRangeRef       getRow( sal_Int32 nRow ) const;
+    /** Returns the XCellRange interface for a column or a row. */
+    XCellRangeRef       getColumnOrRow( sal_Int32 nColRow, bool bRow ) const;
+
+    /** Returns the XTableColumns interface for a range of columns. */
+    XTableColumnsRef    getColumns( sal_Int32 nFirstCol, sal_Int32 nLastCol ) const;
+    /** Returns the XTableRows interface for a range of rows. */
+    XTableRowsRef       getRows( sal_Int32 nFirstRow, sal_Int32 nLastRow ) const;
+
+    /** Merges the cells in the passed cell range. */
+    void                setMergedRange( const XCellRangeRef& rxRange ) const;
+
+    /** Sets the passed boolean value to the cell and adjusts number format. */
+    void                setBooleanCell( const XCellRef& rxCell, bool bValue ) const;
+    /** Sets the passed BIFF error code to the cell (by converting it to a formula). */
+    void                setErrorCell( const XCellRef& rxCell, const ::rtl::OUString& rErrorCode ) const;
+    /** Sets the passed BIFF error code to the cell (by converting it to a formula). */
+    void                setErrorCell( const XCellRef& rxCell, sal_uInt8 nErrorCode ) const;
+
+    /** Sets base width for all columns (without padding pixels). This value
+        is only used, if base width has not been set with setDefaultColumnWidth(). */
+    void                setBaseColumnWidth( sal_Int32 nWidth );
+    /** Sets default width for all columns. This function overrides the base
+        width set with the setBaseColumnWidth() function. */
+    void                setDefaultColumnWidth( double fWidth );
+    /** Sets column settings for a specific column range.
+        @descr  Column default formatting is converted directly, other settings
+        are cached and converted in the finalizeImport() call. */
+    void                setColumnData( const OoxColumnData& rData );
+
+    /** Sets default height and hidden state for all unused rows in the sheet. */
+    void                setDefaultRowSettings( double fHeight, bool bHidden );
+    /** Sets row settings for a specific row.
+        @descr  Row default formatting is converted directly, other settings
+        are cached and converted in the finalizeImport() call. */
+    void                setRowData( const OoxRowData& rData );
+
+    /** Sets the position of outline summary symbols for this sheet. */
+    void                setOutlineSummarySymbols( bool bSummaryRight, bool bSummaryBelow );
+
+    /** Returns the page style object that implements import/export of page/print settings. */
+    PageStyle&          getPageStyle();
+    /** Returns the structure containing view settings for this sheet. */
+    OoxSheetViewData&   createSheetViewData();
+
+    /** Converts column default cell formatting. */
+    void                convertColumnFormat( sal_Int32 nFirstCol, sal_Int32 nLastCol, sal_Int32 nXfId );
+    /** Converts row default cell formatting. */
+    void                convertRowFormat( sal_Int32 nRow, sal_Int32 nXfId );
+    /** Converts a column or row page break described in the passed struct. */
+    void                convertPageBreak( const OoxPageBreakData& rData, bool bRowBreak );
+
+    /** Final conversion after importing the worksheet. */
+    void                finalizeWorksheetImport();
+
+private:
+    ::boost::shared_ptr< WorksheetHelperImpl > mxImpl;
+    const GlobalDataHelper& mrGlobalData;
+};
+
+// ============================================================================
+
+} // namespace xls
+} // namespace oox
+
+#endif
+
