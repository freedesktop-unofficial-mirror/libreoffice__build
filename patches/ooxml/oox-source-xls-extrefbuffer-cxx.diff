--- /dev/null	
+++ oox/source/xls/extrefbuffer.cxx	
@@ -0,0 +1,253 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: extrefbuffer.cxx,v $
+ *
+ *  $Revision: 1.1.2.5 $
+ *
+ *  last change: $Author: kohei $ $Date: 2007/07/10 17:13:20 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#include "oox/xls/extrefbuffer.hxx"
+#include "oox/xls/contexthelper.hxx"
+#include "oox/core/wrappedpropertyset.hxx"
+
+#include <com/sun/star/container/XIndexAccess.hpp>
+#include <com/sun/star/container/XNameAccess.hpp>
+#include <com/sun/star/sheet/SheetLinkMode.hpp>
+#include <com/sun/star/sheet/XSheetLinkable.hpp>
+#include <com/sun/star/sheet/XSpreadsheet.hpp>
+#include <com/sun/star/sheet/XSpreadsheetDocument.hpp>
+#include <com/sun/star/sheet/XSpreadsheets.hpp>
+#include <com/sun/star/table/XCell.hpp>
+
+#include "rtl/ustrbuf.hxx"
+
+using ::com::sun::star::container::XIndexAccess;
+using ::com::sun::star::container::XNameAccess;
+using ::com::sun::star::sheet::XSheetLinkable;
+using ::com::sun::star::sheet::XSpreadsheet;
+using ::com::sun::star::sheet::XSpreadsheetDocument;
+using ::com::sun::star::sheet::XSpreadsheets;
+using ::com::sun::star::table::CellAddress;
+using ::com::sun::star::table::XCell;
+using ::com::sun::star::uno::Reference;
+using ::com::sun::star::uno::UNO_QUERY;
+using ::com::sun::star::uno::UNO_QUERY_THROW;
+using ::oox::core::AttributeList;
+using ::oox::core::WrappedPropertySet;
+using ::rtl::OUString;
+using ::rtl::OUStringBuffer;
+
+namespace oox { namespace xls {
+
+ExtRef::ExtRef()
+{
+}
+
+// ---------------------------------------------------------------------------
+
+ExtRefBuffer::ExtRefBuffer( const GlobalDataHelper& rGlobalData ) :
+    GlobalDataHelper( rGlobalData )
+{
+}
+
+void ExtRefBuffer::setExternalLink( sal_Int32 nId, const OUString& aPath )
+{
+    ExtRef aItem;
+    aItem.maPath = aPath;
+    maExtRefs.insert( ExtRefMap::value_type(nId, aItem) );
+}
+
+const ExtRef* ExtRefBuffer::getExternalLinkById( sal_Int32 nId ) const
+{
+    ExtRefMap::const_iterator pos = maExtRefs.find( nId );
+    if ( pos != maExtRefs.end() )
+        return &pos->second;
+
+    return NULL;
+}
+
+bool ExtRefBuffer::isExtRef( const OUString& aCellFormula ) const
+{
+    sal_Int32 nLen = aCellFormula.getLength();
+    const sal_Unicode* p = aCellFormula.getStr();
+    if ( p[0] != static_cast<sal_Unicode>('[') )
+        // For this to be a valid external reference, the first character
+        // must be '['.
+        return false;
+
+    sal_uInt8 nDigitCount = 0;
+    for ( sal_Int32 i = 1; i < nLen; ++i )
+    {
+        if ( p[i] >= static_cast<sal_Unicode>('0') && p[i] <= static_cast<sal_Unicode>('9') )
+        {
+            ++nDigitCount;
+            if ( nDigitCount > 10 )
+                // 10 digits ought to be enough.  Let's mark any larger number invalid.
+                return false;
+        }
+        else if ( p[i] == static_cast<sal_Unicode>(']') )
+            return (nDigitCount > 0);
+        else
+            return false;
+    }
+    return false;
+}
+
+void ExtRefBuffer::addToDestCellList( const CellAddress& aAddr, const OUString& aFormula )
+{
+    ExtRefCell aCell;
+    aCell.maCellAddress = aAddr;
+    aCell.maFormulaString = aFormula;
+    maDestCellList.push_back(aCell);
+}
+
+void ExtRefBuffer::finalizeImport()
+{
+//  setExtSheets();
+    setExtRefCells();
+}
+
+void ExtRefBuffer::setExtSheets()
+{
+    using namespace ::com::sun::star::sheet;
+    Reference< XSpreadsheets > xSheets = getDocument()->getSheets();
+    Reference< XIndexAccess > xSheetByIndex( xSheets, UNO_QUERY );
+    Reference< XNameAccess > xSheetByName( xSheets, UNO_QUERY );
+    if ( !xSheetByIndex.is() || !xSheetByName.is() )
+        return;
+
+    const OUString& aFileUrl = getGlobalData().getBaseFilter().getFileUrl();
+    sal_Int32 nLast = aFileUrl.lastIndexOf(sal_Unicode('/'));
+    OUString aDirUrl = aFileUrl.copy(0, nLast+1);
+    ExtRefMap::iterator itr = maExtRefs.begin(), itrEnd = maExtRefs.end();
+    for ( ; itr != itrEnd; ++itr )
+    {
+        OUString aRef = aDirUrl + itr->second.maPath;
+        aRef = aRef.replace(sal_Unicode('/'), sal_Unicode('_'));
+        aRef = aRef.replace(sal_Unicode(':'), sal_Unicode('_'));
+        aRef = aRef.replace(sal_Unicode(' '), sal_Unicode('_'));
+        aRef = aRef.replace(sal_Unicode('.'), sal_Unicode('_'));
+
+        // Insert a new sheet to the end.
+        sal_Int16 nCount = static_cast< sal_Int16 >( xSheetByIndex->getCount() );
+        xSheets->insertNewByName( aRef, nCount );
+        Reference< XSpreadsheet > xSheet( xSheetByName->getByName( aRef ), UNO_QUERY );
+        if ( !xSheet.is() )
+            continue;
+
+        WrappedPropertySet aProp( xSheet );
+        aProp.setProperty( CREATE_OUSTRING("IsVisible"), static_cast<sal_Bool>(false) );
+        itr->second.maSheetName = aRef;
+
+        // Link it with the file.
+        Reference< XSheetLinkable > xLinkable( xSheetByName->getByName( aRef ), UNO_QUERY );
+        if ( !xLinkable.is() )
+            continue;
+
+        xLinkable->link( CREATE_OUSTRING("file:///home/kyoshida/ooo/ooxml/extSheet/extSheetContent.xls"),
+                         CREATE_OUSTRING("Sheet1"), OUString::createFromAscii(""),
+                         OUString::createFromAscii(""),
+                         SheetLinkMode_NORMAL );
+    }
+}
+
+void ExtRefBuffer::setExtRefCells()
+{
+    const OUString aEq = CREATE_OUSTRING("=");
+
+    Reference< XIndexAccess > xSheetByIndex( getDocument()->getSheets(), UNO_QUERY );
+    if ( !xSheetByIndex.is() )
+        return;
+
+    // Now, iterate through the cached destination cells, and insert the references.
+    ExtRefCellList::const_iterator itr = maDestCellList.begin(), itrEnd = maDestCellList.end();
+    for ( ; itr != itrEnd; ++itr )
+    {
+        const CellAddress& aAddr = itr->maCellAddress;
+        Reference< XSpreadsheet > xSheet( xSheetByIndex->getByIndex( aAddr.Sheet ), UNO_QUERY );
+        if ( !xSheet.is() )
+            continue;
+
+        Reference< XCell > xCell = xSheet->getCellByPosition( aAddr.Column, aAddr.Row );
+        if ( !xCell.is() )
+            continue;
+
+        OUString aFormula( aEq + itr->maFormulaString );
+        expandFormula( aFormula, aFormula );
+        xCell->setFormula( aFormula );
+    }
+}
+
+void ExtRefBuffer::expandFormula( const OUString& aFormula, OUString& rExpanded )
+{
+    static const sal_Unicode nOpenAB('['), nCloseAB(']'), nExclam('!');
+    OUStringBuffer aBuf(aFormula), aBufOut, aBufExtId;
+    sal_Int32 nLen = aBuf.getLength();
+    sal_uInt8 nScope = 0;
+    for ( sal_Int32 i = 0; i < nLen; ++i )
+    {
+        sal_Unicode c = aBuf.charAt(i);
+        if ( c == nOpenAB )
+        {
+            ++nScope;
+            aBufOut.appendAscii("'");
+        }
+        else if ( c == nCloseAB )
+        {
+            --nScope;
+            if ( aBufExtId.getLength() > 0 )
+            {
+                sal_Int32 nId = aBufExtId.makeStringAndClear().toInt32();
+                const ExtRef* pExtRef = getExtRefs().getExternalLinkById(nId);
+                if ( pExtRef )
+                    aBufOut.append(pExtRef->maPath);
+                else
+                    aBufOut.appendAscii("???");
+            }
+            aBufOut.appendAscii("'#");
+        }
+        else if ( c == nExclam )
+        {
+            aBufOut.appendAscii(".");
+        }
+        else if ( nScope > 0 )
+        {
+            aBufExtId.append(c);
+        }
+        else
+        {
+            aBufOut.append(c);
+        }
+    }
+    rExpanded = aBufOut.makeStringAndClear();
+}
+
+} // namespace xls
+} // namespace oox
