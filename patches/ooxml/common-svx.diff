--- svx/inc/svx/unoedsrc.hxx	11 Apr 2007 16:43:55 -0000	1.2
+++ svx/inc/svx/unoedsrc.hxx	12 Jul 2007 13:07:29 -0000
@@ -199,6 +199,12 @@
 
 	virtual SfxItemPool* GetPool() const = 0;
 
+     virtual const SfxItemSet*   GetEmptyItemSetPtr() = 0;
+ 
+     // implementation functions for XParagraphAppend and XTextPortionAppend
+     virtual void        AppendParagraph() = 0;
+     virtual xub_StrLen  AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet &rSet ) = 0;
+    
     /** Query state of forwarder
 
     	@return sal_False, if no longer valid
--- svx/inc/svx/unofored.hxx	11 Apr 2007 16:44:16 -0000	1.2
+++ svx/inc/svx/unofored.hxx	12 Jul 2007 13:07:29 -0000
@@ -96,6 +96,11 @@
     virtual USHORT			GetDepth( USHORT nPara ) const;
     virtual sal_Bool		SetDepth( USHORT nPara, USHORT nNewDepth );
 
+    virtual const SfxItemSet*   GetEmptyItemSetPtr();
+ 
+    // implementation functions for XParagraphAppend and XTextPortionAppend
+    virtual void        AppendParagraph();
+    virtual xub_StrLen  AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet &rSet );
 };
 
 #endif
--- svx/inc/svx/unoforou.hxx	11 Apr 2007 16:44:27 -0000	1.2
+++ svx/inc/svx/unoforou.hxx	12 Jul 2007 13:07:29 -0000
@@ -119,6 +119,12 @@
 
 	/* this method flushes internal caches for this forwarder */
 	void				flushCache();
+    
+    virtual const SfxItemSet*   GetEmptyItemSetPtr();
+
+    // implementation functions for XParagraphAppend and XTextPortionAppend
+    virtual void        AppendParagraph();
+    virtual xub_StrLen  AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet &rSet );
 };
 
 #endif
--- svx/inc/svx/unotext.hxx	11 Apr 2007 16:46:39 -0000	1.2
+++ svx/inc/svx/unotext.hxx	12 Jul 2007 13:07:30 -0000
@@ -73,8 +73,8 @@
 #ifndef _COM_SUN_STAR_TEXT_XTEXTRANGECOMPARE_HPP_
 #include <com/sun/star/text/XTextRangeCompare.hpp>
 #endif
-#ifndef _COM_SUN_STAR_LANG_LOCALE_HPP_
-#include <com/sun/star/lang/Locale.hpp>
+#ifndef _COM_SUN_STAR_TEXT_XTEXTAPPEND_HPP_
+#include <com/sun/star/text/XTextAppend.hpp>
 #endif
 
 #ifndef _CPPUHELPER_WEAK_HXX_
@@ -314,6 +314,11 @@
     virtual USHORT			GetDepth( USHORT nPara ) const;
     virtual sal_Bool		SetDepth( USHORT nPara, USHORT nNewDepth );
 
+    virtual const SfxItemSet*   GetEmptyItemSetPtr();
+
+    // implementation functions for XParagraphAppend and XTextPortionAppend
+    virtual void        AppendParagraph();
+    virtual xub_StrLen  AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet &rSet );
 };
 
 namespace accessibility 
@@ -461,7 +466,7 @@
 };
 
 class SVX_DLLPUBLIC SvxUnoTextBase  : public SvxUnoTextRangeBase,
-						public ::com::sun::star::text::XText,
+                        public ::com::sun::star::text::XTextAppend,
 						public ::com::sun::star::container::XEnumerationAccess,
 						public ::com::sun::star::text::XTextRangeMover,
 						public ::com::sun::star::lang::XTypeProvider
@@ -515,6 +520,13 @@
 	// ::com::sun::star::text::XTextRangeMover
 	virtual void SAL_CALL moveTextRange( const ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange >& xRange, sal_Int16 nParagraphs ) throw(::com::sun::star::uno::RuntimeException);
 
+    // com::sun::star::text::XParagraphAppend (new import API)
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > SAL_CALL appendParagraph( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& CharacterAndParagraphProperties ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException);
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > SAL_CALL finishParagraph( const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& CharacterAndParagraphProperties ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException);
+
+    // com::sun::star::text::XTextPortionAppend (new import API)
+    virtual ::com::sun::star::uno::Reference< ::com::sun::star::text::XTextRange > SAL_CALL appendTextPortion( const ::rtl::OUString& Text, const ::com::sun::star::uno::Sequence< ::com::sun::star::beans::PropertyValue >& CharacterAndParagraphProperties ) throw (::com::sun::star::lang::IllegalArgumentException, ::com::sun::star::beans::UnknownPropertyException, ::com::sun::star::uno::RuntimeException);
+
 	// ::com::sun::star::lang::XServiceInfo
     virtual ::rtl::OUString SAL_CALL getImplementationName() throw(::com::sun::star::uno::RuntimeException);
     virtual ::com::sun::star::uno::Sequence< ::rtl::OUString > SAL_CALL getSupportedServiceNames(  ) throw(::com::sun::star::uno::RuntimeException);
--- svx/source/accessibility/AccessibleEmptyEditSource.cxx	27 Jun 2007 16:36:55 -0000	1.7
+++ svx/source/accessibility/AccessibleEmptyEditSource.cxx	12 Jul 2007 13:07:30 -0000
@@ -150,6 +150,11 @@
         void			QuickSetAttribs( const SfxItemSet& /*rSet*/, const ESelection& /*rSel*/ ) {}
         void			QuickInsertLineBreak( const ESelection& /*rSel*/ ) {}
 
+        const SfxItemSet * GetEmptyItemSetPtr() { return 0; }
+
+        void        AppendParagraph() {}
+        xub_StrLen  AppendTextPortion( USHORT /*nPara*/, const String & /*rText*/, const SfxItemSet & /*rSet*/ ) { return 0; }
+
         XubString		CalcFieldValue( const SvxFieldItem& /*rField*/, USHORT /*nPara*/, USHORT /*nPos*/, Color*& /*rpTxtColor*/, Color*& /*rpFldColor*/ )
         {
             return  XubString();
--- svx/source/inc/unoedprx.hxx	27 Jun 2007 18:24:55 -0000	1.6
+++ svx/source/inc/unoedprx.hxx	12 Jul 2007 13:07:31 -0000
@@ -95,6 +95,13 @@
     virtual USHORT			GetDepth( USHORT nPara ) const;
     virtual sal_Bool		SetDepth( USHORT nPara, USHORT nNewDepth );
 
+    virtual const SfxItemSet*   GetEmptyItemSetPtr();
+
+    // implementation functions for XParagraphAppend and XTextPortionAppend
+    // (not needed for accessibility, only for new import API)
+    virtual void        AppendParagraph();
+    virtual xub_StrLen  AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet &rSet );
+
     void 					SetForwarder( SvxTextForwarder& );
     sal_Bool			  	HaveImageBullet( USHORT nPara ) const;
     sal_Bool			  	HaveTextBullet( USHORT nPara ) const;
--- svx/source/unodraw/unoshap2.cxx	27 Jun 2007 19:26:23 -0000	1.63
+++ svx/source/unodraw/unoshap2.cxx	12 Jul 2007 13:07:34 -0000
@@ -1746,6 +1746,15 @@
 				}
 			}
 		}
+		else if( aValue.getValueType() == INTERFACE_TYPE( graphic::XGraphic ))
+		{
+			Reference< graphic::XGraphic > xGraphic( aValue, UNO_QUERY );
+			if( xGraphic.is() )
+			{
+				Graphic aGraphic( xGraphic );
+				((SdrGrafObj*)mpObj.get())->SetGraphic(aGraphic);
+			}
+		}
 	}
 	else if( mpObj.is() && aPropertyName.equalsAsciiL( RTL_CONSTASCII_STRINGPARAM(UNO_NAME_GRAPHOBJ_GRAFURL)))
 	{
@@ -2168,6 +2177,7 @@
 
 	if ( bCustomShapeGeometry )
 	{
+		((SdrObjCustomShape*)pObject)->MergeDefaultAttributes(0);
 		Rectangle aRect( pObject->GetSnapRect() );
 
 		// #i38892#
--- svx/source/unoedit/unoedprx.cxx	27 Jun 2007 19:28:32 -0000	1.18
+++ svx/source/unoedit/unoedprx.cxx	12 Jul 2007 13:07:35 -0000
@@ -1173,6 +1173,24 @@
     return aStartIndex.IsEditableRange( aEndIndex );
 }
 
+const SfxItemSet * SvxAccessibleTextAdapter::GetEmptyItemSetPtr()
+{
+    DBG_ERROR( "not implemented" );
+    return 0;
+}
+
+void SvxAccessibleTextAdapter::AppendParagraph()
+{
+    DBG_ERROR( "not implemented" );
+}
+
+xub_StrLen SvxAccessibleTextAdapter::AppendTextPortion( USHORT, const String &, const SfxItemSet & )
+{
+    DBG_ERROR( "not implemented" );
+    return 0;
+}
+
+
 
 //---------------------------------------------------------------------------------------
 
@@ -1280,3 +1298,4 @@
     mrViewForwarder = &rForwarder;
     mrTextForwarder = &rTextForwarder;
 }
+
--- svx/source/unoedit/unofored.cxx	27 Jun 2007 19:29:14 -0000	1.27
+++ svx/source/unoedit/unofored.cxx	12 Jul 2007 13:07:35 -0000
@@ -511,4 +511,29 @@
     return nNewDepth == 0 ? sal_True : sal_False;
 }
 
+const SfxItemSet * SvxEditEngineForwarder::GetEmptyItemSetPtr()
+{
+    return &rEditEngine.GetEmptyItemSet();
+}
+
+void SvxEditEngineForwarder::AppendParagraph()
+{
+    rEditEngine.InsertParagraph( rEditEngine.GetParagraphCount(), String::EmptyString() );
+}
+
+xub_StrLen SvxEditEngineForwarder::AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet & /*rSet*/ )
+{
+    xub_StrLen nLen = 0;
+
+    USHORT nParaCount = rEditEngine.GetParagraphCount();
+    DBG_ASSERT( nPara < nParaCount, "paragraph index out of bounds" );
+    if (/*0 <= nPara && */nPara < nParaCount)
+    {
+        nLen = rEditEngine.GetTextLen( nPara );
+        rEditEngine.QuickInsertText( rText, ESelection( nPara, nLen, nPara, nLen ) );
+    }
+
+    return nLen;
+}
+
 //------------------------------------------------------------------------
--- svx/source/unoedit/unoforou.cxx	27 Jun 2007 19:29:30 -0000	1.30
+++ svx/source/unoedit/unoforou.cxx	12 Jul 2007 13:07:35 -0000
@@ -519,4 +519,33 @@
     return sal_False;
 }
 
+const SfxItemSet * SvxOutlinerForwarder::GetEmptyItemSetPtr()
+{
+    EditEngine& rEditEngine = const_cast< EditEngine& >( rOutliner.GetEditEngine() );
+    return &rEditEngine.GetEmptyItemSet();
+}
+
+void SvxOutlinerForwarder::AppendParagraph()
+{
+    EditEngine& rEditEngine = const_cast< EditEngine& >( rOutliner.GetEditEngine() );
+    rEditEngine.InsertParagraph( rEditEngine.GetParagraphCount(), String::EmptyString() );
+}
+
+xub_StrLen SvxOutlinerForwarder::AppendTextPortion( USHORT nPara, const String &rText, const SfxItemSet & /*rSet*/ )
+{
+    xub_StrLen nLen = 0;
+
+    EditEngine& rEditEngine = const_cast< EditEngine& >( rOutliner.GetEditEngine() );
+    USHORT nParaCount = rEditEngine.GetParagraphCount();
+    DBG_ASSERT( nPara < nParaCount, "paragraph index out of bounds" );
+    if (/*0 <= nPara && */nPara < nParaCount)
+    {
+        nLen = rEditEngine.GetTextLen( nPara );
+        rEditEngine.QuickInsertText( rText, ESelection( nPara, nLen, nPara, nLen ) );
+    }
+
+    return nLen;
+}
+
+
 //------------------------------------------------------------------------
--- svx/source/unoedit/unotext.cxx	27 Jun 2007 19:29:57 -0000	1.61
+++ svx/source/unoedit/unotext.cxx	12 Jul 2007 13:07:37 -0000
@@ -113,6 +113,7 @@
         return uno::makeAny(uno::Reference< xint >(this))
 
 extern const SfxItemPropertyMap* ImplGetSvxTextPortionPropertyMap();
+extern const SfxItemPropertyMap* ImplGetSvxUnoOutlinerTextCursorPropertyMap();
 
 // ====================================================================
 // helper fuer Item/Property Konvertierung
@@ -1673,7 +1674,7 @@
 
 SvxUnoTextBase::SvxUnoTextBase( const SvxUnoTextBase& rText ) throw()
 :	SvxUnoTextRangeBase( rText )
-,	text::XText()
+, text::XTextAppend()
 ,	container::XEnumerationAccess()
 ,	text::XTextRangeMover()
 ,	lang::XTypeProvider()
@@ -1722,6 +1723,9 @@
 	QUERYINT( text::XTextRangeCompare );
 	QUERYINT( lang::XServiceInfo );
 	QUERYINT( text::XTextRangeMover );
+    QUERYINT( text::XTextAppend );
+    QUERYINT( text::XParagraphAppend );
+    QUERYINT( text::XTextPortionAppend );
 	QUERYINT( lang::XTypeProvider );
 	QUERYINT( lang::XUnoTunnel );
 
@@ -1734,7 +1738,7 @@
 {
 	if( maTypeSequence.getLength() == 0 )
 	{
-		maTypeSequence.realloc( 10 ); // !DANGER! keep this updated
+        maTypeSequence.realloc( 13 ); // !DANGER! keep this updated
 		uno::Type* pTypes = maTypeSequence.getArray();
 
 		*pTypes++ = ::getCppuType(( const uno::Reference< text::XText >*)0);
@@ -1744,6 +1748,9 @@
 //		*pTypes++ = ::getCppuType(( const uno::Reference< beans::XTolerantMultiPropertySet >*)0);
 		*pTypes++ = ::getCppuType(( const uno::Reference< beans::XPropertyState >*)0);
 		*pTypes++ = ::getCppuType(( const uno::Reference< text::XTextRangeMover >*)0);
+        *pTypes++ = ::getCppuType(( const uno::Reference< text::XTextAppend >*)0);
+        *pTypes++ = ::getCppuType(( const uno::Reference< text::XParagraphAppend >*)0);
+        *pTypes++ = ::getCppuType(( const uno::Reference< text::XTextPortionAppend >*)0);
 		*pTypes++ = ::getCppuType(( const uno::Reference< lang::XServiceInfo >*)0);
 		*pTypes++ = ::getCppuType(( const uno::Reference< lang::XTypeProvider >*)0);
 		*pTypes++ = ::getCppuType(( const uno::Reference< lang::XUnoTunnel >*)0);
@@ -2042,6 +2049,149 @@
 {
 }
 
+void SvxPropertyValuesToItemSet(
+		SfxItemSet &rItemSet,
+		const uno::Sequence< beans::PropertyValue > rPropertyVaules,
+        const SfxItemPropertyMap &rMap,
+        SvxTextForwarder *pForwarder /*needed for WID_NUMLEVEL*/,
+        USHORT nPara /*needed for WID_NUMLEVEL*/)
+	throw(lang::IllegalArgumentException, beans::UnknownPropertyException, uno::RuntimeException)
+{
+    SfxItemPropertySet aPropSet( &rMap );
+    sal_Int32 nProps = rPropertyVaules.getLength();
+    const beans::PropertyValue *pProps = rPropertyVaules.getConstArray();
+    for (sal_Int32 i = 0;  i < nProps;  ++i)
+    {
+        const SfxItemPropertyMap *pEntry = SfxItemPropertyMap::GetByName( &rMap, pProps[i].Name );
+        if (pEntry)
+        {
+            // Note: there is no need to take special care of the properties
+            //      TextField (EE_FEATURE_FIELD) and
+            //      TextPortionType (WID_PORTIONTYPE)
+            //  since they are read-only and thus are already taken care of below.
+
+            if (pEntry->nFlags & beans::PropertyAttribute::READONLY)
+                // should be PropertyVetoException which is not yet defined for the new import API's functions
+                throw uno::RuntimeException( OUString ( RTL_CONSTASCII_USTRINGPARAM ( "Property is read-only: " ) ) + pProps[i].Name, static_cast < cppu::OWeakObject * > ( 0 ) );
+                //throw PropertyVetoException ( OUString ( RTL_CONSTASCII_USTRINGPARAM ( "Property is read-only: " ) ) + pProps[i].Name, static_cast < cppu::OWeakObject * > ( 0 ) );
+
+            if (pEntry->nWID == WID_FONTDESC)
+            {
+                awt::FontDescriptor aDesc;
+                if (pProps[i].Value >>= aDesc)
+                    SvxUnoFontDescriptor::FillItemSet( aDesc, rItemSet );
+            }
+            else if (pEntry->nWID == WID_NUMLEVEL)
+            {
+                if (pForwarder)
+                {
+                    sal_Int16 nLevel = 0;
+                    if (pProps[i].Value >>= nLevel)
+                    {
+                        // #101004# Call interface method instead of unsafe cast
+                        if (!pForwarder->SetDepth( nPara, nLevel ))
+                            throw lang::IllegalArgumentException();
+                    }
+                }
+            }
+            else
+                aPropSet.setPropertyValue( *pEntry, pProps[i].Value, rItemSet );
+        }
+        else
+            throw beans::UnknownPropertyException(OUString ( RTL_CONSTASCII_USTRINGPARAM ( "Unknown property: " ) ) + pProps[i].Name, static_cast < cppu::OWeakObject * > ( 0 ) );
+    }
+}
+
+// com::sun::star::text::XParagraphAppend (new import API)
+uno::Reference< text::XTextRange > SAL_CALL SvxUnoTextBase::appendParagraph( 
+        const uno::Sequence< beans::PropertyValue >& rCharAndParaProps ) 
+    throw (lang::IllegalArgumentException, beans::UnknownPropertyException, uno::RuntimeException)
+{
+    OGuard aGuard( Application::GetSolarMutex() );
+	uno::Reference< text::XTextRange > xRet;
+    SvxEditSource *pEditSource = GetEditSource();
+    SvxTextForwarder *pTextForwarder = pEditSource ? pEditSource->GetTextForwarder() : 0;
+    if (pTextForwarder)
+    {
+        USHORT nParaCount = pTextForwarder->GetParagraphCount();
+        DBG_ASSERT( nParaCount > 0, "paragraph count is 0 or negative" );
+		pTextForwarder->AppendParagraph();
+
+        // set properties for new appended (now last) paragraph
+        ESelection aSel( nParaCount, 0, nParaCount, 0 );
+        SfxItemSet aItemSet( *pTextForwarder->GetEmptyItemSetPtr() );
+        const SfxItemPropertyMap *pMap = ImplGetSvxUnoOutlinerTextCursorPropertyMap();
+        SvxPropertyValuesToItemSet( aItemSet, rCharAndParaProps, *pMap, pTextForwarder, nParaCount );
+        pTextForwarder->QuickSetAttribs( aItemSet, aSel );
+		SvxUnoTextRange* pRange = new SvxUnoTextRange( *this );
+		xRet = pRange;
+		pRange->SetSelection( aSel );
+    }
+	return xRet;
+}
+
+uno::Reference< text::XTextRange > SAL_CALL SvxUnoTextBase::finishParagraph( 
+        const uno::Sequence< beans::PropertyValue >& rCharAndParaProps ) 
+    throw (lang::IllegalArgumentException, beans::UnknownPropertyException, uno::RuntimeException)
+{
+    OGuard aGuard( Application::GetSolarMutex() );
+
+	uno::Reference< text::XTextRange > xRet;
+    SvxEditSource *pEditSource = GetEditSource();
+    SvxTextForwarder *pTextForwarder = pEditSource ? pEditSource->GetTextForwarder() : 0;
+    if (pTextForwarder)
+    {
+        USHORT nParaCount = pTextForwarder->GetParagraphCount();
+        DBG_ASSERT( nParaCount > 0, "paragraph count is 0 or negative" );
+        pTextForwarder->AppendParagraph();
+
+        // set properties for the previously last paragraph
+        USHORT nPara = nParaCount - 1;
+        ESelection aSel( nPara, 0, nPara, 0 );
+        SfxItemSet aItemSet( *pTextForwarder->GetEmptyItemSetPtr() );
+        const SfxItemPropertyMap *pMap = ImplGetSvxUnoOutlinerTextCursorPropertyMap();
+        SvxPropertyValuesToItemSet( aItemSet, rCharAndParaProps, *pMap, pTextForwarder, nPara );
+		pTextForwarder->QuickSetAttribs( aItemSet, aSel );
+		SvxUnoTextRange* pRange = new SvxUnoTextRange( *this );
+		xRet = pRange;
+		pRange->SetSelection( aSel );
+	}
+	return xRet;
+}
+
+// com::sun::star::text::XTextPortionAppend (new import API)
+uno::Reference< text::XTextRange > SAL_CALL SvxUnoTextBase::appendTextPortion( 
+        const ::rtl::OUString& rText, 
+        const uno::Sequence< beans::PropertyValue >& rCharAndParaProps ) 
+    throw (lang::IllegalArgumentException, beans::UnknownPropertyException, uno::RuntimeException)
+{
+    OGuard aGuard( Application::GetSolarMutex() );
+
+    SvxEditSource *pEditSource = GetEditSource();
+    SvxTextForwarder *pTextForwarder = pEditSource ? pEditSource->GetTextForwarder() : 0;
+	uno::Reference< text::XTextRange > xRet;
+    if (pTextForwarder)
+    {
+        USHORT nParaCount = pTextForwarder->GetParagraphCount();
+        DBG_ASSERT( nParaCount > 0, "paragraph count is 0 or negative" );
+		USHORT nPara = nParaCount - 1;
+        SfxItemSet aSet( pTextForwarder->GetParaAttribs( nPara ) );
+		xub_StrLen nStart = pTextForwarder->AppendTextPortion( nPara, rText, aSet );
+		xub_StrLen nEnd   = pTextForwarder->GetTextLen( nPara );
+
+        // set properties for the new text portion
+        ESelection aSel( nPara, nStart, nPara, nEnd );
+        SfxItemSet aItemSet( *pTextForwarder->GetEmptyItemSetPtr() );
+        const SfxItemPropertyMap *pMap = ImplGetSvxTextPortionPropertyMap();
+        SvxPropertyValuesToItemSet( aItemSet, rCharAndParaProps, *pMap, pTextForwarder, nPara );
+		pTextForwarder->QuickSetAttribs( aItemSet, aSel );
+		SvxUnoTextRange* pRange = new SvxUnoTextRange( *this );
+		xRet = pRange;
+		pRange->SetSelection( aSel );
+	}
+	return xRet;
+}
+
 // lang::XServiceInfo
 OUString SAL_CALL SvxUnoTextBase::getImplementationName()
 	throw(uno::RuntimeException)
@@ -2402,3 +2552,19 @@
 {
     return sal_False;
 }
+
+const SfxItemSet * SvxDummyTextSource::GetEmptyItemSetPtr()
+{
+    return 0;
+}
+
+void SvxDummyTextSource::AppendParagraph()
+{
+}
+
+xub_StrLen SvxDummyTextSource::AppendTextPortion( USHORT, const String &, const SfxItemSet & )
+{
+    return 0;
+}
+
+
--- svx/source/xoutdev/xattrbmp.cxx	27 Jun 2007 19:33:53 -0000	1.16
+++ svx/source/xoutdev/xattrbmp.cxx	12 Jul 2007 13:07:38 -0000
@@ -36,6 +36,7 @@
 // MARKER(update_precomp.py): autogen include statement, do not remove
 #include "precompiled_svx.hxx"
 #include <com/sun/star/awt/XBitmap.hpp>
+#include <com/sun/star/graphic/XGraphic.hpp>
 #include <tools/stream.hxx>
 #include <vcl/window.hxx>
 #include <vcl/virdev.hxx>
@@ -802,6 +803,7 @@
     ::rtl::OUString aName;
     ::rtl::OUString aURL;
     ::com::sun::star::uno::Reference< ::com::sun::star::awt::XBitmap > xBmp;
+    ::com::sun::star::uno::Reference< ::com::sun::star::graphic::XGraphic > xGraphic;
 
     bool bSetName   = false;
     bool bSetURL    = false;
@@ -812,7 +814,11 @@
     else if( nMemberId == MID_GRAFURL )
 		bSetURL = (rVal >>= aURL);
 	else if( nMemberId == MID_BITMAP )
+	{
         bSetBitmap = (rVal >>= xBmp);
+		if ( !bSetBitmap )
+			bSetBitmap = (rVal >>= xGraphic );
+	}
     else
     {
         DBG_ASSERT( nMemberId == 0, "invalid member-id" );
@@ -843,8 +849,17 @@
     }
     if( bSetBitmap )
     {
-        BitmapEx aInputEx( VCLUnoHelper::GetBitmap( xBmp ) );
-        Bitmap aInput( aInputEx.GetBitmap() );
+		Bitmap aInput;
+		if ( xBmp.is() )
+		{
+	        BitmapEx aInputEx( VCLUnoHelper::GetBitmap( xBmp ) );
+		    aInput = aInputEx.GetBitmap();
+		}
+		else if ( xGraphic.is() )
+		{
+			Graphic aGraphic( xGraphic );
+		    aInput = aGraphic.GetBitmap();
+		}
 
         // note: aXOBitmap is the member bitmap
         aXOBitmap.SetBitmap( aInput );
