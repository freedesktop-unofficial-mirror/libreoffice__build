--- /dev/null	
+++ oox/inc/oox/core/binaryinputstream.hxx	
@@ -0,0 +1,131 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: binaryinputstream.hxx,v $
+ *
+ *  $Revision: 1.1.2.4 $
+ *
+ *  last change: $Author: dr $ $Date: 2007/05/10 14:07:06 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#ifndef OOX_CORE_BINARYINPUTSTREAM_HXX
+#define OOX_CORE_BINARYINPUTSTREAM_HXX
+
+#include <com/sun/star/uno/Reference.hxx>
+#include <com/sun/star/uno/Sequence.hxx>
+#include "oox/core/helper.hxx"
+
+namespace com { namespace sun { namespace star {
+    namespace io { class XInputStream; }
+    namespace io { class XSeekable; }
+} } }
+
+namespace oox {
+namespace core {
+
+// ============================================================================
+
+/** Wraps a binary input stream and provides convenient access functions.
+
+    The binary data in the stream is assumed to be in little-endian format.
+ */
+class BinaryInputStream
+{
+public:
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::io::XInputStream >  XInputStreamRef;
+    typedef ::com::sun::star::uno::Reference< ::com::sun::star::io::XSeekable >     XSeekableRef;
+    typedef ::com::sun::star::uno::Sequence< sal_Int8 >                             UnoByteSequence;
+
+    explicit            BinaryInputStream(
+                            const XInputStreamRef& rxInStrm,
+                            sal_Int32 nInitialBufferSize = 0x8000 );
+
+                        ~BinaryInputStream();
+
+    /** Returns true, if the wrapped stream is valid. */
+    inline bool         is() const { return mxInStrm.is(); }
+    /** Returns true, if the wrapped stream is seekable. */
+    inline bool         isSeekable() const { return mxSeek.is(); }
+    /** Returns the XInputStream interface of the wrapped input stream. */
+    inline XInputStreamRef getXInputStream() const { return mxInStrm; }
+
+    /** Returns the size of the stream, if stream is seekable, otherwise -1. */
+    sal_Int64           getLength() const;
+
+    /** Returns the current stream position, if stream is seekable, otherwise -1. */
+    sal_Int64           tell() const;
+    /** Seeks the stream to the passed position, if stream is seekable. */
+    void                seek( sal_Int64 nPos );
+    /** Seeks the stream forward by the passed number of bytes. This works for
+        non-seekable streams too. */
+    void                skip( sal_Int32 nBytes );
+
+    /** Reads nBytes bytes to the passed sequence.
+        @return  Number of bytes really read. */
+    sal_Int32           read( UnoByteSequence& rBuffer, sal_Int32 nBytes );
+    /** Reads nBytes bytes to the (existing) buffer pBuffer.
+        @return  Number of bytes really read. */
+    sal_Int32           read( void* pBuffer, sal_Int32 nBytes );
+
+    /** Reads a value from the stream and converts it to platform byte order. */
+    template< typename Type >
+    void                readValue( Type& rnValue );
+    /** Reads a value from the stream and converts it to platform byte order. */
+    template< typename Type >
+    inline Type         readValue() { Type nValue; readValue( nValue ); return nValue; }
+
+private:
+    XInputStreamRef     mxInStrm;       /// Reference to the input stream.
+    XSeekableRef        mxSeek;         /// Stream seeking interface.
+    UnoByteSequence     maBuffer;       /// Data buffer for readBytes() calls.
+};
+
+// ----------------------------------------------------------------------------
+
+template< typename Type >
+void BinaryInputStream::readValue( Type& rnValue )
+{
+    // can be instanciated for all types supported in class ByteOrderConverter
+    read( &rnValue, static_cast< sal_Int32 >( sizeof( Type ) ) );
+    ByteOrderConverter::convertLittleEndian( rnValue );
+}
+
+template< typename Type >
+inline BinaryInputStream& operator>>( BinaryInputStream& rInStrm, Type& rnValue )
+{
+    rInStrm.readValue( rnValue );
+    return rInStrm;
+}
+
+// ============================================================================
+
+} // namespace core
+} // namespace oox
+
+#endif
+
