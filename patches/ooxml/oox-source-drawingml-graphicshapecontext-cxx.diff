--- /dev/null	
+++ oox/source/drawingml/graphicshapecontext.cxx	
@@ -0,0 +1,165 @@
+/*************************************************************************
+ *
+ *  OpenOffice.org - a multi-platform office productivity suite
+ *
+ *  $RCSfile: graphicshapecontext.cxx,v $
+ *
+ *  $Revision: 1.1.2.8 $
+ *
+ *  last change: $Author: sj $ $Date: 2007/06/29 14:47:16 $
+ *
+ *  The Contents of this file are made available subject to
+ *  the terms of GNU Lesser General Public License Version 2.1.
+ *
+ *
+ *    GNU Lesser General Public License Version 2.1
+ *    =============================================
+ *    Copyright 2005 by Sun Microsystems, Inc.
+ *    901 San Antonio Road, Palo Alto, CA 94303, USA
+ *
+ *    This library is free software; you can redistribute it and/or
+ *    modify it under the terms of the GNU Lesser General Public
+ *    License version 2.1, as published by the Free Software Foundation.
+ *
+ *    This library is distributed in the hope that it will be useful,
+ *    but WITHOUT ANY WARRANTY; without even the implied warranty of
+ *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+ *    Lesser General Public License for more details.
+ *
+ *    You should have received a copy of the GNU Lesser General Public
+ *    License along with this library; if not, write to the Free Software
+ *    Foundation, Inc., 59 Temple Place, Suite 330, Boston,
+ *    MA  02111-1307  USA
+ *
+ ************************************************************************/
+
+#include "oox/drawingml/fillpropertiesgroup.hxx"
+#include "oox/drawingml/graphicshapecontext.hxx"
+#include "oox/core/namespaces.hxx"
+#include "oox/drawingml/drawingmltypes.hxx"
+#include "tokens.hxx"
+
+using ::rtl::OUString;
+using namespace ::com::sun::star::uno;
+using namespace ::oox::core;
+using namespace ::com::sun::star::xml::sax;
+
+namespace oox { namespace drawingml {
+
+// ====================================================================
+// CT_Picture
+GraphicShapeContext::GraphicShapeContext( const FragmentHandlerRef& xHandler, ShapePtr pShapePtr )
+: ShapeContext( xHandler, pShapePtr )
+{
+}
+
+Reference< XFastContextHandler > GraphicShapeContext::createFastChildContext( sal_Int32 aElementToken, const Reference< XFastAttributeList >& xAttribs ) throw (SAXException, RuntimeException)
+{
+	Reference< XFastContextHandler > xRet;
+
+	switch( aElementToken &(~NMSP_MASK) )
+	{
+	// CT_ShapeProperties
+	case XML_xfrm:
+		xRet.set( new Transform2DContext( getHandler(), xAttribs, mpShapePtr ) );
+		break;
+	case XML_blipFill:
+		xRet.set( FillPropertiesGroupContext::StaticCreateContext( getHandler(), (aElementToken&(~NMSP_MASK))|NMSP_DRAWINGML, xAttribs, mpShapePtr->getShapeProperties() ) );
+		break;
+	}
+	if( !xRet.is() )
+		xRet.set( ShapeContext::createFastChildContext( aElementToken, xAttribs ) );
+
+	return xRet;
+}
+
+// ====================================================================
+// CT_GraphicalObjectFrameContext
+GraphicalObjectFrameContext::GraphicalObjectFrameContext( const FragmentHandlerRef& xHandler, ShapePtr pShapePtr )
+: ShapeContext( xHandler, pShapePtr )
+{
+}
+
+Reference< XFastContextHandler > GraphicalObjectFrameContext::createFastChildContext( sal_Int32 aElementToken, const Reference< XFastAttributeList >& xAttribs ) throw (SAXException, RuntimeException)
+{
+	Reference< XFastContextHandler > xRet;
+
+	switch( aElementToken &(~NMSP_MASK) )
+	{
+	// CT_ShapeProperties
+	case XML_nvGraphicFramePr:		// CT_GraphicalObjectFrameNonVisual
+		break;
+	case XML_xfrm:					// CT_Transform2D
+		xRet.set( new Transform2DContext( getHandler(), xAttribs, mpShapePtr ) );
+		break;
+	case XML_graphic:				// CT_GraphicalObject
+		xRet.set( this );
+		break;
+
+		case XML_graphicData :			// CT_GraphicalObjectData
+		{
+			rtl::OUString sUri( xAttribs->getOptionalValue( XML_uri ) );
+			if ( sUri == OUString( RTL_CONSTASCII_USTRINGPARAM( "http://schemas.openxmlformats.org/presentationml/2006/ole" ) ) )
+				xRet.set( new PresentationOle2006Context( mxHandler, mpShapePtr ) );
+			else
+				return xRet;
+		}
+		break;
+	}
+	if( !xRet.is() )
+		xRet.set( ShapeContext::createFastChildContext( aElementToken, xAttribs ) );
+
+	return xRet;
+}
+
+// ====================================================================
+
+PresentationOle2006Context::PresentationOle2006Context( const FragmentHandlerRef& xHandler, ShapePtr pShapePtr )
+: ShapeContext( xHandler, pShapePtr )
+{
+}
+
+PresentationOle2006Context::~PresentationOle2006Context()
+{
+	RelationPtr pRelation = getHandler()->getRelations()->getRelationById( msId );
+	if( pRelation.get() )
+	{
+		// get the input stream for the fill bitmap
+        XmlFilterRef xFilter = getHandler()->getFilter();
+		const OUString aFragmentPath( getHandler()->resolveRelativePath( pRelation->msTarget ) );
+		static const rtl::OUString sGraphicStreamURL( RTL_CONSTASCII_USTRINGPARAM( "GraphicStreamURL" ) );
+		mpShapePtr->getShapeProperties()[ sGraphicStreamURL ] <<= sGraphicStreamURL;
+	}
+}
+
+Reference< XFastContextHandler > PresentationOle2006Context::createFastChildContext( sal_Int32 aElementToken, const Reference< XFastAttributeList >& xAttribs ) throw (SAXException, RuntimeException)
+{
+	Reference< XFastContextHandler > xRet;
+
+	switch( aElementToken &(~NMSP_MASK) )
+	{
+		case XML_oleObj:
+		{
+			msSpid = xAttribs->getOptionalValue( XML_spid );
+			msName = xAttribs->getOptionalValue( XML_name );
+			msId = xAttribs->getOptionalValue( NMSP_RELATIONSHIPS|XML_id );
+			mnWidth = GetCoordinate( xAttribs->getOptionalValue( XML_imgW ) );
+			mnHeight = GetCoordinate( xAttribs->getOptionalValue( XML_imgH ) );
+			msProgId = xAttribs->getOptionalValue( XML_progId );
+		}
+		break;
+
+			case XML_embed:
+			{
+				mnFollowColorSchemeToken = xAttribs->getOptionalValueToken( XML_followColorScheme, XML_full );
+			}
+			break;
+	}
+	if( !xRet.is() )
+		xRet.set( ShapeContext::createFastChildContext( aElementToken, xAttribs ) );
+
+	return xRet;
+}
+
+
+} }
