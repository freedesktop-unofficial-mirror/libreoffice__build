unchanged:
--- vcl/inc/ilstbox.hxx	24 Apr 2003 16:29:18 -0000	1.20
+++ vcl/inc/ilstbox.hxx	3 Mar 2004 15:32:07 -0000
@@ -573,6 +573,7 @@ public:
 	virtual void	Resize();
 	virtual void	GetFocus();
 	virtual void	LoseFocus();
+    virtual long    PreNotify( NotifyEvent& rNEvt );
 
 	USHORT			GetItemPos() const { return mnItemPos; }
 	void			SetItemPos( USHORT n ) { mnItemPos = n; }

--- vcl/source/control/ilstbox.cxx	24 Apr 2003 16:31:26 -0000	1.41
+++ vcl/source/control/ilstbox.cxx	3 Mar 2004 15:32:07 -0000
@@ -149,10 +149,14 @@ void ImplInitDropDownButton( PushButton*
 		pButton->SetSymbol( SYMBOL_SPIN_UPDOWN );
 	else
 		pButton->SetSymbol( SYMBOL_SPIN_DOWN );
+
+	if ( pButton->IsNativeControlSupported(CTRL_LISTBOX, PART_ENTIRE_CONTROL)
+			&& ! pButton->IsNativeControlSupported(CTRL_LISTBOX, PART_BUTTON_DOWN) )
+		pButton->SetBackground();
 }
 
 // =======================================================================
-
+
 ImplEntryList::ImplEntryList( Window* pWindow )
 {
     mpWindow = pWindow;
@@ -1926,6 +1930,9 @@ ImplListBox::ImplListBox( Window* pParen
 	Control( pParent, nWinStyle ),
 	maLBWindow( this, nWinStyle&(~WB_BORDER) )
 {
+    // for native widget rendering we must be able to detect this window type
+    SetType( WINDOW_LISTBOXWINDOW );
+
 	mpVScrollBar	= new ScrollBar( this, WB_VSCROLL | WB_DRAG );
 	mpHScrollBar	= new ScrollBar( this, WB_HSCROLL | WB_DRAG );
 	mpScrollBarBox	= new ScrollBarBox( this );
@@ -2390,7 +2397,12 @@ XubString ImplListBox::GetMRUEntries( xu
 ImplWin::ImplWin( Window* pParent, WinBits nWinStyle ) :
 	Control ( pParent, nWinStyle )
 {
-	SetBackground( Wallpaper( GetSettings().GetStyleSettings().GetFieldColor() ) );
+	if ( IsNativeControlSupported(CTRL_LISTBOX, PART_ENTIRE_CONTROL)
+			&& ! IsNativeControlSupported(CTRL_LISTBOX, PART_BUTTON_DOWN) )
+		SetBackground();
+	else
+		SetBackground( Wallpaper( GetSettings().GetStyleSettings().GetFieldColor() ) );
+
 	mbInUserDraw = FALSE;
 	mbUserDrawEnabled = FALSE;
 	mnItemPos = LISTBOX_ENTRY_NOTFOUND;
@@ -2448,12 +2460,76 @@ void ImplWin::FillLayoutData() const
 
 // -----------------------------------------------------------------------
 
+long ImplWin::PreNotify( NotifyEvent& rNEvt )
+{
+    long nDone = 0;
+    const MouseEvent* pMouseEvt = NULL;
+
+    if( (rNEvt.GetType() == EVENT_MOUSEMOVE) && (pMouseEvt = rNEvt.GetMouseEvent()) )
+    {
+        if( pMouseEvt->IsEnterWindow() || pMouseEvt->IsLeaveWindow() )
+        {
+            // trigger redraw as mouse over state has changed
+            if ( IsNativeControlSupported(CTRL_LISTBOX, PART_ENTIRE_CONTROL)
+			&& ! IsNativeControlSupported(CTRL_LISTBOX, PART_BUTTON_DOWN) )
+            {
+                GetParent()->GetWindow( WINDOW_BORDER )->Invalidate( INVALIDATE_NOERASE );
+                GetParent()->GetWindow( WINDOW_BORDER )->Update();
+            }
+        }
+    }
+
+    return nDone ? nDone : Control::PreNotify(rNEvt);
+}
+
+// -----------------------------------------------------------------------
+
 void ImplWin::ImplDraw( bool bLayout )
 {
 	const StyleSettings& rStyleSettings = GetSettings().GetStyleSettings();
 
+    BOOL bNativeOK = FALSE;
+
     if( ! bLayout )
     {
+        if ( IsNativeControlSupported(CTRL_LISTBOX, PART_ENTIRE_CONTROL)
+			&& ! IsNativeControlSupported(CTRL_LISTBOX, PART_BUTTON_DOWN) )
+        {
+	        // Repaint the (focused) area similarly to
+	        // ImplSmallBorderWindowView::DrawWindow() in
+	        // vcl/source/window/brdwin.cxx
+	        Window *pWin = GetParent();
+
+	        ImplControlValue aControlValue;
+	        ControlState nState = CTRL_STATE_ENABLED;
+	        if ( !pWin->IsEnabled() )
+		    nState &= ~CTRL_STATE_ENABLED;
+	        if ( pWin->HasFocus() )
+		    nState |= CTRL_STATE_FOCUSED;
+    	    
+	        // The listbox is painted over the entire control including the
+	        // border, but ImplWin does not contain the border => correction
+	        // needed.
+	        long nLeft, nTop, nRight, nBottom;
+	        pWin->GetBorder( nLeft, nTop, nRight, nBottom );
+	        Point aPoint( -nLeft, -nTop );
+	        Region aCtrlRegion( Rectangle( aPoint - GetPosPixel(), pWin->GetSizePixel() ) );
+
+            BOOL bMouseOver = FALSE;
+            if( GetParent() )
+            {
+                Window *pChild = GetParent()->GetWindow( WINDOW_FIRSTCHILD );
+                while( pChild && !(bMouseOver = pChild->IsMouseOver()) )
+                    pChild = pChild->GetWindow( WINDOW_NEXT );
+            }
+    	    
+            if( bMouseOver )
+                nState |= CTRL_STATE_ROLLOVER;
+
+	        bNativeOK = DrawNativeControl( CTRL_LISTBOX, PART_ENTIRE_CONTROL, aCtrlRegion, nState,
+		        aControlValue, rtl::OUString() );
+	    }
+
         if( IsEnabled() )
         {
             if( HasFocus() )
@@ -2468,13 +2544,15 @@ void ImplWin::ImplDraw( bool bLayout )
                 if( IsControlForeground() )
                     aColor = GetControlForeground();
                 SetTextColor( aColor );
-                Erase( maFocusRect );
+		        if ( !bNativeOK )
+		            Erase( maFocusRect );
             }
         }
         else // Disabled
         {
             SetTextColor( rStyleSettings.GetDisableColor() );
-            Erase( maFocusRect );
+	        if ( !bNativeOK )
+		        Erase( maFocusRect );
         }
     }
 
@@ -2594,7 +2672,7 @@ void ImplWin::LoseFocus()
 }
 
 // =======================================================================
-
+
 ImplBtn::ImplBtn( Window* pParent, WinBits nWinStyle ) :
 	PushButton(  pParent, nWinStyle ),
 	mbDown	( FALSE )
