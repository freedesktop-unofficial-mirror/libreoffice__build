unchanged:
diff -u vcl/source/control/lstbox.cxx vcl/source/control/lstbox.cxx
--- vcl/source/control/lstbox.cxx	3 Mar 2004 15:32:07 -0000
+++ vcl/source/control/lstbox.cxx	2004-03-17 17:25:30.000000000 +0100
@@ -547,6 +547,8 @@
 		 ((rDCEvt.GetType() == DATACHANGED_SETTINGS) &&
 		  (rDCEvt.GetFlags() & SETTINGS_STYLE)) )
 	{
+        SetBackground();    // due to a hack in Window::UpdateSettings the background must be reset 
+                            // otherwise it will overpaint NWF drawn listboxes
 		Resize();
 		mpImplLB->Resize(); // Wird nicht durch ListBox::Resize() gerufen, wenn sich die ImplLB nicht aendert.
 
@@ -639,10 +641,50 @@
 	Size aOutSz = GetOutputSizePixel();
 	if( IsDropDownBox() )
 	{
+		// initialize the dropdown button size with the standard scrollbar width
 		long nSBWidth = GetSettings().GetStyleSettings().GetScrollBarSize();
-		nSBWidth = CalcZoom( nSBWidth );
-		mpImplWin->SetPosSizePixel( 0, 0, aOutSz.Width() - nSBWidth, aOutSz.Height() );
-		mpBtn->SetPosSizePixel( aOutSz.Width() - nSBWidth, 0, nSBWidth, aOutSz.Height() );
+		long	nTop = 0;
+		long	nBottom = aOutSz.Height();
+
+		Window *pBorder = GetWindow( WINDOW_BORDER );
+		ImplControlValue aControlValue;
+		Point aPoint;
+		Region aContent, aBound;
+
+		// use the full extent of the control
+		Region aArea( Rectangle(aPoint, pBorder->GetOutputSizePixel()) );
+
+		if ( GetNativeControlRegion( CTRL_LISTBOX, PART_BUTTON_DOWN,
+					aArea, 0, aControlValue, rtl::OUString(), aBound, aContent) )
+		{
+			// convert back from border space to local coordinates
+			aPoint = pBorder->ScreenToOutputPixel( OutputToScreenPixel( aPoint ) );
+			aContent.Move( -aPoint.X(), -aPoint.Y() );
+
+			// use the themes drop down size for the button
+			aOutSz.Width() = aContent.GetBoundRect().Left();
+			mpBtn->SetPosSizePixel( aContent.GetBoundRect().Left(), nTop, aContent.GetBoundRect().Right(), (nBottom-nTop) );
+
+			// adjust the size of the edit field
+			if ( GetNativeControlRegion( CTRL_LISTBOX, PART_SUB_EDIT,
+						aArea, 0, aControlValue, rtl::OUString(), aBound, aContent) )
+			{
+				// convert back from border space to local coordinates
+				aContent.Move( -aPoint.X(), -aPoint.Y() );
+
+				// use the themes drop down size
+				Rectangle aContentRect = aContent.GetBoundRect();
+				mpImplWin->SetPosSizePixel( aContentRect.TopLeft(), aContentRect.GetSize() );
+			}
+			else
+				mpImplWin->SetSizePixel( aOutSz );
+		}
+		else
+		{
+			nSBWidth = CalcZoom( nSBWidth );
+			mpImplWin->SetPosSizePixel( 0, 0, aOutSz.Width() - nSBWidth, aOutSz.Height() );
+			mpBtn->SetPosSizePixel( aOutSz.Width() - nSBWidth, 0, nSBWidth, aOutSz.Height() );
+		}
 	}
 	else
 	{
@@ -698,7 +740,13 @@
 		if( mpImplWin )
 		{
 			mpImplWin->Enable( IsEnabled() );
-			mpImplWin->Invalidate();
+			if ( IsNativeControlSupported(CTRL_LISTBOX, PART_ENTIRE_CONTROL)
+					&& ! IsNativeControlSupported(CTRL_LISTBOX, PART_BUTTON_DOWN) )
+			{
+				GetWindow( WINDOW_BORDER )->Invalidate( INVALIDATE_NOERASE );
+			}
+			else
+				mpImplWin->Invalidate();
 		}
 		if( mpBtn )
 			mpBtn->Enable( IsEnabled() );
@@ -745,8 +793,17 @@
 		mpImplLB->SetControlBackground( GetControlBackground() );
 		if ( mpImplWin )
 		{
-			mpImplWin->SetBackground( mpImplLB->GetMainWindow()->GetControlBackground() );
-			mpImplWin->SetControlBackground( mpImplLB->GetMainWindow()->GetControlBackground() );
+			if ( mpImplWin->IsNativeControlSupported(CTRL_LISTBOX, PART_ENTIRE_CONTROL) )
+			{
+				// Transparent background
+				mpImplWin->SetBackground();
+				mpImplWin->SetControlBackground();
+			}
+			else
+			{
+				mpImplWin->SetBackground( mpImplLB->GetMainWindow()->GetControlBackground() );
+				mpImplWin->SetControlBackground( mpImplLB->GetMainWindow()->GetControlBackground() );
+			}
 			mpImplWin->SetFont( mpImplLB->GetMainWindow()->GetFont() );
 			mpImplWin->Invalidate();
 		}
