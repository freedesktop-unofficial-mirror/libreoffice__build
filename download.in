#!/usr/bin/perl -w

my $unicows_uri = 'http://download.microsoft.com/download/b/7/5/b75eace3-00e2-4aa0-9a6f-0b6882c71642/unicows.exe';

# http://www.microsoft.com/downloads/release.asp?releaseid=30682' - from ...
my $dbghelp_uri = 'http://download.microsoft.com/download/platformsdk/Redist/5.0.2195.1/W9XNT4/EN-US/dbghinst.EXE';


# wdevenv is a nightmare ...
my %wdevenv = (
	       '6.0' => '',
	       '7.0' => 'http://tools.openoffice.org/source/browse/tools/contrib/addin/bin/',
	       '7.1' => 'http:///'
	       );
my %vc6 =      (
		'key' => '6.0',
		'ver' => '60',
		'name' => 'Visual Studio 6'
		);
my %net_2002 = (
		'key' => '7.0',
		'ver' => '70',
		'name' => 'Visual Studio .Net 2002'
		);
my %net_2003 = (
		'key' => '7.1',
		'ver' => '71',
		'name' => 'Visual Studio .Net 2003'
		);
my @versions = ( \%vc6, \%net_2002, \%net_2003 );

sub detect_vers()
{
    for $ver (@versions)
    {
	my $VerHandle;
	my $VerName = '/proc/registry/HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/VisualStudio/' .
	              $ver->{'key'} . 'Setup/VC/ProductDir';
	if (!open ($VerHandle, $VerName)) {
	    next;
	}
	
	$ver->{'path'} = <$VerHandle>;
	close $VerHandle;

	return $ver;
    }
}

sub webget($$)
{
    my ($src, $dest) = @_;

    print "Get $src -> $dest\n";
    system ("cd $dest ; $WGET $src") != 0 && die "Failed fetch";
}

sub download_win32()
{
    my $ver = detect_vers();

    if ($ENV{OOO_DEBUG} eq '1') {
	my %hack = (
		    'key' => '7.1',
		    'ver' => '71',
		    'name' => 'VS test .Net 2003',
		    'path' => '/tmp/test'
		   );
    }
    defined $ver || print "\n\n -- Problems detecting MSVC version -- \n\n\n";

    # grab wdevenv
#    my $webgeturl = $webget->{$ver->{'key'}};
#    if (defined $webgeturl && $webgeturl ne '') {
#	webget ($webgeturl, 'src');
	print "Skipping wdevenv nightmare\n";
#    }

    # grab unicows
    if (! -f 'src/unicows.exe') {
	webget ($unicows_uri, 'src');
    }

    # grab dbghelp
    if (! -f 'src/dbghinst.exe') {
	webget ($dbghelp_uri, 'src');
	rename 'src/dbghinst.EXE', 'src/dbghinst.exe';
    }
}

sub usage {
    print STDERR "\ndownload\n";
    print STDERR "Syntax:	download    [--help] \n\n";
    print STDERR "  download's behavior is coded by your configure options eg.\n";
    print STDERR "  if you configure with --with-system-gcc it will not download\n";
    print STDERR "  gcc & binutils\n";
};

%SRC_URLS = (
    'binutils-2.13.2.1.tar.bz2'          => 'http://ooo.ximian.com/packages/support',
    'gcc-3.2.2.tar.bz2'                  => 'http://ooo.ximian.com/packages/support',
    'OOO_1_0_3.tar.bz2'                  => 'http://ooo.ximian.com/packages/OOO_1_0_3',
    'OOO_1_1_0.tar.bz2'                  => 'http://ooo.ximian.com/packages/OOO_1_1_0',
    'OOO_1_1_1.tar.bz2'                  => 'http://ooo.ximian.com/packages/OOO_1_1_1',
    'ooo-scaled-icons.tar.gz'            => 'http://ooo.ximian.com/packages',
    '@OOO_ICONS_VER@.tar.gz'             => '@OOO_ICONS_URI@'
);

$WGET='/usr/bin/wget';

if (!-d "src") {
    `mkdir -p src`;
}

# Files to download
@files = ();

# Defaults
$tag = '@TAG@';
if ('@SYSTEM_GCC@' ne '') {
    $support_files= 'none';
} else {
    $support_files = 'all';
}

while ($arg = shift @ARGV) {
    if ( $arg eq '--help' ) {
        &usage and exit(0);
    }
}

print "Downloading files for $tag\n";

-x $WGET || die "Can't find wget - install it and try again\n";

if ( $support_files eq 'all' ) {
    push @files, ( 'binutils-2.13.2.1.tar.bz2', 'gcc-3.2.2.tar.bz2' );
}

# Icons to use
push @files, ( '@OOO_ICONS_VER@.tar.gz' );

# Scaled icons for Win32
if ('@BUILD_WIN32@' ne '') {
    push @files, ( 'ooo-scaled-icons.tar.gz' );
    download_win32();
}

push @files, ( "$tag.tar.bz2" );

for $a ( @files ) {
    if (-f "src/$a") {
	print "Skipping $a\n";
    } else {
	print "No file src/$a\n";
	webget( $SRC_URLS{$a}."/$a", 'src' );
    }
}


print "Done\n";
