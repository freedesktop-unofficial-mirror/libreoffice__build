#!/usr/bin/perl -w

sub webget($$)
{
    my ($src, $dest) = @_;

    print "Get $src -> $dest\n";
    system ("cd $dest ; $WGET $src") != 0 && die "Failed fetch";
}

sub usage {
    print STDERR "\ndownload\n";
    print STDERR "Syntax:	download    [--help] \n\n";
    print STDERR "  download's behavior is coded by your configure options eg.\n";
    print STDERR "  if you configure with --with-system-gcc it will not download\n";
    print STDERR "  gcc & binutils\n";
};


%SRC_URLS = (
    'binutils-.*'			 => '@MIRROR@/support',
    'gcc-.*'			 	 => '@MIRROR@/support',
    'src680-m.*'			 => '@MIRROR@/SRC680',
    'ooo680-m.*'			 => '@MIRROR@/OOO680',
    'OOO_2_0.*'				 => '@MIRROR@/OOO680',
    'libwpd-snap-.*'			 => '@MIRROR@',
    'libwpd-0.*'			 => '@MIRROR@/libwpd',
    'images_gnome-.*'                    => '@MIRROR@/SRC680',
    'images_kde-.*'                      => '@MIRROR@/SRC680',
    'extras-.*'				 => '@MIRROR@/SRC680',
    'ooo_custom_images.*'                => '@MIRROR@/SRC680',
    'ooo_crystal_images.*'               => '@MIRROR@/SRC680',
    'cli_types*'                         => '@MIRROR@/SRC680',
    'mdbtools*'                          => '@MIRROR@/SRC680',
    'libpixman-*'			 => '@MIRROR@/SRC680',
    'cairo-*'			         => '@MIRROR@/SRC680',
    'glitz-*'			         => '@MIRROR@/SRC680',
    'hunspell*'				 => '@MIRROR@/SRC680',
# Win32 bits:
    'unicows\.exe'			 => 'http://download.microsoft.com/download/b/7/5/b75eace3-00e2-4aa0-9a6f-0b6882c71642',
    # from http://www.microsoft.com/downloads/release.asp?releaseid=30682'
    'dbghinst\.EXE'			 => 'http://download.microsoft.com/download/platformsdk/Redist/5.0.2195.1/W9XNT4/EN-US',
    '5_11_98Odma20\.zip'		 => '@MIRROR@/support',
    'openclipart-*'			 => 'http://www.openclipart.org/downloads/@OPENCLIPART_VER@',
# Win32 ant binaries ...
    'apache-ant-*'                       => 'http://apache.mirror.positive-internet.com/ant/binaries',
# Mozilla source and libraries
    'mozilla-source-1.7.5*'		 => 'http://ftp.mozilla.org/pub/mozilla.org/mozilla/releases/mozilla1.7.5/source/',
    'glib-*'                             => 'http://ftp.gtk.org/pub/gtk/v1.2/',
    'libIDL-*'                           => 'http://ftp.mozilla.org/pub/mozilla.org/mozilla/libraries/source/',
    'wintools.zip'                       => 'http://ftp.mozilla.org/pub/mozilla.org/mozilla/source/'
);

$WGET='/usr/bin/wget';

sub download_files($$$)
{
    my ($files, $locations, $dest) = @_;

    for my $file ( @{$files} ) {
        if ( $file ne '' ) {
            if (-f "$dest/$file") {
                print "Skipping $file\n";
            } else {
                print "No file $dest/$file\n";
		my $location = '';
		for $regexp (keys %{$locations}) {
		    if ($file =~ m/^$regexp/) {
			$location = $locations->{$regexp};
			last;
		    }
		}
		$location eq '' && die "Can't find '$file' to download";
                webget( $location."/$file", $dest );
            }
        }
    }
}

if (!-d "@SRCDIR@") {
    `mkdir -p @SRCDIR@`;
}

# Files to download
@files = ();

while ($arg = shift @ARGV) {
    if ( $arg eq '--help' ) {
        &usage and exit(0);
    }
}

# Defaults
$tag = '@CVSTAG@';
print "Downloading files for $tag\n";

-x $WGET || die "Can't find wget - install it and try again\n";

if ('@SYSTEM_GCC@' eq '') {
    push @files, ( 'gcc-3.4.1.tar.bz2', 'gcc-3.4.1-Enums.diff', 'gcc-3.4.1-VisibilityPatch2.diff' );
}

# Misc. bits for Win32
if ('@BUILD_WIN32@' ne '') 
{
    push @files, ( 'unicows.exe', 'dbghinst.EXE' );
    push @files, ( "$tag-system.tar.bz2" );
#    push @files, ( '5_11_98Odma20.zip' ); # - ODMA - for when it works.
    push @files, ( "apache-ant-1.6.5-bin.tar.gz" );
    push @files, ( '@BUILD_MOZILLA_SOURCE@' );
    push @files, ( 'glib-1.2.10.tar.gz' );
    push @files, ( 'libIDL-0.6.8.tar.gz' );
# this contains binaries and source, we just use the source
    push @files, ( 'wintools.zip' );
}
else
{
    if ('@ENABLE_MONO@' ne 'FALSE') {
	push @files, ( 'cli_types.dll' );
	push @files, ( 'cli_types_bridgetest.dll' );
    }
}
if ('@CAIRO_ENABLED@' eq 'TRUE' && '@SYSTEM_CAIRO@' ne 'TRUE') {
    push @files, ( 'cairo-@CAIRO_VER@.tar.gz' );
    push @files, ( 'glitz-@GLITZ_VER@.tar.gz' );
}

if ('@OPENCLIPART_VER@' ne '') {
    push @files, ( 'openclipart-@OPENCLIPART_VER@.tar.bz2' );
}

if ('@MDBTOOLS_SRC@' ne '') {
    push @files, ( '@MDBTOOLS_SRC@' );
}

push @files, ( "libwpd-0.8.3.tar.gz" );
push @files, ( "$tag-core.tar.bz2" );
push @files, ( '@OOO_CUSTOM_IMAGES@', '@OOO_CRYSTAL_IMAGES@', '@OOO_EXTRA_ARTWORK@' );

if ('@OOO_LANGS@' ne 'en-US' || '@BUILD_WIN32@' ne '' ) {
    push @files, ( "$tag-lang.tar.bz2" );
}

if ('@HUNSPELL_UNO_SRC@' ne '') {
    push @files, ( '@HUNSPELL_UNO_SRC@' );
}

if ('@HUNSPELL_LIB_SRC@' ne '') {
    push @files, ( '@HUNSPELL_LIB_SRC@' );
}

download_files (\@files, \%SRC_URLS, '@SRCDIR@');

print "Done\n";
