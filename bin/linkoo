#!/usr/bin/perl -w

# Copyright 2002, 2004 Novell, Inc.
#
#    This app makes it easy to link a live build
# set into an install set. Then your devel iteration
# is: 'build', execute.
#

# ends up in program/env
$env_script = '
ulimit -c unlimited
export PATH=".:$PATH"
export LD_LIBRARY_PATH=".:$LD_LIBRARY_PATH"
export GNOME_DISABLE_CRASH_DIALOG=1
';

$resources = {
	'dba%upd%%lang%.res' => 'dbaccess',
	'dbu%upd%%lang%.res' => 'dbaccess',
	'sfx%upd%%lang%.res' => 'sfx2',
#	'oem%upd%%lang%.res' => 'offmgr',
#	'for%upd%%lang%.res' => 'offmgr',
	'dkt%upd%%lang%.res' => 'desktop',
	'sd%upd%%lang%.res' => 'sd',
	'sch%upd%%lang%.res' => 'sch',
	'eme%upd%%lang%.res' => 'goodies',
	'epb%upd%%lang%.res' => 'goodies',
	'epp%upd%%lang%.res' => 'goodies',
	'egi%upd%%lang%.res' => 'goodies',
	'ept%upd%%lang%.res' => 'goodies',
	'eps%upd%%lang%.res' => 'goodies',
	'epg%upd%%lang%.res' => 'goodies',
	'gal%upd%%lang%.res' => 'svx',
	'svx%upd%%lang%.res' => 'svx',
	'vcl%upd%%lang%.res' => 'vcl',
	'frm%upd%%lang%.res' => 'forms',
	'set%upd%%lang%.res' => 'setup2',
#	'set_pp1%upd%%lang%.res' => 'setup2',
	'tplx%upd%%lang%.res' => 'setup2',
	'sc%upd%%lang%.res' => 'sc',
	'analysis%upd%%lang%.res' => 'scaddins',
	'date%upd%%lang%.res' => 'scaddins',
#	'stt%upd%%lang%.res' => 'basic',
	'basctl%upd%%lang%.res' => 'basctl',
	'sw%upd%%lang%.res' => 'sw',
	'sm%upd%%lang%.res' => 'starmath',
	'uui%upd%%lang%.res' => 'uui',
	'svt%upd%%lang%.res' => 'svtools',
	'svs%upd%%lang%.res' => 'svtools',
	'abp%upd%%lang%.res' => 'extensions',
	'san%upd%%lang%.res' => 'extensions',
	'pcr%upd%%lang%.res' => 'extensions',
	'dbp%upd%%lang%.res' => 'extensions',
	'bib%upd%%lang%.res' => 'extensions',
	'preload%upd%%lang%.res' => 'extensions',
	'lgd%upd%%lang%.res' => 'framework',
#	'spa%upd%%lang%.res' => 'padmin'
};

$opt_resources = {
	'epn%upd%%lang%.res' => 'goodies',
	'dbi%upd%%lang%.res' => 'extensions',
	'ooo%upd%%dll%%lang%.res' => 'offmgr',
	'iso%upd%%dll%%lang%.res' => 'offmgr',
	'ofa%upd%%dll%%lang%.res' => 'offmgr',
	'cnt%upd%%dll%%lang%.res' => 'chaos',
	'oic%upd%%dll%%lang%.res' => 'extensions',
	'jvm%upd%%dll%%lang%.res' => 'setup2',
	'imp%upd%%dll%%lang%.res' => 'wizards',
	'eur%upd%%dll%%lang%.res' => 'wizards',
	'dbw%upd%%dll%%lang%.res' => 'wizards',
	'cal%upd%%dll%%lang%.res' => 'wizards',
	'tpl%upd%%dll%%lang%.res' => 'wizards',
	'wwz%upd%%dll%%lang%.res' => 'wizards'
};

$libraries = {
    'libdba%upd%%dll%.so' => 'dbaccess',
    'libdbu%upd%%dll%.so' => 'dbaccess',
    'libfwe%upd%%dll%.so' => 'framework',
    'libfwi%upd%%dll%.so' => 'framework',
    'libfwk%upd%%dll%.so' => 'framework',
    'libfwl%upd%%dll%.so' => 'framework',
    'libfrm%upd%%dll%.so' => 'forms',
    'libpsp%upd%%dll%.so' => 'psprint',
    'libsfx%upd%%dll%.so' => 'sfx2',
    'libsvl%upd%%dll%.so' => 'svtools',
    'libsvt%upd%%dll%.so' => 'svtools',
    'libsvx%upd%%dll%.so' => 'svx',
    'libtl%upd%%dll%.so' => 'tools',
    'libdtransX11%upd%%dll%.so' => 'dtrans',
    'libpackage2.so' => 'package',
    'libucpfile1.so' => 'ucb',
    'libucpdav1.so' => 'ucb',
    'libcached1.so' => 'ucb',
    'libucphier1.so' => 'ucb',
    'libucb1.so' => 'ucb',
    'libutl%upd%%dll%.so' => 'unotools',
    'libvcl%upd%%dll%.so' => 'vcl',
    'libxo%upd%%dll%.so' => 'xmloff',
    'libsb%upd%%dll%.so' => 'basic',
    'libso%upd%%dll%.so' => 'so3',
    'libgo%upd%%dll%.so' => 'goodies',
    'libsc%upd%%dll%.so' => 'sc',
    'libsw%upd%%dll%.so' => 'sw',
    'libsd%upd%%dll%.so' => 'sd',
    'libsm%upd%%dll%.so' => 'starmath',
    'libodbc2.so'  => 'connectivity',
    'libodbcbase2.so' => 'connectivity',
    'libtk%upd%%dll%.so' => 'toolkit',
    'libsch%upd%%dll%.so' => 'sch',
    'libscn%upd%%dll%.so' => 'extensions',
    'libhyphen%upd%%dll%.so' => 'lingucomponent',
    'libspell%upd%%dll%.so' => 'lingucomponent',
    'libtvhlp1.so' => 'xmlhelp',
    'libucpchelp1.so' => 'xmlhelp',
    'libsot%upd%%dll%.so' => 'sot',
    'libbasctl%upd%%dll%.so' => 'basctl',
    'liblng%upd%%dll%.so' => 'linguistic',
    'libanalysis%upd%%dll%.so' => 'scaddins',
    'libdate%upd%%dll%.so' => 'scaddins',
    'liboffacc%upd%%dll%.so' => 'desktop',
    'libres%upd%%dll%.so' => 'extensions',
    'libbib%upd%%dll%.so' => 'extensions'
};

$opt_libraries = {
    'libi18npool%upd%%dll%.so' => 'i18npool',
    'liblth%upd%%dll%.so' => 'lingucomponent',
    'libofa%upd%%dll%.so' => 'offmgr',
    'libulingu%upd%%dll%.so' => 'lingucomponent',
    'libwrp%upd%%dll%.so' => 'desktop',
    'libi18n%upd%%dll%.so' => 'i18n_simple',
    'libucpgvfs1.so' => 'ucb',
    'libucpfpx%upd%%dll%.so' => 'ucb',
    'libucbhelper1gcc3.so' => 'ucbhelper',
    'libucbhelper2gcc3.so' => 'ucbhelper',
    'libcppu.so.3.0.1' => 'cppu',
    'libcppu.so.3.1.0' => 'cppu',
    'libsal.so.3.0.1' => 'sal',
    'libsal.so.3.1.0' => 'sal',
    'libmozab2.so' => 'connectivity',
    'libmozabdrv2.so' => 'connectivity',
    'libmysql2.so' => 'connectivity',
    'libodbc2.so' => 'connectivity',
    'libodbcbase2.so' => 'connectivity',
    'libsdbc2.so' => 'connectivity',
    'libdbase%upd%%dll%.so' => 'connectivity',
    'libdbpool2.so' => 'connectivity',
    'libdbtools2.so' => 'connectivity',
    'libadabas2.so' => 'connectivity',
    'libcalc%upd%%dll%2.so' => 'connectivity',
    'libevoab1.so' => 'connectivity',
    'libevoab2.so' => 'connectivity',
    'libfile%upd%%dll%.so' => 'connectivity',
    'libflat%upd%%dll%.so' => 'connectivity',
    'libcalc%upd%%dll%.so' => 'connectivity',
    'libspl%upd%%dll%.so' => 'desktop',
    'libspa%upd%%dll%.so' => 'padmin',
    'libvclplug_dummy%upd%%dll%.so' => 'vcl',
    'libvclplug_gen%upd%%dll%.so' => 'vcl',
    'libvclplug_gtk%upd%%dll%.so' => 'vcl',
    'libvclplug_kde%upd%%dll%.so' => 'vcl',
    'libfps_gnome.so' => 'fpicker',
    'libcomphelp3gcc3' => 'comphelper',
    'libset%upd%%dll%.so' => 'setup2',
    'libtplx%upd%%dll%.so' => 'setup2',
    'libgcc3_uno.so' => 'bridges'
};

$filter_libraries = {
    'libemp%upd%%dll%.so' => 'sd',
    'libeme%upd%%dll%.so' => 'goodies',
    'libegi%upd%%dll%.so' => 'goodies',
    'libepb%upd%%dll%.so' => 'goodies',
    'libepg%upd%%dll%.so' => 'goodies',
    'libepp%upd%%dll%.so' => 'goodies',
    'libeps%upd%%dll%.so' => 'goodies',
    'libept%upd%%dll%.so' => 'goodies',
    'libera%upd%%dll%.so' => 'goodies',
    'libeti%upd%%dll%.so' => 'goodies',
    'libexp%upd%%dll%.so' => 'goodies',
    'libicd%upd%%dll%.so' => 'goodies',
    'libicg%upd%%dll%.so' => 'goodies',
    'libidx%upd%%dll%.so' => 'goodies',
    'libime%upd%%dll%.so' => 'goodies',
    'libipd%upd%%dll%.so' => 'goodies',
    'libipb%upd%%dll%.so' => 'goodies',
    'libips%upd%%dll%.so' => 'goodies',
    'libipt%upd%%dll%.so' => 'goodies',
    'libipx%upd%%dll%.so' => 'goodies',
    'libira%upd%%dll%.so' => 'goodies',
    'libitg%upd%%dll%.so' => 'goodies',
    'libiti%upd%%dll%.so' => 'goodies'
};

$opt_filter_libraries = {
    'libepn%upd%%dll%.so' => 'goodies'
};

$other_bin_files = {
	'getstyle-gnome' => 'vcl',
	'msgbox-gnome' => 'vcl'
};

sub sniff_target($)
{
    my $build_dir = shift;
    my ($dirhandle, $fname);
    my ($target, $libver, $lang, $dllsuffix) = ( 'unxlngi4.pro', '645', '01', 'li' ); # defaults
    
    opendir ($dirhandle, $build_dir) || die "Can't open $build_dir";
    while ($fname = readdir ($dirhandle)) {
	$fname =~ /Set.sh$/ || next;
	
	my $file;
	open ($file, "$build_dir/$fname") || die "Can't open $build_dir/$fname";
	while (<$file>) {
	    /\s*(\S+)\s*=\s*\"(\S+)\"/ || next;
	    if ($1 eq 'INPATH') {
		$target = $2;
	    }
	    if ($1 eq 'UPD') {
		$libver = $2;
	    }
	    if ($1 eq 'DLLSUFFIX') {
		$dllsuffix = $2;
	    }
	}
	close ($file);
    }

    closedir ($dirhandle);

    print "Sniffed target: $target, $libver, $dllsuffix\n";

    if ($libver >= 680) {
	$lang = 'en-US';
    }

    return ($target, $libver, $lang, $dllsuffix);
}

sub do_linkage {
    my $files = shift;
    my $substitutions = shift;
    my $dest_subdir = shift;
    my $src_subdir = shift;
    my $optional = shift;
    my $file;

    my $inst = "$OOO_INSTALL$dest_subdir";
    my $linked_dir = "$inst/linked";

    if (!-d $linked_dir) {
	mkdir $linked_dir || die "Can't make $linked_dir: $!";
    }
    
    for $file (keys %$files) {
	my $bres = $files->{$file};

	my $subst;
	for $subst (keys %{$substitutions}) {
	    my $with = $substitutions->{$subst};
	    $file =~ s/$subst/$with/g;
	}

	my $build = "$OOO_BUILD/$bres/$src_subdir/$file";
	if (!$product) {
	    # Prefer non .pro paths if we can find them
	    my $tmp = $build;
	    $tmp =~ s/\.pro//;
	    $build = $tmp if -f $tmp;
	}

	$optional || -f "$build" || die "No file '$build' to link to\n";
	
	if (-l "$inst/$file") {
	    # re-write the link
	    unlink ("$inst/$file");
	    symlink ("$build", "$inst/$file") || die "Failed to symlink: $!";
	    print " [$file]";
	} elsif (-f "$inst/$file") {
	    # move / write the link
	    rename ("$inst/$file", "$linked_dir/$file") || die "Failed rename of $inst/$file: $!";
	    symlink ("$build", "$inst/$file") || die "Failed to symlink: $!";
	    print " $file";
	} elsif (!$optional) {
	    print "Unexpected / missing file $build -> $inst/$file\n";
	}
    }
}

if (@ARGV < 2) {
    printf "Usage: linkoo </path/to/ooo/install> </path/to/ooo/build/tree> [--product]\n";
    exit (1);
}

$OOO_INSTALL = shift (@ARGV) . "/program";
$OOO_BUILD = shift (@ARGV);

substr ($OOO_INSTALL, 0, 1) eq '/' || die "linkoo requires absolute paths";
substr ($OOO_BUILD, 0, 1)   eq '/' || die "linkoo requires absolute paths";

my $a;
for $a (@ARGV) {
    $product = 1 if $a =~ /--product/;
}

if ($OOO_BUILD !~ m|^/|) {
    printf "second argument must be an absolute path\n";
    exit (1);
}

-d $OOO_INSTALL || die "No such directory $OOO_INSTALL";
-w $OOO_INSTALL || die "You need write access to $OOO_INSTALL";
-d $OOO_BUILD || die "No such directory $OOO_BUILD";
-d "$OOO_INSTALL/resource" || die "$OOO_INSTALL doesn't look like an OO install";

($TARGET, $LIBVER, $LANG, $DLLSUFFIX) = sniff_target ($OOO_BUILD);

my %substitutions = ( '%upd%'  => $LIBVER,
		      '%lang%' => $LANG,
		      '%dll%'  => $DLLSUFFIX );

print "Linking resources:";
do_linkage ($resources, \%substitutions, '/resource', "$TARGET/bin", '');
do_linkage ($opt_resources, \%substitutions, '', "$TARGET/lib", '1');

print "\n";

print "Linking libraries:";
do_linkage ($libraries,     \%substitutions, '', "$TARGET/lib", '');
do_linkage ($opt_libraries, \%substitutions, '', "$TARGET/lib", '1');
print "\n";

print "Linking filters:";
do_linkage ($filter_libraries, \%substitutions, '/filter', "$TARGET/lib", '');
do_linkage ($opt_filter_libraries, \%substitutions, '/filter', "$TARGET/lib", '1');
print "\n";

print "Linking other files:";
do_linkage ($other_bin_files, \%substitutions, '', "$TARGET/bin", '1');
print "\n";

print "Special iso.res case:";
$ooo_res="$OOO_INSTALL/resource/ooo".$LIBVER.$LANG.".res";
$star_res="$OOO_INSTALL/resource/iso".$LIBVER.$LANG.".res";
if (-l $ooo_res && -l $star_res) {
    unlink ($star_res);
    symlink ($ooo_res, $star_res);
    print " clobbered";
}
print "\n";

if (!-f "$OOO_INSTALL/env") {
    print "Creating '$OOO_INSTALL/env'\n";
    open ($env, ">$OOO_INSTALL/env") || die "Can't open $OOO_INSTALL/env: $!";
    print $env $env_script;
    close ($env);
}
