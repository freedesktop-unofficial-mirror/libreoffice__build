#!/usr/bin/perl -w
#*****************************************************************************
# 
#  ooffice - Wrapper script for OpenOffice.org
# 
#  Based on the Mandrake work.
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License version 2, as
#  published by the Free Software Foundation.
# 
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
# 
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
# 
#*****************************************************************************

use strict;
use IO::Handle;
use Fcntl ':flock';

my $Debug = $ENV{OOO_DEBUG};

# Substituted by the build system:
# Define OpenOffice.org version
my $Version = '@VERSION@';
# Define system installation directory
# Autoconf totally sucks for @libdir@ type substitution
my $SystemInstallDir = '@OOINSTBASE@';
# Suffix for parallel installable versioning
my $BinSuffix = '@BINSUFFIX@';
# Debugging
if ($Debug && $Version =~ /^\@/) {
    $Version = "1.1.0";
    $SystemInstallDir = "/usr/lib/ooo-$Version";
    $BinSuffix = '1.1';
}
my $ConfigSuffix = $BinSuffix;
$ConfigSuffix =~ s/([0-9]+\.[0-9]+).*/\1/;
# Define lock-file for this script
my $LockFile = "$ENV{HOME}/.openoffice-lock";
# Define user OOo versions file
my $VersionFile = "$ENV{HOME}/.sversionrc";
# Define user installation directory
my $UserInstallDir = "$ENV{HOME}/.xopenoffice$ConfigSuffix";
# Define OOo setup program
my $SetupProgram = "$SystemInstallDir/program/setup";
# Define setup autoresponse file for user installation
my $SetupConfig = "/etc/openoffice/autoresponse$BinSuffix.conf";
# Where gconftool is...
my $GConfTool = 'gconftool-2';
# GConf configuration keys
my $ConfQuickstart = '/apps/ooo-ximian/quickstart';
my $ConfDefaultFormat = '/apps/ooo-ximian/default-format';

sub GetConfBool($)
{
    my ($path) = @_;
    my ($value, $ret);

    $value = `$GConfTool --get $path 2>&1`;

    if (!$value) {
	$ret = 0;
    } elsif ($value =~ m/^true.*/i ||
	     $value =~ m/^yes.*/i ||
	     $value =~ m/^on.*/i) {
	$ret = 1;
    } else {
	$ret = 0;
    }

    return $ret;
}

sub ReadVersionFile($) {
    my ($file) = @_;
    my $e;
    my %entries;
    my $Rc;

    if (open ($Rc, "$file")) {
        while (<$Rc>) {
            chomp;
            if (/^\[(\w+)\]/) {
                $entries{$1} = $e = { };
            }
            elsif (/^([^=]+)=([^\r\n]+)/) {
                $e->{$1} = $2;
            }
        }
        close ($Rc);
    }
    %entries;
}

sub DoWriteVersionFile(%$) {
    my ($config, $file) = @_;
    local *F;
    
    if ($file) {
        open F, ">$file" or die "Cant write to $file\n";
        select F;
    }
    local $\ = "\n";
    while (my ($secname, $secvars) = each %$config) {
        print "[$secname]";
        while (my ($key, $value) = each %$secvars) {
            print "$key=$value";
        }
        print "";
    }
    if ($file) {
        close F;
        select STDOUT;
    }
}

sub WriteVersionFile(%) {
    my (%config) = @_;
    DoWriteVersionFile \%config, "$VersionFile";
}

#=============================================================================
# Main
#=============================================================================

# Parse command line arguments
my @ooo_argv;
my $session_quickstart;
while ($ARGV[0]) {
    $_ = shift;
    if (m/^--session-quickstart/) {
	$session_quickstart = 1;
    } else {
        push @ooo_argv, $_;
    }
}

if ($0 =~ m/\/oo(calc|draw|impress|math|writer)$BinSuffix$/) {
    my $app = $1;
    push @ooo_argv, "-$app";
    $Debug && print "Append arg: -$app\n";
}

my $Lock;

$Debug && print "Taking lock: $LockFile\n";
open ($Lock, ">$LockFile") || print "Can't open $LockFile\n";
flock ($Lock, LOCK_EX) || print "Warning: can't flock $LockFile\n";
$Debug && print "Obtained lock: $LockFile\n";

# Remove any stale entry from versions file
if ( -r "$VersionFile" ) {
    my %config = ReadVersionFile "$VersionFile";
    my $versions = $config{Versions};
    my $home = $versions->{"OpenOffice.org $Version"};
    if ($home && $home ne "file://$UserInstallDir") {
	$Debug && print "Re-writing $VersionFile\n";
        foreach (keys %$versions) {
            delete $versions->{$_} if ($versions->{$_} eq $home);
        }
        WriteVersionFile %config;
    }
}

# Perform a user installation, if necessary.
if ( ! -d $UserInstallDir || ! -e "$UserInstallDir/soffice" ) {
    # First, make sure to remove any reference to $UserInstallDir, from older
    # (and broken) installation
    $Debug && print "Do fresh user install\n";
    if ( -f $VersionFile ) {
        my %config = ReadVersionFile "$VersionFile";
        my $versions = $config{Versions};
        my $changed = 0;
        foreach (keys %$versions) {
            if ($versions->{$_} eq "file://$UserInstallDir") {
                delete $versions->{$_};
                $changed = 1;
            }
        }
        WriteVersionFile %config if ($changed);
    }
    # We can safely do the installation now
    my $setup_cmd = "$SetupProgram -R:$SetupConfig -v -nogui";

    if (!$Debug) {
	$setup_cmd .= " >& ~/.openoffice-install-log";
    }

    $Debug && print "Calling setup: '$setup_cmd'\n";
    system ($setup_cmd) &&
        die "Installation of OpenOffice.org $Version failed:\n '$setup_cmd'\n";
}

# Clean the installation version tags.
if ( -f "$VersionFile" ) {
    my %config = ReadVersionFile "$VersionFile";
    my $versions = $config{Versions};
    my $changed = 0;
    foreach (keys %$versions) {
	$_ eq "OpenOffice.org $Version" && next;

        if ($_ =~ /^OpenOffice.org ([0-9]+)\.([0-9]+)(.*)/) {
	    my ($iv_maj, $iv_min, $iv_mic) = ($1, $2, $3);
	    $Version =~ /([0-9]+)\.([0-9]+)(.*)/;
	    my ($v_maj, $v_min, $v_mic) = ($1, $2, $3);

	    $Debug && print "Old $iv_maj $iv_min $iv_mic, new $v_maj $v_min $v_mic\n";

	    if ($iv_maj == $v_maj && $iv_min == $v_min) {
		$Debug && print "Deleting old version\n";
		delete $versions->{$_};
		$changed = 1;
	    }
        }
    }
    # Add current version tag if it does not exist already. This
    # occurs when you upgrade from 1.0 to 1.0.1 for example.
    if (!$versions->{"OpenOffice.org $Version"}) {
	$versions->{"OpenOffice.org $Version"} = "file://$UserInstallDir";
	$changed = '1';
	$Debug && print "Missing version, added\n";
    }
    if ($changed) {
	$Debug && print "Version changed, re-writing config\n";
	WriteVersionFile %config;
    }
}
else {
    # The versions file is bound to exist unless we (or the user)
    # nuked it somehow. Regenerate it. We already have the
    # installation directory at this point.
    WriteVersionFile Versions => { "OpenOffice.org $Version" => "file://$UserInstallDir" };
    $Debug && print "Re-generate config\n";
}

# Create the user/work link for "Open..." menu command to work
# flawlessly
sub symlinkf { unlink $_[1]; symlink $_[0], $_[1] }
symlinkf "$SystemInstallDir/program/soffice", "$UserInstallDir/soffice";
symlinkf "$SystemInstallDir/program/setup",   "$UserInstallDir/setup";

my $format = `$GConfTool --get $ConfDefaultFormat 2>&1`;

if (! ($format =~ m/^OO/i)) {
    $ENV{COMPATIBLE}="1";
}

flock ($Lock, LOCK_UN);
close ($Lock);
$Debug && print "Released lock: $LockFile\n";

if ($session_quickstart) {
    my $do_qstart = GetConfBool ($ConfQuickstart);
    if (!$do_qstart) {
	exit 1;
    }
    $Debug && print "Execute quickstarter\n";
    push @ooo_argv, '-quickstart';
}

# And here we go. ;-)
exec "$UserInstallDir/soffice", @ooo_argv
