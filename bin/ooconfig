#!/usr/bin/perl -w

use strict;

# mangling to names:
#   bool: enable-$/disable-$, int,string: set-$

# setting name	-> [ '/path/to/key',
#                    'bool|string|int|enum,a,b,c|custom',
#                    '<help-description>',
#                    &custom_func ]
my $path_idx = 0;
my $type_idx = 1;
my $help_idx = 2;
my $func_idx = 2;

my $settings = {
    'enable-accessibility' => [ '/desktop/gnome/interface/accessibility', 'bool' ],
    'enable-auto-save'     => [ '/apps/openoffice/auto_save', 'bool' ],
    'enable-create-backup' => [ '/apps/openoffice/create_backup', 'bool' ],
    'enable-font-anti-aliasing' => [ '/apps/openoffice/use_font_anti_aliasing', 'bool' ],
    'enable-font-history' => [ '/apps/openoffice/show_font_history', 'bool' ],
    'enable-font-preview' => [ '/apps/openoffice/show_font_preview', 'bool' ],
    'enable-menu-icons' => [ '/apps/openoffice/show_menu_icons', 'bool' ],
    'enable-menu-inactive-items' => [ '/apps/openoffice/show_menu_inactive_items', 'bool' ],
    'enable-opengl' => [ '/apps/openoffice/use_opengl', 'bool' ],
    'enable-optimize-opengl' => [ '/apps/openoffice/optimize_opengl', 'bool' ],
    'enable-printing' => [ '/desktop/gnome/lockdown/disable_printing', 'bool' ],
    'enable-printing-modifies-doc' => [ '/apps/openoffice/printing_modifies_doc', 'bool' ],
    'enable-recommend-password-on-save' => [ '/apps/openoffice/lockdown/recommend_password_on_save', 'bool' ],
    'enable-remove-personal-info-on-save' => [ '/apps/openoffice/lockdown/remove_personal_info_on_save', 'bool' ],
    'enable-system-file-dialog' => [  '/apps/openoffice/use_system_file_dialog', 'bool' ],
    'enable-system-font' => [  '/apps/openoffice/use_system_font', 'bool' ],
    'enable-ui-customization' => [ '/apps/openoffice/lockdown/disable_ui_customization', 'bool' ],
    'enable-warn-alien-format' => [ '/apps/openoffice/warn_alien_format', 'bool' ],
    'enable-warn-info-create-pdf' => [ '/apps/openoffice/lockdown/warn_info_create_pdf', 'bool' ],
    'enable-warn-info-printing' => [ '/apps/openoffice/lockdown/warn_info_printing', 'bool' ],
    'enable-warn-info-signing' => [ '/apps/openoffice/lockdown/warn_info_signing', 'bool' ],
    'enable-warn-info-saving' => [ '/apps/openoffice/lockdown/warn_info_saving', 'bool' ],
    'set-auto-save-interval' => [ '/apps/openoffice/auto_save_interval', 'int' ],
    'set-font-anti-aliasing-min-pixel' => [  '/apps/openoffice/font_anti_aliasing_min_pixel', 'int' ],
    'set-icon-size' => [ '/apps/openoffice/icon_size', 'enum,small,large,auto' ],
    'set-macro-security-level' => [ '/apps/openoffice/lockdown/macro_security_level', 'enum,low,medium,high,veryhigh' ],
    'set-mailer-program' => [ '/desktop/gnome/url-handlers/mailto/command', 'string' ],
    'set-proxy-mode' => [ '/system/proxy/mode', 'enum,none,manual,auto' ],
    'set-proxy-http-host' => [ '/system/http_proxy/host', 'string' ],
    'set-proxy-http-port' => [ '/system/http_proxy/port', 'int' ],
    'set-proxy-ftp-host' => [ '/system/proxy/ftp_host', 'string' ],
    'set-proxy-ftp-port' => [ '/system/proxy/ftp_port', 'int' ],
    'set-undo-steps' => [ '/apps/openoffice/undo_steps', 'int' ],
    'set-writer-default-document' => [ '/apps/openoffice/writer_default_document_format', 'custom', , \&parse_writer ],
    'set-calc-default-document' => [ '/apps/openoffice/calc_default_document_format', 'custom' , , \&parse_calc ],
    'set-impress-default-document' => [ '/apps/openoffice/impress_default_document_format', 'custom', , \&parse_impress ]
};

sub validate_enum($$$)
{
    my ($opts, $value, $key) = @_;

    my @enum_opts = split (/,/, $opts);
    my $hit = 0;
    for my $val (@enum_opts) {
	$hit = 1 if ($val eq $value);
    }
    if (!$hit) {
	print STDERR "Error: supported values of $key are $opts: $value is invalid\n";
	exit 1;
    }
}

sub parse_writer($$$)
{
    my ($attrs, $key, $value) = @_;
    validate_enum ("odt,doc,sxw", $value, $key);
    return "writer8" if ($value eq 'odt');
    return "MS Word 97" if ($value eq 'doc');
    return "StarOffice XML (Writer)" if ($value eq 'sxw');
    die "impossible";
}

sub parse_calc($$$)
{
    my ($attrs, $key, $value) = @_;
    validate_enum ("ods,xls,sxc", $value, $key);
    return "calc8" if ($value eq 'ods');
    return "MS Excel 97" if ($value eq 'xls');
    return "StarOffice XML (Calc)" if ($value eq 'sxc');
    die "impossible";
}

sub parse_impress($$$)
{
    my ($attrs, $key, $value) = @_;
    validate_enum ("odp,ppt,sxi", $value, $key);

    return "impress8" if ($value eq 'odp');
    return "MS PowerPoint 97" if ($value eq 'ppt');
    return "StarOffice XML (Impress)" if ($value eq 'sxi');
    die "impossible";
}

sub help()
{
    print "Usage: ooadmin --setting=value\n  where setting is one of:\n";
    for my $key (keys %{$settings}) {
	my $attrs = $settings->{$key};
	my $help = $attrs->[$help_idx];
	print "\t--" . $key;
	print " : $help" if (defined $help);
	print "\n";
    }
}

sub conf_type($)
{
    my $type = shift;
    $type = 'string' if ($type =~ m/^enum,/);
    return $type;
}

sub set_key($$)
{
    my ($attrs, $conf_value) = @_;
    my $sys_str = "gconftool-2" .
	"--set '" . $attrs->[$path_idx] . "' " .
	"--type " . conf_type ($attrs->[$type_idx]) . " " .
	$conf_value;
#    print "\$ $sys_str\n";
    `$sys_str` || die "Set failed: $!";
}

for my $arg (@ARGV) {
    if ($arg =~ m/^--help/ || $arg =~ m/^-h/) {
	help();
	exit 0;
    }
    if (!($arg =~ m/^--(.*)=(.*)/)) {
	print STDERR "Error: syntax --enable-foo=yes\n";
	exit 1;
    }
    if (!defined $settings->{$1}) {
	print STDERR "Unknown setting '$arg'\n";
	exit 1;
    }
}

for my $arg (@ARGV) {
    $arg =~ m/^--(.*)=(.*)/;
    my $key = $1;
    my $value = $2;
    my $attrs = $settings->{$key};
    my $path  = $attrs->[$path_idx];
    my $type  = $attrs->[$type_idx];

#    print "Key '$key' value '$value' '$arg' $attrs, $path, $type\n";
    my $conf_value;

    if ($type eq 'bool') {
	if ($value =~ m/^yes$/g ||
	    $value =~ m/^true$/g) {
	    $conf_value = 1;
	} else {
	    $conf_value = 0;
	}

    } elsif ($type eq 'int' ||
	     $type eq 'string') {
	$conf_value = $value;

    } elsif ($type =~ m/^enum,(.*)$/) {
	validate_enum ($1, $value, $key);
	$conf_value = $value;

    } elsif ($type eq 'custom') {
	my $function = $attrs->[$func_idx];
	$conf_value = $function->($attrs, $key, $value);

    } else {
	print STDERR "Error in type '$type' on key '$key'\n";
	exit 1;
    }
    set_key ($attrs, $conf_value);
}
