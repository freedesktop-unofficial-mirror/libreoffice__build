#!/usr/bin/perl -w

use File::Copy;

my $output_format = 'u';

sub reg_get_value($)
{
    # it is believed that the registry moves keys around
    # depending on OS version, this will de-mangle that
    my $key = shift;
    my $fhandle;
    my $value;

    open ($fhandle, "/proc/registry/$key") || return;
    # reg keys have 0x00 0x5c at the end
    $value = (split /\0/, <$fhandle>)[0];
    close ($fhandle);

    chomp ($value);
    $value =~ s|\r\n||;
#    print "Value '$value' at '$key'\n";

    return $value;
}

sub print_syntax()
{
    print "oowintool [option] ...\n";
    print " encoding options\n";  
    print "   -w   - windows form\n";
    print "   -u   - unix form (default)\n";
    print " commands:\n";
    print "   --msvc-ver              - dump version of MSVC eg. 6.0\n";
    print "   --msvc-copy-dlls <dest> - copy msvc[pr]??.dlls into <dest>/msvcp??/\n";
    print "   --msvc-productdir       - dump productdir\n";
    print "   --psdk-home             - dump psdk install dir\n";
    print "   --help                  - this message\n";
}

sub cygpath($$$)
{
    my ($path, $input_format, $format) = @_;

    # Strip trailing path separators
    if ($input_format eq 'u') {
	$path =~ s|/*\s*$||;
    } else {
	$path =~ s|\\*\s*$||;
    }

    # 'Unterminated quoted string errors' from 'ash' when 
    # forking cygpath  so - reimplement cygpath in perl [ gack ]
    if ($format eq 'u' && $input_format eq 'w') {
	$path =~ s|\\|/|g;
	$path =~ s|([a-zA-Z]):/|/cygdrive/$1/|g;
    }
    elsif ($format eq 'w' && $input_format eq 'u') {
	$path =~ s|/cygdrive/([a-zA-Z])/|/$1/|g;
	$path =~ s|/|\\|g;
    }

    return $path;
}

sub print_path($$)
{
    my ($path, $unix) = @_;

    $path = cygpath ($path, $unix, $output_format);
    
    print $path;
}

sub print_psdk_home()
{
    my $value;
    $value = reg_get_value ('HKEY_LOCAL_MACHINE/SOFTWARE/Microsoft/MicrosoftSDK/Directories/Install Dir');
    defined $value || die "psdk not found";

    print cygpath ($value, 'w', $output_format);
}

my %msvc6 = (
    'ver' => '6.0',
    'key' => 'Microsoft/VisualStudio/6.0/Setup/Microsoft Visual C++/ProductDir',
);
my %msvs_net_2002 = (
    'ver' => '7.0',
    'key' => 'Microsoft/VisualStudio/7.0/Setup/VC/ProductDir',
    'dll_path' => '../SDK/v1.1/Bin', # testme ...
    'dll_suffix' => '70'
);
my %msvs_net_2003 = (
    'ver' => '7.1',
    'key' => 'Microsoft/VisualStudio/7.1/Setup/VC/ProductDir',
    'dll_path' => '../SDK/v1.1/Bin',
    'dll_suffix' => '71'
);

sub find_msvs()
{
    my @ms_versions = ( \%msvs_net_2003, \%msvs_net_2002, \%msvc6 );

    for $ver (@ms_versions)
    {
	my $install = reg_get_value ("HKEY_LOCAL_MACHINE/SOFTWARE/" . $ver->{'key'});
	if (defined $install && $install ne '') {
	    $ver->{'product_dir'} = $install;
	    return $ver;
	}
    }
    die "Can't find MS Visual Studio / VC++";
}

sub print_msvc_ver()
{
    my $ver = find_msvs();
    print $ver->{'ver'};
}

sub print_msvc_product_dir()
{
    my $ver = find_msvs();
    print cygpath ($ver->{'product_dir'}, 'w', $output_format);
}

sub copy_dll($$)
{
    my ($src, $dest) = @_;

    -f $src || die "can't find $src";
    -d $dest || die "no directory $dest";

    copy ($src, $dest) || die "copy failed: $!";
}

sub msvc_copy_dlls($)
{
    my $dest = shift;
    my $ver = find_msvs();

    defined $ver->{'dll_path'} || return;

    my $srcdir = (cygpath ($ver->{'product_dir'}, 'w', 'u') . '/' . 
		  $ver->{'dll_path'});

    copy_dll ("$srcdir/msvcp" . $ver->{'dll_suffix'} . ".dll",
	      $dest . $ver->{'dll_suffix'});
    copy_dll ("$srcdir/msvcr" . $ver->{'dll_suffix'} . ".dll",
	      $dest . $ver->{'dll_suffix'});
}

if (!@ARGV) {
    print_syntax();
    exit 1;
}

my @commands = ();
my $opt;
while (@ARGV) {
    $opt = shift @ARGV;
    
    if ($opt eq '-w' || $opt eq '-u') {
	$output_format = substr($opt, 1, 1);
    } else {
	push @commands, $opt;
    }
}

while (@commands) {
    $opt = shift @commands;

    if (0) {
    } elsif ($opt eq '--msvc-ver') {
	print_msvc_ver();
    } elsif ($opt eq '--msvc-copy-dlls') {
	my $dest = shift @commands;
	defined $dest || die "copy-dlls requires a destination directory";
	msvc_copy_dlls( $dest );
    } elsif ($opt eq '--msvc-productdir') {
	print_msvc_product_dir();
    } elsif ($opt eq '--psdk-home') {
	print_psdk_home();
    } elsif ($opt eq '--help' || $opt eq '/?') {
	print_syntax();
    } else {
	print "Unknown option '$opt'\n";
	print_syntax();
	exit 1;
    }
}

