#!/usr/bin/perl -w

sub read_relocs($)
{
    my $file = shift;
    my $pipe;
    my %relocs;
    my %symbols;

    open ($pipe, "readelf -r -W $file |") || die "Can't readelf -r $file: $!";
    while (<$pipe>) {
	/'.rel.plt'/ && last;
	/(R_\S+).*(_Z.*)/ || next;
	my ($type, $sym) = ($1, $2);
	$symbols{$sym} = $2;
    }
    close ($pipe);

    $relocs{file} = $file;
    $relocs{symbols} = \%symbols;

    return \%relocs;
}

sub find_matches($$)
{
    my ($sym, $list) = @_;
    my @collisions = ();

    for my $relocs (@{$list}) {
	if (defined $relocs->{symbols}->{$sym}) {
	    push @collisions, $relocs->{file};
	    delete $relocs->{symbols}->{$sym};
	}
    }

    return @collisions;
}

my @libs = ();

my $total = 0;
for $lib (@ARGV) {
    my $relocs = read_relocs ($lib);
    push @libs, $relocs;
    my $count = keys(%{$relocs->{symbols}});
    $total += $count;
    print "$lib : relocations $count\n";
}
print "Total relocs: $total\n";

my $dups = 0;
while ($lib = shift @libs) {
    my $relocs = $lib;
    
    for my $sym (keys (%{($relocs->{symbols})})) {
	my @hits = find_matches ($sym, \@libs);
	if (@hits) {
	    print "Symbol $sym duplicate @hits " . $relocs->{file} . "\n"; 
	    $dups++;
	}
    }
}

print "Duplicates: $dups of total $total\n";

