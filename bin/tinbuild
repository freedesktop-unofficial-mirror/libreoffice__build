#!/bin/bash

## default config
PAUSE_SECONDS=$((15*60))
HTML_OUTPUT=0
SEND_MAIL=0

## subroutines
usage ()
{
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "-w <N> specify timeout in secs between subsequent pull requests"
	echo "-l     when given: write html build log"
	echo "-m     when given: mail errors to last committer"
	echo "-h     this help"
}

reportError ()
{
	commit=`git log --pretty=oneline -n1`
	author=`git log --pretty=short -n1 | sed -ne '/^Author: / s/^Author: //p'`

	echo "$*" 1>&2
	echo "Last commit: $author - $commit" 1>&2
	if test $SEND_MAIL -eq 1; then
		subject="tinderbox failure, last commit: $commit"
		echo "$*" | mail -s "$subject" "$author"
	fi
}

## code
while getopts w:lmh opt ; do
	case "$opt" in
		w) PAUSE_SECONDS="$OPTARG" ;;
		l) HTML_OUTPUT=1 ;;
		m) SEND_MAIL=1 ;;
		h) usage; exit ;;
		?) usage; exit ;;
	esac
done

which git > /dev/null 2>&1 || {
    echo "You need git for this!"
	exit 1
}
test $HTML_OUTPUT -eq 1 && export BUILD_HTML_OUTPUT=true

good_head=""
while true; do
	err_msg=""

	# cleanup
	make clean-local

	# try to build
	if ! err_msg=$(./autogen.sh 2>&1); then
		reportError "autogen.sh / configure failed - error is:" $'\n' "$err_msg"
	elif ! err_msg=$(./download 2>&1); then
		reportError "download failed - error is:" $'\n' "$err_msg"
	elif ! make dev-install >build.log 2>&1 ; then
		reportError "building failed - error is:" $'\n' $(tail -n50 build.log)
	else
		echo build done

		prev_head=$good_head

		# successful build, maybe do a smoketest/first.bas?
		good_head=$(git rev-parse --verify HEAD)
		mv build "build-$good_head" || 
		{
			test -z "$prev_head" || echo "Leaving build-$prev_head around, exiting now"
			exit 1
		}

		if test -n "$prev_head"; then
			rm -rf "build-$prev_head"
		fi
	fi

	echo updating repo

	# new commits?
	while true; do
		old_head=$(git rev-parse --verify HEAD) && err_msg=$(git pull -r 2>&1) || 
		{
			echo "git repo f*cked up - error is:"
			echo $err_msg
			test -z "$prev_head" || echo "Leaving build-$prev_head around, exiting now"
			exit 1
		}
		new_head=$(git rev-parse --verify HEAD)
		
		if test "$old_head" != "$new_head"; then
			break
		fi
		sleep $PAUSE_SECONDS
	done
done
