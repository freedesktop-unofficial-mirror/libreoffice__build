# ------------------------------------
# This file is generated from setup.in
# ------------------------------------

BUILDDIR=@BUILDDIR@
BUILD_WIN32='@BUILD_WIN32@'
DISTRO='@DISTRO@'
SPLIT='@SPLIT@'
PIECE='@PIECE@'
VENDORNAME='@VENDORNAME@'
SRCDIR=@SRCDIR@
VERSION='@OOO_VERSION@'
BINSUFFIX='@OOO_BINSUFFIX@'
OOO_LANGS='@OOO_LANGS@'
if test "$OOO_LANGS" = ""; then OOO_LANGS="en-US"; fi
OOO_POOR_HELP_LOCALIZATIONS='@OOO_POOR_HELP_LOCALIZATIONS@'
CVSTAG='@CVSTAG@'
OOO_GIT='@OOO_GIT@'
GITTAG="ooo/`echo @CVSTAG@ | tr '[[:lower:]]-' '[[:upper:]]_' | sed 's/_M/_m/'`"
APPLY_DIR='@APPLY_DIR@'
BUILD_NCPUS='@BUILD_NCPUS@'
ENABLE_CCACHE='@ENABLE_CCACHE@'
ENABLE_ICECREAM='@ENABLE_ICECREAM@'
ICECREAM_BINDIR='@ICECREAM_BINDIR@'
MAX_JOBS='@MAX_JOBS@'
# do not lost ARCH_FLAGS from the environmnet; potential duplicates should not harm
ARCH_FLAGS="$ARCH_FLAGS @WITH_ARCH_FLAGS@"
OOO_WIDGET_FLAGS='@OOO_WIDGET_FLAGS@'
OOO_CUSTOM_IMAGES='@OOO_CUSTOM_IMAGES@'
OOO_CRYSTAL_IMAGES='@OOO_CRYSTAL_IMAGES@'
OOOP_FONTS_PACK='@OOOP_FONTS_PACK@'
OOOP_GALLERY_PACK='@OOOP_GALLERY_PACK@'
OOOP_SAMPLES_PACK='@OOOP_SAMPLES_PACK@'
OOOP_TEMPLATES_PACK='@OOOP_TEMPLATES_PACK@'
LIGHTPROOF_LANG='@LIGHTPROOF_LANG@'
LIGHTPROOF_FILENAMES='@LIGHTPROOF_FILENAMES@'
NUMBERTEXT_EXTENSION='@NUMBERTEXT_EXTENSION@'
WATCH_WINDOW_EXTENSION='@WATCH_WINDOW_EXTENSION@'
GOOGLE_DOCS_EXTENSION='@GOOGLE_DOCS_EXTENSION@'
NLPSOLVER_EXTENSION='@NLPSOLVER_EXTENSION@'
OOOBLOGGER_EXTENSION='@OOOBLOGGER_EXTENSION@'
SUNTEMPLATES_LANG='@SUNTEMPLATES_LANG@'
OOO_BUILDVERSION='@OOO_BUILDVERSION@'
OOO_STRIP='@OOO_STRIP@'
OOO_ADDITIONAL_SECTIONS='@OOO_ADDITIONAL_SECTIONS@'
SPLIT_APP_MODULES='@SPLIT_APP_MODULES@'
SPLIT_OPT_FEATURES='@SPLIT_OPT_FEATURES@'
RUN_POST_INSTALL_SCRIPTS='@RUN_POST_INSTALL_SCRIPTS@'
DEFUZZ_PATCHES='@DEFUZZ_PATCHES@'
TOOLSDIR='@TOOLSDIR@'
ENABLE_ODK='@ENABLE_ODK@'
USE_PREBUILD_UNOWINREG_DLL='@USE_PREBUILD_UNOWINREG_DLL@'
ENABLE_MONO='@ENABLE_MONO@'
ENABLE_EXTENSIONS='@ENABLE_EXTENSIONS@'
ENABLE_SCSOLVER='@ENABLE_SCSOLVER@'
ENABLE_GRAPHITE='@ENABLE_GRAPHITE@'
GRAPHITE_SRC='@GRAPHITE_SRC@'
PROPAGATED_ARGS="@PROPAGATED_ARGS@"
CAIRO_VER=@CAIRO_VER@
CAIRO_ENABLED=@CAIRO_ENABLED@
SYSTEM_CAIRO=@SYSTEM_CAIRO@
PREBUILT_WRITINGAIDS_TIMESTAMP=@PREBUILT_WRITINGAIDS_TIMESTAMP@
PREBUILT_EXTENSIONAIDS_TIMESTAMP=@PREBUILT_EXTENSIONAIDS_TIMESTAMP@
UNSTABLE_WP=@UNSTABLE_WP@
SYSTEM_LIBWPD=@SYSTEM_LIBWPD@
SYSTEM_LIBWPG=@SYSTEM_LIBWPG@
SYSTEM_LIBWPS=@SYSTEM_LIBWPS@
LIBWPD_TARBALL=@LIBWPD_TARBALL@
LIBWPG_TARBALL=@LIBWPG_TARBALL@
LIBWPS_TARBALL=@LIBWPS_TARBALL@
GLITZ_VER=@GLITZ_VER@
DEJAVU_FONTS_VER=@DEJAVU_FONTS_VER@
DEJAVU_FONTS_PACK_NAME=@DEJAVU_FONTS_PACK_NAME@
LIBERATION_FONTS_VER=@LIBERATION_FONTS_VER@
AGFA_MONOTYPE_FONTS_SOURCE=@AGFA_MONOTYPE_FONTS_SOURCE@
export GNUCP=@GNUCP@
GNUPATCH=@GNUPATCH@
GNUTAR=@GNUTAR@
DRINK="@DRINK@"
OXYGEN_IMAGES_TAR='@OXYGEN_IMAGES_TAR@'

if test -f "$TOOLSDIR/distro-configs/Common.conf" ; then
    COMMON_OPTIONS="`cat $TOOLSDIR/distro-configs/Common.conf | xargs`";
else
    echo "Warning: $TOOLSDIR/distro-configs/Common.conf not found."
fi

if test "z$BUILD_WIN32" != "z"; then
    if test -f "$TOOLSDIR/distro-configs/CommonWin32.conf" ; then
        PLATFORM_OPTIONS="`cat $TOOLSDIR/distro-configs/CommonWin32.conf | xargs`";
    else
        echo "Warning: $TOOLSDIR/distro-configs/CommonWin32.conf not found."
    fi
else if test "z`uname -s`" = "zDarwin"; then
    if test -f "$TOOLSDIR/distro-configs/CommonMac.conf" ; then
        PLATFORM_OPTIONS="`cat $TOOLSDIR/distro-configs/CommonMac.conf | xargs`";
    else
        echo "Warning: $TOOLSDIR/distro-configs/CommonMac.conf not found."
    fi
else
    if test -f "$TOOLSDIR/distro-configs/CommonLinux.conf" ; then
        PLATFORM_OPTIONS="`cat $TOOLSDIR/distro-configs/CommonLinux.conf | xargs`";
    else
        echo "Warning: $TOOLSDIR/distro-configs/CommonLinux.conf not found."
    fi
fi
fi

if test "z$DISTRO" != "z" -a -f "$TOOLSDIR/distro-configs/$DISTRO.conf"; then
    CONFIGURE_OPTIONS="$COMMON_OPTIONS $PLATFORM_OPTIONS $OOO_WIDGET_FLAGS `cat $TOOLSDIR/distro-configs/$DISTRO.conf | xargs`";
else
    echo "ERROR: Could not find the distribution specific configure options"
    echo "    file in $TOOLSDIR/distro-configs/."
    echo "    $TOOLSDIR/distro-configs/$DISTRO.conf is probably missing."
fi

# Misc. internal
TOOLSDIR='@TOOLSDIR@'
OOBUILDDIR='@OOBUILDDIR@'
SYSTEM_GCC='@SYSTEM_GCC@'
FORCE_GCC33='@FORCE_GCC33@'
# the variable DESTDIR will be unset to do not break build, etc.
# the test allows to source setup twice
test "z$DESTDIR" = "z" || OODESTDIR=$DESTDIR

# clobber bogus env vars. they badly screw things up
unset DESTDIR;
unset CC;
unset CXX;
unset ERROR_FLAGS;
unset MAKE
unset WARN_CFLAGS

# Where to install to
prefix=@prefix@
exec_prefix=@exec_prefix@
datarootdir=@datarootdir@
PREFIXBASE=@prefix@
LIBDIRBASE=@libdir@
MANDIRBASE=@mandir@
DOCDIRBASE=@docdir@
PREFIX=$OODESTDIR$PREFIXBASE
MANDIR=$OODESTDIR$MANDIRBASE
DOCDIR=$OODESTDIR$DOCDIRBASE
DATADIRBASE=@datadir@
DATADIR=$OODESTDIR$DATADIRBASE
SYSCONFBASE=@sysconfdir@
SYSCONFDIR=$OODESTDIR$SYSCONFBASE
OOINSTBASE=@libdir@/@OOOINSTALLDIRNAME@
OOINSTDIR=$OODESTDIR$OOINSTBASE
OOOINSTALLDIRNAME=@OOOINSTALLDIRNAME@
UPSTREAM_NAME=@UPSTREAM_NAME@
SOURCE_TYPE=@SOURCE_TYPE@
MONO_GAC_ROOT=@MONO_GAC_ROOT@

TCSH=/bin/tcsh

# it can be lib or lib64
LIB=`echo $LIBDIRBASE|sed 's|.*/||'`

# substitute ALL to the list of languages if possible
test -n "$OO_TOOLSDIR" && solenv_dir=$SOLARENV || solenv_dir=$OOBUILDDIR/solenv
if test -f $solenv_dir/inc/postset.mk ; then
    # generate shell variable from completelangiso= from solenv/inc/postset.mk
    # the sed command does the following:
    #	+ adds " on the beginning of the value (after =)
    #	+ adds " at the end of the value (end of line without the backslash \)
    #	+ removes backslashes
    #	+ removes en-US; we want to put it on the beginning
    #	+ prints just the section starting with 'completelangiso=' and ending with the " at the end of line
    eval $(sed -n 's/=/="/;s/\([^\\]\)$/\1"/;s/\\//;s/en-US//;/^completelangiso=/,/"$/p' $solenv_dir/inc/postset.mk)
    ALL_LANGS="en-US $completelangiso"
    OOO_LANGS_LIST=`echo $OOO_LANGS | sed -e "s|ALL|$ALL_LANGS|g"`
fi
# force langs
if test -n "$FORCE_OOO_LANGS" ; then
    OOO_LANGS_LIST="$FORCE_OOO_LANGS"
    OOO_LANGS="$FORCE_OOO_LANGS"
fi

# setup paths
PATH="$BUILDDIR/bin:$PATH:$TOOLSDIR/bin"

CONFIGURE_OPTIONS="$CONFIGURE_OPTIONS $CONFIGURE_EXTRA_OPTIONS"

LD_LIBRARY_PATH="$BUILDDIR/$LIB:/opt/mozilla/$LIB:$LD_LIBRARY_PATH"

# gcc speedup
# check for >= 4G/8G cache size if using ccache?
case "$ENABLE_CCACHE/$ENABLE_ICECREAM" in
    "yes/")
        CCACHE_NOLINK=1; export CCACHE_NOLINK
        CCACHE_UNIFY=1; export CCACHE_UNIFY
        CC="ccache gcc"; export CC
        CXX="ccache g++"; export CXX
        ;;

    "/yes")
        CC="$ICECREAM_BINDIR/gcc"; export CC
        CXX="$ICECREAM_BINDIR/g++"; export CXX
        ;;

    "yes/yes")
        CCACHE_NOLINK=1; export CCACHE_NOLINK
        CCACHE_UNIFY=1; export CCACHE_UNIFY
        CC="ccache $ICECREAM_BINDIR/gcc"; export CC
        CXX="ccache $ICECREAM_BINDIR/g++"; export CXX
        ;;
esac

# Icecream should use the internal gcc, if we want it
if test "z$ENABLE_ICECREAM" != "z" -a "z$SYSTEM_GCC" = "z" ; then
    if test -x "$BUILDDIR/bin/gcc"; then
        CURRENTDIR="`pwd`"; cd "$BUILDDIR"
        ICE_TAR_NAME=`create-env --respect-path | grep '^creating ' | sed 's/^creating //'`
        cd "$CURRENTDIR"
        ICECC_VERSION="$BUILDDIR/$ICE_TAR_NAME"; export ICECC_VERSION
    fi
fi

if test "z$CCACHE_DIR" = "z" ; then
    CCACHE_DIR=$BUILDDIR/.ccache
fi

# how to mark config files in file lists
if test "z$VENDORNAME" = "zNovell" -o "z$VENDORNAME" = "zRedHat"; then
    RPM_CONFIG_FILE_TAGS="%config"
elif test "z$DISTRO" = "zPLD" ; then
    RPM_CONFIG_FILE_TAGS="%config(noreplace) %verify(not md5 size mtime)"
fi

# Tag file lists with language (for RPM)
if test "z$VENDORNAME" = "zRedHat"; then
    RPM_TAG_LANGPACKS=TRUE
fi


# ---------------------------
#   Source / Version setup:
# ---------------------------
GCC_VER=gcc-4.2.3
GCC_TARBALL=gcc-4.2.3.tar.bz2
GCC_UNTAR_OPTIONS=jxf
GCC_DECOMPRESS_CMD="bzip2 -dc"
GCC_PATCHES=""

BINUTILS_VER=binutils-2.18
BINUTILS_TARBALL=binutils-2.18.tar.bz2
BINUTILS_UNTAR_OPTIONS=jxf
BINUTILS_DECOMPRESS_CMD="bzip2 -dc"
BINUTILS_PATCHES=""

# FIXME: -Wl,--as-needed is enabled by default for openSUSE-11.2
# there are missing symbols when linking kde libraries now
# See http://fourier.suse.de/mlarch/SuSE/development-gcc/2009/development-gcc.2009.07/msg00024.html
export SUSE_ASNEEDED=0

OOO_SCALED_ICONS_VER=ooo-scaled-icons
OOO_SCALED_ICONS_TARBALL=$OOO_SCALED_ICONS_VER.tar.gz
OOO_SCALED_ICONS_UNTAR_OPTIONS=xzf
OOO_SCALED_ICONS_DECOMPRESS_CMD="gunzip -dc"

#
# up-stream changed the split and names at random
# don't you just love them ? - with split pkgs we
# can bin this though.
#
if test -n "$UPSTREAM_NAME" ; then
    OOO_TARBALL="${UPSTREAM_NAME}_core.tar.bz2"
    OOO_SYSTEM_TARBALL="${UPSTREAM_NAME}_system.tar.bz2"
    OOO_BINFILTER_TARBALL="${UPSTREAM_NAME}_binfilter.tar.bz2"
    OOO_LANG_TARBALL="${UPSTREAM_NAME}_l10n.tar.bz2"
    OOO_EXTENSIONS_TARBALL="${UPSTREAM_NAME}_extensions.tar.bz2"
else
    OOO_TARBALL="$CVSTAG-core.tar.bz2"
    OOO_SYSTEM_TARBALL="$CVSTAG-system.tar.bz2"
    OOO_BINFILTER_TARBALL="$CVSTAG-binfilter.tar.bz2"
    OOO_LANG_TARBALL="$CVSTAG-lang.tar.bz2"
    OOO_EXTENSIONS_TARBALL="${CVSTAG}-extensions.tar.bz2"
fi
OOO_SPLIT_PREFIX=""
if test "z@SPLIT@" = "zyes"; then
    OOO_SPLIT_PREFIX="$CVSTAG-"
    OOO_SDK_OO_TARBALL="$CVSTAG-sdk.tar.bz2"
    OOO_SYSTEM_TARBALL="$CVSTAG-libs-extern-sys.tar.bz2"
    OOO_TARBALL=not-there-at-all
    OOO_LANG_TARBALL=not-there-at-all
    OOO_BINFILTER_TARBALL=not-there-at-all
fi

OOO_EXTRA_ARTWORK="@OOO_EXTRA_ARTWORK@"
OOO_UNTAR_OPTIONS=jxf
OOO_DECOMPRESS_CMD="bzip2 -dc"

UNICOWS_SRC=$SRCDIR/unicows.exe;
DBGINST_SRC=$SRCDIR/dbghinst.EXE;
ODMA_SRC=$SRCDIR/5_11_98Odma20.zip;

BUILD_MOZILLA_SOURCE='@BUILD_MOZILLA_SOURCE@'

OPENCLIPART_VER=@OPENCLIPART_VER@
OPENCLIPART_DIR=@OPENCLIPART_DIR@

MDBTOOLS_SRC=@MDBTOOLS_SRC@
SYSTEM_MDBTOOLS=@SYSTEM_MDBTOOLS@

export LD_LIBRARY_PATH PATH CVSTAG APPLY_DIR
export CCACHE_DIR CCACHE_NOLINK CCACHE_UNIFY
export SRCDIR BUILDDIR OOBUILDDIR GITTAG
export BUILD_FLAGS VERSION TOOLSDIR VENDORNAME
export PREFIX PREFIXBASE SYSCONFDIR SYSCONFBASE
export MANDIR MANDIRBASE DOCDIR DOCDIRBASE
export OOINSTDIR OOINSTBASE OOOINSTALLDIRNAME
export OODESTDIR OOO_LANGS OOO_LANGS_LIST
export OOO_POOR_HELP_LOCALIZATIONS
export CONFIGURE_OPTIONS
export DISTRO BINSUFFIX ARCHITECTURE BUILD_MAGIC
export BUILD_WIN32 
export FORCE_GCC33 ARCH_FLAGS
export OPENCLIPART_VER OPENCLIPART_DIR
export OOO_SPLIT_PREFIX

if test "z$RPM_TAG_LANGPACKS" != "z"; then
export RPM_TAG_LANGPACKS
fi

echo "Setup:"
echo " Tag:        '$CVSTAG'"
echo " Apply:      '$APPLY_DIR/apply'"
echo " Flags:      '$BUILD_FLAGS'"
echo " Suffix:     '$BINSUFFIX'"
echo " Dir:        '$BUILDDIR'"
echo " DestDir:    '$DESTDIR'"
echo " Path:       '$PATH'"
echo " Prefix:     '$PREFIX'"
echo " Mandir:     '$MANDIR'"
echo " Docdir:     '$DOCDIR'"
echo " Sysconf:    '$SYSCONFDIR'"
echo " OOInBase:   '$OOINSTBASE'"
echo " OOInstall:  '$OOINSTDIR'"
echo " OODestDir:  '$OODESTDIR'"
echo " Config:     $CONFIGURE_OPTIONS $PROPAGATED_ARGS"
if test "$ENABLE_CCACHE" = "yes"; then
    echo " ccache:     yes, ccache directory is '$CCACHE_DIR'"
else
    echo " ccache:     no"
fi
if test "$ENABLE_ICECREAM" = "yes"; then
    echo " icecream:   yes, in '$ICECREAM_BINDIR'"
    if test "z$ICECC_VERSION" != "z"; then
        echo " icecream:   using '$ICECC_VERSION' compiler tarball."
    fi
else
    echo " icecream:   no"
fi
if test "$MAX_JOBS" -gt 1; then
   echo " Max number of jobs to run in parallel is '$MAX_JOBS'"
fi
if test "$BUILD_NCPUS" -gt 1; then
   echo " Max number of projects to build in parallel is '$BUILD_NCPUS'"
fi
