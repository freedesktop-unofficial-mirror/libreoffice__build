#!/usr/bin/perl -w

use strict;

# Towards a more modular build ...

my $tar_opts='cj';
my %module_map = (
    'ure' => [ 'bridges', 'cli_ure', 'codemaker', 'cppu', 'cppuhelper',
	       'cpputools', 'idlc', 'io', 'javaunohelper', 'jurt', 'jut',
	       'jvmaccess', 'jvmfwk', 'offapi', 'offuh', 'pyuno', 'rdbmaker',
	       'registry', 'remotebridges', 'ridljar', 'sal', 'salhelper',
	       'stoc', 'store', 'udkapi', 'unoil', 'ure', 'xml2cmp' ],
    'sdk' => [ 'autodoc', 'cosv', 'odk', 'sdk_oo', 'udm', 'unodevtools' ],
    'base' => [ 'dbaccess', 'reportdesign' ],
    'calc' => [ 'sc', 'scaddins', 'sccomp', 'chart2' ],
    'l10n' => [ 'extras', 'helpcontent2', 'readlicense_oo' ],
    'writer' => [ 'sw', 'starmath' ],
    'impress' => [ 'sd', 'animations', 'slideshow', 'sdext' ],
    'artwork' => [ 'default_images', 'external_images', 'ooo_custom_images' ],
    'filters' => [ 'binfilter', 'filter', 'hwpfilter', 'unoxml',
		   'writerfilter', 'writerperfect', 'xmerge', 'oox' ],
    'testing' => [ 'qadevOOo', 'smoketestoo_native', 'testshl2', 'testtools' ],
    'bootstrap' => [ 'config_office', 'dmake', 'instsetoo_native', 'scp2',
		     'solenv', 'soltools', 'stlport' ],
    'libs-gui' => [ 'basebmp', 'basegfx', 'canvas', 'comphelper', 'cppcanvas',
		    'dtrans', 'goodies', 'i18npool', 'i18nutil', 'o3tl',
		    'padmin', 'psprint', 'psprint_config', 'regexp', 'rsc', 
		    'sax', 'sot', 'svtools', 'toolkit', 'tools', 'transex3',
		    'ucbhelper', 'unotools', 'vcl', 'vos' ],
    'libs-core' => [ 'avmedia', 'basic', 'configmgr', 'connectivity',
		     'desktop', 'embeddedobj', 'eventattacher', 'fileaccess',
		     'fpicker', 'framework', 'idl', 'linguistic',
		     'officecfg', 'oovbaapi', 'sandbox', 'scripting',
		     'sfx2', 'shell', 'sj2', 'svx', 'sysui',
		     'ucb', 'uui', 'xmlhelp', 'xmloff', 'xmlscript' ],
    'libs-extern' => [ 'afms', 'agg', 'beanshell', 'berkeleydb', 'bitstream_vera_fonts',
		       'boost', 'curl', 'dictionaries', 'epm', 'expat', 'external',
		       'fondu', 'freetype', 'hsqldb', 'icu', 'jfreereport', 'jpeg',
		       'libegg', 'libtextcat', 'libwpd', 'libxml2', 'libxmlsec',
		       'libxslt', 'moz', 'msfontextract', 'neon', 'np_sdk',
		       'python', 'rhino', 'sane', 'twain', 'lpsolve', 'icc',
		       'openssl', 'unixODBC', 'vigra', 'xalan', 'x11_extensions',
		       'zlib', 'xpdf', 'hyphen' ],
    'extensions' => [ 'accessibility', 'automation', 'basctl', 'bean',
		      'crashrep', 'embedserv', 'extensions', 'forms',
		      'javainstaller2', 'lingucomponent', 'MathMLDTD',
		      'package', 'setup_native', 'UnoControls', 'wizards',
		      'xmlsecurity' ],
    'postprocess' => [ 'postprocess', 'packimages' ]
);

my $src;
my $dest;

sub print_help_and_exit()
{
    print "src-package: <src-directory-name> [<destination-directory>]\n";
    print "   the src will be un-packed into several archives\n";
    print "   prefixed by the last path element\n";
    exit 0;
}

sub slurp_dir_to_hash($)
{
    my $src = shift;
    my %entries;

    opendir my $dirh, "$src" || die "Can't open $src: $!";
    while (my $entry = readdir ($dirh)) {
	$entries{$entry} = 1;
    }
    closedir ($dirh);
    return \%entries;
}

sub verify_module_map($$)
{
    my $src = shift;
    my $module_map = shift;
    my $failed = 0;

    my $modules = slurp_dir_to_hash ($src);

    print "Verifying module map ...";
    
    for my $section (keys %{$module_map}) {
	for my $module (@{$module_map->{$section}}) {
	    if (!defined $modules->{$module}) {
		print "\n\nError: section '$section' contains non-existent module '$module'\n\n";
		$failed = 1;
	    }
	    delete $modules->{$module};
	}
    }
    my @left_over = keys %{$modules};
    if (@left_over) {
	print "\n\nError: modules not included in any section: @left_over\n\n";
	$failed = 1;
    }
    
    die "Failed." if ($failed);
    print " done\n";
}

for my $arg (@ARGV) {
    if ($arg eq "--help" || $arg eq '-h') {
	print_help_and_exit();
    } elsif (!defined $src) {
	$src = $arg;
    } elsif (!defined $dest) {
	$dest = $arg;
    } else {
	die "Too many arguments '$arg'";
    }
}

if (!defined $src) {
    print_help_and_exit();
}
$dest = '.' if (!defined $dest);

-f "$src/vcl/source/gdi/outdev.cxx" || die "$src doesn't look like an OO.o source tree";

verify_module_map ($src, \%module_map);

for my $a (keys %module_map) {
    print "module '$a' =>";
    for my $b (@{$module_map{$a}}) {
	print " $b";
    }
    print "\n";
}

#, 
#echo "packing source in $src to directory $dest";, 
#, 
#if test ! -f "$src/vcl/source/gdi/outdev.cxx"; then, 
#    echo "Doesn't look like an OO.o source tree";, 
#    exit 1;, 
#fi, 
#, 
#system_dirs="$src/python $src/bitstream_vera_fonts $src/freetype $src/jpeg";
#system_dirs="$system_dirs $src/dictionaries $src/libxml2 $src/zlib $src/moz";
#system_dirs="$system_dirs $src/curl $src/neon ";
#
## future system bits:
#incomplete_modules="$src/curl $src/expat $src/icu $src/libxmlsec $src/neon";
#incomplete_modules="$incomplete_modules $src/msfontextract $src/regexp $src/rhino ";
#incomplete_modules="$incomplete_modules $src/sablot $src/sane $src/stlport $src/twain";
#incomplete_modules="$incomplete_modules $src/unixODBC $src/x11_extensions $src/boost";
#
## FIXME - remove svdbt.dll with an unclear license; it looks unused anyway; http://www.openoffice.org/issues/show_bug.cgi?id=80408
#rm -f $src/sfx2/util/svdbt.dll
#
#echo "Packing binfilter ...";
#tar $tar_opts -f $dest/$src-binfilter.tar.bz2 $src/binfilter || exit 1;
#rm -Rf $src/binfilter || exit 1;
#
#echo "Packing sdk_oo ...";
#tar $tar_opts -f $dest/$src-sdk_oo.tar.bz2 $src/sdk_oo || exit 1;
#rm -Rf $src/sdk_oo || exit 1;
#
#echo "Packing system pieces ...";
#tar $tar_opts -f $dest/$src-system.tar.bz2 $system_dirs || exit 1;
#rm -Rf $system_dirs || exit 1;
#
## This saves only 1.5Mb
##
## echo "Packing win32 bits ...";
## tar $tar_opts -f $dest/$src-win32.tar.bz2 $win32_dirs || exit 1;
## rm -Rf $win32_dirs || exit 1;
#
#echo "Packing i18n bits ...";
#find $src -name localize.sdf > localize.lst || exit 1;
#find $src/extras/source/templates -type f | grep -v 'CVS' | grep -v 'delzip' | grep -v 'makefile.mk' | grep -v '/de' | grep -v '/en-US' >> localize.lst || exit 1;
#tar $tar_opts -f $dest/$src-lang.tar.bz2 --files-from=localize.lst || exit 1;
#cat localize.lst | xargs rm -Rf || exit 1
#rm localize.lst
#
#echo "Packing core source ...";
#tar $tar_opts -f $dest/$src-core.tar.bz2 $src || exit 1;
#rm -Rf $src
#
#echo "Generating md5 sums ...";
#for suffix in binfilter sdk_oo system lang core; do # win32 cvs
#	md5sum $dest/$src-$suffix.tar.bz2 > $dest/$src-$suffix.tar.bz2.md5 || exit 1;
#done

