#ifndef __com_sun_star_table_XVBACellRange_idl__
#define __com_sun_star_table_XVBACellRange_idl__

#ifndef __com_sun_star_uno_XInterface_idl__
#include <com/sun/star/uno/XInterface.idl>
#endif

#ifndef __com_sun_star_lang_IndexOutOfBoundsException_idl__
#include <com/sun/star/lang/IndexOutOfBoundsException.idl>
#endif


//=============================================================================

module com {  module sun {  module star {  module vba {

//=============================================================================

/** provides access to the cells or to sub-ranges of a cell range.

	@see com::sun::star::vba::VBACellRange
 */
published interface XVBACellRange: com::sun::star::uno::XInterface
{

	//-------------------------------------------------------------------------
	/** Returns the number value of a cell

		@param aCellName
			is the name of the cell for which the value is to be returned

		@returns
			the address for the specified cell in the range
	*/

	int getCellValue( [in] string aCellName);

	//-------------------------------------------------------------------------
	/** sets a number value into the cell

		@param aCellName
			is the name of the cell for which the address needs to be returned

		@returns
			the address for the specified cell in the range
	*/

	void setCellValue( [in] string aCellName, [in] int nValue);

	//-------------------------------------------------------------------------
	/** Returns the string value of a cell

		@param aCellName
			is the name of the cell for which the value is to be returned

		@returns
			the address for the specified cell in the range
	*/

	string getCellValue( [in] string aCellName);

	//-------------------------------------------------------------------------
	/** sets a string value into the cell

		@param aCellName
			is the name of the cell for which the address needs to be returned

		@returns
			the address for the specified cell in the range
	*/

	void setCellValue( [in] string aCellName, [in] string nValue);

	//-------------------------------------------------------------------------
	/** Returns the address of the cell within the range.

		@param aCellName
			is the name of the cell for which the address needs to be returned

		@returns
			the address for the specified cell in the range
	*/
	string getCellAddress( [in] string aCellName);
	
	//-------------------------------------------------------------------------


	/*The below two methods are there in existing XCellRange interface
		Do we need to have them here as well? May be not*/

	com::sun::star::vba::XVBACellRange getCellRangeByPosition(
			[in] long nLeft,
			[in] long nTop,
			[in] long nRight,
			[in] long nBottom )
		raises( com::sun::star::lang::IndexOutOfBoundsException );

	//-------------------------------------------------------------------------

	com::sun::star::vba::XVBACellRange getCellRangeByName( [in] string aRange );

};

//=============================================================================

}; }; }; };

#endif

