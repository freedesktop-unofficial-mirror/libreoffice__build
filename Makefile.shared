# If we 'export' all our variables to forked processes
# we end up with a horrible mess - since we propagate
# eg. ACLOCAL_M4, AMDEP_TRUE, COMPATH etc.
# - a nightmare in a nutshell => we need to export on a
#   need-to-know / minimal basis.

STAMP_DIR=$(top_builddir)/stamp

# Source preparation

unpack : $(OOBUILDDIR)/unpack $(top_srcdir)/bin/unpack
$(OOBUILDDIR)/unpack :
	$(TOOLSDIR)/bin/transform --revert $(TOOLSDIR) $(OOBUILDDIR)
	-test -n "$(OOO_GIT)" && $(TOOLSDIR)/bin/gob --build-dir=$(OOBUILDDIR) prepare
	if test -d $(OOBUILDDIR)/applied_patches ; then \
		FLAGS="--distro=$(DISTRO)"; \
		if test -d $(OOBUILDDIR)/binfilter ; then \
			FLAGS="$$FLAGS --distro=Binfilter"; \
		fi ; \
		if test -d $(OOBUILDDIR)/zlib; then \
		    FLAGS="$$FLAGS --distro=System"; \
		fi ; \
		if test -d $(OOBUILDDIR)/sdk_oo ; then \
			FLAGS="$$FLAGS --distro=Sdk"; \
		fi ; \
		if grep localize.sdf $(OOBUILDDIR)/sw/source/ui/app/localize.sdf > /dev/null 2>&1 ; then \
			FLAGS="$$FLAGS --distro=Localize"; \
		fi ; \
		if test -d $(OOBUILDDIR)/swext ; then \
			FLAGS="$$FLAGS --distro=swext"; \
		fi ; \
		if test -n "$(OOO_ADDITIONAL_SECTIONS)" ; then \
			FLAGS="$$FLAGS --additional-sections=$(OOO_ADDITIONAL_SECTIONS)"; \
		fi ; \
		if test "z$(PIECE)" != "z"; then \
			FLAGS="$$FLAGS --pieces --distro=Piece"; \
		fi ; \
		chmod +x $(TOOLSDIR)/patches/apply.pl && $(TOOLSDIR)/patches/apply.pl $(APPLY_DIR) $(OOBUILDDIR) $$FLAGS -f -R ; \
	fi
	cd $(top_srcdir)/bin ; ./unpack
	-test -n "$(OOO_GIT)" && $(TOOLSDIR)/bin/gob --build-dir=$(OOBUILDDIR) postpare
	rm -f $(STAMP_DIR)/build $(STAMP_DIR)/patch.apply \
	      $(STAMP_DIR)/artwork.install
	touch $@

artwork.install : $(STAMP_DIR)/artwork.install
$(STAMP_DIR)/artwork.install : $(OOBUILDDIR)/unpack \
			      $(STAMP_DIR)/prebuild \
			      $(wildcard $(top_srcdir)/src/*.png) \
			      $(wildcard $(top_srcdir)/src/*.bmp)
	mkdir -p $(OOBUILDDIR)/setup_native/source/win32/nsis
	cp $(top_srcdir)/src/ooobitmap_*.bmp $(OOBUILDDIR)/setup_native/source/win32/nsis/ || echo "no nsis installer images to copy"
	cp $(top_srcdir)/src/ooobanner_*.bmp $(OOBUILDDIR)/setup_native/source/win32/nsis/ || echo "no nsis banner images to copy"
	cp $(top_srcdir)/src/ooosetup_*.ico $(OOBUILDDIR)/setup_native/source/win32/nsis/ || echo "no installer icon to copy"
	mkdir -p $(OOBUILDDIR)/instsetoo_native/res
	cp $(top_srcdir)/src/nologoinstall_*.bmp $(OOBUILDDIR)/instsetoo_native/res/ || echo "no installer sidebar images to copy"
	cp $(top_srcdir)/src/banner_*.bmp $(OOBUILDDIR)/instsetoo_native/res/ || echo "no installer banner images to copy"
	mkdir -p $(OOBUILDDIR)/svx/res
	cp $(top_srcdir)/src/open*_*.bmp $(OOBUILDDIR)/svx/res/ || echo "no intro images to copy"
	mkdir -p $(OOBUILDDIR)/default_images/svx/res
	mkdir -p $(OOBUILDDIR)/default_images/sw/res
	cp $(top_srcdir)/src/open*_*.png $(OOBUILDDIR)/default_images/svx/res/ || echo "no about images to copy"
	cp $(top_srcdir)/src/*-team.png $(OOBUILDDIR)/default_images/sw/res/ || echo "no team images to copy"
# Ignore convert.exe in windows/system32
	if test -d $(OOBUILDDIR)/default_images/introabout; then \
		case "`which convert`" in \
			*32/convert) ;; \
			/*) mv $(OOBUILDDIR)/default_images/introabout/intro.bmp $(OOBUILDDIR)/default_images/introabout/intro-save.bmp && convert $(OOBUILDDIR)/default_images/introabout/intro-save.bmp -depth 24 -type TrueColor $(OOBUILDDIR)/default_images/introabout/intro.bmp ;; \
		esac \
	fi
	mkdir -p $(OOBUILDDIR)/default_images/res/commandimagelist
	mkdir -p $(OOBUILDDIR)/ooo_custom_images/industrial/res/commandimagelist
	mkdir -p $(OOBUILDDIR)/ooo_custom_images/tango/res/commandimagelist
	cp $(top_srcdir)/src/layout/*.png $(OOBUILDDIR)/default_images/res/commandimagelist
	cp $(top_srcdir)/src/layout/*.png $(OOBUILDDIR)/ooo_custom_images/industrial/res/commandimagelist
	cp $(top_srcdir)/src/layout/*.png $(OOBUILDDIR)/ooo_custom_images/tango/res/commandimagelist
	tar -C $(top_srcdir)/src/layout -cf- default_images ooo_custom_images | tar -C $(OOBUILDDIR) -xf-
	touch $@

patch.apply: $(OOBUILDDIR)/unpack $(STAMP_DIR)/patch.apply 
$(STAMP_DIR)/patch.apply : $(top_srcdir)/patches/apply.pl \
			   $(top_srcdir)/patches/*/*.diff \
			   $(APPLY_DIR)/apply
	if test "z$(BUILD_WIN32)" != "z"; then \
	    cp -af $(BUILDDIR)/x86/* $(OOBUILDDIR)/external/dbghelp || true; \
	    cp -af $(BUILDDIR)/*.dll $(OOBUILDDIR)/external/unicows || true; \
	    mv $(OOBUILDDIR)/external/dbghelp/DbgHelp.Dll  \
		     $(OOBUILDDIR)/external/dbghelp/dbghelp.dll.temp || true; \
	    mv $(OOBUILDDIR)/external/dbghelp/dbghelp.dll.temp  \
		     $(OOBUILDDIR)/external/dbghelp/dbghelp.dll || true; \
	    chmod +x $(OOBUILDDIR)/external/dbghelp/*.dll \
		     $(OOBUILDDIR)/external/unicows/*.dll || true; \
	fi

	$(TOOLSDIR)/bin/transform --revert $(TOOLSDIR) $(OOBUILDDIR)
	-test -n "$(OOO_GIT)" && $(TOOLSDIR)/bin/gob --build-dir=$(OOBUILDDIR) prepare
	FLAGS="--distro=$(DISTRO)"; \
	if test -d $(OOBUILDDIR)/binfilter ; then \
		FLAGS="$$FLAGS --distro=Binfilter"; \
	fi ; \
	if test -d $(OOBUILDDIR)/zlib; then \
		FLAGS="$$FLAGS --distro=System"; \
	fi ; \
	if test -d $(OOBUILDDIR)/sdk_oo ; then \
		FLAGS="$$FLAGS --distro=Sdk"; \
	fi ; \
	if test '$(OOO_LANGS)' != 'en-US' ; then \
		FLAGS="$$FLAGS --distro=Localize"; \
	fi ; \
	if test -d $(OOBUILDDIR)/swext ; then \
		FLAGS="$$FLAGS --distro=swext"; \
	fi ; \
	if test -n "$(OOO_ADDITIONAL_SECTIONS)" ; then \
		FLAGS="$$FLAGS --additional-sections=$(OOO_ADDITIONAL_SECTIONS)"; \
	fi ; \
	if test "z$(PIECE)" != "z"; then \
		FLAGS="$$FLAGS --pieces --distro=Piece"; \
	fi ; \
	chmod +x $(TOOLSDIR)/patches/apply.pl && $(TOOLSDIR)/patches/apply.pl $(APPLY_DIR) $(OOBUILDDIR) $$FLAGS --tag=$(CVSTAG) ;
	-test -n "$(OOO_GIT)" && $(TOOLSDIR)/bin/gob --build-dir=$(OOBUILDDIR) postpare
	$(TOOLSDIR)/bin/transform --apply $(TOOLSDIR) $(OOBUILDDIR)
	-test -n "$(OOO_GIT)" && cd $(OOBUILDDIR) && git-commit -am 'Font munging.'
	$(TOOLSDIR)/bin/fix-deps $(OOBUILDDIR)
	rm -f $(STAMP_DIR)/build
	touch $@

patch.unapply:
	$(TOOLSDIR)/bin/transform --revert $(TOOLSDIR) $(OOBUILDDIR)
	FLAGS="--distro=$(DISTRO)"; \
	if test -d $(OOBUILDDIR)/binfilter ; then \
		FLAGS="$$FLAGS --distro=Binfilter"; \
	fi ; \
	if test -d $(OOBUILDDIR)/zlib ; then \
		FLAGS="$$FLAGS --distro=System"; \
	fi ; \
	if test -d $(OOBUILDDIR)/sdk_oo ; then \
		FLAGS="$$FLAGS --distro=Sdk"; \
	fi ; \
	if grep localize.sdf $(OOBUILDDIR)/sw/source/ui/app/localize.sdf > /dev/null 2>&1 ; then \
		FLAGS="$$FLAGS --distro=Localize"; \
	fi ; \
	if test -d $(OOBUILDDIR)/swext ; then \
		FLAGS="$$FLAGS --distro=swext"; \
	fi ; \
	if test -n "$(OOO_ADDITIONAL_SECTIONS)" ; then \
		FLAGS="$$FLAGS --additional-sections=$(OOO_ADDITIONAL_SECTIONS)"; \
	fi ; \
	if test "z$(PIECE)" != "z"; then \
		FLAGS="$$FLAGS --pieces --distro=Piece"; \
	fi ; \
	chmod +x $(TOOLSDIR)/patches/apply.pl && $(TOOLSDIR)/patches/apply.pl $(APPLY_DIR) $(OOBUILDDIR) $$FLAGS -R ;
	rm -f $(STAMP_DIR)/patch.apply

# Build bits:

prebuild : $(STAMP_DIR)/prebuild
$(STAMP_DIR)/prebuild : $(OOBUILDDIR)/unpack
	echo "Creating environment"
	mkdir -p $(BUILDDIR)
	mkdir -p $(BUILDDIR)/bin
	mkdir -p $(BUILDDIR)/share
	mkdir -p $(BUILDDIR)/share/aclocal
	mkdir -p $(BUILDDIR)/share/autoconf
	mkdir -p $(BUILDDIR)/lib
	mkdir -p $(BUILDDIR)/man
	mkdir -p $(BUILDDIR)/man/man1
	mkdir -p $(OOBUILDDIR)
	mkdir -p $(OOBUILDDIR)/external/msvcp71
	touch $@

build.tools : $(STAMP_DIR)/build.tools
$(STAMP_DIR)/build.tools : $(STAMP_DIR)/prebuild
	cd $(top_srcdir)/bin ; ./build-tools
	touch $@

build : $(STAMP_DIR)/build
$(STAMP_DIR)/build : $(OOBUILDDIR)/unpack \
		     $(STAMP_DIR)/patch.apply \
		     $(STAMP_DIR)/artwork.install \
		     $(STAMP_DIR)/build.tools \
		     $(STAMP_DIR)/prebuild
	cd $(top_srcdir)/bin ; ./build-ooo
	touch $@

all: build

install: $(STAMP_DIR)/build
if BUILD_WIN32
	cd bin ; ./make-win32-iso
else
	cd bin ; ./package-ooo
endif
