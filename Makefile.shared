# If we 'export' all our variables to forked processes
# we end up with a horrible mess - since we propagate
# eg. ACLOCAL_M4, AMDEP_TRUE, COMPATH etc.
# - a nightmare in a nutshell => we need to export on a
#   need-to-know / minimal basis.

STAMP_DIR=$(top_builddir)/stamp

# Source preparation

unpack : $(OOBUILDDIR)/unpack $(top_srcdir)/bin/unpack
$(OOBUILDDIR)/unpack :
	$(TOOLSDIR)/bin/transform --revert $(TOOLSDIR) $(OOBUILDDIR)
	if test -d $(OOBUILDDIR)/applied_patches; then \
		$(TOOLSDIR)/patches/apply.pl $(APPLY_DIR) $(OOBUILDDIR) --distro=$(DISTRO) -f -R; \
	fi
	cd $(top_srcdir)/bin ; ./unpack
	rm -f $(STAMP_DIR)/build $(STAMP_DIR)/patch.apply \
	      $(STAMP_DIR)/artwork.install
	touch $@

artwork.install : $(STAMP_DIR)/artwork.install
$(STAMP_DIR)/artwork.install : $(OOBUILDDIR)/unpack \
			      $(STAMP_DIR)/prebuild \
			      $(top_srcdir)/src/*.png $(top_srcdir)/src/*.bmp
	mkdir -p $(OOBUILDDIR)/svx/res
	cp $(top_srcdir)/src/open*_*.bmp $(OOBUILDDIR)/svx/res/ || echo "no intro images to copy"
	cp $(top_srcdir)/src/open*_*.png $(OOBUILDDIR)/default_images/svx/res/ || echo "no about images to copy"
	cp $(top_srcdir)/src/*-team.png $(OOBUILDDIR)/default_images/sw/res/ || echo "no team images to copy"
	cp -vf $(TOOLSDIR)/fonts/opens___.ttf $(OOBUILDDIR)/extras/source/truetype/symbol || echo "font copy failed";
	touch $@

patch.apply: $(OOBUILDDIR)/unpack $(STAMP_DIR)/patch.apply 
$(STAMP_DIR)/patch.apply : $(top_srcdir)/patches/apply.pl \
			   $(top_srcdir)/patches/*/*.diff \
			   $(APPLY_DIR)/apply
	if test "z$(BUILD_WIN32)" != "z"; then \
	    cp -af $(BUILDDIR)/x86/* $(OOBUILDDIR)/external/dbghelp || true; \
	    cp -af $(BUILDDIR)/*.dll $(OOBUILDDIR)/external/unicows || true; \
	    mv $(OOBUILDDIR)/external/dbghelp/DbgHelp.Dll \
		     $(OOBUILDDIR)/external/dbghelp/dbghelp.dll || true; \
	    chmod +x $(OOBUILDDIR)/external/dbghelp/*.dll \
		     $(OOBUILDDIR)/external/unicows/*.dll || true; \
	fi
	mkdir -p $(OOBUILDDIR)/libwpd/download
	cp -af $(SRCDIR)/libwpd*.tar.gz $(OOBUILDDIR)/libwpd/download
	$(TOOLSDIR)/bin/transform --revert $(TOOLSDIR) $(OOBUILDDIR)
	$(TOOLSDIR)/patches/apply.pl $(APPLY_DIR) $(OOBUILDDIR) --distro=$(DISTRO)
	$(TOOLSDIR)/bin/transform --apply $(TOOLSDIR) $(OOBUILDDIR)
	$(TOOLSDIR)/bin/fix-deps $(OOBUILDDIR)
	rm -f $(STAMP_DIR)/build
	touch $@

patch.unapply:
	$(TOOLSDIR)/bin/transform --revert $(TOOLSDIR) $(OOBUILDDIR)
	$(TOOLSDIR)/patches/apply.pl $(APPLY_DIR) $(OOBUILDDIR) --distro=$(DISTRO) -R
	rm -f $(STAMP_DIR)/patch.apply

# Build bits:

prebuild : $(STAMP_DIR)/prebuild
$(STAMP_DIR)/prebuild : $(OOBUILDDIR)/unpack
	echo "Creating environment"
	mkdir -p $(BUILDDIR)
	mkdir -p $(BUILDDIR)/bin
	mkdir -p $(BUILDDIR)/share
	mkdir -p $(BUILDDIR)/share/aclocal
	mkdir -p $(BUILDDIR)/share/autoconf
	mkdir -p $(BUILDDIR)/lib
	mkdir -p $(BUILDDIR)/man
	mkdir -p $(BUILDDIR)/man/man1
	mkdir -p $(OOBUILDDIR)
	mkdir -p $(OOBUILDDIR)/external/msvcp71
	touch $@

build.tools : $(STAMP_DIR)/build.tools
$(STAMP_DIR)/build.tools : $(STAMP_DIR)/prebuild
	cd $(top_srcdir)/bin ; ./build-tools
	touch $@

build : $(STAMP_DIR)/build
$(STAMP_DIR)/build : $(OOBUILDDIR)/unpack \
		     $(STAMP_DIR)/patch.apply \
		     $(STAMP_DIR)/artwork.install \
		     $(STAMP_DIR)/build.tools \
		     $(STAMP_DIR)/prebuild
	cd $(top_srcdir)/bin ; ./build-ooo
	touch $@

all: build

install: $(STAMP_DIR)/build
	cd bin ; ./package-ooo
