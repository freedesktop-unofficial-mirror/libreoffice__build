# If we 'export' all our variables to forked processes
# we end up with a horrible mess - since we propagate
# eg. ACLOCAL_M4, AMDEP_TRUE, COMPATH etc.
# - a nightmare in a nutshell => we need to export on a
#   need-to-know / minimal basis.

STAMP_DIR=$(top_builddir)/stamp
FONTMUNGE_FILE=$(OOBUILDDIR)/officecfg/registry/data/org/openoffice/VCL.xcu

# Source preparation

unpack : $(STAMP_DIR)/unpack
$(STAMP_DIR)/unpack : $(top_srcdir)/bin/unpack
	if test -f $(FONTMUNGE_FILE).bak; then \
	    echo "Revert font mapping munging ..."; \
	    mv -f $(FONTMUNGE_FILE).bak $(FONTMUNGE_FILE); \
	fi
	if test -d $(OOBUILDDIR)/applied_patches; then \
		$(TOOLSDIR)/patches/apply.pl $(TOOLSDIR)/patches/$(CVSTAG) $(OOBUILDDIR) --distro=$(DISTRO) -f -R; \
	fi
	cd $(top_srcdir)/bin ; ./unpack
	touch $@

artwork.install : $(STAMP_DIR)/artwork.install
$(STAMP_DIR)/artwork.install : unpack prebuild
	cd $(top_srcdir)/bin ; ./install-artwork
	touch $@

patch.apply: unpack $(STAMP_DIR)/patch.apply
$(STAMP_DIR)/patch.apply : $(top_srcdir)/patches/apply.pl \
			   $(top_srcdir)/patches/*/*.diff \
			   $(top_srcdir)/patches/*/*.patch \
			   $(top_srcdir)/patches/$(CVSTAG)/apply
	if test "z$BUILD_WIN32" != "z"; then \
	    cp -af $(BUILDDIR)/x86/* $(OOBUILDDIR)/external/dbghelp || true; \
	    cp -af $(BUILDDIR)/*.dll $(OOBUILDDIR)/external/unicows || true; \
	fi
	if test -f $(FONTMUNGE_FILE).bak; then \
	    echo "Revert font mapping munging ..."; \
	    mv -f $(FONTMUNGE_FILE).bak $(FONTMUNGE_FILE); \
	fi
	$(TOOLSDIR)/patches/apply.pl $(TOOLSDIR)/patches/$(CVSTAG) $(OOBUILDDIR) --distro=$(DISTRO) -f
	cp -a $(FONTMUNGE_FILE) "$(FONTMUNGE_FILE).bak"
	echo "Munging font mappings ..."
	$(TOOLSDIR)/bin/font-munge $(FONTMUNGE_FILE)
	echo "done munging fonts."
	echo "Poking resource builds"
	find $(OOBUILDDIR)/*/*.pro -name '*.dpr' -exec rm {} \; || true
	find $(OOBUILDDIR)/*/*.pro -name '*.don' -exec rm {} \; || true
	find $(OOBUILDDIR)/*/*.pro -name '*.srs' -exec rm {} \; || true
	touch $@

# Build bits:

prebuild : $(STAMP_DIR)/prebuild
$(STAMP_DIR)/prebuild :
	echo "Creating environment"
	mkdir -p $(BUILDDIR)
	mkdir -p $(BUILDDIR)/bin
	mkdir -p $(BUILDDIR)/share
	mkdir -p $(BUILDDIR)/share/aclocal
	mkdir -p $(BUILDDIR)/share/autoconf
	mkdir -p $(BUILDDIR)/lib
	mkdir -p $(BUILDDIR)/man
	mkdir -p $(BUILDDIR)/man/man1
	mkdir -p $(OOBUILDDIR)
	mkdir -p $(OOBUILDDIR)/external/msvcp71
	touch $@

build.tools : $(STAMP_DIR)/build.tools
$(STAMP_DIR)/build.tools : prebuild
	cd $(top_srcdir)/bin ; ./build-tools
	touch $@

build : $(STAMP_DIR)/build
$(STAMP_DIR)/build : unpack patch.apply artwork.install build.tools
	cd $(top_srcdir)/bin ; ./build-ooo
	touch $@

all: build

install: build
	cd bin ; ./package-ooo
