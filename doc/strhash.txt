rtl::OUString intern-ing scheme ... 
    + allocation is slow (?) - requires locks (?)
    + design-wise:
	+ what is the deal ?
    + small test apps (?)
	+ what is faster ?

1st concept:

Current design thoughts:
    + explicit "intern" calls, in hot string spots (?)
	+ "intern" only works for 'small' < page strings.
    + comparison operator optimised for ptr == first.
	+ becomes a more common case.

    + problem:
	+ "how can you tell an 'interned' string"
	    + bit-mask on the length ?
	    + bit-mask on the 'refCount' ?
	    + "static" bit on the 'refCount' ?
	    + store a byte 'cookie' / 'canary' at
	      the end ?
	    + cookie.
	+ OR:
	    + a garbage type impl.
	    	+ small hash ~1 page of entries in
		  'thread private storage'
		+ holds a ref on the strings
	    + when this gets full [ size > N bytes ]
		+ scan for 'ref == 1'
	    + 'old' strings - moved to 'old' list (?)
	    + occasionally scan whole list
	      for 'ref == 1' strings

* Fun (!?)