Re-working the alpha icon support:

	* vcl/source/gdi/image.cxx (ImageList): reads the
	MaskBitmap from the resource file. res. compiler seems
	to decompose alpha via RSC_IMAGE_MASKCOLOR with no
	RSC_IMAGE_MASKBITMAP; 'ImageBitmap', 'MaskBitmap',
	'MaskColor' (via. the MASKCOLOR macro) used in .src.
	* rsc/source/res/rscclass.cxx (RscSysDepend::WriteRc): writes
	writes the filename to tmp; & does a
	* rsc/source/parser/rscdb.cxx (PutSysName): tracks file names.
	ImageBitmap's can be built from IdList's: why have the IdCount ?
	(RSC_IMAGELIST_ IDLIST/IDCOUNT)

* Build seems to:
        + run rscdep - presumably dependency re-calculator
	+ run rscpp - presumably pre-processor
        + run rsc (seems to run rsc2)
	    + -s flag passed.
	    writes an srs file with pre-processing done,
	    doesn't build the images / resource file ...
	+ run 'bmp' - pass the srs file, icon paths etc.
	    build icon strips.
	+ in util/ process the srs files into a resource file
	    + -r flag passed


* vcl/source/gdi/bitmap.cxx
	+ internal pixel format dictated by underlying system
	+ WriteAcess sets accessors based on:
	    + BMP_SCANLINE_FORMAT( mpBuffer->mnFormat ) (mask off top bit)
	    + [ from bmpbuffer.cxx - implemented in sal ... ]
	+ Both Win & Unix use BMP_FORMAT_8BIT_PAL
	+ pScanLine in converter is a Byte *
	+ operator BitmapColor::BYTE -> mcBlueOrIndex [ the index ]
      + Add 'GetAlphaMask' to bitmap2.cxx.

* svtools/bmpmaker/bmpcore.cxx
	+ Can't really hope to create alpha mask files in here, since
	  too many individual bmps - it would suck.
	+ We can however convert 8bit -> 32bit here nicely.


* With hacks to bmpcore.cxx and bitmap.cxx / image.cxx:
	+ got a working soln'.


* TODO
	+ Bin 'IdCount': it blows chunks, just count items instead
	+ Split the RSC_IMAGE_MASKBITMAP out of all deep color bmps.
