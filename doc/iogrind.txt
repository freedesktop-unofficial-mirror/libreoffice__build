	+ valgrind bits ...
		+ as per memcheck:
		    + needs to trap & check every read & write
			+ substantially reduce the granularity ...
		    + 'lackey' - seems to do this already
		      [ with code access too ]
		+ want to trap all read/write/I/O interesting syscalls ...
		    + coregrind/mlibc_file
		    + coregrind/m_syswrap/syswrap-linux.c /sys_llseek/ (eg.)
		    + currently - we don't have this level of semantic
		      visibility, we need to hook coregrind bits.
			+ cf. POST_MEM_WRITE hard-coding etc.
		+ thunk on explicit I/O ? [ eg. map / unmap to keep addresses consistent ? ]

	+ Visualisation:
		+ break down *code* by section information and chart that ...
		+ [ hmm ]
		+ re-use OO.o's charting ? ;-)
		+ Break down working set by *allocation* ! ;-)
			+ what code allocated & then touched what ...
			+ [need more precision]


