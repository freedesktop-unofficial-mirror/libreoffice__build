Faster image strips horiz -> vertical...

* Questions: is the ImageList really that useful ?
    + can we construct it idly / on demand ?

* Audit ImageList usage - how many of the
  constructors are actually used !?

* ImplImageRefData / IMAGETYPE_IMAGEREF:
    'Image: ImageList::GetImage( USHORT nId )'


* contrast - high contrast etc. (?)

* Actual constructor usage:

for sym in `objdump -T libvcl680li.so | grep ImageListC | sed 's/.*_ZN/_ZN/'`; do echo "$sym"; grep $sym *.so; done

External uses of constructors:

18  ImageList::ImageList(ResId const&)
8   ImageList::ImageList(unsigned short, unsigned short)
2   ImageList::ImageList(ImageList const&)
1   ImageList::ImageList(_STL::vector<rtl::OUString, _STL::allocator<rtl::OUString> > const&, rtl::OUString const&, Color const*) - libfwk

[axe ? ]
0   ImageList::ImageList(Bitmap const&, Color const&, unsigned short, unsigned short*, unsigned short)
0   ImageList::ImageList(Bitmap const&, Bitmap const&, unsigned short, unsigned short*, unsigned short)
0   ImageList::ImageList(Bitmap const&, Bitmap const&, unsigned short, unsigned short*, unsigned short)
0   ImageList::ImageList(Bitmap const&, unsigned short, unsigned short*, unsigned short)
[ axe ? ]

+ libfwk:
1   ImageList::ImageList(BitmapEx const&, _STL::vector<rtl::OUString, _STL::allocator<rtl::OUString> > const&, unsigned short)
    + uiconfiguration/moduleimagemanager.cxx:                    m_pUserImageList[nImageType] = new ImageList( aUserBitmap, aUserImagesVector );
    + uiconfiguration/imagemanager.cxx:                    m_pUserImageList[nImageType] = new ImageList( aUserBitmap, aUserImagesVector );
	+ read a 'User Bitmap' ( configuration pieces )

+ libsvx:
1   ImageList::ImageList(Bitmap const&, unsigned short, unsigned short*, unsigned short)
svx/source/dialog/frmsel.cxx:    maILArrows = ImageList( aBmp, 16 );
    + Easy to re-write to use AddImage [ or sim. ]

** No need for the 'InitSize' etc.

* GetBitmapEx:
    + also problematic:
    + almost never used ...

> grep _ZNK9ImageList11GetBitmapExEv *.so
    Binary file libfwk680li.so matches
	+ user bitmap storage ...
    Binary file libgo680li.so matches
	+ goodies/source/unographic/provider.cxx: aBmpEx = aImageList.GetBitmapEx();

* Potential cleanups: *
    + use of 'GetImagePos':
	+ mostly:
	    if ( pList->GetImagePos( nImageId ) != IMAGELIST_IMAGE_NOTFOUND )
	+ should be 'pList->HasImagePos( nImageId )'
	    + file usage:
		framework/source/uiconfiguration/imagemanager.cxx
		framework/source/uiconfiguration/moduleimagemanager.cxx
		sfx2/source/toolbox/imgmgr.cxx
		svtools/source/misc/imagemgr.cxx

* Inside VCL:
    + image.cxx / .hxx changes
    + button.cxx:
	    + radio button images: used for:
		aBmp.Replace( pColorAry1, pColorAry2, 6, NULL );
		+ otherwise, could be a resource ...
    + brdwin.cxx:
	    + pin images (?)

* 
