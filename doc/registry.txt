The registry needs a re-write:

* plain Text format

* compressed - re-using previous fragments (?)
	+ or just being less lame structurally - prolly more useful.

n: 

[ integer representing tree / nesting ] ':' delimiter.


* store the complete tree internally; as OStrings etc. - of course ... [!]
	+ complicated recursive types as multi-line ...


* services.rdb:
	+ only uses 'String' and 'StringList' types.
	+ wow - it's simple ;-)

* Tackle the 'services' piece - at a higher level [!?]
	+ have a special case file format for this ...

* types.rdb:
	+ only 1 type: RG_VALUETYPE_BINARY ...
		;-) wow ...
	+ and a simple tree of it:
		+ a simple tree, method argument descriptions
		  for interfaces, one by one.
	+ various 'type classes' instead ...
	+ outer encapsulation broadly pointless ... ;-)

	+ typereg_writer ... ? ...
		+ RegistryTypeReader_Api [ etc. ] ...

Q: + does the [whatever] code use only this API, and
     not the registry API directly ?
   + if so, lots of wins possible (surely).

Q: + the services code all uses the registry tools to
     do it's manipulation, so if we break that ... ;-)

$ cat >> should be a valid reg creation tool ...
	+ assuming no duplicates etc. ;-)



** what is the highest level API ?
	+ how do we use the registry ?

* stoc/source/simpleregistry/simpleregistry.cxx
* stoc/source/defaultregistry/defaultregistry.cxx

* the real use-case is:

uno::Reference< lang::XMultiServiceFactory > xFactory( ::comphelper::getProcessServiceFactory() );
uno::Reference< java::XJavaVM > xJavaVM( xFactory->createInstance( rtl::OUString(RTL_CONSTASCII_USTRINGPARAM("com.sun.star.java.JavaVirtualMachine") ) ), uno::UNO_QUERY );

Where is that XMultiServiceFactory implemented ?

comphelper/

stoc/source/servicemanager/servicemanager.cxx
	+ ! foo ! +

	+ Talks to lots of 'XSingleComponentFactories' ...
	+ XSingleComponentFactories loaded with
		: loadWithImplementationName - what fun.
			+ loads a Registry file ! ...
			+ could load a text file [ surely ] :-)
	+ getRootKey():
		+ createInstanceWithContext ( .... c.s.s.registry.DefaultRegistry )

	+ needs debugging printouts & investigation - foo !

	+ interesting - can we impl. this ?

	+ this basically has a hash table anyway !
		+ wow [!] :-)

	+ services 
