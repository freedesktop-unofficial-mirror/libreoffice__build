* References:
    * svx/source/msfilter/msvbasic.cxx
    * Costin Raiu, Kaspersky Labs, 'Apple of Discord'
    * Virus bulletin's bontchev.pdf, svajcer.pdf

Using a hacked libgsf's test-cp-msole.c:

      * round-trip - works fine, 'security warning from OXP'
      * deleting the __SRP_* streams: works fine ...

'Simple' stream:
      * Simple: 'SGetThree' -> 'SGetThack' - no pcode changes ...
	    + no visible changes
      * Compressed text:
	    + 0d 0a is the VBA test line terminator
	    + Screwing up the compression can cause _serious_
	      artefacts - ie. Excel loop/lock / crash etc.
      * VBA 5 -> VBA 6 ... (?)
      * pcode line table start marker: FE CA 01 00
	    + following 2 bytes : seemingly not a clobberable version.
	    + blanking (0x00) pcode between 42 81 0C 00 and ff ff ff ff -
	      gives empty 1st macro in spreadsheet.
	    + clobbering with 0xff's results in XP crasher.
      * clobbering the pcode results in the text changing ie.
	   For i = 0 To 10 -> For i = 0 To 31 - with no other change.
      * clobbered pcode with 0's from & inc. feca0100
      * ie. pcode totally ignored.
      * Can totally wipe all data from start to "01 ae b0 00'A''t''t',"
	none of it used (seemingly)
      * Can totally wipe all data _except_ pre-pended 3 items:
        0x01 0xae 0xb0 - as long as we update offsets in 'dir' stream;
	see later.
      * re-compressing seems to cause some nasty grief;
        _looks_ like a length is stored somewhere here.
	Our version is shrunk by N bytes, - we get N bytes of
	de-compressed crud at the end of the macro.

'_VBA_PROJECT' stream:
      * clobber byte 3 of _VBA_PROJECT to 0xa8 - also works going backwards: 0x01
	    + no need to clobber pcode table ... [ presumably not read !? ]
      * Office XP only requires this data in this file:
	    + cc 61 <01> 00 00 01 + pad to 32 bytes with 0s.
      * clobber macro name - reflected in re-load in
	    <module-name> [functions] list - ordering odd there though.

Generic stream description:
    + first byte '1'
    + 2nd byte == length of compressed data - 1
    + 3rd byte == 0xb + 4 bits MSB of compressed data length
	+ maximum recorded compressed size is 0xc0c ie 0x010cbc
	  above which it (appears) that it reads to the EOS.
    + 4th ... bytes = LZSS compressed macro text.
    + VBA editor can't cope with unicode - just barfs
	+ VBA editor can cope with 8bit chars - and writes them
	  out as such too.
    + can insert invalid / broken VBA with no problems.

All streams contain compressed text:
    + Sheet / Workbook / VBA etc. all re-constructed ... [!]

'dir' stream:
      * Looks like the project stream - but more authoritative ?
      * Compression is (essentially) LZSS with no Huffman post-coding,
        and some window size tweakage.
      * Contains authoritative offsets for VBA text in streams
      * re-compression a total pain; managed to get Excel to accept
        a re-compressed 'dir' - by truncating a number of the longer
	back-matches to < 1/2 the window size.
      * altering the offsets - works.
      * Stream format is:
	    + 2 byte tag, 4 byte length, <data> [ repeat ]
	    + the tag 0x9 is broken: it's length is 2 bytes too short.
      * Each Stream has 4 strings: ascii/unicode pairs
	    + unicode canonical; 1st pair: unknown, 2nd: stream name.
	    + serious problems if all names not in sync (hmm)
