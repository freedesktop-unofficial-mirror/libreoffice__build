-Bdirect linking:

+ need to elide 'vague linkage' stuff [ re-use regexp map logic ? ]

+ behaves like an optimial -Bsymbolic in-library +
+ stores library index [1 per symbol ?] for the dynamic sym table
	[ sol seems to do somewhat better than that ]

+ elflink.c:

	bfd_boolean
	bfd_elf_link_record_dynamic_symbol (struct bfd_link_info *info,
					    struct elf_link_hash_entry *h)

	+ calls _bfd_elf_strtab_add (...)
	+ sets (elf_link_hash_entry) h->dynstr_index to that ...
		+ of course - string table can contain anything (?)
		+ we want a symbol-table index (?)

		.dynsym <symbol data> .dynstr <string data>
		+ Precisely 1 entry in '.direct' for every entry
		  in .dynsym
			+ elf_hash_table(info)->dynsymcount ...

	+ bfd_elf_size_dynamic_sections:
		+ working nicely

	+ Need the list of external libraries (section?)
		+ what is that ?
		+ DT_NEEDED ?
			+ lots of NEEDED libs
			+ get a clear order ?
		+ [ elf_add_dt_needed_tag ]:
			+ goes through '.dynamic' section
			+ pages in all Elf_Internal_Dyn records
				+ sub-sets on DT_NEEDED
				+ etc. ...
			+ slow but reliable ;-)
		+ *Should*
			+ count index of existing DT_NEEDEDs
				+ copy elf_dt_name (bfd)
***				& assign elf_dt_index (bfd)
			+ then just use elsewhere ...

	+ elf_link_output_extsym ...
		+ build .direct here ...
		+ use the 'bfd_link_hash_entry'
			+ switch on type
			+ for 'def'
				+ asection *section [ symbol section ]
			+ [ what it resolves to ? ]
				+ is this the post link data ?
				+ [ what about weak / multiple hits !? ]
			+ section->owner == bfd ...
				+ bfd.h:3942 
					+ const char *filename
			+ elf_dt_name (bfd) = soname ...
				(const char *)
			+ so we can get that easily.

	+ grok for -Bsymbolic foo ...
		+ Carefully examine the -Bsymbolic
		  platform-dependent piece ..
		+ looks like an optimisation with
		  copy relocs
* notes:
	+ bfd_link_hash_entry: include/bfdlink.h
	+ elf_link_hash_entry: bfd/eld-bfd.h
	+ asection - bfd_section ? (bfd-in2.h)


* FIXME:
	+ executables - also require this data ...
		[ check code paths etc. ... ]
	+ do we need a new SHT_DIRECT section header ?

* Need to nail objdump:

  % elfdump -y prog

    Syminfo Section:  .SUNW_syminfo
	 index  flgs         bound to           symbol
	  ...
	  [15]  DBL      [1] ./foo.so           foo
	  [19]  DBL      [3] ./bar.so           bar

	  + Can we omit the first set of dynstr entries ?
	  + 


bfd_set_section_contents (?)
	+ end of elf_link_input_bfd:
	+ end of bfd_elf_final_link ... etc.
	+ default ... o->flags & SEC_EXCLUDE (?)


** Runtime linker ...
    + cf. doc/link.txt:

    + include/link.h: (struct link_map):
	+ l_searchlist - array of DT_NEEDED deps.
	    + [ in what order ? ]
	+ what is l_reldeps ?

    + dl-lookup.c (_dl_lookup_symbol_x): hack here ...

    + run /opt/gcc/bin/ld-linux.so <file> explicitely ?
    + work out how to re-build & install elf quickly ... [!?]


libfixup.so - 31 symbols
    + 16bytes per sym - in .dynsym

  Elf32_Word	st_name;	- 4b
  Elf32_Addr	st_value;	- 4b
  Elf32_Word	st_size;	- 4b
  unsigned char	st_info;	- 1
  unsigned char	st_other;	- 1
  Elf32_Section	st_shndx;	- 2

    + ie 16bytes overall.



    + ie. _dl_lookup_symbol_x gets an Elf32_Sym **ref,
    + but we want an index instead ...
	+ symbol versioning ? / hash ?

    + -Bdirect - foo...
	+ 

    + relocations ...
	+ rel.dyn - <addr> <r_info> - symbol index ...

    + cf. do-rel.h (elf_dynamic_do_rel):
	+ calls -> elf_machine_rel
	    + passing &symtab[ELFW(R_SYM) (r->r_info)]


+ where is elf_machine_rel defined (!?)
    + sysdeps/i386/dl-machine.h

+ can we see if the sym reference is inside:
      const ElfW(Sym) *const symtab =
	(const void *) D_PTR (map, l_info[DT_SYMTAB]);

    + could it ever be inside anything else ? if not why
      have that hard-coded ?
	+ the elf_dynamic_do_rel - passes several sets of
	    + relocation types to elf_dynamic_do_##reloc

    + Ergo - everything (so far) looked up in
	   DT_SYMTAB (.dynsym)
    
    + ... <foo> ...

    + crashes before it does anything ;-)
	... [why?] ...

** Linker test framework:
   + '~/bin/run'
	prefix=/opt/gcc
	sysroot=
	ulimit -c unlimited
	export LD_LIBRARY_PATH="$LD_LIBRARY_PATH:$prefix/lib:$sysroot/lib:$sysroot/usr/X11R6/lib:$sysroot/usr/lib:$sysroot/usr/local/lib:$sysroot/usr/openwin/lib:$sysroot/opt/kde3/lib:$sysroot/opt/gnome/lib:$sysroot/opt/gnome2/lib:$sysroot/opt/mozilla/lib"
	$prefix/lib/ld-linux.so.2 $@
   + use it to test the generated binaries ...


** Glibc build bits
   + setup kernel headers
   + symlink asm-i386 -> asm
   + add to glibc/version.h:
	#define CVSDATE "cvsdate"
	#define CONFHOST "i586-suse-linux"
   + hack glibc/Makeconfig - all-subdirs: put 'elf' first.

** FIXME:
   + must free dt_needed data on dlclose ...


** TODO:
   + we have a 'needed' map built already in
	+ _dl_map_object_deps
	+ just dup that ... [nneeded]
	+ lets re-build the foo ...
		[ dt_num ? ]